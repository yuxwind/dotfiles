from skimage import data, io, filter, exposure
from skimage.color import rgb2gray
from skimage.feature import blob_dog, blob_log, blob_doh
from matplotlib import pyplot as plt
from math import sqrt
from skimage.morphology import disk
from skimage.filters.rank import median
import os,sys 

def toGray(img):
    img_gray = rgb2gray(img)
    grayFileName = "gray_tmp.jpg"    
    io.imsave(grayFileName,img_gray)
    return img_gray

def toRescaleIntensity(img,in_range=(0,2**10-1)):
    img_rescaleIntensity = exposure.rescale_intensity(img,in_range)
    RIFileName = "rescaleIntensity_tmp.jpg"
    io.imsave(RIFileName,img_rescaleIntensity)
    return img_rescaleIntensity

def toThreshold(img):
    pass

def toBlob(image):
    image_gray = rgb2gray(image)
    blobs_log = blob_log(image_gray, max_sigma=30, num_sigma=10, threshold=.1)
    blobs_log[:, 2] = blobs_log[:, 2] * sqrt(2)

    blobs_dog = blob_dog(image_gray, max_sigma=30, threshold=.1)
    blobs_dog[:, 2] = blobs_dog[:, 2] * sqrt(2)

    blobs_doh = blob_doh(image_gray, max_sigma=30, threshold=.01)

    blobs_list = [blobs_log, blobs_dog, blobs_doh]
    colors = ['yellow', 'lime', 'red']
    titles = ['Laplacian of Gaussian', 'Difference of Gaussian',
              'Determinant of Hessian']
    sequence = zip(blobs_list, colors, titles)

    for blobs, color, title in sequence:
        fig, ax = plt.subplots(1, 1)
        ax.set_title(title)
        ax.imshow(image, interpolation='nearest')
        for blob in blobs:
            y, x, r = blob
            c = plt.Circle((x, y), r,color=color,linewidth=2,fill=False)
            ax.add_patch(c)

    fig.savefig('path/to/save/image/to.png')
    plt.close(fig)

def toRemoveNoise(noisy_img):
    fig, ax = plt.subplots(2, 2, figsize=(10, 7))
    ax.imshow(median(img_as_ubyte(noisy_image), disk(1)), vmin=0, vmax=255, cmap=plt.cm.gray)
    
def main(argv):
    if len(argv) < 1:
        print "too few arguments"

    filename = argv[1]
    ori_img = io.imread(filename)
    imgGray = toGray(ori_img)
    imgRescaleIntensity = toRescaleIntensity(imgGray,in_range=(0,2**10-1))
    img_Blob = toBlob(imgGray)
    toRemoveNoise(imgGray)


if __name__ == "__main__":
    main(sys.argv)

