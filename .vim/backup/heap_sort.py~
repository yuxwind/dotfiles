#!/usr/bin/python

class HeapNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value

class HeapArray:
    def __init__(self, array):
        self.Array = array 
        self.Array.insert(0, HeapNode(0, "firstnode"))
        self.Heap_Size = len(self.Array) - 1 
        self.Array_Size = len(self.Array)

    def ExchangeItem(self, index1, index2):
        tmp = self.Array[index1]
        self.Array[index1] = self.Array[index2]
        self.Array[index2] = tmp

    def MaxHeapify(self, i):
        left = 2 * i
        right = 2 * i + 1
        large = i

        if left < self.Heap_Size and self.Array[left].key > self.Array[i].key:
            large = left
        
        if right < self.Heap_Size and self.Array[right].key > self.Array[large].key:
            large = right
        
        if large != i:
            self.ExchangeItem(i, large)
            self.MaxHeapify(large)

    def BuildMaxHeap(self):
        for i in range(self.Heap_Size/2, 0, -1):
#            print "----------------%d-------" % i
            self.PrintHeap()
            self.MaxHeapify(i)

    def HeapSort(self):
        self.BuildMaxHeap()
        self.PrintHeap()
        for i in range(self.Heap_Size, 0, -1):
            print "----------------%d-------" % i
            self.ExchangeItem(1, self.Heap_Size)
            self.PrintHeap()
            self.Heap_Size += -1
            self.MaxHeapify(1)
            self.PrintHeap()

    def PrintHeap(self):
        for i in range(1, self.Array_Size):
            print " %d " % self.Array[i].key
        print " "

a = [HeapNode(1, "node1"), HeapNode(9, "node2"), HeapNode(4,"node3"), 
     HeapNode(6, "node4"), HeapNode(3, "node5"), HeapNode(7, "node6"), HeapNode(4, "node7")]
heaparray=HeapArray(a)
print heaparray.Heap_Size
heaparray.BuildMaxHeap()
heaparray.PrintHeap()

print "Before sort:"
heaparray.PrintHeap()
heaparray.HeapSort()
print "After sort:"
heaparray.PrintHeap()
