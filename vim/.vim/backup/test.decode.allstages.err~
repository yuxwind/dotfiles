Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Chapter 4 .


--- Decoder1 ---

Sentence: Chapter 4 .
word = Chapter
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false)))
concept = PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
word = 4
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false)),0)), None, None)
Adding concept: chapter
nodeIds = List(0)
concepts = List(chapter)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Decoder1 Spans:
Span 1:  Chapter => chapter
Decoder1 feats:
bias 1.0
len 1.0

Concepts:
id = 0 concept = chapter
Spans:
Span 0-1:  Chapter => chapter

rootDependencyPaths = List(List(0), List(0, 1), List(0, 2))
getNodeById = Map(0 -> chapter)
getNodeById2 = Map(0 -> chapter)
getNodeById = Map(0 -> chapter)
getNodeById2 = Map(0 -> chapter)
Node = 0
visited = Set(0)
Alg2 returning score = 0.11785127172591817
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
4 List()
chapter List()
WARNING: Adding a variable name to a span
OracleGraph nodes = List(4, chapter)
OracleGraph triples: (c / chapter, mod, 4 / 4)
rootDependencyPaths = List(List(0), List(0, 1), List(0, 2))
Oracle Span 1-2:  4 => 4
Oracle Span 0-1:  Chapter => chapter

Missing span: 4 => 4
Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	4	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 4 / 4)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false)),Map(0 -> chapter),Map(c -> chapter))),[Ljava.lang.String;@76508ed1,Annotation([Ljava.lang.String;@41e36e46,[Ljava.lang.String;@15c43bd9,[Ljava.lang.String;@3d74bf60),Annotation([Ljava.lang.String;@4f209819,[Ljava.lang.String;@15eb5ee5,[Ledu.cmu.lti.nlp.amr.Dependency;@2145b572),Annotation([Ljava.lang.String;@39529185,[Ljava.lang.String;@72f926e6,[Ljava.lang.String;@3daa422a),Annotation([Ljava.lang.String;@31c88ec8,[Ljava.lang.String;@1cbbffcd,[Ledu.cmu.lti.nlp.amr.Entity;@27ce24aa))
AMR:


Decoded in 439,020 microseconds
Sentence: I had thus learned a second fact of great importance : this was that the planet the little prince came from was scarcely any larger than a house !


--- Decoder1 ---

Sentence: I had thus learned a second fact of great importance : this was that the planet the little prince came from was scarcely any larger than a house !
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = had
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false)), PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false)))
concept = PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
word = thus
Finding date entities
Possible invoked concepts: List()
word = learned
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = second
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(second),(temporal-quantity :unit second),PhraseConceptFeatures(1.0,-1.6094379124341003,false,false)))
concept = PhraseConceptPair(List(second),(temporal-quantity :unit second),PhraseConceptFeatures(1.0,-1.6094379124341003,false,false))
score = 0
adding concept:PhraseConceptPair(List(second),(temporal-quantity :unit second),PhraseConceptFeatures(1.0,-1.6094379124341003,false,false))
word = fact
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = great
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
word = importance
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(importance),important,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(importance),important,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(importance),important,PhraseConceptFeatures(3.0,0.0,false,false))
word = :
Finding date entities
Possible invoked concepts: List()
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = came
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false)), PhraseConceptPair(List(came),come-04,PhraseConceptFeatures(1.0,-3.4011973816621555,false,false)))
concept = PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
score = 0
adding concept:PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
concept = PhraseConceptPair(List(came),come-04,PhraseConceptFeatures(1.0,-3.4011973816621555,false,false))
score = 0
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = was
Finding date entities
Possible invoked concepts: List()
word = scarcely
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false))
word = any
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false)), PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)))
concept = PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false))
score = 0
concept = PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
score = 0
adding concept:PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
word = larger
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(larger),large,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(larger),large,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(larger),large,PhraseConceptFeatures(1.0,0.0,false,false))
word = than
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = house
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
word = !
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false)),3)), None, Some((0.013496981652143358,PhraseConceptPair(List(second),(temporal-quantity :unit second),PhraseConceptFeatures(1.0,-1.6094379124341003,false,false)),5)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)),8)), Some((0.029773585223834276,PhraseConceptPair(List(importance),important,PhraseConceptFeatures(3.0,0.0,false,false)),9)), None, Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),11)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),13)), None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),15)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),17)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),18)), Some((0.019626967847386725,PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false)),19)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false)),22)), Some((0.017940394404303485,PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)),23)), Some((0.029773585223834276,PhraseConceptPair(List(larger),large,PhraseConceptFeatures(1.0,0.0,false,false)),24)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)),27)), None)
Adding concept: house
nodeIds = List(0)
concepts = List(house)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: large
nodeIds = List(1)
concepts = List(large)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(larger),large,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: any
nodeIds = List(2)
concepts = List(any)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
feats:
bias 1.0
c|p -1.1700712526502546
len 1.0

score:
0.07748756485197203
Adding concept: scarce
nodeIds = List(3)
concepts = List(scarce)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1072611500758063
Adding concept: come-01
nodeIds = List(4)
concepts = List(come-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
feats:
bias 1.0
c|p -1.0033021088637848
len 1.0

score:
0.12688811792319304
Adding concept: prince
nodeIds = List(5)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.1565990823747226
Adding concept: little
nodeIds = List(6)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.17921789410635613
Adding concept: planet
nodeIds = List(7)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2089914793301904
Adding concept: that
nodeIds = List(8)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.2256092877194062
Adding concept: this
nodeIds = List(9)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.25406188198655977
Adding concept: important
nodeIds = List(10)
concepts = List(important)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(importance),important,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.28383546721039404
Adding concept: great
nodeIds = List(11)
concepts = List(great)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.3136090524342283
Adding concept: (temporal-quantity :unit second)
nodeIds = List(12, 13)
concepts = List(temporal-quantity, second)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(second),(temporal-quantity :unit second),PhraseConceptFeatures(1.0,-1.6094379124341003,false,false))
feats:
bias 1.0
c|p -1.6094379124341003
len 1.0

score:
0.3271060340863717
Adding concept: learn-01
nodeIds = List(14)
concepts = List(learn-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.35687961931020595
Adding concept: i
nodeIds = List(15)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.38292882572843523
Decoder1 Spans:
Span 1:  any => any
Span 2:  came => come-01
Span 3:  great => great
Span 4:  house => house
Span 5:  I => i
Span 6:  importance => important
Span 7:  larger => large
Span 8:  learned => learn-01
Span 9:  little => little
Span 10:  planet => planet
Span 11:  prince => prince
Span 12:  scarcely => scarce
Span 13:  second => (temporal-quantity :unit second)
Span 14:  that => that
Span 15:  this => this
Decoder1 feats:
bias 15.0
c|p -6.296208074510389
len 15.0

Concepts:
id = 2 concept = any
id = 5 concept = prince
id = 12 concept = temporal-quantity
id = 15 concept = i
id = 8 concept = that
id = 7 concept = planet
id = 1 concept = large
id = 4 concept = come-01
id = 11 concept = great
id = 14 concept = learn-01
id = 6 concept = little
id = 0 concept = house
id = 9 concept = this
id = 3 concept = scarce
id = 10 concept = important
id = 13 concept = second
Spans:
Span 23-24:  any => any
Span 19-20:  came => come-01
Span 8-9:  great => great
Span 27-28:  house => house
Span 0-1:  I => i
Span 9-10:  importance => important
Span 24-25:  larger => large
Span 3-4:  learned => learn-01
Span 17-18:  little => little
Span 15-16:  planet => planet
Span 18-19:  prince => prince
Span 22-23:  scarcely => scarce
Span 5-6:  second => (temporal-quantity :unit second)
Span 13-14:  that => that
Span 11-12:  this => this

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 6, 4), List(3, 6, 5), List(3, 6), List(3, 6, 7), List(3, 6, 7, 9, 8), List(3, 6, 7, 9), List(3, 10), List(3, 12, 11), List(3, 12), List(3, 12, 24, 13), List(3, 12, 24, 15, 14), List(3, 12, 24, 15), List(3, 12, 24, 15, 19, 18, 16), List(3, 12, 24, 15, 19, 18, 17), List(3, 12, 24, 15, 19, 18), List(3, 12, 24, 15, 19), List(3, 12, 24, 15, 19, 20), List(3, 12, 24, 21), List(3, 12, 24, 22), List(3, 12, 24, 23), List(3, 12, 24), List(3, 12, 24, 25), List(3, 12, 24, 25, 27, 26), List(3, 12, 24, 25, 27), List(3, 28))
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 8
Node = 2
Node = 0
Node = 10
Node = 9
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -631.7441478135236
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 2
Node = 10
Node = 1
Node = 9
Node = 15
Node = 12
Node = 11
Node = 0
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -652.0908826596858
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 2
Node = 10
Node = 1
Node = 9
Node = 15
Node = 12
Node = 11
Node = 0
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -668.0908826596858
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 2
Node = 0
Node = 10
Node = 9
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -683.1698068641194
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 2
Node = 10
Node = 1
Node = 9
Node = 15
Node = 12
Node = 11
Node = 0
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -699.0908826596858
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 2
Node = 0
Node = 10
Node = 9
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -714.1698068641194
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 2
Node = 10
Node = 1
Node = 9
Node = 15
Node = 12
Node = 11
Node = 0
Node = 4
Node = 13
Node = 7
Node = 5
Node = 8
Node = 3
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -729.5164074353571
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 0
Node = 10
Node = 9
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -743.3220457537756
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 0
Node = 10
Node = 9
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 7
Node = 5
Node = 8
Node = 3
Node = 6
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -754.7475705294469
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 0
Node = 10
Node = 9
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -766.3220457537756
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 0
Node = 10
Node = 9
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 7
Node = 5
Node = 8
Node = 3
Node = 6
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -777.6041956746467
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 0
Node = 2
Node = 10
Node = 9
Node = 15
Node = 1
Node = 3
Node = 12
Node = 11
Node = 4
Node = 13
Node = 7
Node = 5
Node = 8
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -785.5736473659366
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 0
Node = 10
Node = 9
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -790.8744134875486
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 0
Node = 9
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -794.5495743031801
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -797.7350678150088
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -799.7350678150088
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -801.7350678150088
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -803.7350678150088
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -805.7350678150088
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -807.7350678150088
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -809.7350678150088
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 5
Node = 7
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -811.7319655372236
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 8
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -811.8636489896943
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 5
Node = 7
Node = 2
Node = 6
Node = 8
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -815.3165595358274
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 7
Node = 5
Node = 2
Node = 8
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -815.4482429882981
getNodeById = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second)
getNodeById2 = Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 10 -> important, 3 -> scarce, 13 -> second)
Node = 14
Node = 9
Node = 0
Node = 10
Node = 15
Node = 1
Node = 12
Node = 11
Node = 4
Node = 13
Node = 3
Node = 5
Node = 7
Node = 2
Node = 6
Node = 8
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -817.4451407105131
Langrangian relaxation converged after 26 iterations. Delta = 0.0
Node.spans:
i List()
large List()
come-01 List()
scarce List()
2 List()
house List()
more List()
important List()
prince List()
little List()
learn-01 List()
fact List()
any List()
cause-01 List()
ordinal-entity List()
great List()
planet List()
clearUnalignedNodes():  removing unaligned node: None / 2
clearUnalignedNodes():  removing unaligned node: Some(m) / more
clearUnalignedNodes():  removing unaligned node: Some(c2) / cause-01
clearUnalignedNodes():  removing unaligned node: Some(o) / ordinal-entity
OracleGraph nodes = List(i, large, come-01, scarce, house, important, prince, little, learn-01, fact, any, great, planet)
OracleGraph triples: (a / any, degree, s2 / scarce)
(c / come-01, ARG1, p2 / prince)
(c / come-01, ARG3, p / planet)
(f / fact, domain, l2 / large)
(f / fact, mod, i2 / important)
(i2 / important, degree, g / great)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, f / fact)
(l2 / large, compared-to, h / house)
(l2 / large, domain, p / planet)
(p2 / prince, mod, l3 / little)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 6, 4), List(3, 6, 5), List(3, 6), List(3, 6, 7), List(3, 6, 7, 9, 8), List(3, 6, 7, 9), List(3, 10), List(3, 12, 11), List(3, 12), List(3, 12, 24, 13), List(3, 12, 24, 15, 14), List(3, 12, 24, 15), List(3, 12, 24, 15, 19, 18, 16), List(3, 12, 24, 15, 19, 18, 17), List(3, 12, 24, 15, 19, 18), List(3, 12, 24, 15, 19), List(3, 12, 24, 15, 19, 20), List(3, 12, 24, 21), List(3, 12, 24, 22), List(3, 12, 24, 23), List(3, 12, 24), List(3, 12, 24, 25), List(3, 12, 24, 25, 27, 26), List(3, 12, 24, 25, 27), List(3, 28))
Oracle Span 23-24:  any => any
Oracle Span 19-20:  came => come-01
Oracle Span 6-7:  fact => fact
Oracle Span 8-9:  great => great
Oracle Span 27-28:  house => house
Oracle Span 0-1:  I => i
Oracle Span 9-10:  importance => important
Oracle Span 24-25:  larger => large
Oracle Span 3-4:  learned => learn-01
Oracle Span 17-18:  little => little
Oracle Span 15-16:  planet => planet
Oracle Span 18-19:  prince => prince
Oracle Span 22-23:  scarcely => scarce

Extra span: that => that
Extra span: this => this
Extra span: second => (temporal-quantity :unit second)
Missing span: fact => fact
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	had	_	VBD	VBD	_	4	aux	_	_
3	thus	_	RB	RB	_	4	advmod	_	_
4	learned	_	VBN	VBN	_	0	root	_	_
5	a	_	DT	DT	_	7	det	_	_
6	second	_	JJ	JJ	_	7	amod	_	_
7	fact	_	NN	NN	_	4	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	great	_	JJ	JJ	_	10	amod	_	_
10	importance	_	NN	NN	_	8	pobj	_	_
11	:	_	:	:	_	4	punct	_	_
12	this	_	DT	DT	_	13	nsubj	_	_
13	was	_	VBD	VBD	_	4	parataxis	_	_
14	that	_	IN	IN	_	25	mark	_	_
15	the	_	DT	DT	_	16	det	_	_
16	planet	_	NN	NN	_	25	nsubj	_	_
17	the	_	DT	DT	_	19	det	_	_
18	little	_	JJ	JJ	_	19	amod	_	_
19	prince	_	NN	NN	_	20	nsubj	_	_
20	came	_	VBD	VBD	_	16	rcmod	_	_
21	from	_	IN	IN	_	20	prep	_	_
22	was	_	VBD	VBD	_	25	cop	_	_
23	scarcely	_	RB	RB	_	25	advmod	_	_
24	any	_	RB	RB	_	25	advmod	_	_
25	larger	_	JJR	JJR	_	13	ccomp	_	_
26	than	_	IN	IN	_	25	prep	_	_
27	a	_	DT	DT	_	28	det	_	_
28	house	_	NN	NN	_	26	pobj	_	_
29	!	_	.	.	_	4	punct	_	_

Oracle:
(a / any, degree, s2 / scarce)
(c / come-01, ARG1, p2 / prince)
(c / come-01, ARG3, p / planet)
(f / fact, domain, l2 / large)
(f / fact, mod, i2 / important)
(i2 / important, degree, g / great)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, f / fact)
(l2 / large, compared-to, h / house)
(l2 / large, domain, p / planet)
(p2 / prince, mod, l3 / little)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),house,house,false), Span(24,25,List(1),larger,large,false), Span(23,24,List(2),any,any,false), Span(22,23,List(3),scarcely,scarce,false), Span(19,20,List(4),came,come-01,false), Span(18,19,List(5),prince,prince,false), Span(17,18,List(6),little,little,false), Span(15,16,List(7),planet,planet,false), Span(13,14,List(8),that,that,false), Span(11,12,List(9),this,this,false), Span(9,10,List(10),importance,important,false), Span(8,9,List(11),great,great,false), Span(5,6,List(13, 12),second,(temporal-quantity :unit second),false), Span(3,4,List(14),learned,learn-01,false), Span(0,1,List(15),I,i,false)),Map(2 -> any, 5 -> prince, 12 -> temporal-quantity, 15 -> i, 8 -> that, 7 -> planet, 1 -> large, 4 -> come-01, 11 -> great, 14 -> learn-01, 6 -> little, 0 -> house, 9 -> this, 3 -> scarce, 10 -> important, 13 -> second),Map(h -> house, s2 -> second, t -> that, p2 -> planet, l3 -> learn-01, s -> scarce, t3 -> temporal-quantity, p -> prince, g -> great, a -> any, i2 -> i, t2 -> this, l2 -> little, i -> important, c -> come-01, l -> large))),[Ljava.lang.String;@5158b42f,Annotation([Ljava.lang.String;@595b007d,[Ljava.lang.String;@72d1ad2e,[Ljava.lang.String;@2d7275fc),Annotation([Ljava.lang.String;@399f45b1,[Ljava.lang.String;@38c6f217,[Ledu.cmu.lti.nlp.amr.Dependency;@478190fc),Annotation([Ljava.lang.String;@79e2c065,[Ljava.lang.String;@3a93b025,[Ljava.lang.String;@35cabb2a),Annotation([Ljava.lang.String;@7e07db1f,[Ljava.lang.String;@1189dd52,[Ledu.cmu.lti.nlp.amr.Entity;@36bc55de))
AMR:
(a / any, degree, s / scarce)
(c / come-01, ARG0, l / large)
(c / come-01, ARG1, p2 / planet)
(c / come-01, ARG2, p / prince)
(c / come-01, manner, s / scarce)
(i / important, mod, g / great)
(i / important, quant, t3 / temporal-quantity)
(l / large, compared-to, h / house)
(l3 / learn-01, ARG0, i2 / i)
(l3 / learn-01, ARG1, i / important)
(l3 / learn-01, ARG2, h / house)
(l3 / learn-01, mod, t2 / this)
(p / prince, mod, l2 / little)
(t / that, op, p2 / planet)
(t3 / temporal-quantity, unit, s2 / second)

Decoded in 1,566,603 microseconds
Sentence: But that did not really surprise me much .


--- Decoder1 ---

Sentence: But that did not really surprise me much .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = did
Finding date entities
Possible invoked concepts: List()
word = not
Finding date entities
Possible invoked concepts: List()
word = really
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(really),real,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(really),real,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(really),real,PhraseConceptFeatures(4.0,0.0,false,false))
word = surprise
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = much
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),1)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(really),real,PhraseConceptFeatures(4.0,0.0,false,false)),4)), None, None, Some((0.02932403466221358,PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),7)), None)
Adding concept: much
nodeIds = List(0)
concepts = List(much)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.029324034662213574
Adding concept: real
nodeIds = List(1)
concepts = List(real)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(really),real,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05909761988604785
Adding concept: that
nodeIds = List(2)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.07571542827526363
Adding concept: contrast-01
nodeIds = List(3)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.09642376948725855
Decoder1 Spans:
Span 1:  But => contrast-01
Span 2:  much => much
Span 3:  really => real
Span 4:  that => that
Decoder1 feats:
bias 4.0
c|p -2.2416763399070536
len 4.0

Concepts:
id = 2 concept = that
id = 1 concept = real
id = 0 concept = much
id = 3 concept = contrast-01
Spans:
Span 0-1:  But => contrast-01
Span 7-8:  much => much
Span 4-5:  really => real
Span 1-2:  that => that

rootDependencyPaths = List(List(5, 0), List(5, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 7, 6), List(5, 7), List(5, 8))
getNodeById = Map(2 -> that, 1 -> real, 0 -> much, 3 -> contrast-01)
getNodeById2 = Map(2 -> that, 1 -> real, 0 -> much, 3 -> contrast-01)
getNodeById = Map(2 -> that, 1 -> real, 0 -> much, 3 -> contrast-01)
getNodeById2 = Map(2 -> that, 1 -> real, 0 -> much, 3 -> contrast-01)
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -187.33998863211326
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
- List()
i List()
that List()
surprise-01 List()
real List()
contrast-01 List()
much List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(i) / i
OracleGraph nodes = List(that, surprise-01, real, contrast-01, much)
OracleGraph triples: (c / contrast-01, ARG2, s / surprise-01)
(s / surprise-01, ARG0, t / that)
(s / surprise-01, degree, m / much)
(s / surprise-01, mod, r / real)
rootDependencyPaths = List(List(5, 0), List(5, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 7, 6), List(5, 7), List(5, 8))
Oracle Span 0-1:  But => contrast-01
Oracle Span 7-8:  much => much
Oracle Span 4-5:  really => real
Oracle Span 5-6:  surprise => surprise-01
Oracle Span 1-2:  that => that

Missing span: surprise => surprise-01
Dependencies:
1	But	_	CC	CC	_	6	cc	_	_
2	that	_	DT	DT	_	6	nsubj	_	_
3	did	_	VBD	VBD	_	6	aux	_	_
4	not	_	RB	RB	_	6	neg	_	_
5	really	_	RB	RB	_	6	advmod	_	_
6	surprise	_	VB	VB	_	0	root	_	_
7	me	_	PRP	PRP	_	8	nsubj	_	_
8	much	_	JJ	JJ	_	6	xcomp	_	_
9	.	_	.	.	_	6	punct	_	_

Oracle:
(c / contrast-01, ARG2, s / surprise-01)
(s / surprise-01, ARG0, t / that)
(s / surprise-01, degree, m / much)
(s / surprise-01, mod, r / real)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),much,much,false), Span(4,5,List(1),really,real,false), Span(1,2,List(2),that,that,false), Span(0,1,List(3),But,contrast-01,false)),Map(2 -> that, 1 -> real, 0 -> much, 3 -> contrast-01),Map(t -> that, m -> much, r -> real, c -> contrast-01))),[Ljava.lang.String;@7f3b84b8,Annotation([Ljava.lang.String;@57a3af25,[Ljava.lang.String;@2b662a77,[Ljava.lang.String;@7f0eb4b4),Annotation([Ljava.lang.String;@5c33f1a9,[Ljava.lang.String;@1623b78d,[Ledu.cmu.lti.nlp.amr.Dependency;@c8c12ac),Annotation([Ljava.lang.String;@6adbc9d,[Ljava.lang.String;@4550bb58,[Ljava.lang.String;@4ec4f3a0),Annotation([Ljava.lang.String;@223191a6,[Ljava.lang.String;@49139829,[Ledu.cmu.lti.nlp.amr.Entity;@9597028))
AMR:
(c / contrast-01, ARG0, m / much)
(c / contrast-01, ARG1, t / that)
(t / that, time, r / real)

Decoded in 40,969 microseconds
Sentence: I knew very well that in addition to the great planets -- such as the Earth , Jupiter , Mars , Venus -- to which we have given names , there are also hundreds of others , some of which are so small that one has a hard time seeing them through the telescope .


--- Decoder1 ---

Sentence: I knew very well that in addition to the great planets -- such as the Earth , Jupiter , Mars , Venus -- to which we have given names , there are also hundreds of others , some of which are so small that one has a hard time seeing them through the telescope .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = knew
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)))
concept = PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
score = 0
adding concept:PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = well
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(well),well,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false)))
concept = PhraseConceptPair(List(well),well,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false))
score = 0
adding concept:PhraseConceptPair(List(well),well,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = addition
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = great
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
word = planets
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false))
word = --
Finding date entities
Possible invoked concepts: List()
word = such
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false))
word = as
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = Earth
NER Entity: (country :name (name :op "Earth"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Earth),(country :name (name :op "Earth")),PhraseConceptFeatures(0.0,0.0,true,false)), PhraseConceptPair(List(Earth),(name :op "Earth"),PhraseConceptFeatures(2.0,-3.1780538303479458,false,false)), PhraseConceptPair(List(Earth),(planet :name (name :op "Earth")),PhraseConceptFeatures(12.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(Earth),earth,PhraseConceptFeatures(2.0,-3.1780538303479458,false,false)))
concept = PhraseConceptPair(List(Earth),(country :name (name :op "Earth")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
concept = PhraseConceptPair(List(Earth),(name :op "Earth"),PhraseConceptFeatures(2.0,-3.1780538303479458,false,false))
score = 0
concept = PhraseConceptPair(List(Earth),(planet :name (name :op "Earth")),PhraseConceptFeatures(12.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(Earth),(planet :name (name :op "Earth")),PhraseConceptFeatures(12.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(Earth),earth,PhraseConceptFeatures(2.0,-3.1780538303479458,false,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = Jupiter
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = Mars
NER Entity: (person :name (name :op "Mars"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Mars),(person :name (name :op "Mars")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(Mars),(person :name (name :op "Mars")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = Venus
NER Entity: (person :name (name :op "Venus"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Venus),(person :name (name :op "Venus")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(Venus),(person :name (name :op "Venus")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = --
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = which
Finding date entities
Possible invoked concepts: List()
word = we
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)))
concept = PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
score = 0
adding concept:PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = given
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = names
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = there
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)))
concept = PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
score = 0
adding concept:PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
word = are
Finding date entities
Possible invoked concepts: List()
word = also
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false)))
concept = PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
score = 0
adding concept:PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
word = hundreds
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = others
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(others),(person :mod other),PhraseConceptFeatures(1.0,-2.3025850929940455,false,false)), PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)))
concept = PhraseConceptPair(List(others),(person :mod other),PhraseConceptFeatures(1.0,-2.3025850929940455,false,false))
score = 0
adding concept:PhraseConceptPair(List(others),(person :mod other),PhraseConceptFeatures(1.0,-2.3025850929940455,false,false))
concept = PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
score = 0
adding concept:PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = some
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)), PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false)))
concept = PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
score = 0
adding concept:PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
concept = PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false))
score = 0
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = which
Finding date entities
Possible invoked concepts: List()
word = are
Finding date entities
Possible invoked concepts: List()
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = small
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = has
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)))
concept = PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
score = 0
adding concept:PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = hard
Finding date entities
Possible invoked concepts: List()
word = time
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)), PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false)))
concept = PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
score = 0
adding concept:PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
concept = PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false))
score = 0
word = seeing
Finding date entities
Possible invoked concepts: List()
word = them
Finding date entities
Possible invoked concepts: List()
word = through
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = telescope
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.027516884858905237,PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)),1)), Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),2)), Some((0.028423152550828532,PhraseConceptPair(List(well),well,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false)),3)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),4)), None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)),9)), Some((0.029773585223834276,PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false)),10)), None, Some((0.029773585223834276,PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false)),12)), None, None, Some((0.015753682017072397,PhraseConceptPair(List(Earth),(planet :name (name :op "Earth")),PhraseConceptFeatures(12.0,-1.3862943611198906,false,false)),15)), None, None, None, None, None, None, None, None, None, Some((0.02880969217705289,PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)),25)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),26)), Some((0.029773585223834276,PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false)),27)), None, None, Some((0.018974275428782817,PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)),30)), None, Some((0.028214625113307072,PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false)),32)), None, None, Some((0.01759754047199135,PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)),35)), None, Some((0.019706599931381283,PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)),37)), None, None, None, Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),41)), Some((0.029773585223834276,PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false)),42)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),43)), Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),44)), Some((0.014562515980757347,PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)),45)), None, None, Some((0.017491641887458505,PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)),48)), None, None, Some((0.01866307480060534,PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)),51)), None, None, None)
Adding concept: through
nodeIds = List(0)
concepts = List(through)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.018663074800605334
Adding concept: time
nodeIds = List(1)
concepts = List(time)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
feats:
bias 1.0
c|p -1.2144441041932315
len 1.0

score:
0.03615471668806383
Adding concept: have-03
nodeIds = List(2)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
feats:
bias 1.0
c|p -1.5040773967762742
len 1.0

score:
0.050717232668821166
Adding concept: 1
nodeIds = List(3)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.061374809515129525
Adding concept: that
nodeIds = List(4)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.07799261790434531
Adding concept: small
nodeIds = List(5)
concepts = List(small)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10776620312817958
Adding concept: so
nodeIds = List(6)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.1330714354579537
Adding concept: some
nodeIds = List(7)
concepts = List(some)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
feats:
bias 1.0
c|p -0.995428052432879
len 1.0

score:
0.152778035389335
Adding concept: other
nodeIds = List(8)
concepts = List(other)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
feats:
bias 1.0
c|p -1.2039728043259361
len 1.0

score:
0.17037557586132634
Adding concept: also
nodeIds = List(9)
concepts = List(also)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
feats:
bias 1.0
c|p -0.15415067982725836
len 1.0

score:
0.19859020097463342
Adding concept: there
nodeIds = List(10)
concepts = List(there)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
feats:
bias 1.0
c|p -1.067840630001356
len 1.0

score:
0.21756447640341625
Adding concept: give-01
nodeIds = List(11)
concepts = List(give-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.24733806162725053
Adding concept: have-03
nodeIds = List(12)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.24750256597385517
Adding concept: we
nodeIds = List(13)
concepts = List(we)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
feats:
bias 1.0
c|p -0.0953101798043249
len 1.0

score:
0.27631225815090804
Adding concept: (planet :name (name :op "Earth"))
nodeIds = List(14, 15, 16)
concepts = List(planet, name, "Earth")
NER Entity: (country :name (name :op "Earth"))
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Earth),(planet :name (name :op "Earth")),PhraseConceptFeatures(12.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.29206594016798043
Adding concept: such
nodeIds = List(17)
concepts = List(such)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.3218395253918147
Adding concept: planet
nodeIds = List(18)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.351613110615649
Adding concept: great
nodeIds = List(19)
concepts = List(great)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.38138669583948326
Adding concept: that
nodeIds = List(20)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.39800450422869904
Adding concept: well
nodeIds = List(21)
concepts = List(well)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(well),well,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false))
feats:
bias 1.0
c|p -0.13353139262452263
len 1.0

score:
0.42642765677952754
Adding concept: very
nodeIds = List(22)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.4562012420033618
Adding concept: know-01
nodeIds = List(23)
concepts = List(know-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
feats:
bias 1.0
c|p -0.2231435513142097
len 1.0

score:
0.48371812686226706
Adding concept: i
nodeIds = List(24)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.5097673332804963
Decoder1 Spans:
Span 1:  also => also
Span 2:  Earth => (planet :name (name :op "Earth"))
Span 3:  given => give-01
Span 4:  great => great
Span 5:  has => have-03
Span 6:  have => have-03
Span 7:  I => i
Span 8:  knew => know-01
Span 9:  one => 1
Span 10:  others => other
Span 11:  planets => planet
Span 12:  small => small
Span 13:  so => so
Span 14:  some => some
Span 15:  such => such
Span 16:  that => that
Span 17:  that => that
Span 18:  there => there
Span 19:  through => through
Span 20:  time => time
Span 21:  very => very
Span 22:  we => we
Span 23:  well => well
Decoder1 feats:
bias 23.0
c|p -17.3065635941017
len 23.0

Concepts:
id = 2 concept = have-03
id = 5 concept = small
id = 12 concept = have-03
id = 8 concept = other
id = 15 concept = name
id = 21 concept = well
id = 18 concept = planet
id = 24 concept = i
id = 7 concept = some
id = 1 concept = time
id = 17 concept = such
id = 23 concept = know-01
id = 4 concept = that
id = 11 concept = give-01
id = 14 concept = planet
id = 20 concept = that
id = 6 concept = so
id = 9 concept = also
id = 0 concept = through
id = 22 concept = very
id = 16 concept = "Earth"
id = 19 concept = great
id = 10 concept = there
id = 3 concept = 1
id = 13 concept = we
Spans:
Span 32-33:  also => also
Span 15-16:  Earth => (planet :name (name :op "Earth"))
Span 27-28:  given => give-01
Span 9-10:  great => great
Span 45-46:  has => have-03
Span 26-27:  have => have-03
Span 0-1:  I => i
Span 1-2:  knew => know-01
Span 44-45:  one => 1
Span 35-36:  others => other
Span 10-11:  planets => planet
Span 42-43:  small => small
Span 41-42:  so => so
Span 37-38:  some => some
Span 12-13:  such => such
Span 43-44:  that => that
Span 4-5:  that => that
Span 30-31:  there => there
Span 51-52:  through => through
Span 48-49:  time => time
Span 2-3:  very => very
Span 25-26:  we => we
Span 3-4:  well => well

rootDependencyPaths = List(List(1, 0), List(1), List(1, 3, 2), List(1, 3), List(1, 31, 4), List(1, 31, 5), List(1, 31, 5, 6), List(1, 31, 5, 6, 7), List(1, 31, 5, 6, 7, 10, 8), List(1, 31, 5, 6, 7, 10, 9), List(1, 31, 5, 6, 7, 10), List(1, 31, 5, 6, 7, 10, 19, 11), List(1, 31, 5, 6, 7, 10, 19, 13, 12), List(1, 31, 5, 6, 7, 10, 19, 13), List(1, 31, 5, 6, 7, 10, 19, 13, 15, 14), List(1, 31, 5, 6, 7, 10, 19, 13, 15), List(1, 31, 5, 6, 7, 10, 19, 13, 15, 16), List(1, 31, 5, 6, 7, 10, 19, 13, 15, 17), List(1, 31, 5, 6, 7, 10, 19, 18), List(1, 31, 5, 6, 7, 10, 19), List(1, 31, 5, 6, 7, 10, 19, 20), List(1, 31, 5, 6, 7, 10, 19, 21), List(1, 31, 5, 6, 7, 10, 19, 22), List(1, 31, 5, 6, 7, 10, 27, 23), List(1, 31, 5, 6, 7, 10, 27, 23, 24), List(1, 31, 5, 6, 7, 10, 27, 25), List(1, 31, 5, 6, 7, 10, 27, 26), List(1, 31, 5, 6, 7, 10, 27), List(1, 31, 5, 6, 7, 10, 27, 28), List(1, 31, 29), List(1, 31, 30), List(1, 31), List(1, 31, 32), List(1, 31, 33), List(1, 31, 33, 34), List(1, 31, 33, 34, 35), List(1, 31, 33, 34, 35, 36), List(1, 31, 33, 34, 35, 42, 37), List(1, 31, 33, 34, 35, 42, 37, 38), List(1, 31, 33, 34, 35, 42, 37, 38, 39), List(1, 31, 33, 34, 35, 42, 40), List(1, 31, 33, 34, 35, 42, 41), List(1, 31, 33, 34, 35, 42), List(1, 31, 33, 34, 35, 42, 45, 43), List(1, 31, 33, 34, 35, 42, 45, 44), List(1, 31, 33, 34, 35, 42, 45), List(1, 31, 33, 34, 35, 42, 45, 48, 46), List(1, 31, 33, 34, 35, 42, 45, 48, 47), List(1, 31, 33, 34, 35, 42, 45, 48), List(1, 31, 33, 34, 35, 42, 45, 48, 49), List(1, 31, 33, 34, 35, 42, 45, 48, 49, 50), List(1, 31, 33, 34, 35, 42, 45, 48, 49, 51), List(1, 31, 33, 34, 35, 42, 45, 48, 49, 51, 53, 52), List(1, 31, 33, 34, 35, 42, 45, 48, 49, 51, 53), List(1, 54))
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 9
Node = 0
Node = 10
Node = 18
Node = 17
Node = 24
Node = 12
Node = 13
Node = 19
Node = 23
Node = 20
Node = 1
Node = 21
Node = 14
Node = 2
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -889.4572537945812
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 0
Node = 20
Node = 1
Node = 21
Node = 14
Node = 24
Node = 9
Node = 2
Node = 22
Node = 15
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -910.6445137750635
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 0
Node = 21
Node = 14
Node = 20
Node = 24
Node = 2
Node = 22
Node = 15
Node = 9
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -925.2521486294061
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 0
Node = 20
Node = 21
Node = 14
Node = 24
Node = 2
Node = 9
Node = 22
Node = 15
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -937.051302194332
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 0
Node = 23
Node = 1
Node = 21
Node = 14
Node = 20
Node = 24
Node = 2
Node = 22
Node = 15
Node = 9
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -947.5794572190778
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 0
Node = 20
Node = 21
Node = 14
Node = 24
Node = 2
Node = 9
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -959.618047436313
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 0
Node = 1
Node = 21
Node = 14
Node = 10
Node = 20
Node = 24
Node = 2
Node = 22
Node = 15
Node = 9
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -968.4533656598163
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 0
Node = 20
Node = 21
Node = 14
Node = 24
Node = 2
Node = 9
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -982.6180474363131
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 0
Node = 23
Node = 1
Node = 21
Node = 14
Node = 20
Node = 24
Node = 2
Node = 22
Node = 15
Node = 9
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -991.5794572190779
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 0
Node = 21
Node = 14
Node = 20
Node = 24
Node = 2
Node = 22
Node = 15
Node = 9
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1005.2521486294062
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 0
Node = 20
Node = 21
Node = 14
Node = 24
Node = 2
Node = 9
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1016.6180474363131
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 18
Node = 12
Node = 13
Node = 19
Node = 0
Node = 23
Node = 1
Node = 21
Node = 14
Node = 10
Node = 20
Node = 24
Node = 2
Node = 22
Node = 15
Node = 9
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1024.4533656598164
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 0
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1036.996248238119
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 0
Node = 1
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1045.7568115858098
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 0
Node = 21
Node = 14
Node = 10
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1056.044882397803
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 0
Node = 1
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 17
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1061.993568405687
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 0
Node = 21
Node = 14
Node = 10
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1070.044882397803
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 0
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1077.029298097202
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 10
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1083.35448202133
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 0
Node = 10
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1088.4805735805915
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 10
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1093.35448202133
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 10
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1098.333759217631
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1102.958229128357
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1106.427213577891
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 13
Node = 19
Node = 12
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1108.9650931304186
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1112.427213577891
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 13
Node = 19
Node = 12
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 8
Node = 3
Node = 9
Node = 16
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1114.9650931304186
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 3
Node = 9
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1118.2302301590564
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 13
Node = 19
Node = 12
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 3
Node = 9
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1118.8864386962148
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 3
Node = 9
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1122.2302301590564
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 13
Node = 19
Node = 12
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 3
Node = 9
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1122.8864386962146
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 13
Node = 19
Node = 12
Node = 23
Node = 17
Node = 21
Node = 4
Node = 14
Node = 24
Node = 20
Node = 22
Node = 2
Node = 15
Node = 9
Node = 5
Node = 1
Node = 3
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1125.1648016485422
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 12
Node = 13
Node = 19
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 3
Node = 9
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1127.2302301590564
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 13
Node = 19
Node = 12
Node = 23
Node = 1
Node = 17
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 3
Node = 9
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1127.8864386962146
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 18
Node = 13
Node = 2
Node = 19
Node = 12
Node = 4
Node = 5
Node = 3
Node = 23
Node = 17
Node = 8
Node = 7
Node = 6
Node = 21
Node = 14
Node = 24
Node = 20
Node = 22
Node = 15
Node = 9
Node = 16
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1129.7022863165105
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 18
Node = 13
Node = 19
Node = 12
Node = 23
Node = 17
Node = 0
Node = 21
Node = 4
Node = 14
Node = 24
Node = 20
Node = 22
Node = 2
Node = 15
Node = 9
Node = 5
Node = 1
Node = 3
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1130.386217575481
getNodeById = Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
getNodeById2 = Map(2 -> have-03, 5 -> small, 12 -> have-03, 15 -> name, 8 -> other, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 17 -> such, 1 -> time, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we)
Node = 11
Node = 10
Node = 0
Node = 18
Node = 13
Node = 19
Node = 12
Node = 23
Node = 1
Node = 21
Node = 14
Node = 24
Node = 2
Node = 20
Node = 22
Node = 15
Node = 4
Node = 5
Node = 17
Node = 3
Node = 9
Node = 16
Node = 8
Node = 7
Node = 6
visited = Set(19, 3, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 0, 16, 1, 17, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -1132.8109359621933
Langrangian relaxation converged after 37 iterations. Delta = 0.0
Node.spans:
telescope List()
planet List()
see-01 List()
other List()
name-01 List()
"Earth" List()
so List()
"Mars" List()
planet List()
difficult List()
name List()
also List()
very List()
exist-01 List()
planet List()
planet List()
include-91 List()
"Jupiter" List()
name List()
planet List()
we List()
planet List()
name List()
"Jupiter" List()
multiple List()
planet List()
and List()
i List()
100 List()
"Mars" List()
cause-01 List()
"Earth" List()
great List()
know-01 List()
"Venus" List()
name List()
"Venus" List()
small List()
well List()
clearUnalignedNodes():  removing unaligned node: None / "Mars"
clearUnalignedNodes():  removing unaligned node: Some(p7) / planet
clearUnalignedNodes():  removing unaligned node: Some(d) / difficult
clearUnalignedNodes():  removing unaligned node: Some(a) / also
clearUnalignedNodes():  removing unaligned node: Some(e) / exist-01
clearUnalignedNodes():  removing unaligned node: Some(p6) / planet
clearUnalignedNodes():  removing unaligned node: None / "Jupiter"
clearUnalignedNodes():  removing unaligned node: Some(m) / multiple
clearUnalignedNodes():  removing unaligned node: Some(a2) / and
clearUnalignedNodes():  removing unaligned node: None / 100
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
clearUnalignedNodes():  removing unaligned node: None / "Earth"
clearUnalignedNodes():  removing unaligned node: None / "Venus"
OracleGraph nodes = List(telescope, planet, see-01, other, name-01, "Earth", so, name, very, planet, planet, include-91, "Jupiter", name, planet, we, name, planet, i, "Mars", great, know-01, name, "Venus", small, well)
OracleGraph triples: (k / know-01, ARG0, i / i)
(k / know-01, mod, w / well)
(n / name, op, "Earth")
(n2 / name, op, "Jupiter")
(n3 / name, op, "Mars")
(n4 / name, op, "Venus")
(n5 / name-01, ARG0, w3 / we)
(n5 / name-01, ARG1, p / planet)
(p / planet, example, p2 / planet)
(p / planet, example, p3 / planet)
(p / planet, example, p4 / planet)
(p / planet, example, p5 / planet)
(p / planet, mod, g / great)
(p2 / planet, name, n / name)
(p3 / planet, name, n2 / name)
(p4 / planet, name, n3 / name)
(p5 / planet, name, n4 / name)
(s2 / small, degree, s3 / so)
(s4 / see-01, instrument, t / telescope)
(w / well, degree, v / very)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 3, 2), List(1, 3), List(1, 31, 4), List(1, 31, 5), List(1, 31, 5, 6), List(1, 31, 5, 6, 7), List(1, 31, 5, 6, 7, 10, 8), List(1, 31, 5, 6, 7, 10, 9), List(1, 31, 5, 6, 7, 10), List(1, 31, 5, 6, 7, 10, 19, 11), List(1, 31, 5, 6, 7, 10, 19, 13, 12), List(1, 31, 5, 6, 7, 10, 19, 13), List(1, 31, 5, 6, 7, 10, 19, 13, 15, 14), List(1, 31, 5, 6, 7, 10, 19, 13, 15), List(1, 31, 5, 6, 7, 10, 19, 13, 15, 16), List(1, 31, 5, 6, 7, 10, 19, 13, 15, 17), List(1, 31, 5, 6, 7, 10, 19, 18), List(1, 31, 5, 6, 7, 10, 19), List(1, 31, 5, 6, 7, 10, 19, 20), List(1, 31, 5, 6, 7, 10, 19, 21), List(1, 31, 5, 6, 7, 10, 19, 22), List(1, 31, 5, 6, 7, 10, 27, 23), List(1, 31, 5, 6, 7, 10, 27, 23, 24), List(1, 31, 5, 6, 7, 10, 27, 25), List(1, 31, 5, 6, 7, 10, 27, 26), List(1, 31, 5, 6, 7, 10, 27), List(1, 31, 5, 6, 7, 10, 27, 28), List(1, 31, 29), List(1, 31, 30), List(1, 31), List(1, 31, 32), List(1, 31, 33), List(1, 31, 33, 34), List(1, 31, 33, 34, 35), List(1, 31, 33, 34, 35, 36), List(1, 31, 33, 34, 35, 42, 37), List(1, 31, 33, 34, 35, 42, 37, 38), List(1, 31, 33, 34, 35, 42, 37, 38, 39), List(1, 31, 33, 34, 35, 42, 40), List(1, 31, 33, 34, 35, 42, 41), List(1, 31, 33, 34, 35, 42), List(1, 31, 33, 34, 35, 42, 45, 43), List(1, 31, 33, 34, 35, 42, 45, 44), List(1, 31, 33, 34, 35, 42, 45), List(1, 31, 33, 34, 35, 42, 45, 48, 46), List(1, 31, 33, 34, 35, 42, 45, 48, 47), List(1, 31, 33, 34, 35, 42, 45, 48), List(1, 31, 33, 34, 35, 42, 45, 48, 49), List(1, 31, 33, 34, 35, 42, 45, 48, 49, 50), List(1, 31, 33, 34, 35, 42, 45, 48, 49, 51), List(1, 31, 33, 34, 35, 42, 45, 48, 49, 51, 53, 52), List(1, 31, 33, 34, 35, 42, 45, 48, 49, 51, 53), List(1, 54))
Oracle Span 32-33:  also => include-91
Oracle Span 15-16:  Earth => (planet :name (name :op "Earth"))
Oracle Span 9-10:  great => great
Oracle Span 0-1:  I => i
Oracle Span 17-18:  Jupiter => (planet :name (name :op "Jupiter"))
Oracle Span 1-2:  knew => know-01
Oracle Span 19-20:  Mars => (planet :name (name :op "Mars"))
Oracle Span 28-29:  names => name-01
Oracle Span 35-36:  others => other
Oracle Span 10-11:  planets => planet
Oracle Span 49-50:  seeing => see-01
Oracle Span 42-43:  small => small
Oracle Span 41-42:  so => so
Oracle Span 53-54:  telescope => telescope
Oracle Span 21-22:  Venus => (planet :name (name :op "Venus"))
Oracle Span 2-3:  very => very
Oracle Span 25-26:  we => we
Oracle Span 3-4:  well => well

Extra span: through => through
Extra span: time => time
Extra span: has => have-03
Extra span: one => 1
Extra span: that => that
Extra span: some => some
Incorrect span: also => also
Extra span: there => there
Extra span: given => give-01
Extra span: have => have-03
Extra span: such => such
Extra span: that => that
Missing span: Jupiter => (planet :name (name :op "Jupiter"))
Missing span: Mars => (planet :name (name :op "Mars"))
Missing span: Venus => (planet :name (name :op "Venus"))
Missing span: names => name-01
Missing span: also => include-91
Missing span: seeing => see-01
Missing span: telescope => telescope
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	knew	_	VBD	VBD	_	0	root	_	_
3	very	_	RB	RB	_	4	advmod	_	_
4	well	_	RB	RB	_	2	advmod	_	_
5	that	_	IN	IN	_	32	mark	_	_
6	in	_	IN	IN	_	32	prep	_	_
7	addition	_	NN	NN	_	6	pobj	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	great	_	JJ	JJ	_	11	amod	_	_
11	planets	_	NNS	NNS	_	8	pobj	_	_
12	--	_	:	:	_	20	punct	_	_
13	such	_	JJ	JJ	_	14	mwe	_	_
14	as	_	IN	IN	_	20	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	Earth	_	NN	NN	_	14	pobj	_	_
17	,	_	,	,	_	16	punct	_	_
18	Jupiter	_	NNP	NNP	_	16	appos	_	_
19	,	_	,	,	_	20	punct	_	_
20	Mars	_	NNP	NNP	_	11	dep	_	_
21	,	_	,	,	_	20	punct	_	_
22	Venus	_	NNP	NNP	_	20	appos	_	_
23	--	_	:	:	_	20	punct	_	_
24	to	_	TO	TO	_	28	prep	_	_
25	which	_	WDT	WDT	_	24	pobj	_	_
26	we	_	PRP	PRP	_	28	nsubj	_	_
27	have	_	VBP	VBP	_	28	aux	_	_
28	given	_	VBN	VBN	_	11	rcmod	_	_
29	names	_	NNS	NNS	_	28	dobj	_	_
30	,	_	,	,	_	32	punct	_	_
31	there	_	EX	EX	_	32	expl	_	_
32	are	_	VBP	VBP	_	2	ccomp	_	_
33	also	_	RB	RB	_	32	advmod	_	_
34	hundreds	_	NNS	NNS	_	32	nsubj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	others	_	NNS	NNS	_	35	pobj	_	_
37	,	_	,	,	_	36	punct	_	_
38	some	_	DT	DT	_	43	nsubj	_	_
39	of	_	IN	IN	_	38	prep	_	_
40	which	_	WDT	WDT	_	39	pobj	_	_
41	are	_	VBP	VBP	_	43	cop	_	_
42	so	_	RB	RB	_	43	advmod	_	_
43	small	_	JJ	JJ	_	36	rcmod	_	_
44	that	_	IN	IN	_	46	mark	_	_
45	one	_	PRP	PRP	_	46	nsubj	_	_
46	has	_	VBZ	VBZ	_	43	ccomp	_	_
47	a	_	DT	DT	_	49	det	_	_
48	hard	_	JJ	JJ	_	49	amod	_	_
49	time	_	NN	NN	_	46	dobj	_	_
50	seeing	_	VBG	VBG	_	49	vmod	_	_
51	them	_	PRP	PRP	_	50	dobj	_	_
52	through	_	IN	IN	_	50	prep	_	_
53	the	_	DT	DT	_	54	det	_	_
54	telescope	_	NN	NN	_	52	pobj	_	_
55	.	_	.	.	_	2	punct	_	_

Oracle:
(k / know-01, ARG0, i / i)
(k / know-01, mod, w / well)
(n / name, op, "Earth")
(n2 / name, op, "Jupiter")
(n3 / name, op, "Mars")
(n4 / name, op, "Venus")
(n5 / name-01, ARG0, w3 / we)
(n5 / name-01, ARG1, p / planet)
(p / planet, example, p2 / planet)
(p / planet, example, p3 / planet)
(p / planet, example, p4 / planet)
(p / planet, example, p5 / planet)
(p / planet, mod, g / great)
(p2 / planet, name, n / name)
(p3 / planet, name, n2 / name)
(p4 / planet, name, n3 / name)
(p5 / planet, name, n4 / name)
(s2 / small, degree, s3 / so)
(s4 / see-01, instrument, t / telescope)
(w / well, degree, v / very)

Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(0),through,through,false), Span(48,49,List(1),time,time,false), Span(45,46,List(2),has,have-03,false), Span(44,45,List(3),one,1,false), Span(43,44,List(4),that,that,false), Span(42,43,List(5),small,small,false), Span(41,42,List(6),so,so,false), Span(37,38,List(7),some,some,false), Span(35,36,List(8),others,other,false), Span(32,33,List(9),also,also,false), Span(30,31,List(10),there,there,false), Span(27,28,List(11),given,give-01,false), Span(26,27,List(12),have,have-03,false), Span(25,26,List(13),we,we,false), Span(15,16,List(16, 15, 14),Earth,(planet :name (name :op "Earth")),false), Span(12,13,List(17),such,such,false), Span(10,11,List(18),planets,planet,false), Span(9,10,List(19),great,great,false), Span(4,5,List(20),that,that,false), Span(3,4,List(21),well,well,false), Span(2,3,List(22),very,very,false), Span(1,2,List(23),knew,know-01,false), Span(0,1,List(24),I,i,false)),Map(2 -> have-03, 5 -> small, 12 -> have-03, 8 -> other, 15 -> name, 21 -> well, 18 -> planet, 24 -> i, 7 -> some, 1 -> time, 17 -> such, 23 -> know-01, 4 -> that, 11 -> give-01, 14 -> planet, 20 -> that, 6 -> so, 9 -> also, 0 -> through, 22 -> very, 16 -> "Earth", 19 -> great, 10 -> there, 3 -> 1, 13 -> we),Map(n -> name, w -> we, h -> have-03, t4 -> there, s2 -> so, h2 -> have-03, k -> know-01, t -> through, p2 -> planet, s -> small, v -> very, s4 -> such, g2 -> great, 1 -> 1, t3 -> that, p -> planet, g -> give-01, a -> also, t2 -> time, w2 -> well, t5 -> that, i -> i, s3 -> some, o -> other))),[Ljava.lang.String;@747ddf94,Annotation([Ljava.lang.String;@35e2d654,[Ljava.lang.String;@1bd4fdd,[Ljava.lang.String;@55183b20),Annotation([Ljava.lang.String;@4f83df68,[Ljava.lang.String;@6cf0e0ba,[Ledu.cmu.lti.nlp.amr.Dependency;@7d8995e),Annotation([Ljava.lang.String;@130d63be,[Ljava.lang.String;@42a48628,[Ljava.lang.String;@293a5bf6),Annotation([Ljava.lang.String;@6aeb35e6,[Ljava.lang.String;@1283bb96,[Ledu.cmu.lti.nlp.amr.Entity;@74f0ea28))
AMR:
(a / also, domain, t5 / that)
(g / give-01, ARG0, w / we)
(g / give-01, ARG1, p2 / planet)
(g / give-01, ARG2, t / through)
(g / give-01, ARG3, t4 / there)
(h / have-03, ARG0, 1 / 1)
(h / have-03, ARG1, t2 / time)
(h / have-03, ARG2, s4 / such)
(h2 / have-03, ARG1, t2 / time)
(h2 / have-03, ARG2, w / we)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, p / planet)
(k / know-01, ARG2, h2 / have-03)
(k / know-01, degree, w2 / well)
(n / name, op, "Earth")
(o / other, mod, s / small)
(p / planet, name, n / name)
(p2 / planet, mod, g2 / great)
(s / small, degree, s2 / so)
(s / small, domain, s3 / some)
(s / small, mod, h / have-03)
(t3 / that, op, h / have-03)
(t5 / that, mod, w2 / well)
(w2 / well, degree, v / very)

Decoded in 1,939,228 microseconds
Sentence: When an astronomer discovers one of these he does not give it a name , but only a number .


--- Decoder1 ---

Sentence: When an astronomer discovers one of these he does not give it a name , but only a number .
word = When
Finding date entities
Possible invoked concepts: List()
word = an
Finding date entities
Possible invoked concepts: List()
word = astronomer
Finding date entities
Possible invoked concepts: List()
word = discovers
Finding date entities
Possible invoked concepts: List()
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = these
Finding date entities
Possible invoked concepts: List()
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = does
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false)))
concept = PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false))
score = 0
word = not
Finding date entities
Possible invoked concepts: List()
word = give
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(give),give-01,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(give),give-01,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(give),give-01,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = name
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = but
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false)))
concept = PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
score = 0
adding concept:PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
word = only
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)))
concept = PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
score = 0
adding concept:PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = number
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, None, Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),4)), None, None, Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),7)), None, None, Some((0.01866307480060534,PhraseConceptPair(List(give),give-01,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)),10)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),11)), None, None, None, Some((0.025497139841755487,PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false)),15)), Some((0.02893032846730732,PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)),16)), None, Some((0.022763633620453336,PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),18)), None)
Adding concept: number
nodeIds = List(0)
concepts = List(number)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.022763633620453333
Adding concept: only
nodeIds = List(1)
concepts = List(only)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
feats:
bias 1.0
c|p -0.08338160893905101
len 1.0

score:
0.051693962087760656
Adding concept: contrast-01
nodeIds = List(2)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
feats:
bias 1.0
c|p -0.4228568508200336
len 1.0

score:
0.07719110192951614
Adding concept: it
nodeIds = List(3)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.09611022135332864
Adding concept: give-01
nodeIds = List(4)
concepts = List(give-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(give),give-01,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.11477329615393397
Adding concept: he
nodeIds = List(5)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.14039209603435449
Adding concept: 1
nodeIds = List(6)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.15104967288066284
Decoder1 Spans:
Span 1:  but => contrast-01
Span 2:  give => give-01
Span 3:  he => he
Span 4:  it => it
Span 5:  number => number
Span 6:  one => 1
Span 7:  only => only
Decoder1 feats:
bias 7.0
c|p -5.672319002961817
len 7.0

Concepts:
id = 2 concept = contrast-01
id = 5 concept = he
id = 1 concept = only
id = 4 concept = give-01
id = 6 concept = 1
id = 0 concept = number
id = 3 concept = it
Spans:
Span 15-16:  but => contrast-01
Span 10-11:  give => give-01
Span 7-8:  he => he
Span 11-12:  it => it
Span 18-19:  number => number
Span 4-5:  one => 1
Span 16-17:  only => only

rootDependencyPaths = List(List(10, 3, 0), List(10, 3, 2, 1), List(10, 3, 2), List(10, 3), List(10, 3, 4), List(10, 3, 4, 5), List(10, 3, 4, 5, 6), List(10, 7), List(10, 8), List(10, 9), List(10), List(10, 11), List(10, 13, 12), List(10, 13), List(10, 13, 14), List(10, 13, 16, 15), List(10, 13, 16), List(10, 13, 18, 17), List(10, 13, 18), List(10, 19))
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -194.6792768584661
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -196.6792768584661
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -198.6792768584661
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -200.6792768584661
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -201.23068392089823
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -204.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -206.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -207.2306839208982
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -210.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -212.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -213.2306839208982
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -216.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -218.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -219.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -220.2306839208982
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -223.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -224.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -226.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -227.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -228.2306839208982
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -231.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -232.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -234.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -235.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -236.2306839208982
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -239.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 4
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -240.34784868867774
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -241.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -243.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 4
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -244.34784868867774
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -245.67927685846607
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -246.2306839208982
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -249.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 4
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -250.34784868867774
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -251.67927685846604
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -253.329190883794
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 4
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -254.34784868867774
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -255.67927685846604
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -256.23068392089823
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 6
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -259.0374468216689
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 4
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -261.34784868867774
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 1
Node = 4
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -262.67927685846604
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 6
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -264.0374468216689
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 0
Node = 4
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -266.34784868867774
getNodeById = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
getNodeById2 = Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it)
Node = 2
Node = 4
Node = 0
Node = 1
Node = 3
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -267.65932363119356
Langrangian relaxation converged after 45 iterations. Delta = 0.0
Node.spans:
instead-of-91 List()
this List()
1 List()
number List()
name-01 List()
discover-01 List()
astronomer List()
only List()
give-01 List()
include-91 List()
thing List()
clearUnalignedNodes():  removing unaligned node: Some(i2) / instead-of-91
clearUnalignedNodes():  removing unaligned node: Some(t2) / this
WARNING: Adding a variable name to a span
OracleGraph nodes = List(1, number, name-01, discover-01, astronomer, only, give-01, include-91, thing)
OracleGraph triples: (d / discover-01, ARG0, a / astronomer)
(d / discover-01, ARG1, t / thing)
(g / give-01, ARG0, a / astronomer)
(g / give-01, ARG1, n2 / number)
(g / give-01, ARG2, t / thing)
(g / give-01, mod, o2 / only)
(g / give-01, time, d / discover-01)
(i / include-91, ARG1, t / thing)
(n3 / name-01, ARG0, a / astronomer)
(n3 / name-01, ARG1, t / thing)
(t / thing, quant, 1 / 1)
rootDependencyPaths = List(List(10, 3, 0), List(10, 3, 2, 1), List(10, 3, 2), List(10, 3), List(10, 3, 4), List(10, 3, 4, 5), List(10, 3, 4, 5, 6), List(10, 7), List(10, 8), List(10, 9), List(10), List(10, 11), List(10, 13, 12), List(10, 13), List(10, 13, 14), List(10, 13, 16, 15), List(10, 13, 16), List(10, 13, 18, 17), List(10, 13, 18), List(10, 19))
Oracle Span 2-3:  astronomer => astronomer
Oracle Span 3-4:  discovers => discover-01
Oracle Span 10-11:  give => give-01
Oracle Span 13-14:  name => name-01
Oracle Span 18-19:  number => number
Oracle Span 5-6:  of => (thing :ARG1-of include-91)
Oracle Span 4-5:  one => 1
Oracle Span 16-17:  only => only

Extra span: but => contrast-01
Extra span: it => it
Extra span: he => he
Missing span: name => name-01
Missing span: discovers => discover-01
Missing span: of => (thing :ARG1-of include-91)
Missing span: astronomer => astronomer
Dependencies:
1	When	_	WRB	WRB	_	4	advmod	_	_
2	an	_	DT	DT	_	3	det	_	_
3	astronomer	_	NN	NN	_	4	nsubj	_	_
4	discovers	_	VBZ	VBZ	_	11	advcl	_	_
5	one	_	CD	CD	_	4	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	these	_	DT	DT	_	6	pobj	_	_
8	he	_	PRP	PRP	_	11	nsubj	_	_
9	does	_	VBZ	VBZ	_	11	aux	_	_
10	not	_	RB	RB	_	11	neg	_	_
11	give	_	VB	VB	_	0	root	_	_
12	it	_	PRP	PRP	_	11	iobj	_	_
13	a	_	DT	DT	_	14	det	_	_
14	name	_	NN	NN	_	11	dobj	_	_
15	,	_	,	,	_	14	punct	_	_
16	but	_	CC	CC	_	17	cc	_	_
17	only	_	RB	RB	_	14	cc	_	_
18	a	_	DT	DT	_	19	det	_	_
19	number	_	NN	NN	_	14	conj	_	_
20	.	_	.	.	_	11	punct	_	_

Oracle:
(d / discover-01, ARG0, a / astronomer)
(d / discover-01, ARG1, t / thing)
(g / give-01, ARG0, a / astronomer)
(g / give-01, ARG1, n2 / number)
(g / give-01, ARG2, t / thing)
(g / give-01, mod, o2 / only)
(g / give-01, time, d / discover-01)
(i / include-91, ARG1, t / thing)
(n3 / name-01, ARG0, a / astronomer)
(n3 / name-01, ARG1, t / thing)
(t / thing, quant, 1 / 1)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),number,number,false), Span(16,17,List(1),only,only,false), Span(15,16,List(2),but,contrast-01,false), Span(11,12,List(3),it,it,false), Span(10,11,List(4),give,give-01,false), Span(7,8,List(5),he,he,false), Span(4,5,List(6),one,1,false)),Map(2 -> contrast-01, 5 -> he, 1 -> only, 4 -> give-01, 6 -> 1, 0 -> number, 3 -> it),Map(n -> number, h -> he, 1 -> 1, g -> give-01, i -> it, c -> contrast-01, o -> only))),[Ljava.lang.String;@f6efaab,Annotation([Ljava.lang.String;@3c19aaa5,[Ljava.lang.String;@3349e9bb,[Ljava.lang.String;@409bf450),Annotation([Ljava.lang.String;@38d8f54a,[Ljava.lang.String;@49e53c76,[Ledu.cmu.lti.nlp.amr.Dependency;@351d00c0),Annotation([Ljava.lang.String;@2a3b5b47,[Ljava.lang.String;@55b699ef,[Ljava.lang.String;@35d019a3),Annotation([Ljava.lang.String;@689604d9,[Ljava.lang.String;@18078bef,[Ledu.cmu.lti.nlp.amr.Entity;@799f10e1))
AMR:
(c / contrast-01, ARG0, o / only)
(c / contrast-01, ARG1, n / number)
(g / give-01, ARG0, h / he)
(g / give-01, ARG1, 1 / 1)
(g / give-01, ARG2, i / it)
(g / give-01, condition, c / contrast-01)

Decoded in 237,324 microseconds
Sentence: He might call it , for example , " Asteroid 325 . "


--- Decoder1 ---

Sentence: He might call it , for example , " Asteroid 325 . "
word = He
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false)))
concept = PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
word = might
Finding date entities
Possible invoked concepts: List()
word = call
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(call),call-03,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(call),call-05,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(call),call-03,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(call),call-03,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(call),call-05,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(call),call-05,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = for
Finding date entities
Possible invoked concepts: List()
word = example
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = Asteroid
NER Entity: (thing :name (name :op "Asteroid" :op "325"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Asteroid, 325),(thing :name (name :op "Asteroid" :op "325")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(Asteroid, 325),(thing :name (name :op "Asteroid" :op "325")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = 325
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(325),(asteroid :name (name :op 325)),PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(325),(asteroid :name (name :op 325)),PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(325),(asteroid :name (name :op 325)),PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false)),0)), None, Some((0.015753682017072397,PhraseConceptPair(List(call),call-05,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),2)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),3)), None, None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(325),(asteroid :name (name :op 325)),PhraseConceptFeatures(1.0,0.0,false,false)),10)), None, None)
Adding concept: (asteroid :name (name :op 325))
nodeIds = List(0, 1, 2)
concepts = List(asteroid, name, 325)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(325),(asteroid :name (name :op 325)),PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: it
nodeIds = List(3)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.04869270464764677
Adding concept: call-05
nodeIds = List(4)
concepts = List(call-05)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(call),call-05,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.06444638666471916
Adding concept: he
nodeIds = List(5)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.09421997188855344
Decoder1 Spans:
Span 1:  325 => (asteroid :name (name :op 325))
Span 2:  call => call-05
Span 3:  He => he
Span 4:  it => it
Decoder1 feats:
bias 4.0
c|p -2.4595888418037104
len 4.0

Concepts:
id = 2 concept = 325
id = 5 concept = he
id = 1 concept = name
id = 4 concept = call-05
id = 0 concept = asteroid
id = 3 concept = it
Spans:
Span 10-11:  325 => (asteroid :name (name :op 325))
Span 2-3:  call => call-05
Span 0-1:  He => he
Span 3-4:  it => it

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 4), List(2, 5), List(2, 5, 6), List(2, 5, 6, 7), List(2, 5, 6, 8), List(2, 5, 6, 10, 9), List(2, 5, 6, 10), List(2, 11), List(2, 12))
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -279.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -281.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -283.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -285.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -286.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -288.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -289.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -291.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -292.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -294.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -295.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -297.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -298.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -300.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -301.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -303.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -304.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -306.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -307.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -309.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -310.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -312.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -313.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -315.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -316.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -318.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -319.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -321.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -322.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -324.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -325.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -327.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -328.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -330.1048570131862
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -331.52181449261946
getNodeById = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
getNodeById2 = Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -332.80090783529806
Langrangian relaxation converged after 36 iterations. Delta = 0.0
Node.spans:
he List()
325 List()
name List()
"Asteroid" List()
it List()
call-01 List()
possible List()
exemplify-01 List()
clearUnalignedNodes():  removing unaligned node: Some(p) / possible
clearUnalignedNodes():  removing unaligned node: Some(e) / exemplify-01
OracleGraph nodes = List(he, 325, name, "Asteroid", it, call-01)
OracleGraph triples: (c / call-01, ARG0, h / he)
(c / call-01, ARG1, i / it)
(c / call-01, ARG2, n2 / name)
(n2 / name, op, "Asteroid")
(n2 / name, op, 325)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 4), List(2, 5), List(2, 5, 6), List(2, 5, 6, 7), List(2, 5, 6, 8), List(2, 5, 6, 10, 9), List(2, 5, 6, 10), List(2, 11), List(2, 12))
Oracle Span 9-11:  Asteroid 325 => (name :op 325 :op "Asteroid")
Oracle Span 2-3:  call => call-01
Oracle Span 0-1:  He => he
Oracle Span 3-4:  it => it

Extra span: 325 => (asteroid :name (name :op 325))
Incorrect span: call => call-05
Missing span: Asteroid 325 => (name :op 325 :op "Asteroid")
Missing span: call => call-01
Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	might	_	MD	MD	_	3	aux	_	_
3	call	_	VB	VB	_	0	root	_	_
4	it	_	PRP	PRP	_	3	dobj	_	_
5	,	_	,	,	_	3	punct	_	_
6	for	_	IN	IN	_	3	prep	_	_
7	example	_	NN	NN	_	6	pobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	"	_	''	''	_	7	punct	_	_
10	Asteroid	_	NNP	NNP	_	11	nn	_	_
11	325	_	NNP	NNP	_	7	dep	_	_
12	.	_	.	.	_	3	punct	_	_
13	"	_	''	''	_	3	punct	_	_

Oracle:
(c / call-01, ARG0, h / he)
(c / call-01, ARG1, i / it)
(c / call-01, ARG2, n2 / name)
(n2 / name, op, "Asteroid")
(n2 / name, op, 325)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),325,(asteroid :name (name :op 325)),false), Span(3,4,List(3),it,it,false), Span(2,3,List(4),call,call-05,false), Span(0,1,List(5),He,he,false)),Map(2 -> 325, 5 -> he, 1 -> name, 4 -> call-05, 0 -> asteroid, 3 -> it),Map(n -> name, h -> he, a -> asteroid, i -> it, c -> call-05, 3 -> 325))),[Ljava.lang.String;@4c371370,Annotation([Ljava.lang.String;@145f66e3,[Ljava.lang.String;@3023df74,[Ljava.lang.String;@313ac989),Annotation([Ljava.lang.String;@4562e04d,[Ljava.lang.String;@2a65fe7c,[Ledu.cmu.lti.nlp.amr.Dependency;@4135c3b),Annotation([Ljava.lang.String;@6302bbb1,[Ljava.lang.String;@31304f14,[Ljava.lang.String;@34a3d150),Annotation([Ljava.lang.String;@2a4fb17b,[Ljava.lang.String;@5c6648b0,[Ledu.cmu.lti.nlp.amr.Entity;@6f1de4c7))
AMR:
(a / asteroid, name, n / name)
(c / call-05, ARG0, h / he)
(c / call-05, ARG1, i / it)
(c / call-05, manner, a / asteroid)
(n / name, op, 3 / 325)

Decoded in 202,162 microseconds
Sentence: I have serious reason to believe that the planet from which the little prince came is the asteroid known as B-612 .


--- Decoder1 ---

Sentence: I have serious reason to believe that the planet from which the little prince came is the asteroid known as B - 612 .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = serious
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(serious),serious,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)), PhraseConceptPair(List(serious),serious-41,PhraseConceptFeatures(1.0,-1.791759469228055,false,false)))
concept = PhraseConceptPair(List(serious),serious,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(serious),serious,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
concept = PhraseConceptPair(List(serious),serious-41,PhraseConceptFeatures(1.0,-1.791759469228055,false,false))
score = 0
word = reason
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(reason),reason,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(reason),reason-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(reason),reason,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(reason),reason,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(reason),reason-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(reason),reason-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = believe
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = which
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = came
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false)), PhraseConceptPair(List(came),come-04,PhraseConceptFeatures(1.0,-3.4011973816621555,false,false)))
concept = PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
score = 0
adding concept:PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
concept = PhraseConceptPair(List(came),come-04,PhraseConceptFeatures(1.0,-3.4011973816621555,false,false))
score = 0
word = is
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = asteroid
Finding date entities
Possible invoked concepts: List()
word = known
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(known),know-01,PhraseConceptFeatures(6.0,0.0,false,false)))
concept = PhraseConceptPair(List(known),know-01,PhraseConceptFeatures(6.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(known),know-01,PhraseConceptFeatures(6.0,0.0,false,false))
word = as
Finding date entities
Possible invoked concepts: List()
word = B
NER Entity: (organization :name (name :op "B" :op "-" :op "612"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(B),(organization :name (name :op "B" :op "-" :op "612")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(B),(organization :name (name :op "B" :op "-" :op "612")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = -
Finding date entities
Possible invoked concepts: List()
word = 612
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),1)), Some((0.01866307480060534,PhraseConceptPair(List(serious),serious,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)),2)), Some((0.015753682017072397,PhraseConceptPair(List(reason),reason-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),3)), None, Some((0.029773585223834276,PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false)),5)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),6)), None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),8)), None, None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),12)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),13)), Some((0.019626967847386725,PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false)),14)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(known),know-01,PhraseConceptFeatures(6.0,0.0,false,false)),18)), None, None, None, None, None)
Adding concept: know-01
nodeIds = List(0)
concepts = List(know-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(known),know-01,PhraseConceptFeatures(6.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: come-01
nodeIds = List(1)
concepts = List(come-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
feats:
bias 1.0
c|p -1.0033021088637848
len 1.0

score:
0.049400553071221
Adding concept: prince
nodeIds = List(2)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.07911151752275056
Adding concept: little
nodeIds = List(3)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.1017303292543841
Adding concept: planet
nodeIds = List(4)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13150391447821838
Adding concept: that
nodeIds = List(5)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.14812172286743416
Adding concept: believe-01
nodeIds = List(6)
concepts = List(believe-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.17789530809126844
Adding concept: reason-01
nodeIds = List(7)
concepts = List(reason-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(reason),reason-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.19364899010834083
Adding concept: serious
nodeIds = List(8)
concepts = List(serious)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(serious),serious,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.21231206490894616
Adding concept: have-03
nodeIds = List(9)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.2124765692555508
Adding concept: i
nodeIds = List(10)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.23852577567378008
Decoder1 Spans:
Span 1:  believe => believe-01
Span 2:  came => come-01
Span 3:  have => have-03
Span 4:  I => i
Span 5:  known => know-01
Span 6:  little => little
Span 7:  planet => planet
Span 8:  prince => prince
Span 9:  reason => reason-01
Span 10:  serious => serious
Span 11:  that => that
Decoder1 feats:
bias 11.0
c|p -8.798744666764755
len 11.0

Concepts:
id = 2 concept = prince
id = 5 concept = that
id = 8 concept = serious
id = 7 concept = reason-01
id = 1 concept = come-01
id = 4 concept = planet
id = 6 concept = believe-01
id = 9 concept = have-03
id = 0 concept = know-01
id = 10 concept = i
id = 3 concept = little
Spans:
Span 5-6:  believe => believe-01
Span 14-15:  came => come-01
Span 1-2:  have => have-03
Span 0-1:  I => i
Span 18-19:  known => know-01
Span 12-13:  little => little
Span 8-9:  planet => planet
Span 13-14:  prince => prince
Span 3-4:  reason => reason-01
Span 2-3:  serious => serious
Span 6-7:  that => that

rootDependencyPaths = List(List(1, 0), List(1), List(1, 3, 2), List(1, 3), List(1, 3, 5, 4), List(1, 3, 5), List(1, 3, 5, 17, 6), List(1, 3, 5, 17, 8, 7), List(1, 3, 5, 17, 8), List(1, 3, 5, 17, 8, 14, 9), List(1, 3, 5, 17, 8, 14, 9, 10), List(1, 3, 5, 17, 8, 14, 13, 11), List(1, 3, 5, 17, 8, 14, 13, 12), List(1, 3, 5, 17, 8, 14, 13), List(1, 3, 5, 17, 8, 14), List(1, 3, 5, 17, 15), List(1, 3, 5, 17, 16), List(1, 3, 5, 17), List(1, 3, 5, 17, 18), List(1, 3, 5, 17, 18, 19), List(1, 3, 5, 17, 18, 19, 20), List(1, 21))
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = 23.389343472024137
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = 19.389343472024137
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = 15.389343472024137
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = 11.389343472024137
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = 7.389343472024136
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = 3.3893434720241364
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -0.022041331565284317
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -2.0220413315652843
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -4.022041331565284
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -6.022041331565284
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -8.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -10.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -12.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -14.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -16.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -18.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -20.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -22.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -24.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -26.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -28.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -30.022041331565283
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -32.02204133156528
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -34.02204133156528
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -36.0220413315653
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -38.0220413315653
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -40.0220413315653
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -42.0220413315653
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -44.0220413315653
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -46.0220413315653
getNodeById = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 0 -> know-01, 9 -> have-03, 3 -> little, 10 -> i)
Node = 9
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -48.018939053780194
Langrangian relaxation converged after 31 iterations. Delta = 0.0
Node.spans:
serious List()
prince List()
believe-01 List()
come-01 List()
name List()
reason List()
i List()
- List()
cause-01 List()
asteroid List()
"B-612" List()
little List()
planet List()
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
OracleGraph nodes = List(serious, prince, believe-01, come-01, name, reason, i, asteroid, "B-612", little, planet)
OracleGraph triples: (a / asteroid, domain, p / planet)
(a / asteroid, name, n4 / name)
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, c2 / come-01)
(c2 / come-01, ARG1, p2 / prince)
(c2 / come-01, ARG3, a / asteroid)
(n4 / name, op, "B-612")
(p2 / prince, mod, l / little)
(r / reason, mod, s / serious)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 3, 2), List(1, 3), List(1, 3, 5, 4), List(1, 3, 5), List(1, 3, 5, 17, 6), List(1, 3, 5, 17, 8, 7), List(1, 3, 5, 17, 8), List(1, 3, 5, 17, 8, 14, 9), List(1, 3, 5, 17, 8, 14, 9, 10), List(1, 3, 5, 17, 8, 14, 13, 11), List(1, 3, 5, 17, 8, 14, 13, 12), List(1, 3, 5, 17, 8, 14, 13), List(1, 3, 5, 17, 8, 14), List(1, 3, 5, 17, 15), List(1, 3, 5, 17, 16), List(1, 3, 5, 17), List(1, 3, 5, 17, 18), List(1, 3, 5, 17, 18, 19), List(1, 3, 5, 17, 18, 19, 20), List(1, 21))
Oracle Span 17-18:  asteroid => asteroid
Oracle Span 20-21:  B => (name :op "B-612")
Oracle Span 5-6:  believe => believe-01
Oracle Span 14-15:  came => come-01
Oracle Span 0-1:  I => i
Oracle Span 12-13:  little => little
Oracle Span 8-9:  planet => planet
Oracle Span 13-14:  prince => prince
Oracle Span 3-4:  reason => reason
Oracle Span 2-3:  serious => serious

Extra span: known => know-01
Extra span: that => that
Incorrect span: reason => reason-01
Extra span: have => have-03
Missing span: B => (name :op "B-612")
Missing span: reason => reason
Missing span: asteroid => asteroid
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	have	_	VBP	VBP	_	0	root	_	_
3	serious	_	JJ	JJ	_	4	amod	_	_
4	reason	_	NN	NN	_	2	dobj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	believe	_	VB	VB	_	4	vmod	_	_
7	that	_	IN	IN	_	18	mark	_	_
8	the	_	DT	DT	_	9	det	_	_
9	planet	_	NN	NN	_	18	nsubj	_	_
10	from	_	IN	IN	_	15	prep	_	_
11	which	_	WDT	WDT	_	10	pobj	_	_
12	the	_	DT	DT	_	14	det	_	_
13	little	_	JJ	JJ	_	14	amod	_	_
14	prince	_	NN	NN	_	15	nsubj	_	_
15	came	_	VBD	VBD	_	9	rcmod	_	_
16	is	_	VBZ	VBZ	_	18	cop	_	_
17	the	_	DT	DT	_	18	det	_	_
18	asteroid	_	NN	NN	_	6	ccomp	_	_
19	known	_	VBN	VBN	_	18	vmod	_	_
20	as	_	IN	IN	_	19	prep	_	_
21	B-612	_	NN	NN	_	20	pobj	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(a / asteroid, domain, p / planet)
(a / asteroid, name, n4 / name)
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, c2 / come-01)
(c2 / come-01, ARG1, p2 / prince)
(c2 / come-01, ARG3, a / asteroid)
(n4 / name, op, "B-612")
(p2 / prince, mod, l / little)
(r / reason, mod, s / serious)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),known,know-01,false), Span(14,15,List(1),came,come-01,false), Span(13,14,List(2),prince,prince,false), Span(12,13,List(3),little,little,false), Span(8,9,List(4),planet,planet,false), Span(6,7,List(5),that,that,false), Span(5,6,List(6),believe,believe-01,false), Span(3,4,List(7),reason,reason-01,false), Span(2,3,List(8),serious,serious,false), Span(1,2,List(9),have,have-03,false), Span(0,1,List(10),I,i,false)),Map(2 -> prince, 5 -> that, 8 -> serious, 7 -> reason-01, 1 -> come-01, 4 -> planet, 6 -> believe-01, 9 -> have-03, 0 -> know-01, 10 -> i, 3 -> little),Map(h -> have-03, b -> believe-01, t -> that, k -> know-01, p2 -> planet, s -> serious, p -> prince, i -> i, r -> reason-01, l -> little, c -> come-01))),[Ljava.lang.String;@7cc0cdad,Annotation([Ljava.lang.String;@7c7b252e,[Ljava.lang.String;@4d5d943d,[Ljava.lang.String;@368f2016),Annotation([Ljava.lang.String;@4c583ecf,[Ljava.lang.String;@692f203f,[Ledu.cmu.lti.nlp.amr.Dependency;@48f2bd5b),Annotation([Ljava.lang.String;@7b2bbc3,[Ljava.lang.String;@a1153bc,[Ljava.lang.String;@1aafa419),Annotation([Ljava.lang.String;@47eaca72,[Ljava.lang.String;@55141def,[Ledu.cmu.lti.nlp.amr.Entity;@55182842))
AMR:
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, t / that)
(c / come-01, ARG1, p2 / planet)
(c / come-01, ARG2, p / prince)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, r / reason-01)
(k / know-01, ARG0, t / that)
(k / know-01, ARG1, p2 / planet)
(p / prince, mod, l / little)
(r / reason-01, ARG1, b / believe-01)
(r / reason-01, mod, s / serious)

Decoded in 351,040 microseconds
Sentence: This asteroid has only once been seen through the telescope .


--- Decoder1 ---

Sentence: This asteroid has only once been seen through the telescope .
word = This
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false)))
concept = PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false))
word = asteroid
Finding date entities
Possible invoked concepts: List()
word = has
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)))
concept = PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
score = 0
adding concept:PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
word = only
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)))
concept = PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
score = 0
adding concept:PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
word = once
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false)), PhraseConceptPair(List(once),once-more,PhraseConceptFeatures(1.0,-3.258096538021482,false,false)))
concept = PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
score = 0
adding concept:PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
concept = PhraseConceptPair(List(once),once-more,PhraseConceptFeatures(1.0,-3.258096538021482,false,false))
score = 0
word = been
Finding date entities
Possible invoked concepts: List()
word = seen
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(seen),see-01,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(seen),see-01,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(seen),see-01,PhraseConceptFeatures(7.0,0.0,false,false))
word = through
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = telescope
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false)),0)), None, Some((0.014562515980757347,PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)),2)), Some((0.02893032846730732,PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)),3)), Some((0.013100333856746589,PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false)),4)), None, Some((0.029773585223834276,PhraseConceptPair(List(seen),see-01,PhraseConceptFeatures(7.0,0.0,false,false)),6)), Some((0.01866307480060534,PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)),7)), None, None, None)
Adding concept: through
nodeIds = List(0)
concepts = List(through)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.018663074800605334
Adding concept: see-01
nodeIds = List(1)
concepts = List(see-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(seen),see-01,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04843666002443961
Adding concept: once
nodeIds = List(2)
concepts = List(once)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
feats:
bias 1.0
c|p -1.6486586255873816
len 1.0

score:
0.06153699388118619
Adding concept: only
nodeIds = List(3)
concepts = List(only)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
feats:
bias 1.0
c|p -0.08338160893905101
len 1.0

score:
0.09046732234849351
Adding concept: have-03
nodeIds = List(4)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
feats:
bias 1.0
c|p -1.5040773967762742
len 1.0

score:
0.10502983832925085
Adding concept: this
nodeIds = List(5)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1348034235530851
Decoder1 Spans:
Span 1:  has => have-03
Span 2:  once => once
Span 3:  only => only
Span 4:  seen => see-01
Span 5:  This => this
Span 6:  through => through
Decoder1 feats:
bias 6.0
c|p -4.334729919970816
len 6.0

Concepts:
id = 2 concept = once
id = 5 concept = this
id = 1 concept = see-01
id = 4 concept = have-03
id = 0 concept = through
id = 3 concept = only
Spans:
Span 2-3:  has => have-03
Span 4-5:  once => once
Span 3-4:  only => only
Span 6-7:  seen => see-01
Span 0-1:  This => this
Span 7-8:  through => through

rootDependencyPaths = List(List(6, 1, 0), List(6, 1), List(6, 2), List(6, 4, 3), List(6, 4), List(6, 5), List(6), List(6, 7), List(6, 7, 9, 8), List(6, 7, 9), List(6, 10))
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -218.49491258950508
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -220.49491258950508
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -222.49491258950508
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -224.49491258950508
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -226.49491258950508
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -228.49491258950508
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -230.49491258950508
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -232.49491258950508
getNodeById = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
getNodeById2 = Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only)
Node = 1
Node = 2
Node = 0
Node = 4
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -233.5678384949323
Langrangian relaxation converged after 9 iterations. Delta = 0.0
Node.spans:
this List()
1 List()
telescope List()
asteroid List()
see-01 List()
only List()
have-frequency-91 List()
clearUnalignedNodes():  removing unaligned node: None / 1
OracleGraph nodes = List(this, telescope, asteroid, see-01, only, have-frequency-91)
OracleGraph triples: (a / asteroid, mod, t / this)
(h / have-frequency-91, ARG1, s / see-01)
(h / have-frequency-91, mod, o / only)
(s / see-01, ARG1, a / asteroid)
(s / see-01, instrument, t2 / telescope)
rootDependencyPaths = List(List(6, 1, 0), List(6, 1), List(6, 2), List(6, 4, 3), List(6, 4), List(6, 5), List(6), List(6, 7), List(6, 7, 9, 8), List(6, 7, 9), List(6, 10))
Oracle Span 1-2:  asteroid => asteroid
Oracle Span 2-3:  has => have-frequency-91
Oracle Span 3-4:  only => only
Oracle Span 6-7:  seen => see-01
Oracle Span 9-10:  telescope => telescope
Oracle Span 0-1:  This => this

Extra span: through => through
Extra span: once => once
Incorrect span: has => have-03
Missing span: telescope => telescope
Missing span: asteroid => asteroid
Missing span: has => have-frequency-91
Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	asteroid	_	NN	NN	_	7	nsubjpass	_	_
3	has	_	VBZ	VBZ	_	7	aux	_	_
4	only	_	RB	RB	_	5	advmod	_	_
5	once	_	RB	RB	_	7	advmod	_	_
6	been	_	VBN	VBN	_	7	auxpass	_	_
7	seen	_	VBN	VBN	_	0	root	_	_
8	through	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	telescope	_	NN	NN	_	8	pobj	_	_
11	.	_	.	.	_	7	punct	_	_

Oracle:
(a / asteroid, mod, t / this)
(h / have-frequency-91, ARG1, s / see-01)
(h / have-frequency-91, mod, o / only)
(s / see-01, ARG1, a / asteroid)
(s / see-01, instrument, t2 / telescope)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),through,through,false), Span(6,7,List(1),seen,see-01,false), Span(4,5,List(2),once,once,false), Span(3,4,List(3),only,only,false), Span(2,3,List(4),has,have-03,false), Span(0,1,List(5),This,this,false)),Map(2 -> once, 5 -> this, 1 -> see-01, 4 -> have-03, 0 -> through, 3 -> only),Map(h -> have-03, t -> through, s -> see-01, o2 -> only, t2 -> this, o -> once))),[Ljava.lang.String;@3270d194,Annotation([Ljava.lang.String;@235834f2,[Ljava.lang.String;@5656be13,[Ljava.lang.String;@4218d6a3),Annotation([Ljava.lang.String;@76505305,[Ljava.lang.String;@14cd1699,[Ledu.cmu.lti.nlp.amr.Dependency;@77888435),Annotation([Ljava.lang.String;@73a1e9a9,[Ljava.lang.String;@71d44a3,[Ljava.lang.String;@7b98f307),Annotation([Ljava.lang.String;@4802796d,[Ljava.lang.String;@34123d65,[Ledu.cmu.lti.nlp.amr.Entity;@59474f18))
AMR:
(h / have-03, ARG1, s / see-01)
(o / once, mod, o2 / only)
(s / see-01, ARG1, t2 / this)
(s / see-01, ARG2, t / through)
(s / see-01, mod, o / once)

Decoded in 50,274 microseconds
Sentence: That was by a Turkish astronomer , in 1909 .


--- Decoder1 ---

Sentence: That was by a Turkish astronomer , in 1909 .
word = That
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false)))
concept = PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
score = 0
adding concept:PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = by
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)))
concept = PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
score = 0
adding concept:PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = Turkish
NER Entity: (thing :name (name :op "Turkish"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Turkish),(thing :name (name :op "Turkish")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(Turkish),(thing :name (name :op "Turkish")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = astronomer
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = 1909
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(1909),(date-entity :year 1909),PhraseConceptFeatures(0.0,0.0,false,true)))
concept = PhraseConceptPair(List(1909),(date-entity :year 1909),PhraseConceptFeatures(0.0,0.0,false,true))
score = 0
adding concept:PhraseConceptPair(List(1909),(date-entity :year 1909),PhraseConceptFeatures(0.0,0.0,false,true))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.0293031179589661,PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false)),0)), None, Some((0.008432529785513981,PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)),2)), None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(1909),(date-entity :year 1909),PhraseConceptFeatures(0.0,0.0,false,true)),8)), None)
Adding concept: (date-entity :year 1909)
nodeIds = List(0, 1)
concepts = List(date-entity, 1909)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(1909),(date-entity :year 1909),PhraseConceptFeatures(0.0,0.0,false,true))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: by
nodeIds = List(2)
concepts = List(by)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
feats:
bias 1.0
c|p -2.1102132003465894
len 1.0

score:
0.03820611500934826
Adding concept: that
nodeIds = List(3)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
feats:
bias 1.0
c|p -0.04652001563489282
len 1.0

score:
0.06750923296831436
Decoder1 Spans:
Span 1:  1909 => (date-entity :year 1909)
Span 2:  by => by
Span 3:  That => that
Decoder1 feats:
bias 3.0
c|p -2.156733215981482
len 3.0

Concepts:
id = 2 concept = by
id = 1 concept = 1909
id = 0 concept = date-entity
id = 3 concept = that
Spans:
Span 8-9:  1909 => (date-entity :year 1909)
Span 2-3:  by => by
Span 0-1:  That => that

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 5, 3), List(1, 2, 5, 4), List(1, 2, 5), List(1, 6), List(1, 7), List(1, 7, 8), List(1, 9))
getNodeById = Map(2 -> by, 1 -> 1909, 0 -> date-entity, 3 -> that)
getNodeById2 = Map(2 -> by, 1 -> 1909, 0 -> date-entity, 3 -> that)
getNodeById = Map(2 -> by, 1 -> 1909, 0 -> date-entity, 3 -> that)
getNodeById2 = Map(2 -> by, 1 -> 1909, 0 -> date-entity, 3 -> that)
Node = 0
Node = 1
Node = 2
Node = 3
visited = Set(3, 0, 1, 2)
Alg2 returning score = -317.45924754315246
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
country List()
"Turkey" List()
date-entity List()
"Turkey" List()
1909 List()
astronomer List()
see-01 List()
name List()
clearUnalignedNodes():  removing unaligned node: None / "Turkey"
clearUnalignedNodes():  removing unaligned node: Some(s) / see-01
OracleGraph nodes = List(country, date-entity, "Turkey", 1909, astronomer, name)
OracleGraph triples: (a / astronomer, mod, c / country)
(c / country, name, n / name)
(d / date-entity, year, 1909)
(n / name, op, "Turkey")
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 5, 3), List(1, 2, 5, 4), List(1, 2, 5), List(1, 6), List(1, 7), List(1, 7, 8), List(1, 9))
Oracle Span 8-9:  1909 => (date-entity :year 1909)
Oracle Span 5-6:  astronomer => astronomer
Oracle Span 4-5:  Turkish => (country :name (name :op "Turkey"))

Extra span: by => by
Extra span: That => that
Missing span: Turkish => (country :name (name :op "Turkey"))
Missing span: astronomer => astronomer
Dependencies:
1	That	_	DT	DT	_	2	nsubj	_	_
2	was	_	VBD	VBD	_	0	root	_	_
3	by	_	IN	IN	_	2	prep	_	_
4	a	_	DT	DT	_	6	det	_	_
5	Turkish	_	JJ	JJ	_	6	amod	_	_
6	astronomer	_	NN	NN	_	3	pobj	_	_
7	,	_	,	,	_	2	punct	_	_
8	in	_	IN	IN	_	2	prep	_	_
9	1909	_	CD	CD	_	8	pobj	_	_
10	.	_	.	.	_	2	punct	_	_

Oracle:
(a / astronomer, mod, c / country)
(c / country, name, n / name)
(d / date-entity, year, 1909)
(n / name, op, "Turkey")

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(1, 0),1909,(date-entity :year 1909),false), Span(2,3,List(2),by,by,false), Span(0,1,List(3),That,that,false)),Map(2 -> by, 1 -> 1909, 0 -> date-entity, 3 -> that),Map(t -> that, b -> by, d -> date-entity, 1 -> 1909))),[Ljava.lang.String;@1bb5a082,Annotation([Ljava.lang.String;@78691363,[Ljava.lang.String;@41d477ed,[Ljava.lang.String;@3590fc5b),Annotation([Ljava.lang.String;@397fbdb,[Ljava.lang.String;@33d512c1,[Ledu.cmu.lti.nlp.amr.Dependency;@515c6049),Annotation([Ljava.lang.String;@639c2c1d,[Ljava.lang.String;@5fe94a96,[Ljava.lang.String;@443118b0),Annotation([Ljava.lang.String;@765d7657,[Ljava.lang.String;@74235045,[Ledu.cmu.lti.nlp.amr.Entity;@618b19ad))
AMR:
(b / by, mod, t / that)
(b / by, poss, d / date-entity)
(d / date-entity, year, 1 / 1909)

Decoded in 17,510 microseconds
Sentence: On making his discovery , the astronomer had presented it to the International Astronomical Congress , in a great demonstration .


--- Decoder1 ---

Sentence: On making his discovery , the astronomer had presented it to the International Astronomical Congress , in a great demonstration .
word = On
Finding date entities
Possible invoked concepts: List()
word = making
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(making),make-02,PhraseConceptFeatures(2.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(making),make-02,PhraseConceptFeatures(2.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(making),make-02,PhraseConceptFeatures(2.0,-0.6931471805599453,false,false))
word = his
Finding date entities
Possible invoked concepts: List()
word = discovery
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(discovery),(thing :ARG1-of discover-01),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(discovery),discover-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(discovery),(thing :ARG1-of discover-01),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(discovery),(thing :ARG1-of discover-01),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(discovery),discover-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(discovery),discover-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = astronomer
Finding date entities
Possible invoked concepts: List()
word = had
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false)), PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false)))
concept = PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
word = presented
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = International
NER Entity: (organization :name (name :op "International" :op "Astronomical" :op "Congress"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(International, Astronomical, Congress),(organization :name (name :op "International" :op "Astronomical" :op "Congress")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(International, Astronomical, Congress),(organization :name (name :op "International" :op "Astronomical" :op "Congress")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
adding concept:PhraseConceptPair(List(International, Astronomical, Congress),(organization :name (name :op "International" :op "Astronomical" :op "Congress")),PhraseConceptFeatures(0.0,0.0,true,false))
word = Astronomical
Finding date entities
Possible invoked concepts: List()
word = Congress
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = great
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
word = demonstration
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.022763633620453336,PhraseConceptPair(List(making),make-02,PhraseConceptFeatures(2.0,-0.6931471805599453,false,false)),1)), None, Some((0.015753682017072397,PhraseConceptPair(List(discovery),discover-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),3)), None, None, None, None, None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),9)), None, None, None, None, Some((0.10269444443347664,PhraseConceptPair(List(International, Astronomical, Congress),(organization :name (name :op "International" :op "Astronomical" :op "Congress")),PhraseConceptFeatures(0.0,0.0,true,false)),12)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)),18)), None, None)
Adding concept: great
nodeIds = List(0)
concepts = List(great)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: (organization :name (name :op "International" :op "Astronomical" :op "Congress"))
nodeIds = List(1, 2, 3, 4, 5)
concepts = List(organization, name, "International", "Astronomical", "Congress")
Finding date entities
Adding concept: it
nodeIds = List(6)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.04869270464764677
Adding concept: discover-01
nodeIds = List(7)
concepts = List(discover-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(discovery),discover-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.06444638666471916
Adding concept: make-02
nodeIds = List(8)
concepts = List(make-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(making),make-02,PhraseConceptFeatures(2.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.0872100202851725
Decoder1 Spans:
Span 1:  discovery => discover-01
Span 2:  great => great
Span 3:  International Astronomical Congress => (organization :name (name :op "International" :op "Astronomical" :op "Congress"))
Span 4:  it => it
Span 5:  making => make-02
Decoder1 feats:
bias 4.0
c|p -3.152736022363656
len 4.0

Concepts:
id = 2 concept = name
id = 5 concept = "Congress"
id = 8 concept = make-02
id = 7 concept = discover-01
id = 1 concept = organization
id = 4 concept = "Astronomical"
id = 6 concept = it
id = 0 concept = great
id = 3 concept = "International"
Spans:
Span 3-4:  discovery => discover-01
Span 18-19:  great => great
Span 12-15:  International Astronomical Congress => (organization :name (name :op "International" :op "Astronomical" :op "Congress"))
Span 9-10:  it => it
Span 1-2:  making => make-02

rootDependencyPaths = List(List(8, 0), List(8, 0, 1), List(8, 0, 1, 3, 2), List(8, 0, 1, 3), List(8, 4), List(8, 6, 5), List(8, 6), List(8, 7), List(8), List(8, 9), List(8, 10), List(8, 10, 14, 11), List(8, 10, 14, 12), List(8, 10, 14, 13), List(8, 10, 14), List(8, 15), List(8, 16), List(8, 16, 19, 17), List(8, 16, 19, 18), List(8, 16, 19), List(8, 20))
getNodeById = Map(2 -> name, 5 -> "Congress", 8 -> make-02, 7 -> discover-01, 1 -> organization, 4 -> "Astronomical", 6 -> it, 0 -> great, 3 -> "International")
getNodeById2 = Map(2 -> name, 5 -> "Congress", 8 -> make-02, 7 -> discover-01, 1 -> organization, 4 -> "Astronomical", 6 -> it, 0 -> great, 3 -> "International")
getNodeById = Map(2 -> name, 5 -> "Congress", 8 -> make-02, 7 -> discover-01, 1 -> organization, 4 -> "Astronomical", 6 -> it, 0 -> great, 3 -> "International")
getNodeById2 = Map(2 -> name, 5 -> "Congress", 8 -> make-02, 7 -> discover-01, 1 -> organization, 4 -> "Astronomical", 6 -> it, 0 -> great, 3 -> "International")
Node = 8
Node = 7
Node = 1
Node = 0
Node = 6
Node = 2
Node = 3
Node = 4
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -783.4566837390809
getNodeById = Map(2 -> name, 5 -> "Congress", 8 -> make-02, 7 -> discover-01, 1 -> organization, 4 -> "Astronomical", 6 -> it, 0 -> great, 3 -> "International")
getNodeById2 = Map(2 -> name, 5 -> "Congress", 8 -> make-02, 7 -> discover-01, 1 -> organization, 4 -> "Astronomical", 6 -> it, 0 -> great, 3 -> "International")
Node = 8
Node = 7
Node = 1
Node = 0
Node = 6
Node = 2
Node = 3
Node = 4
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -785.1127216035293
Langrangian relaxation converged after 2 iterations. Delta = 0.0
Node.spans:
"International" List()
organization List()
name List()
discover-01 List()
"Congress" List()
it List()
"International_Astronautical_Congress" List()
astronomer List()
demonstrate-01 List()
present-01 List()
"Astronomical" List()
on List()
great List()
clearUnalignedNodes():  removing unaligned node: None / "International_Astronautical_Congress"
OracleGraph nodes = List("International", organization, name, discover-01, "Congress", it, astronomer, demonstrate-01, present-01, "Astronomical", on, great)
OracleGraph triples: (d2 / demonstrate-01, ARG0, a / astronomer)
(d2 / demonstrate-01, mod, g / great)
(d3 / discover-01, ARG0, a / astronomer)
(n / name, op, "Astronomical")
(n / name, op, "Congress")
(n / name, op, "International")
(o / organization, name, n / name)
(o2 / on, op, d3 / discover-01)
(p / present-01, ARG0, a / astronomer)
(p / present-01, ARG1, i / it)
(p / present-01, ARG2, o / organization)
(p / present-01, manner, d2 / demonstrate-01)
(p / present-01, time, o2 / on)
rootDependencyPaths = List(List(8, 0), List(8, 0, 1), List(8, 0, 1, 3, 2), List(8, 0, 1, 3), List(8, 4), List(8, 6, 5), List(8, 6), List(8, 7), List(8), List(8, 9), List(8, 10), List(8, 10, 14, 11), List(8, 10, 14, 12), List(8, 10, 14, 13), List(8, 10, 14), List(8, 15), List(8, 16), List(8, 16, 19, 17), List(8, 16, 19, 18), List(8, 16, 19), List(8, 20))
Oracle Span 6-7:  astronomer => astronomer
Oracle Span 19-20:  demonstration => demonstrate-01
Oracle Span 3-4:  discovery => discover-01
Oracle Span 18-19:  great => great
Oracle Span 12-15:  International Astronomical Congress => (organization :name (name :op "Congress" :op "Astronomical" :op "International"))
Oracle Span 9-10:  it => it
Oracle Span 0-1:  On => on
Oracle Span 8-9:  presented => present-01

Incorrect span: International Astronomical Congress => (organization :name (name :op "International" :op "Astronomical" :op "Congress"))
Extra span: making => make-02
Missing span: International Astronomical Congress => (organization :name (name :op "Congress" :op "Astronomical" :op "International"))
Missing span: presented => present-01
Missing span: On => on
Missing span: astronomer => astronomer
Missing span: demonstration => demonstrate-01
Dependencies:
1	On	_	IN	IN	_	9	prep	_	_
2	making	_	VBG	VBG	_	1	pcomp	_	_
3	his	_	PRP$	PRP$	_	4	poss	_	_
4	discovery	_	NN	NN	_	2	dobj	_	_
5	,	_	,	,	_	9	punct	_	_
6	the	_	DT	DT	_	7	det	_	_
7	astronomer	_	NN	NN	_	9	nsubj	_	_
8	had	_	VBD	VBD	_	9	aux	_	_
9	presented	_	VBN	VBN	_	0	root	_	_
10	it	_	PRP	PRP	_	9	dobj	_	_
11	to	_	TO	TO	_	9	prep	_	_
12	the	_	DT	DT	_	15	det	_	_
13	International	_	NNP	NNP	_	15	nn	_	_
14	Astronomical	_	NNP	NNP	_	15	nn	_	_
15	Congress	_	NNP	NNP	_	11	pobj	_	_
16	,	_	,	,	_	9	punct	_	_
17	in	_	IN	IN	_	9	prep	_	_
18	a	_	DT	DT	_	20	det	_	_
19	great	_	JJ	JJ	_	20	amod	_	_
20	demonstration	_	NN	NN	_	17	pobj	_	_
21	.	_	.	.	_	9	punct	_	_

Oracle:
(d2 / demonstrate-01, ARG0, a / astronomer)
(d2 / demonstrate-01, mod, g / great)
(d3 / discover-01, ARG0, a / astronomer)
(n / name, op, "Astronomical")
(n / name, op, "Congress")
(n / name, op, "International")
(o / organization, name, n / name)
(o2 / on, op, d3 / discover-01)
(p / present-01, ARG0, a / astronomer)
(p / present-01, ARG1, i / it)
(p / present-01, ARG2, o / organization)
(p / present-01, manner, d2 / demonstrate-01)
(p / present-01, time, o2 / on)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),great,great,false), Span(12,15,List(5, 4, 3, 2, 1),International Astronomical Congress,(organization :name (name :op "International" :op "Astronomical" :op "Congress")),false), Span(9,10,List(6),it,it,false), Span(3,4,List(7),discovery,discover-01,false), Span(1,2,List(8),making,make-02,false)),Map(2 -> name, 5 -> "Congress", 8 -> make-02, 7 -> discover-01, 1 -> organization, 4 -> "Astronomical", 6 -> it, 0 -> great, 3 -> "International"),Map(n -> name, m -> make-02, d -> discover-01, g -> great, i -> it, o -> organization))),[Ljava.lang.String;@2d3379b4,Annotation([Ljava.lang.String;@30c15d8b,[Ljava.lang.String;@5e0e82ae,[Ljava.lang.String;@6771beb3),Annotation([Ljava.lang.String;@51399530,[Ljava.lang.String;@6b2ea799,[Ledu.cmu.lti.nlp.amr.Dependency;@411f53a0),Annotation([Ljava.lang.String;@2b71e916,[Ljava.lang.String;@36fc695d,[Ljava.lang.String;@28701274),Annotation([Ljava.lang.String;@13c9d689,[Ljava.lang.String;@3754a4bf,[Ledu.cmu.lti.nlp.amr.Entity;@62379589))
AMR:
(d / discover-01, ARG0, i / it)
(d / discover-01, ARG1, g / great)
(m / make-02, ARG0, o / organization)
(m / make-02, ARG1, d / discover-01)
(n / name, op, "Astronomical")
(n / name, op, "Congress")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 67,537 microseconds
Sentence: But he was in Turkish costume , and so nobody would believe what he said .


--- Decoder1 ---

Sentence: But he was in Turkish costume , and so nobody would believe what he said .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = Turkish
NER Entity: (thing :name (name :op "Turkish"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Turkish),(thing :name (name :op "Turkish")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(Turkish),(thing :name (name :op "Turkish")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = costume
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = nobody
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(nobody),nobody,PhraseConceptFeatures(7.0,-0.13353139262452263,false,false)))
concept = PhraseConceptPair(List(nobody),nobody,PhraseConceptFeatures(7.0,-0.13353139262452263,false,false))
score = 0
adding concept:PhraseConceptPair(List(nobody),nobody,PhraseConceptFeatures(7.0,-0.13353139262452263,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = believe
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false))
word = what
Finding date entities
Possible invoked concepts: List()
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),1)), None, None, None, None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),7)), Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),8)), Some((0.028423152550828532,PhraseConceptPair(List(nobody),nobody,PhraseConceptFeatures(7.0,-0.13353139262452263,false,false)),9)), None, Some((0.029773585223834276,PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false)),11)), None, Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),13)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),14)), None)
Adding concept: say-01
nodeIds = List(0)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: he
nodeIds = List(1)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.055392385104254774
Adding concept: believe-01
nodeIds = List(2)
concepts = List(believe-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(believe),believe-01,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08516597032808905
Adding concept: nobody
nodeIds = List(3)
concepts = List(nobody)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(nobody),nobody,PhraseConceptFeatures(7.0,-0.13353139262452263,false,false))
feats:
bias 1.0
c|p -0.13353139262452263
len 1.0

score:
0.11358912287891758
Adding concept: so
nodeIds = List(4)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.1388943552086917
Adding concept: and
nodeIds = List(5)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.15785229703110024
Adding concept: he
nodeIds = List(6)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.18347109691152075
Adding concept: contrast-01
nodeIds = List(7)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.20417943812351566
Decoder1 Spans:
Span 1:  and => and
Span 2:  believe => believe-01
Span 3:  But => contrast-01
Span 4:  he => he
Span 5:  he => he
Span 6:  nobody => nobody
Span 7:  said => say-01
Span 8:  so => so
Decoder1 feats:
bias 8.0
c|p -3.362849373952529
len 8.0

Concepts:
id = 2 concept = believe-01
id = 5 concept = and
id = 7 concept = contrast-01
id = 1 concept = he
id = 4 concept = so
id = 6 concept = he
id = 0 concept = say-01
id = 3 concept = nobody
Spans:
Span 7-8:  and => and
Span 11-12:  believe => believe-01
Span 0-1:  But => contrast-01
Span 13-14:  he => he
Span 1-2:  he => he
Span 9-10:  nobody => nobody
Span 14-15:  said => say-01
Span 8-9:  so => so

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 3, 5, 4), List(2, 3, 5), List(2, 6), List(2, 7), List(2, 8), List(2, 11, 9), List(2, 11, 10), List(2, 11), List(2, 11, 14, 12), List(2, 11, 14, 13), List(2, 11, 14), List(2, 15))
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 163.34230915175687
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 155.34230915175687
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 147.34230915175687
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 139.3423091517568
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 134.20165152123388
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 130.20165152123388
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 128.00148625266286
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 124.13472331773198
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 122.13472331773198
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 120.13472331773198
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 118.13472331773198
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 1
Node = 3
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 117.02721635592786
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 115.13472331773198
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 1
Node = 3
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 114.02721635592786
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 112.13472331773198
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 1
Node = 3
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 111.02721635592786
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 109.40861801332403
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 1
Node = 3
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 107.02721635592786
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 105.40861801332403
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 1
Node = 3
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 103.02721635592786
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 101.40861801332403
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 1
Node = 3
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 99.02721635592786
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 97.40861801332403
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 0
Node = 2
Node = 1
Node = 3
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 95.02721635592786
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 4
Node = 0
Node = 2
Node = 6
Node = 1
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 93.45810247959977
getNodeById = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
getNodeById2 = Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody)
Node = 7
Node = 5
Node = 4
Node = 0
Node = 2
Node = 1
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 92.35059551779565
Langrangian relaxation converged after 26 iterations. Delta = 0.0
Node.spans:
he List()
thing List()
cause-01 List()
name List()
believe-01 List()
say-01 List()
somebody List()
costume-01 List()
country List()
contrast-01 List()
"Turkey" List()
"Turkey" List()
- List()
clearUnalignedNodes():  removing unaligned node: Some(c3) / cause-01
clearUnalignedNodes():  removing unaligned node: Some(s) / somebody
clearUnalignedNodes():  removing unaligned node: None / "Turkey"
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(he, thing, name, believe-01, say-01, costume-01, country, contrast-01, "Turkey")
OracleGraph triples: (b2 / believe-01, ARG1, t / thing)
(c / costume-01, ARG1, h / he)
(c / costume-01, manner, c2 / country)
(c2 / country, name, n / name)
(c4 / contrast-01, ARG2, c / costume-01)
(n / name, op, "Turkey")
(s2 / say-01, ARG0, h / he)
(s2 / say-01, ARG1, t / thing)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 3, 5, 4), List(2, 3, 5), List(2, 6), List(2, 7), List(2, 8), List(2, 11, 9), List(2, 11, 10), List(2, 11), List(2, 11, 14, 12), List(2, 11, 14, 13), List(2, 11, 14), List(2, 15))
Oracle Span 11-12:  believe => believe-01
Oracle Span 0-1:  But => contrast-01
Oracle Span 5-6:  costume => costume-01
Oracle Span 1-2:  he => he
Oracle Span 14-15:  said => (thing :ARG1-of say-01)
Oracle Span 4-5:  Turkish => (country :name (name :op "Turkey"))

Incorrect span: said => say-01
Extra span: he => he
Extra span: nobody => nobody
Extra span: so => so
Extra span: and => and
Missing span: Turkish => (country :name (name :op "Turkey"))
Missing span: costume => costume-01
Missing span: said => (thing :ARG1-of say-01)
Dependencies:
1	But	_	CC	CC	_	3	cc	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	was	_	VBD	VBD	_	0	root	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Turkish	_	JJ	JJ	_	6	amod	_	_
6	costume	_	NN	NN	_	4	pobj	_	_
7	,	_	,	,	_	3	punct	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	so	_	IN	IN	_	3	conj	_	_
10	nobody	_	NN	NN	_	12	nsubj	_	_
11	would	_	MD	MD	_	12	aux	_	_
12	believe	_	VB	VB	_	3	ccomp	_	_
13	what	_	WP	WP	_	15	dobj	_	_
14	he	_	PRP	PRP	_	15	nsubj	_	_
15	said	_	VBD	VBD	_	12	ccomp	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(b2 / believe-01, ARG1, t / thing)
(c / costume-01, ARG1, h / he)
(c / costume-01, manner, c2 / country)
(c2 / country, name, n / name)
(c4 / contrast-01, ARG2, c / costume-01)
(n / name, op, "Turkey")
(s2 / say-01, ARG0, h / he)
(s2 / say-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),said,say-01,false), Span(13,14,List(1),he,he,false), Span(11,12,List(2),believe,believe-01,false), Span(9,10,List(3),nobody,nobody,false), Span(8,9,List(4),so,so,false), Span(7,8,List(5),and,and,false), Span(1,2,List(6),he,he,false), Span(0,1,List(7),But,contrast-01,false)),Map(2 -> believe-01, 5 -> and, 7 -> contrast-01, 1 -> he, 4 -> so, 6 -> he, 0 -> say-01, 3 -> nobody),Map(n -> nobody, h -> he, h2 -> he, s2 -> so, b -> believe-01, s -> say-01, a -> and, c -> contrast-01))),[Ljava.lang.String;@4afcd809,Annotation([Ljava.lang.String;@175c2241,[Ljava.lang.String;@5bf0d49,[Ljava.lang.String;@5b7a5baa),Annotation([Ljava.lang.String;@776aec5c,[Ljava.lang.String;@1d296da,[Ledu.cmu.lti.nlp.amr.Dependency;@7c7a06ec),Annotation([Ljava.lang.String;@75d4a5c2,[Ljava.lang.String;@557caf28,[Ljava.lang.String;@408d971b),Annotation([Ljava.lang.String;@6c6cb480,[Ljava.lang.String;@3c46e67a,[Ledu.cmu.lti.nlp.amr.Entity;@c730b35))
AMR:
(a / and, op, s / say-01)
(b / believe-01, ARG0, h2 / he)
(b / believe-01, ARG1, n / nobody)
(c / contrast-01, ARG0, s2 / so)
(c / contrast-01, ARG2, a / and)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, b / believe-01)

Decoded in 203,107 microseconds
Sentence: Grown - ups are like that ...


--- Decoder1 ---

Sentence: Grown - ups are like that ...
word = Grown
Finding date entities
Possible invoked concepts: List()
word = -
Finding date entities
Possible invoked concepts: List()
word = ups
Finding date entities
Possible invoked concepts: List()
word = are
Finding date entities
Possible invoked concepts: List()
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = ...
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),5)), None)
Adding concept: that
nodeIds = List(0)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.016617808389215782
Decoder1 Spans:
Span 1:  that => that
Decoder1 feats:
bias 1.0
c|p -1.300849155163006
len 1.0

Concepts:
id = 0 concept = that
Spans:
Span 5-6:  that => that

rootDependencyPaths = List(List(3, 2, 0), List(3, 2, 1), List(3, 2), List(3), List(3, 4), List(3, 4, 5), List(3, 6))
getNodeById = Map(0 -> that)
getNodeById2 = Map(0 -> that)
getNodeById = Map(0 -> that)
getNodeById2 = Map(0 -> that)
Node = 0
visited = Set(0)
Alg2 returning score = -10.850506005225908
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
that List()
grown-up List()
resemble-01 List()
clearUnalignedNodes():  removing unaligned node: Some(r) / resemble-01
OracleGraph nodes = List(that, grown-up)
OracleGraph triples: 
rootDependencyPaths = List(List(3, 2, 0), List(3, 2, 1), List(3, 2), List(3), List(3, 4), List(3, 4, 5), List(3, 6))
Oracle Span 0-1:  Grown => grown-up
Oracle Span 5-6:  that => that

Missing span: Grown => grown-up
Dependencies:
1	Grown	_	NNP	NNP	_	3	nn	_	_
2	-	_	NNP	NNP	_	3	nn	_	_
3	ups	_	NNS	NNS	_	4	nsubj	_	_
4	are	_	VBP	VBP	_	0	root	_	_
5	like	_	IN	IN	_	4	prep	_	_
6	that	_	DT	DT	_	5	pobj	_	_
7	...	_	:	:	_	4	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),that,that,false)),Map(0 -> that),Map(t -> that))),[Ljava.lang.String;@206a70ef,Annotation([Ljava.lang.String;@292b08d6,[Ljava.lang.String;@22555ebf,[Ljava.lang.String;@36ebc363),Annotation([Ljava.lang.String;@45752059,[Ljava.lang.String;@34e9fd99,[Ledu.cmu.lti.nlp.amr.Dependency;@3c41ed1d),Annotation([Ljava.lang.String;@54d9d12d,[Ljava.lang.String;@38425407,[Ljava.lang.String;@43bc63a3),Annotation([Ljava.lang.String;@702657cc,[Ljava.lang.String;@6a6cb05c,[Ledu.cmu.lti.nlp.amr.Entity;@40a4337a))
AMR:


Decoded in 11,440 microseconds
Sentence: Fortunately , however , for the reputation of Asteroid B-612 , a Turkish dictator made a law that his subjects , under pain of death , should change to European costume .


--- Decoder1 ---

Sentence: Fortunately , however , for the reputation of Asteroid B - 612 , a Turkish dictator made a law that his subjects , under pain of death , should change to European costume .
word = Fortunately
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = however
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = for
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = reputation
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(reputation),reputation,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(reputation),reputation,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(reputation),reputation,PhraseConceptFeatures(1.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = Asteroid
NER Entity: (person :name (name :op "Asteroid" :op "B" :op "-" :op "612"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Asteroid, B),(person :name (name :op "Asteroid" :op "B" :op "-" :op "612")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(Asteroid, B),(person :name (name :op "Asteroid" :op "B" :op "-" :op "612")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = B
Finding date entities
Possible invoked concepts: List()
word = -
Finding date entities
Possible invoked concepts: List()
word = 612
Finding date entities
Possible invoked concepts: List()
word = ,
NER Entity: (thing :name (name :op "Turkish"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(,),(thing :name (name :op "Turkish")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(,),(thing :name (name :op "Turkish")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = Turkish
Finding date entities
Possible invoked concepts: List()
word = dictator
Finding date entities
Possible invoked concepts: List()
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = law
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = his
Finding date entities
Possible invoked concepts: List()
word = subjects
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(subjects),subject,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(subjects),subject,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(subjects),subject,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = under
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(under),under,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(under),under,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(under),under,PhraseConceptFeatures(7.0,0.0,false,false))
word = pain
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = death
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(death),die-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(death),die-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(death),die-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = should
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)))
concept = PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
word = change
NER Entity: (thing :name (name :op "European"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(change),(thing :name (name :op "European")),PhraseConceptFeatures(0.0,0.0,true,false)), PhraseConceptPair(List(change),change-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(change),(thing :name (name :op "European")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
concept = PhraseConceptPair(List(change),change-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(change),change-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = European
Finding date entities
Possible invoked concepts: List()
word = costume
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(reputation),reputation,PhraseConceptFeatures(1.0,0.0,false,false)),6)), None, None, None, None, None, None, None, None, None, Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),16)), None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),19)), None, Some((0.029773585223834276,PhraseConceptPair(List(subjects),subject,PhraseConceptFeatures(1.0,0.0,false,false)),21)), None, Some((0.029773585223834276,PhraseConceptPair(List(under),under,PhraseConceptFeatures(7.0,0.0,false,false)),23)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(death),die-01,PhraseConceptFeatures(3.0,0.0,false,false)),26)), None, Some((0.012844289233539447,PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)),28)), Some((0.029773585223834276,PhraseConceptPair(List(change),change-01,PhraseConceptFeatures(3.0,0.0,false,false)),29)), None, None, None, None)
Adding concept: change-01
nodeIds = List(0)
concepts = List(change-01)
NER Entity: (thing :name (name :op "European"))
Finding date entities

phraseConceptPair: PhraseConceptPair(List(change),change-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: recommend-01
nodeIds = List(1)
concepts = List(recommend-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
feats:
bias 1.0
c|p -1.6739764335716716
len 1.0

score:
0.04261787445737372
Adding concept: die-01
nodeIds = List(2)
concepts = List(die-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(death),die-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.072391459681208
Adding concept: under
nodeIds = List(3)
concepts = List(under)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(under),under,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10216504490504227
Adding concept: subject
nodeIds = List(4)
concepts = List(subject)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(subjects),subject,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13193863012887655
Adding concept: that
nodeIds = List(5)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.14855643851809233
Adding concept: make-01
nodeIds = List(6)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.1606399765618336
Adding concept: reputation
nodeIds = List(7)
concepts = List(reputation)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(reputation),reputation,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.19041356178566787
Decoder1 Spans:
Span 1:  change => change-01
Span 2:  death => die-01
Span 3:  made => make-01
Span 4:  reputation => reputation
Span 5:  should => recommend-01
Span 6:  subjects => subject
Span 7:  that => that
Span 8:  under => under
Decoder1 feats:
bias 8.0
c|p -4.724025443543937
len 8.0

Concepts:
id = 2 concept = die-01
id = 5 concept = that
id = 7 concept = reputation
id = 1 concept = recommend-01
id = 4 concept = subject
id = 6 concept = make-01
id = 0 concept = change-01
id = 3 concept = under
Spans:
Span 29-30:  change => change-01
Span 26-27:  death => die-01
Span 16-17:  made => make-01
Span 6-7:  reputation => reputation
Span 28-29:  should => recommend-01
Span 21-22:  subjects => subject
Span 19-20:  that => that
Span 23-24:  under => under

rootDependencyPaths = List(List(14, 0), List(14, 1), List(14, 2), List(14, 3), List(14, 4), List(14, 4, 6, 5), List(14, 4, 6), List(14, 4, 6, 7), List(14, 4, 6, 7, 9, 8), List(14, 4, 6, 7, 9), List(14, 10), List(14, 13, 11), List(14, 13, 12), List(14, 13), List(14), List(14, 16, 15), List(14, 16), List(14, 27, 17), List(14, 27, 19, 18), List(14, 27, 19), List(14, 27, 20), List(14, 27, 21), List(14, 27, 21, 22), List(14, 27, 21, 22, 23), List(14, 27, 21, 22, 23, 24), List(14, 27, 25), List(14, 27, 26), List(14, 27), List(14, 27, 28), List(14, 27, 28, 30, 29), List(14, 27, 28, 30), List(14, 31))
getNodeById = Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under)
getNodeById2 = Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under)
getNodeById = Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under)
getNodeById2 = Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under)
Node = 1
Node = 6
Node = 7
Node = 0
Node = 4
Node = 3
Node = 5
Node = 2
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -260.8192861596155
getNodeById = Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under)
getNodeById2 = Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under)
Node = 1
Node = 6
Node = 7
Node = 0
Node = 4
Node = 3
Node = 5
Node = 2
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -262.8192861596155
getNodeById = Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under)
getNodeById2 = Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under)
Node = 1
Node = 6
Node = 0
Node = 7
Node = 4
Node = 3
Node = 5
Node = 2
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -264.317400068871
Langrangian relaxation converged after 3 iterations. Delta = 0.0
Node.spans:
"Asteroid" List()
person List()
die-01 List()
have-org-role-91 List()
subject List()
name List()
"Europe" List()
fortunate-41 List()
"Turkey" List()
name List()
penalize-01 List()
reputation List()
threaten-01 List()
planet List()
dictator List()
"B-612" List()
"Turkey" List()
name List()
make-01 List()
law List()
contrast-01 List()
"Europe" List()
change-01 List()
- List()
costume List()
continent List()
country List()
clearUnalignedNodes():  removing unaligned node: Some(p3) / person
clearUnalignedNodes():  removing unaligned node: None / "Turkey"
clearUnalignedNodes():  removing unaligned node: Some(p) / penalize-01
clearUnalignedNodes():  removing unaligned node: Some(t) / threaten-01
clearUnalignedNodes():  removing unaligned node: Some(c5) / contrast-01
clearUnalignedNodes():  removing unaligned node: None / "Europe"
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List("Asteroid", die-01, have-org-role-91, subject, name, "Europe", fortunate-41, name, reputation, planet, dictator, "B-612", "Turkey", name, make-01, law, change-01, costume, continent, country)
OracleGraph triples: (c / country, name, n / name)
(c2 / change-01, ARG0, s / subject)
(c2 / change-01, ARG3, c3 / costume)
(c3 / costume, mod, c4 / continent)
(c4 / continent, name, n2 / name)
(d2 / die-01, ARG1, s / subject)
(f / fortunate-41, ARG1, r / reputation)
(f / fortunate-41, ARG2, m / make-01)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, d / dictator)
(l / law, topic, c2 / change-01)
(m / make-01, ARG1, l / law)
(n / name, op, "Turkey")
(n2 / name, op, "Europe")
(n3 / name, op, "Asteroid")
(n3 / name, op, "B-612")
(p2 / planet, name, n3 / name)
(r / reputation, poss, p2 / planet)
rootDependencyPaths = List(List(14, 0), List(14, 1), List(14, 2), List(14, 3), List(14, 4), List(14, 4, 6, 5), List(14, 4, 6), List(14, 4, 6, 7), List(14, 4, 6, 7, 9, 8), List(14, 4, 6, 7, 9), List(14, 10), List(14, 13, 11), List(14, 13, 12), List(14, 13), List(14), List(14, 16, 15), List(14, 16), List(14, 27, 17), List(14, 27, 19, 18), List(14, 27, 19), List(14, 27, 20), List(14, 27, 21), List(14, 27, 21, 22), List(14, 27, 21, 22, 23), List(14, 27, 21, 22, 23, 24), List(14, 27, 25), List(14, 27, 26), List(14, 27), List(14, 27, 28), List(14, 27, 28, 30, 29), List(14, 27, 28, 30), List(14, 31))
Oracle Span 8-10:  Asteroid B => (planet :name (name :op "B-612" :op "Asteroid"))
Oracle Span 29-30:  change => change-01
Oracle Span 32-33:  costume => costume
Oracle Span 26-27:  death => die-01
Oracle Span 15-16:  dictator => (have-org-role-91 :ARG2 dictator)
Oracle Span 31-32:  European => (continent :name (name :op "Europe"))
Oracle Span 0-1:  Fortunately => fortunate-41
Oracle Span 18-19:  law => law
Oracle Span 16-17:  made => make-01
Oracle Span 6-7:  reputation => reputation
Oracle Span 21-22:  subjects => subject
Oracle Span 14-15:  Turkish => (country :name (name :op "Turkey"))

Extra span: should => recommend-01
Extra span: under => under
Extra span: that => that
Missing span: Asteroid B => (planet :name (name :op "B-612" :op "Asteroid"))
Missing span: Turkish => (country :name (name :op "Turkey"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: law => law
Missing span: costume => costume
Missing span: dictator => (have-org-role-91 :ARG2 dictator)
Missing span: Fortunately => fortunate-41
Dependencies:
1	Fortunately	_	RB	RB	_	15	advmod	_	_
2	,	_	,	,	_	15	punct	_	_
3	however	_	RB	RB	_	15	advmod	_	_
4	,	_	,	,	_	15	punct	_	_
5	for	_	IN	IN	_	15	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	reputation	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	Asteroid	_	NNP	NNP	_	10	nn	_	_
10	B-612	_	NNP	NNP	_	8	pobj	_	_
11	,	_	,	,	_	15	punct	_	_
12	a	_	DT	DT	_	14	det	_	_
13	Turkish	_	JJ	JJ	_	14	amod	_	_
14	dictator	_	NN	NN	_	15	nsubj	_	_
15	made	_	VBD	VBD	_	0	root	_	_
16	a	_	DT	DT	_	17	det	_	_
17	law	_	NN	NN	_	15	dobj	_	_
18	that	_	IN	IN	_	28	mark	_	_
19	his	_	PRP$	PRP$	_	20	poss	_	_
20	subjects	_	NNS	NNS	_	28	nsubj	_	_
21	,	_	,	,	_	28	punct	_	_
22	under	_	IN	IN	_	28	prep	_	_
23	pain	_	NN	NN	_	22	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	death	_	NN	NN	_	24	pobj	_	_
26	,	_	,	,	_	28	punct	_	_
27	should	_	MD	MD	_	28	aux	_	_
28	change	_	VB	VB	_	15	ccomp	_	_
29	to	_	TO	TO	_	28	prep	_	_
30	European	_	JJ	JJ	_	31	amod	_	_
31	costume	_	NN	NN	_	29	pobj	_	_
32	.	_	.	.	_	15	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / change-01, ARG0, s / subject)
(c2 / change-01, ARG3, c3 / costume)
(c3 / costume, mod, c4 / continent)
(c4 / continent, name, n2 / name)
(d2 / die-01, ARG1, s / subject)
(f / fortunate-41, ARG1, r / reputation)
(f / fortunate-41, ARG2, m / make-01)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, d / dictator)
(l / law, topic, c2 / change-01)
(m / make-01, ARG1, l / law)
(n / name, op, "Turkey")
(n2 / name, op, "Europe")
(n3 / name, op, "Asteroid")
(n3 / name, op, "B-612")
(p2 / planet, name, n3 / name)
(r / reputation, poss, p2 / planet)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),change,change-01,false), Span(28,29,List(1),should,recommend-01,false), Span(26,27,List(2),death,die-01,false), Span(23,24,List(3),under,under,false), Span(21,22,List(4),subjects,subject,false), Span(19,20,List(5),that,that,false), Span(16,17,List(6),made,make-01,false), Span(6,7,List(7),reputation,reputation,false)),Map(2 -> die-01, 5 -> that, 7 -> reputation, 1 -> recommend-01, 4 -> subject, 6 -> make-01, 0 -> change-01, 3 -> under),Map(t -> that, s -> subject, m -> make-01, d -> die-01, r2 -> reputation, r -> recommend-01, u -> under, c -> change-01))),[Ljava.lang.String;@6025e1b6,Annotation([Ljava.lang.String;@22ff4249,[Ljava.lang.String;@2d1ef81a,[Ljava.lang.String;@4c402120),Annotation([Ljava.lang.String;@327514f,[Ljava.lang.String;@5b12b668,[Ledu.cmu.lti.nlp.amr.Dependency;@1165b38),Annotation([Ljava.lang.String;@4c12331b,[Ljava.lang.String;@7586beff,[Ljava.lang.String;@3b69e7d1),Annotation([Ljava.lang.String;@815b41f,[Ljava.lang.String;@5542c4ed,[Ledu.cmu.lti.nlp.amr.Entity;@1573f9fc))
AMR:
(c / change-01, ARG0, t / that)
(c / change-01, time, u / under)
(m / make-01, ARG0, s / subject)
(m / make-01, ARG1, r / recommend-01)
(r / recommend-01, ARG0, r2 / reputation)
(r / recommend-01, ARG1, c / change-01)
(u / under, op, d / die-01)

Decoded in 154,318 microseconds
Sentence: So in 1920 the astronomer gave his demonstration all over again , dressed with impressive style and elegance .


--- Decoder1 ---

Sentence: So in 1920 the astronomer gave his demonstration all over again , dressed with impressive style and elegance .
word = So
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = 1920
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(1920),(date-entity :year 1920),PhraseConceptFeatures(0.0,0.0,false,true)))
concept = PhraseConceptPair(List(1920),(date-entity :year 1920),PhraseConceptFeatures(0.0,0.0,false,true))
score = 0
adding concept:PhraseConceptPair(List(1920),(date-entity :year 1920),PhraseConceptFeatures(0.0,0.0,false,true))
word = the
Finding date entities
Possible invoked concepts: List()
word = astronomer
Finding date entities
Possible invoked concepts: List()
word = gave
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(gave),(thing :ARG1-of give-01),PhraseConceptFeatures(1.0,-1.791759469228055,false,false)), PhraseConceptPair(List(gave),give-01,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(gave),(thing :ARG1-of give-01),PhraseConceptFeatures(1.0,-1.791759469228055,false,false))
score = 0
adding concept:PhraseConceptPair(List(gave),(thing :ARG1-of give-01),PhraseConceptFeatures(1.0,-1.791759469228055,false,false))
concept = PhraseConceptPair(List(gave),give-01,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(gave),give-01,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
word = his
Finding date entities
Possible invoked concepts: List()
word = demonstration
Finding date entities
Possible invoked concepts: List()
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = over
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(over),over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)), PhraseConceptPair(List(over),over-and-over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)))
concept = PhraseConceptPair(List(over),over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
concept = PhraseConceptPair(List(over),over-and-over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
word = again
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false)))
concept = PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = dressed
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(dressed),dress-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(dressed),dress-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(dressed),dress-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = with
Finding date entities
Possible invoked concepts: List()
word = impressive
Finding date entities
Possible invoked concepts: List()
word = style
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = elegance
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, Some((0.029773585223834276,PhraseConceptPair(List(1920),(date-entity :year 1920),PhraseConceptFeatures(0.0,0.0,false,true)),2)), None, None, Some((0.01866307480060534,PhraseConceptPair(List(gave),give-01,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)),5)), None, None, Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),8)), None, Some((0.029773585223834276,PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false)),10)), None, Some((0.029773585223834276,PhraseConceptPair(List(dressed),dress-01,PhraseConceptFeatures(1.0,0.0,false,false)),12)), None, None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),16)), None, None)
Adding concept: and
nodeIds = List(0)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.018957941822408536
Adding concept: dress-01
nodeIds = List(1)
concepts = List(dress-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(dressed),dress-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04873152704624281
Adding concept: again
nodeIds = List(2)
concepts = List(again)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07850511227007709
Adding concept: all
nodeIds = List(3)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.09776677729154977
Adding concept: give-01
nodeIds = List(4)
concepts = List(give-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(gave),give-01,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.1164298520921551
Adding concept: (date-entity :year 1920)
nodeIds = List(5, 6)
concepts = List(date-entity, 1920)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(1920),(date-entity :year 1920),PhraseConceptFeatures(0.0,0.0,false,true))
feats:
bias 1.0
len 1.0

score:
0.1462034373159894
Decoder1 Spans:
Span 1:  1920 => (date-entity :year 1920)
Span 2:  again => again
Span 3:  all => all
Span 4:  and => and
Span 5:  dressed => dress-01
Span 6:  gave => give-01
Decoder1 feats:
bias 6.0
c|p -3.207491410322543
len 6.0

Concepts:
id = 2 concept = again
id = 5 concept = date-entity
id = 1 concept = dress-01
id = 4 concept = give-01
id = 6 concept = 1920
id = 0 concept = and
id = 3 concept = all
Spans:
Span 2-3:  1920 => (date-entity :year 1920)
Span 10-11:  again => again
Span 8-9:  all => all
Span 16-17:  and => and
Span 12-13:  dressed => dress-01
Span 5-6:  gave => give-01

rootDependencyPaths = List(List(5, 0), List(5, 1), List(5, 1, 2), List(5, 4, 3), List(5, 4), List(5), List(5, 7, 6), List(5, 7), List(5, 9, 8), List(5, 9), List(5, 9, 10), List(5, 11), List(5, 12), List(5, 12, 13), List(5, 12, 13, 15, 14), List(5, 12, 13, 15), List(5, 12, 13, 15, 16), List(5, 12, 13, 15, 17), List(5, 18))
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 2
Node = 1
Node = 3
Node = 5
Node = 0
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -395.1277135564319
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 3
Node = 2
Node = 5
Node = 1
Node = 6
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -399.4206412228896
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 2
Node = 1
Node = 3
Node = 5
Node = 0
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -403.1277135564319
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 3
Node = 2
Node = 5
Node = 1
Node = 6
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -407.4206412228896
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 2
Node = 1
Node = 3
Node = 5
Node = 0
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -411.1277135564319
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 3
Node = 2
Node = 5
Node = 1
Node = 6
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -415.4206412228896
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 2
Node = 1
Node = 3
Node = 5
Node = 0
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -418.4196479814421
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 3
Node = 2
Node = 5
Node = 1
Node = 6
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -423.70419598594395
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 2
Node = 1
Node = 3
Node = 0
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -425.7032027444964
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 3
Node = 2
Node = 1
Node = 0
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -429.9961304109541
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 2
Node = 1
Node = 3
Node = 0
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -431.70320274449637
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 3
Node = 2
Node = 1
Node = 0
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -433.9961304109541
getNodeById = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
getNodeById2 = Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all)
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -435.93032270739167
Langrangian relaxation converged after 13 iterations. Delta = 0.0
Node.spans:
astronomer List()
dress-01 List()
elegance List()
again List()
date-entity List()
style List()
1920 List()
demonstrate-01 List()
all List()
cause-01 List()
over List()
impress-01 List()
and List()
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
OracleGraph nodes = List(astronomer, dress-01, elegance, again, date-entity, style, 1920, demonstrate-01, all, over, impress-01, and)
OracleGraph triples: (a2 / all, op, o / over)
(a4 / and, op, e / elegance)
(a4 / and, op, s / style)
(d2 / dress-01, ARG1, a / astronomer)
(d2 / dress-01, ARG2, a4 / and)
(d3 / date-entity, year, 1920)
(d4 / demonstrate-01, ARG0, a / astronomer)
(d4 / demonstrate-01, time, a2 / all)
(d4 / demonstrate-01, time, d3 / date-entity)
(i / impress-01, ARG0, a4 / and)
(o / over, mod, a3 / again)
rootDependencyPaths = List(List(5, 0), List(5, 1), List(5, 1, 2), List(5, 4, 3), List(5, 4), List(5), List(5, 7, 6), List(5, 7), List(5, 9, 8), List(5, 9), List(5, 9, 10), List(5, 11), List(5, 12), List(5, 12, 13), List(5, 12, 13, 15, 14), List(5, 12, 13, 15), List(5, 12, 13, 15, 16), List(5, 12, 13, 15, 17), List(5, 18))
Oracle Span 2-3:  1920 => (date-entity :year 1920)
Oracle Span 10-11:  again => again
Oracle Span 8-9:  all => all
Oracle Span 16-17:  and => and
Oracle Span 4-5:  astronomer => astronomer
Oracle Span 7-8:  demonstration => demonstrate-01
Oracle Span 12-13:  dressed => dress-01
Oracle Span 17-18:  elegance => elegance
Oracle Span 14-15:  impressive => impress-01
Oracle Span 9-10:  over => over
Oracle Span 15-16:  style => style

Extra span: gave => give-01
Missing span: astronomer => astronomer
Missing span: elegance => elegance
Missing span: style => style
Missing span: over => over
Missing span: demonstration => demonstrate-01
Missing span: impressive => impress-01
Dependencies:
1	So	_	RB	RB	_	6	advmod	_	_
2	in	_	IN	IN	_	6	prep	_	_
3	1920	_	CD	CD	_	2	pobj	_	_
4	the	_	DT	DT	_	5	det	_	_
5	astronomer	_	NN	NN	_	6	nsubj	_	_
6	gave	_	VBD	VBD	_	0	root	_	_
7	his	_	PRP$	PRP$	_	8	poss	_	_
8	demonstration	_	NN	NN	_	6	dobj	_	_
9	all	_	DT	DT	_	10	dep	_	_
10	over	_	IN	IN	_	6	advmod	_	_
11	again	_	RB	RB	_	10	advmod	_	_
12	,	_	,	,	_	6	punct	_	_
13	dressed	_	VBN	VBN	_	6	vmod	_	_
14	with	_	IN	IN	_	13	prep	_	_
15	impressive	_	JJ	JJ	_	16	amod	_	_
16	style	_	NN	NN	_	14	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	elegance	_	NN	NN	_	16	conj	_	_
19	.	_	.	.	_	6	punct	_	_

Oracle:
(a2 / all, op, o / over)
(a4 / and, op, e / elegance)
(a4 / and, op, s / style)
(d2 / dress-01, ARG1, a / astronomer)
(d2 / dress-01, ARG2, a4 / and)
(d3 / date-entity, year, 1920)
(d4 / demonstrate-01, ARG0, a / astronomer)
(d4 / demonstrate-01, time, a2 / all)
(d4 / demonstrate-01, time, d3 / date-entity)
(i / impress-01, ARG0, a4 / and)
(o / over, mod, a3 / again)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),and,and,false), Span(12,13,List(1),dressed,dress-01,false), Span(10,11,List(2),again,again,false), Span(8,9,List(3),all,all,false), Span(5,6,List(4),gave,give-01,false), Span(2,3,List(6, 5),1920,(date-entity :year 1920),false)),Map(2 -> again, 5 -> date-entity, 1 -> dress-01, 4 -> give-01, 6 -> 1920, 0 -> and, 3 -> all),Map(a3 -> all, d -> dress-01, 1 -> 1920, g -> give-01, a -> and, d2 -> date-entity, a2 -> again))),[Ljava.lang.String;@6150c3ec,Annotation([Ljava.lang.String;@44c03695,[Ljava.lang.String;@7e6f74c,[Ljava.lang.String;@dd05255),Annotation([Ljava.lang.String;@6a78afa0,[Ljava.lang.String;@2f4948e4,[Ledu.cmu.lti.nlp.amr.Dependency;@1f2586d6),Annotation([Ljava.lang.String;@10683d9d,[Ljava.lang.String;@3fc2959f,[Ljava.lang.String;@5aa9e4eb),Annotation([Ljava.lang.String;@6989da5e,[Ljava.lang.String;@385c9627,[Ledu.cmu.lti.nlp.amr.Entity;@139982de))
AMR:
(d / dress-01, ARG1, d2 / date-entity)
(d / dress-01, ARG2, a / and)
(d2 / date-entity, year, 1 / 1920)
(g / give-01, ARG0, a2 / again)
(g / give-01, ARG1, a3 / all)
(g / give-01, condition, d / dress-01)

Decoded in 111,230 microseconds
Sentence: And this time everybody accepted his report .


--- Decoder1 ---

Sentence: And this time everybody accepted his report .
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = time
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)), PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false)))
concept = PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
score = 0
adding concept:PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
concept = PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false))
score = 0
word = everybody
Finding date entities
Possible invoked concepts: List()
word = accepted
Finding date entities
Possible invoked concepts: List()
word = his
Finding date entities
Possible invoked concepts: List()
word = report
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),1)), Some((0.017491641887458505,PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)),2)), None, None, None, None, None)
Adding concept: time
nodeIds = List(0)
concepts = List(time)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
feats:
bias 1.0
c|p -1.2144441041932315
len 1.0

score:
0.017491641887458498
Adding concept: this
nodeIds = List(1)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.04594423615461207
Adding concept: and
nodeIds = List(2)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.07480610328358053
Decoder1 Spans:
Span 1:  And => and
Span 2:  this => this
Span 3:  time => time
Decoder1 feats:
bias 3.0
c|p -1.435215383604593
len 3.0

Concepts:
id = 2 concept = and
id = 1 concept = this
id = 0 concept = time
Spans:
Span 0-1:  And => and
Span 1-2:  this => this
Span 2-3:  time => time

rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 7))
getNodeById = Map(2 -> and, 1 -> this, 0 -> time)
getNodeById2 = Map(2 -> and, 1 -> this, 0 -> time)
getNodeById = Map(2 -> and, 1 -> this, 0 -> time)
getNodeById2 = Map(2 -> and, 1 -> this, 0 -> time)
Node = 2
Node = 1
Node = 0
visited = Set(0, 1, 2)
Alg2 returning score = -152.26869016782692
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
everybody List()
he List()
time List()
this List()
thing List()
accept-01 List()
and List()
report-01 List()
clearUnalignedNodes():  removing unaligned node: Some(h2) / he
OracleGraph nodes = List(everybody, time, this, thing, accept-01, and, report-01)
OracleGraph triples: (a / and, op, a2 / accept-01)
(a2 / accept-01, ARG0, e / everybody)
(a2 / accept-01, ARG1, t3 / thing)
(a2 / accept-01, time, t / time)
(r / report-01, ARG1, t3 / thing)
(t / time, mod, t2 / this)
rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 7))
Oracle Span 4-5:  accepted => accept-01
Oracle Span 0-1:  And => and
Oracle Span 3-4:  everybody => everybody
Oracle Span 6-7:  report => (thing :ARG1-of report-01)
Oracle Span 1-2:  this => this
Oracle Span 2-3:  time => time

Missing span: accepted => accept-01
Missing span: report => (thing :ARG1-of report-01)
Missing span: everybody => everybody
Dependencies:
1	And	_	CC	CC	_	5	cc	_	_
2	this	_	DT	DT	_	4	det	_	_
3	time	_	NN	NN	_	4	nn	_	_
4	everybody	_	NN	NN	_	5	nsubj	_	_
5	accepted	_	VBD	VBD	_	0	root	_	_
6	his	_	PRP$	PRP$	_	7	poss	_	_
7	report	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, a2 / accept-01)
(a2 / accept-01, ARG0, e / everybody)
(a2 / accept-01, ARG1, t3 / thing)
(a2 / accept-01, time, t / time)
(r / report-01, ARG1, t3 / thing)
(t / time, mod, t2 / this)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),time,time,false), Span(1,2,List(1),this,this,false), Span(0,1,List(2),And,and,false)),Map(2 -> and, 1 -> this, 0 -> time),Map(t -> time, a -> and, t2 -> this))),[Ljava.lang.String;@682b2fa,Annotation([Ljava.lang.String;@217ed35e,[Ljava.lang.String;@7dcf94f8,[Ljava.lang.String;@229f66ed),Annotation([Ljava.lang.String;@31190526,[Ljava.lang.String;@662ac478,[Ledu.cmu.lti.nlp.amr.Dependency;@6743e411),Annotation([Ljava.lang.String;@3eb25e1a,[Ljava.lang.String;@477b4cdf,[Ljava.lang.String;@77c2494c),Annotation([Ljava.lang.String;@f5958c9,[Ljava.lang.String;@233795b6,[Ledu.cmu.lti.nlp.amr.Entity;@3eb738bb))
AMR:
(t / time, mod, t2 / this)
(t2 / this, poss, a / and)

Decoded in 20,534 microseconds
Sentence: If I have told you these details about the asteroid , and made a note of its number for you , it is on account of the grown - ups and their ways .


--- Decoder1 ---

Sentence: If I have told you these details about the asteroid , and made a note of its number for you , it is on account of the grown - ups and their ways .
word = If
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)))
concept = PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
score = 0
adding concept:PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = told
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(told),(thing :ARG1-of tell-01),PhraseConceptFeatures(1.0,-2.4849066497880004,false,false)), PhraseConceptPair(List(told),tell-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(told),(thing :ARG1-of tell-01),PhraseConceptFeatures(1.0,-2.4849066497880004,false,false))
score = 0
adding concept:PhraseConceptPair(List(told),(thing :ARG1-of tell-01),PhraseConceptFeatures(1.0,-2.4849066497880004,false,false))
concept = PhraseConceptPair(List(told),tell-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(told),tell-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = these
Finding date entities
Possible invoked concepts: List()
word = details
Finding date entities
Possible invoked concepts: List()
word = about
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)), PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false)))
concept = PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
adding concept:PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
concept = PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = asteroid
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = note
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(note),note-02,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(note),note-02,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(note),note-02,PhraseConceptFeatures(1.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = its
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
word = number
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = for
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = account
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(account),account,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(account),account,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(account),account,PhraseConceptFeatures(1.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = grown
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
word = -
Finding date entities
Possible invoked concepts: List()
word = ups
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = their
Finding date entities
Possible invoked concepts: List()
word = ways
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.0011206685260514437,PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)),0)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),2)), Some((0.01866307480060534,PhraseConceptPair(List(told),tell-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false)),3)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),4)), None, None, Some((0.010387320494361422,PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)),7)), None, None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),11)), Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),12)), None, Some((0.029773585223834276,PhraseConceptPair(List(note),note-02,PhraseConceptFeatures(1.0,0.0,false,false)),14)), None, Some((0.01866307480060534,PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)),16)), Some((0.022763633620453336,PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),17)), None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),19)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),21)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(account),account,PhraseConceptFeatures(1.0,0.0,false,false)),24)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)),27)), None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),30)), None, None, None)
Adding concept: and
nodeIds = List(0)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.018957941822408536
Adding concept: grown-up
nodeIds = List(1)
concepts = List(grown-up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04873152704624281
Adding concept: account
nodeIds = List(2)
concepts = List(account)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(account),account,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07850511227007709
Adding concept: it
nodeIds = List(3)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.09742423169388958
Adding concept: you
nodeIds = List(4)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.124569594788745
Adding concept: number
nodeIds = List(5)
concepts = List(number)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(number),number,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.14733322840919832
Adding concept: it
nodeIds = List(6)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.16599630320980366
Adding concept: note-02
nodeIds = List(7)
concepts = List(note-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(note),note-02,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.19576988843363793
Adding concept: make-01
nodeIds = List(8)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.2078534264773792
Adding concept: and
nodeIds = List(9)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.22681136829978774
Adding concept: about
nodeIds = List(10)
concepts = List(about)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
feats:
bias 1.0
c|p -1.916922612182061
len 1.0

score:
0.23719868879414915
Adding concept: you
nodeIds = List(11)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.26434405188900456
Adding concept: tell-01
nodeIds = List(12)
concepts = List(tell-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(told),tell-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.2830071266896099
Adding concept: have-03
nodeIds = List(13)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.28317163103621457
Adding concept: i
nodeIds = List(14)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.30922083745444384
Adding concept: cause-01
nodeIds = List(15)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
feats:
bias 1.0
c|p -2.833213344056216
len 1.0

score:
0.31034150598049526
Decoder1 Spans:
Span 1:  about => about
Span 2:  account => account
Span 3:  and => and
Span 4:  and => and
Span 5:  grown => grown-up
Span 6:  have => have-03
Span 7:  I => i
Span 8:  If => cause-01
Span 9:  it => it
Span 10:  its => it
Span 11:  made => make-01
Span 12:  note => note-02
Span 13:  number => number
Span 14:  told => tell-01
Span 15:  you => you
Span 16:  you => you
Decoder1 feats:
bias 16.0
c|p -16.417700589027834
len 16.0

Concepts:
id = 2 concept = account
id = 5 concept = number
id = 12 concept = tell-01
id = 15 concept = cause-01
id = 8 concept = make-01
id = 7 concept = note-02
id = 1 concept = grown-up
id = 4 concept = you
id = 11 concept = you
id = 14 concept = i
id = 6 concept = it
id = 0 concept = and
id = 9 concept = and
id = 3 concept = it
id = 10 concept = about
id = 13 concept = have-03
Spans:
Span 7-8:  about => about
Span 24-25:  account => account
Span 30-31:  and => and
Span 11-12:  and => and
Span 27-28:  grown => grown-up
Span 2-3:  have => have-03
Span 1-2:  I => i
Span 0-1:  If => cause-01
Span 21-22:  it => it
Span 16-17:  its => it
Span 12-13:  made => make-01
Span 14-15:  note => note-02
Span 17-18:  number => number
Span 3-4:  told => tell-01
Span 19-20:  you => you
Span 4-5:  you => you

rootDependencyPaths = List(List(22, 3, 0), List(22, 3, 1), List(22, 3, 2), List(22, 3), List(22, 3, 6, 4), List(22, 3, 6, 5), List(22, 3, 6), List(22, 3, 6, 7), List(22, 3, 6, 7, 9, 8), List(22, 3, 6, 7, 9), List(22, 3, 10), List(22, 3, 11), List(22, 3, 12), List(22, 3, 12, 14, 13), List(22, 3, 12, 14), List(22, 3, 12, 14, 15), List(22, 3, 12, 14, 15, 17, 16), List(22, 3, 12, 14, 15, 17), List(22, 3, 12, 18), List(22, 3, 12, 18, 19), List(22, 20), List(22, 21), List(22), List(22, 23), List(22, 23, 24), List(22, 23, 24, 25), List(22, 23, 24, 25, 27, 26), List(22, 23, 24, 25, 27), List(22, 23, 24, 28), List(22, 23, 24, 29), List(22, 23, 24, 29, 30), List(22, 23, 24, 29, 32, 31), List(22, 23, 24, 29, 32), List(22, 33))
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 3
Node = 12
Node = 9
Node = 11
Node = 1
Node = 2
Node = 10
Node = 14
Node = 8
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -241.40820533642955
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 2
Node = 10
Node = 14
Node = 8
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -247.93541941229236
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 1
Node = 12
Node = 9
Node = 11
Node = 2
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -253.49079634391077
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 10
Node = 11
Node = 2
Node = 14
Node = 8
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -258.6194264333947
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 2
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -263.163487754239
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 2
Node = 3
Node = 12
Node = 9
Node = 10
Node = 11
Node = 14
Node = 8
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -265.7370133674147
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 1
Node = 12
Node = 9
Node = 11
Node = 2
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -269.4907963439108
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 2
Node = 3
Node = 1
Node = 12
Node = 9
Node = 10
Node = 11
Node = 14
Node = 8
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -273.6939927334932
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 2
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -277.6083832779308
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 2
Node = 10
Node = 14
Node = 8
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -279.9354194122924
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 9
Node = 10
Node = 11
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 1
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -284.0136748927721
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 3
Node = 1
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -287.86193409179924
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -290.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -291.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -293.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -294.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -296.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -297.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -299.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -300.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -302.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -303.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -305.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -306.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -308.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -309.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -310.9391629473164
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -312.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -313.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -314.9391629473164
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -316.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -317.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -318.9391629473164
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -320.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -321.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -322.9391629473164
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -324.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -325.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -326.9391629473164
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -328.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -329.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -330.9391629473164
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -332.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -333.9049547257207
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -334.9391629473164
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 12
Node = 1
Node = 9
Node = 11
Node = 10
Node = 15
Node = 14
Node = 8
Node = 3
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -336.4603316573391
getNodeById = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03)
getNodeById2 = Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 10 -> about, 3 -> it, 13 -> have-03)
Node = 0
Node = 13
Node = 15
Node = 1
Node = 3
Node = 12
Node = 9
Node = 11
Node = 10
Node = 14
Node = 8
Node = 2
Node = 7
Node = 5
Node = 4
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -337.9026850491129
Langrangian relaxation converged after 47 iterations. Delta = 0.0
Node.spans:
asteroid List()
grown-up List()
detail List()
number List()
and List()
note-01 List()
i List()
this List()
and List()
tell-01 List()
way List()
account-01 List()
you List()
clearUnalignedNodes():  removing unaligned node: Some(t2) / this
OracleGraph nodes = List(asteroid, grown-up, detail, number, and, note-01, i, and, tell-01, way, account-01, you)
OracleGraph triples: (a / account-01, ARG1, a3 / and)
(a / account-01, ARG2, a2 / and)
(a / account-01, condition, a3 / and)
(a2 / and, op, g / grown-up)
(a2 / and, op, w / way)
(a3 / and, op, n3 / note-01)
(a3 / and, op, t / tell-01)
(d / detail, topic, a4 / asteroid)
(n3 / note-01, ARG0, i / i)
(n3 / note-01, ARG1, n4 / number)
(n3 / note-01, ARG2, y / you)
(n4 / number, poss, a4 / asteroid)
(t / tell-01, ARG0, i / i)
(t / tell-01, ARG1, d / detail)
(t / tell-01, ARG2, y / you)
(w / way, poss, g / grown-up)
rootDependencyPaths = List(List(22, 3, 0), List(22, 3, 1), List(22, 3, 2), List(22, 3), List(22, 3, 6, 4), List(22, 3, 6, 5), List(22, 3, 6), List(22, 3, 6, 7), List(22, 3, 6, 7, 9, 8), List(22, 3, 6, 7, 9), List(22, 3, 10), List(22, 3, 11), List(22, 3, 12), List(22, 3, 12, 14, 13), List(22, 3, 12, 14), List(22, 3, 12, 14, 15), List(22, 3, 12, 14, 15, 17, 16), List(22, 3, 12, 14, 15, 17), List(22, 3, 12, 18), List(22, 3, 12, 18, 19), List(22, 20), List(22, 21), List(22), List(22, 23), List(22, 23, 24), List(22, 23, 24, 25), List(22, 23, 24, 25, 27, 26), List(22, 23, 24, 25, 27), List(22, 23, 24, 28), List(22, 23, 24, 29), List(22, 23, 24, 29, 30), List(22, 23, 24, 29, 32, 31), List(22, 23, 24, 29, 32), List(22, 33))
Oracle Span 24-25:  account => account-01
Oracle Span 11-12:  and => and
Oracle Span 30-31:  and => and
Oracle Span 9-10:  asteroid => asteroid
Oracle Span 6-7:  details => detail
Oracle Span 27-28:  grown => grown-up
Oracle Span 1-2:  I => i
Oracle Span 14-15:  note => note-01
Oracle Span 17-18:  number => number
Oracle Span 3-4:  told => tell-01
Oracle Span 32-33:  ways => way
Oracle Span 4-5:  you => you

Incorrect span: account => account
Extra span: it => it
Extra span: you => you
Extra span: its => it
Incorrect span: note => note-02
Extra span: made => make-01
Extra span: about => about
Extra span: have => have-03
Extra span: If => cause-01
Missing span: account => account-01
Missing span: note => note-01
Missing span: details => detail
Missing span: asteroid => asteroid
Missing span: ways => way
Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	I	_	PRP	PRP	_	4	nsubj	_	_
3	have	_	VBP	VBP	_	4	aux	_	_
4	told	_	VBN	VBN	_	23	advcl	_	_
5	you	_	PRP	PRP	_	7	nsubj	_	_
6	these	_	DT	DT	_	7	det	_	_
7	details	_	NNS	NNS	_	4	xcomp	_	_
8	about	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	asteroid	_	NN	NN	_	8	pobj	_	_
11	,	_	,	,	_	4	punct	_	_
12	and	_	CC	CC	_	4	cc	_	_
13	made	_	VBN	VBN	_	4	conj	_	_
14	a	_	DT	DT	_	15	det	_	_
15	note	_	NN	NN	_	13	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	its	_	PRP$	PRP$	_	18	poss	_	_
18	number	_	NN	NN	_	16	pobj	_	_
19	for	_	IN	IN	_	13	prep	_	_
20	you	_	PRP	PRP	_	19	pobj	_	_
21	,	_	,	,	_	23	punct	_	_
22	it	_	PRP	PRP	_	23	nsubj	_	_
23	is	_	VBZ	VBZ	_	0	root	_	_
24	on	_	IN	IN	_	23	prep	_	_
25	account	_	NN	NN	_	24	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	grown	_	JJ	JJ	_	26	pobj	_	_
29	-	_	:	:	_	25	punct	_	_
30	ups	_	NNS	NNS	_	25	dep	_	_
31	and	_	CC	CC	_	30	cc	_	_
32	their	_	PRP$	PRP$	_	33	poss	_	_
33	ways	_	NNS	NNS	_	30	conj	_	_
34	.	_	.	.	_	23	punct	_	_

Oracle:
(a / account-01, ARG1, a3 / and)
(a / account-01, ARG2, a2 / and)
(a / account-01, condition, a3 / and)
(a2 / and, op, g / grown-up)
(a2 / and, op, w / way)
(a3 / and, op, n3 / note-01)
(a3 / and, op, t / tell-01)
(d / detail, topic, a4 / asteroid)
(n3 / note-01, ARG0, i / i)
(n3 / note-01, ARG1, n4 / number)
(n3 / note-01, ARG2, y / you)
(n4 / number, poss, a4 / asteroid)
(t / tell-01, ARG0, i / i)
(t / tell-01, ARG1, d / detail)
(t / tell-01, ARG2, y / you)
(w / way, poss, g / grown-up)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),and,and,false), Span(27,28,List(1),grown,grown-up,false), Span(24,25,List(2),account,account,false), Span(21,22,List(3),it,it,false), Span(19,20,List(4),you,you,false), Span(17,18,List(5),number,number,false), Span(16,17,List(6),its,it,false), Span(14,15,List(7),note,note-02,false), Span(12,13,List(8),made,make-01,false), Span(11,12,List(9),and,and,false), Span(7,8,List(10),about,about,false), Span(4,5,List(11),you,you,false), Span(3,4,List(12),told,tell-01,false), Span(2,3,List(13),have,have-03,false), Span(1,2,List(14),I,i,false), Span(0,1,List(15),If,cause-01,false)),Map(2 -> account, 5 -> number, 12 -> tell-01, 15 -> cause-01, 8 -> make-01, 7 -> note-02, 1 -> grown-up, 4 -> you, 11 -> you, 14 -> i, 6 -> it, 0 -> and, 9 -> and, 3 -> it, 10 -> about, 13 -> have-03),Map(n -> number, h -> have-03, t -> tell-01, a3 -> and, m -> make-01, i3 -> i, g -> grown-up, y -> you, a -> and, i2 -> it, a2 -> account, i -> it, c -> cause-01, n2 -> note-02, y2 -> you, a4 -> about))),[Ljava.lang.String;@5bda8e08,Annotation([Ljava.lang.String;@1e800aaa,[Ljava.lang.String;@185a6e9,[Ljava.lang.String;@6f03482),Annotation([Ljava.lang.String;@9d5509a,[Ljava.lang.String;@179ece50,[Ledu.cmu.lti.nlp.amr.Dependency;@3b0090a4),Annotation([Ljava.lang.String;@3cd3e762,[Ljava.lang.String;@1fa121e2,[Ljava.lang.String;@7eac9008),Annotation([Ljava.lang.String;@4116aac9,[Ljava.lang.String;@62ddbd7e,[Ledu.cmu.lti.nlp.amr.Entity;@74e52ef6))
AMR:
(a2 / account, poss, i3 / i)
(a3 / and, op, m / make-01)
(a3 / and, op, t / tell-01)
(c / cause-01, ARG0, t / tell-01)
(c / cause-01, ARG1, i / it)
(c / cause-01, ARG2, h / have-03)
(h / have-03, ARG0, g / grown-up)
(h / have-03, ARG1, a / and)
(m / make-01, ARG0, i3 / i)
(m / make-01, ARG1, n2 / note-02)
(n / number, poss, i2 / it)
(n2 / note-02, ARG0, y / you)
(n2 / note-02, ARG1, n / number)
(t / tell-01, ARG0, i3 / i)
(t / tell-01, ARG1, a4 / about)
(t / tell-01, ARG2, y2 / you)

Decoded in 980,328 microseconds
Sentence: WHen you tell them that you have made a new friend , they never ask you any questions about essential matters .


--- Decoder1 ---

Sentence: WHen you tell them that you have made a new friend , they never ask you any questions about essential matters .
word = WHen
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = tell
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false))
word = them
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = new
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false))
word = friend
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)), PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)))
concept = PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
concept = PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = never
Finding date entities
Possible invoked concepts: List()
word = ask
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(ask),ask-01,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(ask),ask-01,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(ask),ask-01,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = any
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false)), PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)))
concept = PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false))
score = 0
concept = PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
score = 0
adding concept:PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
word = questions
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(questions),question,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)), PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)))
concept = PhraseConceptPair(List(questions),question,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
score = 0
adding concept:PhraseConceptPair(List(questions),question,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
concept = PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
score = 0
adding concept:PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
word = about
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)), PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false)))
concept = PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
adding concept:PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
concept = PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false))
score = 0
word = essential
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(essential),essential,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(essential),essential,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(essential),essential,PhraseConceptFeatures(2.0,0.0,false,false))
word = matters
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(matters),matter,PhraseConceptFeatures(8.0,-0.8109302162163288,false,false)), PhraseConceptPair(List(matters),matter-01,PhraseConceptFeatures(1.0,-2.890371757896165,false,false)))
concept = PhraseConceptPair(List(matters),matter,PhraseConceptFeatures(8.0,-0.8109302162163288,false,false))
score = 0
adding concept:PhraseConceptPair(List(matters),matter,PhraseConceptFeatures(8.0,-0.8109302162163288,false,false))
concept = PhraseConceptPair(List(matters),matter-01,PhraseConceptFeatures(1.0,-2.890371757896165,false,false))
score = 0
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),1)), Some((0.029773585223834276,PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false)),2)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),4)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),5)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),6)), Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),7)), None, Some((0.029773585223834276,PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false)),9)), Some((0.018010382382001432,PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)),10)), None, Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),12)), None, Some((0.015753682017072397,PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false)),14)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),15)), Some((0.017940394404303485,PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)),16)), Some((0.01759754047199135,PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)),17)), Some((0.010387320494361422,PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)),18)), Some((0.029773585223834276,PhraseConceptPair(List(essential),essential,PhraseConceptFeatures(2.0,0.0,false,false)),19)), Some((0.02157246758413829,PhraseConceptPair(List(matters),matter,PhraseConceptFeatures(8.0,-0.8109302162163288,false,false)),20)), None)
Adding concept: matter
nodeIds = List(0)
concepts = List(matter)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(matters),matter,PhraseConceptFeatures(8.0,-0.8109302162163288,false,false))
feats:
bias 1.0
c|p -0.8109302162163288
len 1.0

score:
0.02157246758413829
Adding concept: essential
nodeIds = List(1)
concepts = List(essential)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(essential),essential,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05134605280797257
Adding concept: about
nodeIds = List(2)
concepts = List(about)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
feats:
bias 1.0
c|p -1.916922612182061
len 1.0

score:
0.061733373302333985
Adding concept: question-01
nodeIds = List(3)
concepts = List(question-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
feats:
bias 1.0
c|p -1.2039728043259361
len 1.0

score:
0.07933091377432534
Adding concept: any
nodeIds = List(4)
concepts = List(any)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
feats:
bias 1.0
c|p -1.1700712526502546
len 1.0

score:
0.09727130817862882
Adding concept: you
nodeIds = List(5)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.12441667127348424
Adding concept: ask-02
nodeIds = List(6)
concepts = List(ask-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.14017035329055663
Adding concept: they
nodeIds = List(7)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.16274841799053355
Adding concept: friend
nodeIds = List(8)
concepts = List(friend)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
feats:
bias 1.0
c|p -1.1631508098056809
len 1.0

score:
0.18075880037253497
Adding concept: new
nodeIds = List(9)
concepts = List(new)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.21053238559636925
Adding concept: make-01
nodeIds = List(10)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.2226159236401105
Adding concept: have-03
nodeIds = List(11)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.22278042798671516
Adding concept: you
nodeIds = List(12)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.2499257910815706
Adding concept: that
nodeIds = List(13)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.2665435994707864
Adding concept: tell-01
nodeIds = List(14)
concepts = List(tell-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.29631718469462065
Adding concept: you
nodeIds = List(15)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.3234625477894761
Decoder1 Spans:
Span 1:  about => about
Span 2:  any => any
Span 3:  ask => ask-02
Span 4:  essential => essential
Span 5:  friend => friend
Span 6:  have => have-03
Span 7:  made => make-01
Span 8:  matters => matter
Span 9:  new => new
Span 10:  questions => question-01
Span 11:  tell => tell-01
Span 12:  that => that
Span 13:  they => they
Span 14:  you => you
Span 15:  you => you
Span 16:  you => you
Decoder1 feats:
bias 16.0
c|p -15.12028604888783
len 16.0

Concepts:
id = 2 concept = about
id = 5 concept = you
id = 12 concept = you
id = 15 concept = you
id = 8 concept = friend
id = 7 concept = they
id = 1 concept = essential
id = 4 concept = any
id = 11 concept = have-03
id = 14 concept = tell-01
id = 6 concept = ask-02
id = 0 concept = matter
id = 9 concept = new
id = 3 concept = question-01
id = 10 concept = make-01
id = 13 concept = that
Spans:
Span 18-19:  about => about
Span 16-17:  any => any
Span 14-15:  ask => ask-02
Span 19-20:  essential => essential
Span 10-11:  friend => friend
Span 6-7:  have => have-03
Span 7-8:  made => make-01
Span 20-21:  matters => matter
Span 9-10:  new => new
Span 17-18:  questions => question-01
Span 2-3:  tell => tell-01
Span 4-5:  that => that
Span 12-13:  they => they
Span 15-16:  you => you
Span 5-6:  you => you
Span 1-2:  you => you

rootDependencyPaths = List(List(14, 0), List(14, 0, 2, 1), List(14, 0, 2), List(14, 0, 2, 3), List(14, 0, 2, 7, 4), List(14, 0, 2, 7, 5), List(14, 0, 2, 7, 6), List(14, 0, 2, 7), List(14, 0, 2, 7, 10, 8), List(14, 0, 2, 7, 10, 9), List(14, 0, 2, 7, 10), List(14, 11), List(14, 12), List(14, 13), List(14), List(14, 17, 15), List(14, 17, 16), List(14, 17), List(14, 17, 18), List(14, 17, 18, 20, 19), List(14, 17, 18, 20), List(14, 21))
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 6
Node = 11
Node = 10
Node = 15
Node = 5
Node = 3
Node = 7
Node = 8
Node = 13
Node = 12
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -188.95565667474912
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 6
Node = 15
Node = 13
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -198.59819858730634
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 6
Node = 15
Node = 8
Node = 13
Node = 12
Node = 5
Node = 3
Node = 7
Node = 9
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -203.31535859354256
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 6
Node = 15
Node = 13
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -208.59819858730634
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 6
Node = 15
Node = 8
Node = 13
Node = 12
Node = 5
Node = 3
Node = 7
Node = 9
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -213.31535859354256
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 6
Node = 15
Node = 13
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -218.59819858730634
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 6
Node = 15
Node = 8
Node = 13
Node = 12
Node = 5
Node = 3
Node = 7
Node = 9
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -223.31535859354258
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 6
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -228.31890814216968
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 15
Node = 8
Node = 13
Node = 6
Node = 12
Node = 9
Node = 5
Node = 3
Node = 7
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -232.0360681484059
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 6
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -235.31890814216968
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 15
Node = 8
Node = 13
Node = 6
Node = 12
Node = 9
Node = 5
Node = 3
Node = 7
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -239.0360681484059
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 6
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -242.31890814216968
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 15
Node = 8
Node = 13
Node = 6
Node = 12
Node = 9
Node = 5
Node = 3
Node = 7
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -246.0360681484059
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 6
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -249.31890814216968
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 6
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -252.4429673195499
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 6
Node = 15
Node = 8
Node = 13
Node = 12
Node = 5
Node = 3
Node = 7
Node = 9
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -255.31535859354256
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 6
Node = 15
Node = 13
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -259.59819858730634
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 6
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -264.1299827586808
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 6
Node = 15
Node = 8
Node = 13
Node = 12
Node = 5
Node = 3
Node = 7
Node = 9
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -265.0023740326735
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 6
Node = 15
Node = 13
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -267.2852140264373
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 3
Node = 11
Node = 12
Node = 4
Node = 6
Node = 2
Node = 0
Node = 8
Node = 5
Node = 7
Node = 1
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -269.6999273826143
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 6
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -271.1299827586808
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 6
Node = 15
Node = 8
Node = 13
Node = 12
Node = 5
Node = 3
Node = 7
Node = 9
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -272.0023740326735
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 6
Node = 15
Node = 13
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -274.2852140264373
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 3
Node = 11
Node = 12
Node = 4
Node = 6
Node = 2
Node = 0
Node = 8
Node = 5
Node = 7
Node = 1
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -276.6999273826143
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 6
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -278.1299827586808
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 11
Node = 10
Node = 6
Node = 15
Node = 8
Node = 13
Node = 12
Node = 5
Node = 3
Node = 7
Node = 9
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -279.0023740326735
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 6
Node = 15
Node = 13
Node = 11
Node = 12
Node = 5
Node = 3
Node = 7
Node = 8
Node = 4
Node = 2
Node = 0
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -281.2852140264373
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 3
Node = 11
Node = 12
Node = 4
Node = 6
Node = 2
Node = 0
Node = 8
Node = 5
Node = 7
Node = 1
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -283.6999273826143
getNodeById = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that)
getNodeById2 = Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 10 -> make-01, 3 -> question-01, 13 -> that)
Node = 14
Node = 10
Node = 15
Node = 13
Node = 11
Node = 12
Node = 8
Node = 6
Node = 9
Node = 5
Node = 3
Node = 7
Node = 4
Node = 2
Node = 0
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -284.92681781457003
Langrangian relaxation converged after 30 iterations. Delta = 0.0
Node.spans:
ever List()
new List()
they List()
any List()
essential List()
have-rel-role-91 List()
they List()
tell-01 List()
friend List()
- List()
you List()
make-01 List()
ask-01 List()
person List()
question List()
matter List()
clearUnalignedNodes():  removing unaligned node: Some(e2) / ever
clearUnalignedNodes():  removing unaligned node: Some(t2) / they
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(p) / person
OracleGraph nodes = List(new, any, essential, have-rel-role-91, they, tell-01, friend, you, make-01, ask-01, question, matter)
OracleGraph triples: (a / ask-01, ARG1, q / question)
(a / ask-01, ARG2, y / you)
(a / ask-01, time, t3 / tell-01)
(h / have-rel-role-91, ARG1, y / you)
(h / have-rel-role-91, ARG2, f / friend)
(h / have-rel-role-91, mod, n / new)
(m / matter, mod, e / essential)
(m2 / make-01, ARG0, y / you)
(m2 / make-01, ARG1, h / have-rel-role-91)
(q / question, mod, a2 / any)
(q / question, topic, m / matter)
(t3 / tell-01, ARG0, y / you)
(t3 / tell-01, ARG1, m2 / make-01)
(t3 / tell-01, ARG2, t / they)
rootDependencyPaths = List(List(14, 0), List(14, 0, 2, 1), List(14, 0, 2), List(14, 0, 2, 3), List(14, 0, 2, 7, 4), List(14, 0, 2, 7, 5), List(14, 0, 2, 7, 6), List(14, 0, 2, 7), List(14, 0, 2, 7, 10, 8), List(14, 0, 2, 7, 10, 9), List(14, 0, 2, 7, 10), List(14, 11), List(14, 12), List(14, 13), List(14), List(14, 17, 15), List(14, 17, 16), List(14, 17), List(14, 17, 18), List(14, 17, 18, 20, 19), List(14, 17, 18, 20), List(14, 21))
Oracle Span 16-17:  any => any
Oracle Span 14-15:  ask => ask-01
Oracle Span 19-20:  essential => essential
Oracle Span 10-11:  friend => friend
Oracle Span 6-7:  have => have-rel-role-91
Oracle Span 7-8:  made => make-01
Oracle Span 20-21:  matters => matter
Oracle Span 9-10:  new => new
Oracle Span 17-18:  questions => question
Oracle Span 2-3:  tell => tell-01
Oracle Span 12-13:  they => they
Oracle Span 1-2:  you => you

Extra span: about => about
Incorrect span: questions => question-01
Extra span: you => you
Incorrect span: ask => ask-02
Incorrect span: have => have-03
Extra span: you => you
Extra span: that => that
Missing span: ask => ask-01
Missing span: questions => question
Missing span: have => have-rel-role-91
Dependencies:
1	WHen	_	VBN	VBN	_	15	vmod	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	tell	_	VB	VB	_	1	ccomp	_	_
4	them	_	PRP	PRP	_	3	dobj	_	_
5	that	_	IN	IN	_	8	mark	_	_
6	you	_	PRP	PRP	_	8	nsubj	_	_
7	have	_	VBP	VBP	_	8	aux	_	_
8	made	_	VBN	VBN	_	3	ccomp	_	_
9	a	_	DT	DT	_	11	det	_	_
10	new	_	JJ	JJ	_	11	amod	_	_
11	friend	_	NN	NN	_	8	dobj	_	_
12	,	_	,	,	_	15	punct	_	_
13	they	_	PRP	PRP	_	15	nsubj	_	_
14	never	_	RB	RB	_	15	neg	_	_
15	ask	_	VBP	VBP	_	0	root	_	_
16	you	_	PRP	PRP	_	18	nsubj	_	_
17	any	_	DT	DT	_	18	det	_	_
18	questions	_	NNS	NNS	_	15	xcomp	_	_
19	about	_	IN	IN	_	18	prep	_	_
20	essential	_	JJ	JJ	_	21	amod	_	_
21	matters	_	NNS	NNS	_	19	pobj	_	_
22	.	_	.	.	_	15	punct	_	_

Oracle:
(a / ask-01, ARG1, q / question)
(a / ask-01, ARG2, y / you)
(a / ask-01, time, t3 / tell-01)
(h / have-rel-role-91, ARG1, y / you)
(h / have-rel-role-91, ARG2, f / friend)
(h / have-rel-role-91, mod, n / new)
(m / matter, mod, e / essential)
(m2 / make-01, ARG0, y / you)
(m2 / make-01, ARG1, h / have-rel-role-91)
(q / question, mod, a2 / any)
(q / question, topic, m / matter)
(t3 / tell-01, ARG0, y / you)
(t3 / tell-01, ARG1, m2 / make-01)
(t3 / tell-01, ARG2, t / they)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),matters,matter,false), Span(19,20,List(1),essential,essential,false), Span(18,19,List(2),about,about,false), Span(17,18,List(3),questions,question-01,false), Span(16,17,List(4),any,any,false), Span(15,16,List(5),you,you,false), Span(14,15,List(6),ask,ask-02,false), Span(12,13,List(7),they,they,false), Span(10,11,List(8),friend,friend,false), Span(9,10,List(9),new,new,false), Span(7,8,List(10),made,make-01,false), Span(6,7,List(11),have,have-03,false), Span(5,6,List(12),you,you,false), Span(4,5,List(13),that,that,false), Span(2,3,List(14),tell,tell-01,false), Span(1,2,List(15),you,you,false)),Map(2 -> about, 5 -> you, 12 -> you, 15 -> you, 8 -> friend, 7 -> they, 1 -> essential, 4 -> any, 11 -> have-03, 14 -> tell-01, 6 -> ask-02, 0 -> matter, 9 -> new, 3 -> question-01, 10 -> make-01, 13 -> that),Map(e -> essential, n -> new, h -> have-03, q -> question-01, t -> they, m2 -> make-01, a3 -> ask-02, m -> matter, t3 -> tell-01, y -> you, a -> about, y3 -> you, t2 -> that, a2 -> any, f -> friend, y2 -> you))),[Ljava.lang.String;@6ed3ccb2,Annotation([Ljava.lang.String;@1a677343,[Ljava.lang.String;@15de0b3c,[Ljava.lang.String;@489115ef),Annotation([Ljava.lang.String;@3857f613,[Ljava.lang.String;@198b6731,[Ledu.cmu.lti.nlp.amr.Dependency;@7c6908d7),Annotation([Ljava.lang.String;@3c9754d8,[Ljava.lang.String;@3bf7ca37,[Ljava.lang.String;@79079097),Annotation([Ljava.lang.String;@4d1c00d0,[Ljava.lang.String;@4b2bac3f,[Ledu.cmu.lti.nlp.amr.Entity;@4e08711f))
AMR:
(a3 / ask-02, ARG0, t / they)
(a3 / ask-02, ARG1, q / question-01)
(a3 / ask-02, ARG3, y / you)
(f / friend, mod, n / new)
(h / have-03, ARG1, a3 / ask-02)
(h / have-03, ARG2, f / friend)
(m / matter, mod, e / essential)
(m2 / make-01, ARG0, y2 / you)
(m2 / make-01, ARG1, h / have-03)
(q / question-01, ARG0, m / matter)
(q / question-01, ARG1, a / about)
(q / question-01, mod, a2 / any)
(t2 / that, op, m2 / make-01)
(t3 / tell-01, ARG0, y3 / you)
(t3 / tell-01, ARG1, m2 / make-01)

Decoded in 474,157 microseconds
Sentence: They never say to you , " What does his voice sound like ?


--- Decoder1 ---

Sentence: They never say to you , " What does his voice sound like ?
word = They
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false)))
concept = PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
word = never
Finding date entities
Possible invoked concepts: List()
word = say
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)))
concept = PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
score = 0
adding concept:PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = What
Finding date entities
Possible invoked concepts: List()
word = does
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false)))
concept = PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false))
score = 0
word = his
Finding date entities
Possible invoked concepts: List()
word = voice
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(voice),voice,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(voice),voice,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(voice),voice,PhraseConceptFeatures(2.0,0.0,false,false))
word = sound
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sound),sound-02,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(sound),sound-02,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sound),sound-02,PhraseConceptFeatures(4.0,0.0,false,false))
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = ?
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false)),0)), None, Some((0.020663730542327237,PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)),2)), None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),4)), None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(voice),voice,PhraseConceptFeatures(2.0,0.0,false,false)),10)), Some((0.029773585223834276,PhraseConceptPair(List(sound),sound-02,PhraseConceptFeatures(4.0,0.0,false,false)),11)), None, None)
Adding concept: sound-02
nodeIds = List(0)
concepts = List(sound-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sound),sound-02,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: voice
nodeIds = List(1)
concepts = List(voice)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(voice),voice,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: you
nodeIds = List(2)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.08669253354252397
Adding concept: say-01
nodeIds = List(3)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
feats:
bias 1.0
c|p -0.9007865453381898
len 1.0

score:
0.1073562640848512
Adding concept: they
nodeIds = List(4)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1371298493086855
Decoder1 Spans:
Span 1:  say => say-01
Span 2:  sound => sound-02
Span 3:  They => they
Span 4:  voice => voice
Span 5:  you => you
Decoder1 feats:
bias 5.0
c|p -1.1606663364780188
len 5.0

Concepts:
id = 2 concept = you
id = 1 concept = voice
id = 4 concept = they
id = 0 concept = sound-02
id = 3 concept = say-01
Spans:
Span 2-3:  say => say-01
Span 11-12:  sound => sound-02
Span 0-1:  They => they
Span 10-11:  voice => voice
Span 4-5:  you => you

rootDependencyPaths = List(List(8, 2, 0), List(8, 2, 1), List(8, 2), List(8, 2, 3), List(8, 2, 3, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 11, 9), List(8, 11, 10), List(8, 11), List(8, 12), List(8, 13))
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 81.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 79.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 77.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 75.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 73.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 71.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 69.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 67.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 65.701896245443
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 63.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 61.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 59.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 57.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 55.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 53.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 51.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 49.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 4
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 47.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 45.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 43.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 41.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 39.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 37.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 35.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 33.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 31.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 29.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 27.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 25.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 23.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 21.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 19.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 17.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 15.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 13.70189624544299
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 11.701896245442983
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 10.43993085681816
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 8.701896245442983
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 7.43993085681816
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 5.701896245442983
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 4.43993085681816
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 2.701896245442983
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = 1.43993085681816
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -0.2981037545570171
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -1.56006914318184
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -3.298103754557017
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -4.56006914318184
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -6.075363842883418
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -8.56006914318184
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -10.075363842883418
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 0
Node = 2
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -12.56006914318184
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -13.508709399183756
getNodeById = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
getNodeById2 = Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -14.731449310857355
Langrangian relaxation converged after 53 iterations. Delta = 0.0
Node.spans:
amr-unknown List()
sound-01 List()
- List()
he List()
voice List()
they List()
ever List()
say-01 List()
you List()
clearUnalignedNodes():  removing unaligned node: Some(a2) / amr-unknown
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(h) / he
clearUnalignedNodes():  removing unaligned node: Some(e) / ever
OracleGraph nodes = List(sound-01, voice, they, say-01, you)
OracleGraph triples: (s / say-01, ARG0, t / they)
(s / say-01, ARG1, s2 / sound-01)
(s / say-01, ARG2, y / you)
(s2 / sound-01, ARG1, v / voice)
rootDependencyPaths = List(List(8, 2, 0), List(8, 2, 1), List(8, 2), List(8, 2, 3), List(8, 2, 3, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 11, 9), List(8, 11, 10), List(8, 11), List(8, 12), List(8, 13))
Oracle Span 2-3:  say => say-01
Oracle Span 11-12:  sound => sound-01
Oracle Span 0-1:  They => they
Oracle Span 10-11:  voice => voice
Oracle Span 4-5:  you => you

Incorrect span: sound => sound-02
Missing span: sound => sound-01
Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	never	_	RB	RB	_	3	neg	_	_
3	say	_	VBP	VBP	_	9	dep	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	you	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	"	_	''	''	_	9	punct	_	_
8	What	_	WP	WP	_	9	dobj	_	_
9	does	_	VBZ	VBZ	_	0	root	_	_
10	his	_	PRP$	PRP$	_	12	poss	_	_
11	voice	_	NN	NN	_	12	nn	_	_
12	sound	_	NN	NN	_	9	dobj	_	_
13	like	_	IN	IN	_	9	prep	_	_
14	?	_	.	.	_	9	punct	_	_

Oracle:
(s / say-01, ARG0, t / they)
(s / say-01, ARG1, s2 / sound-01)
(s / say-01, ARG2, y / you)
(s2 / sound-01, ARG1, v / voice)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),sound,sound-02,false), Span(10,11,List(1),voice,voice,false), Span(4,5,List(2),you,you,false), Span(2,3,List(3),say,say-01,false), Span(0,1,List(4),They,they,false)),Map(2 -> you, 1 -> voice, 4 -> they, 0 -> sound-02, 3 -> say-01),Map(t -> they, s2 -> say-01, s -> sound-02, v -> voice, y -> you))),[Ljava.lang.String;@bcec361,Annotation([Ljava.lang.String;@26794848,[Ljava.lang.String;@302552ec,[Ljava.lang.String;@3d285d7e),Annotation([Ljava.lang.String;@40005471,[Ljava.lang.String;@2cd76f31,[Ledu.cmu.lti.nlp.amr.Dependency;@367ffa75),Annotation([Ljava.lang.String;@49438269,[Ljava.lang.String;@ba2f4ec,[Ljava.lang.String;@1c1bbc4e),Annotation([Ljava.lang.String;@55fe41ea,[Ljava.lang.String;@fbd1f6,[Ledu.cmu.lti.nlp.amr.Entity;@1ce24091))
AMR:
(s / sound-02, ARG1, v / voice)
(s2 / say-01, ARG0, t / they)
(s2 / say-01, ARG1, s / sound-02)
(s2 / say-01, ARG2, y / you)

Decoded in 138,834 microseconds
Sentence: What games does he love best ?


--- Decoder1 ---

Sentence: What games does he love best ?
word = What
Finding date entities
Possible invoked concepts: List()
word = games
Finding date entities
Possible invoked concepts: List()
word = does
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false)))
concept = PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false))
score = 0
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = love
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(love),love-01,PhraseConceptFeatures(10.0,-0.7884573603642702,false,false)), PhraseConceptPair(List(love),love-02,PhraseConceptFeatures(1.0,-3.0910424533583156,false,false)))
concept = PhraseConceptPair(List(love),love-01,PhraseConceptFeatures(10.0,-0.7884573603642702,false,false))
score = 0
adding concept:PhraseConceptPair(List(love),love-01,PhraseConceptFeatures(10.0,-0.7884573603642702,false,false))
concept = PhraseConceptPair(List(love),love-02,PhraseConceptFeatures(1.0,-3.0910424533583156,false,false))
score = 0
word = best
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(best),(good :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(best),(good :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(best),(good :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),3)), Some((0.021799740573671948,PhraseConceptPair(List(love),love-01,PhraseConceptFeatures(10.0,-0.7884573603642702,false,false)),4)), Some((0.015753682017072397,PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),5)), None)
Adding concept: (well :degree most)
nodeIds = List(0, 1)
concepts = List(well, most)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.01575368201707239
Adding concept: love-01
nodeIds = List(2)
concepts = List(love-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(love),love-01,PhraseConceptFeatures(10.0,-0.7884573603642702,false,false))
feats:
bias 1.0
c|p -0.7884573603642702
len 1.0

score:
0.037553422590744345
Adding concept: he
nodeIds = List(3)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.06317222247116484
Decoder1 Spans:
Span 1:  best => (well :degree most)
Span 2:  he => he
Span 3:  love => love-01
Decoder1 feats:
bias 3.0
c|p -2.5855787727337107
len 3.0

Concepts:
id = 2 concept = love-01
id = 1 concept = most
id = 0 concept = well
id = 3 concept = he
Spans:
Span 5-6:  best => (well :degree most)
Span 3-4:  he => he
Span 4-5:  love => love-01

rootDependencyPaths = List(List(4, 1, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 5), List(4, 6))
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -58.5006589711663
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -60.5006589711663
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -62.5006589711663
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -64.5006589711663
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -66.5006589711663
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -68.5006589711663
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -70.5006589711663
getNodeById = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
getNodeById2 = Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he)
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -71.66797496809441
Langrangian relaxation converged after 8 iterations. Delta = 0.0
Node.spans:
most List()
amr-unknown List()
game List()
he List()
love-01 List()
good List()
clearUnalignedNodes():  removing unaligned node: Some(a2) / amr-unknown
OracleGraph nodes = List(most, game, he, love-01, good)
OracleGraph triples: (g / good, degree, m / most)
(l / love-01, ARG0, h / he)
(l / love-01, mod, g / good)
rootDependencyPaths = List(List(4, 1, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 5), List(4, 6))
Oracle Span 5-6:  best => (good :degree most)
Oracle Span 1-2:  games => game
Oracle Span 3-4:  he => he
Oracle Span 4-5:  love => love-01

Incorrect span: best => (well :degree most)
Missing span: best => (good :degree most)
Missing span: games => game
Dependencies:
1	What	_	WDT	WDT	_	2	det	_	_
2	games	_	NNS	NNS	_	5	dobj	_	_
3	does	_	VBZ	VBZ	_	5	aux	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	love	_	VB	VB	_	0	root	_	_
6	best	_	RBS	RBS	_	5	advmod	_	_
7	?	_	.	.	_	5	punct	_	_

Oracle:
(g / good, degree, m / most)
(l / love-01, ARG0, h / he)
(l / love-01, mod, g / good)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(1, 0),best,(well :degree most),false), Span(4,5,List(2),love,love-01,false), Span(3,4,List(3),he,he,false)),Map(2 -> love-01, 1 -> most, 0 -> well, 3 -> he),Map(w -> well, h -> he, m -> most, l -> love-01))),[Ljava.lang.String;@5dda768f,Annotation([Ljava.lang.String;@7a8c8dcf,[Ljava.lang.String;@24269709,[Ljava.lang.String;@2aceadd4),Annotation([Ljava.lang.String;@24aed80c,[Ljava.lang.String;@3a52dba3,[Ledu.cmu.lti.nlp.amr.Dependency;@2a5c8d3f),Annotation([Ljava.lang.String;@752325ad,[Ljava.lang.String;@279fedbd,[Ljava.lang.String;@b3ca52e),Annotation([Ljava.lang.String;@45c7e403,[Ljava.lang.String;@2925bf5b,[Ledu.cmu.lti.nlp.amr.Entity;@710f4dc7))
AMR:
(l / love-01, ARG0, h / he)
(l / love-01, degree, w / well)
(w / well, degree, m / most)

Decoded in 26,514 microseconds
Sentence: Does he collect butterflies ? "


--- Decoder1 ---

Sentence: Does he collect butterflies ? "
word = Does
Finding date entities
Possible invoked concepts: List()
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = collect
Finding date entities
Possible invoked concepts: List()
word = butterflies
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(butterflies),butterfly,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(butterflies),butterfly,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(butterflies),butterfly,PhraseConceptFeatures(3.0,0.0,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),1)), None, Some((0.029773585223834276,PhraseConceptPair(List(butterflies),butterfly,PhraseConceptFeatures(3.0,0.0,false,false)),3)), None, None)
Adding concept: butterfly
nodeIds = List(0)
concepts = List(butterfly)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(butterflies),butterfly,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: he
nodeIds = List(1)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.055392385104254774
Decoder1 Spans:
Span 1:  butterflies => butterfly
Span 2:  he => he
Decoder1 feats:
bias 2.0
c|p -0.41082705124954977
len 2.0

Concepts:
id = 1 concept = he
id = 0 concept = butterfly
Spans:
Span 3-4:  butterflies => butterfly
Span 1-2:  he => he

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 4), List(2, 5))
getNodeById = Map(1 -> he, 0 -> butterfly)
getNodeById2 = Map(1 -> he, 0 -> butterfly)
getNodeById = Map(1 -> he, 0 -> butterfly)
getNodeById2 = Map(1 -> he, 0 -> butterfly)
Node = 0
Node = 1
visited = Set(0, 1)
Alg2 returning score = -65.59506823287822
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
butterfly List()
he List()
collect-01 List()
interrogative List()
clearUnalignedNodes():  removing unaligned node: None / interrogative
OracleGraph nodes = List(butterfly, he, collect-01)
OracleGraph triples: (c / collect-01, ARG0, h / he)
(c / collect-01, ARG1, b / butterfly)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 4), List(2, 5))
Oracle Span 3-4:  butterflies => butterfly
Oracle Span 2-3:  collect => collect-01
Oracle Span 1-2:  he => he

Missing span: collect => collect-01
Dependencies:
1	Does	_	MD	MD	_	3	aux	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	collect	_	VBP	VBP	_	0	root	_	_
4	butterflies	_	NNS	NNS	_	3	dobj	_	_
5	?	_	.	.	_	3	punct	_	_
6	"	_	''	''	_	3	punct	_	_

Oracle:
(c / collect-01, ARG0, h / he)
(c / collect-01, ARG1, b / butterfly)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),butterflies,butterfly,false), Span(1,2,List(1),he,he,false)),Map(1 -> he, 0 -> butterfly),Map(h -> he, b -> butterfly))),[Ljava.lang.String;@1ff4931d,Annotation([Ljava.lang.String;@65e98b1c,[Ljava.lang.String;@61322f9d,[Ljava.lang.String;@6ad82709),Annotation([Ljava.lang.String;@510f3d34,[Ljava.lang.String;@7817fd62,[Ledu.cmu.lti.nlp.amr.Dependency;@8297b3a),Annotation([Ljava.lang.String;@2362f559,[Ljava.lang.String;@b2c9a9c,[Ljava.lang.String;@4c178a76),Annotation([Ljava.lang.String;@fa4c865,[Ljava.lang.String;@3bd82cf5,[Ledu.cmu.lti.nlp.amr.Entity;@544fa968))
AMR:
(b / butterfly, poss, h / he)

Decoded in 8,653 microseconds
Sentence: Instead , they demand : " How old is he ?


--- Decoder1 ---

Sentence: Instead , they demand : " How old is he ?
word = Instead
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = demand
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = How
Finding date entities
Possible invoked concepts: List()
word = old
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false)))
concept = PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),2)), None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false)),7)), None, Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),9)), None)
Adding concept: he
nodeIds = List(0)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.025618799880420498
Adding concept: old
nodeIds = List(1)
concepts = List(old)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.055392385104254774
Adding concept: they
nodeIds = List(2)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.07797044980423169
Decoder1 Spans:
Span 1:  he => he
Span 2:  old => old
Span 3:  they => they
Decoder1 feats:
bias 3.0
c|p -1.1223233704776916
len 3.0

Concepts:
id = 2 concept = they
id = 1 concept = old
id = 0 concept = he
Spans:
Span 9-10:  he => he
Span 7-8:  old => old
Span 2-3:  they => they

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 9, 7, 6), List(3, 9, 7), List(3, 9, 8), List(3, 9), List(3, 10))
getNodeById = Map(2 -> they, 1 -> old, 0 -> he)
getNodeById2 = Map(2 -> they, 1 -> old, 0 -> he)
getNodeById = Map(2 -> they, 1 -> old, 0 -> he)
getNodeById2 = Map(2 -> they, 1 -> old, 0 -> he)
Node = 1
Node = 0
Node = 2
visited = Set(0, 1, 2)
Alg2 returning score = -184.96620707435068
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
amr-unknown List()
age-01 List()
he List()
they List()
demand-01 List()
instead-of-91 List()
clearUnalignedNodes():  removing unaligned node: Some(a3) / amr-unknown
clearUnalignedNodes():  removing unaligned node: Some(a2) / age-01
OracleGraph nodes = List(he, they, demand-01, instead-of-91)
OracleGraph triples: (d / demand-01, ARG0, t / they)
(i2 / instead-of-91, ARG1, d / demand-01)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 9, 7, 6), List(3, 9, 7), List(3, 9, 8), List(3, 9), List(3, 10))
Oracle Span 3-4:  demand => demand-01
Oracle Span 9-10:  he => he
Oracle Span 0-1:  Instead => instead-of-91
Oracle Span 2-3:  they => they

Extra span: old => old
Missing span: demand => demand-01
Missing span: Instead => instead-of-91
Dependencies:
1	Instead	_	RB	RB	_	4	advmod	_	_
2	,	_	,	,	_	4	punct	_	_
3	they	_	PRP	PRP	_	4	nsubj	_	_
4	demand	_	VBP	VBP	_	0	root	_	_
5	:	_	:	:	_	4	punct	_	_
6	"	_	''	''	_	4	punct	_	_
7	How	_	WRB	WRB	_	8	advmod	_	_
8	old	_	JJ	JJ	_	10	dep	_	_
9	is	_	VBZ	VBZ	_	10	cop	_	_
10	he	_	PRP	PRP	_	4	dep	_	_
11	?	_	.	.	_	4	punct	_	_

Oracle:
(d / demand-01, ARG0, t / they)
(i2 / instead-of-91, ARG1, d / demand-01)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),he,he,false), Span(7,8,List(1),old,old,false), Span(2,3,List(2),they,they,false)),Map(2 -> they, 1 -> old, 0 -> he),Map(h -> he, t -> they, o -> old))),[Ljava.lang.String;@247bddad,Annotation([Ljava.lang.String;@d35dea7,[Ljava.lang.String;@7770f470,[Ljava.lang.String;@5e5d171f),Annotation([Ljava.lang.String;@24313fcc,[Ljava.lang.String;@7d20d0b,[Ledu.cmu.lti.nlp.amr.Dependency;@77f1baf5),Annotation([Ljava.lang.String;@41a2befb,[Ljava.lang.String;@6c40365c,[Ljava.lang.String;@7bedc48a),Annotation([Ljava.lang.String;@131ef10,[Ljava.lang.String;@55b0dcab,[Ledu.cmu.lti.nlp.amr.Entity;@38afe297))
AMR:
(h / he, domain, t / they)
(o / old, mod, h / he)

Decoded in 16,850 microseconds
Sentence: How many brothers has he ?


--- Decoder1 ---

Sentence: How many brothers has he ?
word = How
Finding date entities
Possible invoked concepts: List()
word = many
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false))
word = brothers
Finding date entities
Possible invoked concepts: List()
word = has
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)))
concept = PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
score = 0
adding concept:PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.029773585223834276,PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false)),1)), None, Some((0.014562515980757347,PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)),3)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),4)), None)
Adding concept: he
nodeIds = List(0)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.025618799880420498
Adding concept: have-03
nodeIds = List(1)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
feats:
bias 1.0
c|p -1.5040773967762742
len 1.0

score:
0.04018131586117783
Adding concept: many
nodeIds = List(2)
concepts = List(many)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.06995490108501211
Decoder1 Spans:
Span 1:  has => have-03
Span 2:  he => he
Span 3:  many => many
Decoder1 feats:
bias 3.0
c|p -1.914904448025824
len 3.0

Concepts:
id = 2 concept = many
id = 1 concept = have-03
id = 0 concept = he
Spans:
Span 3-4:  has => have-03
Span 4-5:  he => he
Span 1-2:  many => many

rootDependencyPaths = List(List(3, 2, 1, 0), List(3, 2, 1), List(3, 2), List(3), List(3, 4), List(3, 5))
getNodeById = Map(2 -> many, 1 -> have-03, 0 -> he)
getNodeById2 = Map(2 -> many, 1 -> have-03, 0 -> he)
getNodeById = Map(2 -> many, 1 -> have-03, 0 -> he)
getNodeById2 = Map(2 -> many, 1 -> have-03, 0 -> he)
Node = 1
Node = 0
Node = 2
visited = Set(0, 1, 2)
Alg2 returning score = -60.22841647871152
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
amr-unknown List()
he List()
person List()
have-rel-role-91 List()
brother List()
clearUnalignedNodes():  removing unaligned node: Some(a) / amr-unknown
clearUnalignedNodes():  removing unaligned node: Some(p) / person
OracleGraph nodes = List(he, have-rel-role-91, brother)
OracleGraph triples: (h / have-rel-role-91, ARG1, h2 / he)
(h / have-rel-role-91, ARG2, b / brother)
rootDependencyPaths = List(List(3, 2, 1, 0), List(3, 2, 1), List(3, 2), List(3), List(3, 4), List(3, 5))
Oracle Span 2-3:  brothers => brother
Oracle Span 3-4:  has => have-rel-role-91
Oracle Span 4-5:  he => he

Incorrect span: has => have-03
Extra span: many => many
Missing span: brothers => brother
Missing span: has => have-rel-role-91
Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	many	_	JJ	JJ	_	3	amod	_	_
3	brothers	_	NNS	NNS	_	4	nsubj	_	_
4	has	_	VBZ	VBZ	_	0	root	_	_
5	he	_	PRP	PRP	_	4	dobj	_	_
6	?	_	.	.	_	4	punct	_	_

Oracle:
(h / have-rel-role-91, ARG1, h2 / he)
(h / have-rel-role-91, ARG2, b / brother)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),he,he,false), Span(3,4,List(1),has,have-03,false), Span(1,2,List(2),many,many,false)),Map(2 -> many, 1 -> have-03, 0 -> he),Map(h -> he, h2 -> have-03, m -> many))),[Ljava.lang.String;@2df3b89c,Annotation([Ljava.lang.String;@23348b5d,[Ljava.lang.String;@70325e14,[Ljava.lang.String;@37ceb1df),Annotation([Ljava.lang.String;@7c9d8e2,[Ljava.lang.String;@20d525,[Ledu.cmu.lti.nlp.amr.Dependency;@6200f9cb),Annotation([Ljava.lang.String;@2002fc1d,[Ljava.lang.String;@69453e37,[Ljava.lang.String;@6f4a47c7),Annotation([Ljava.lang.String;@ae13544,[Ljava.lang.String;@3d34d211,[Ledu.cmu.lti.nlp.amr.Entity;@7dc0f706))
AMR:
(h2 / have-03, ARG0, m / many)
(h2 / have-03, ARG1, h / he)

Decoded in 15,522 microseconds
Sentence: How much does he weigh ?


--- Decoder1 ---

Sentence: How much does he weigh ?
word = How
Finding date entities
Possible invoked concepts: List()
word = much
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = does
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false)))
concept = PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false))
score = 0
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = weigh
Finding date entities
Possible invoked concepts: List()
word = ?
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.02932403466221358,PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),1)), None, Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),3)), None, None)
Adding concept: he
nodeIds = List(0)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.025618799880420498
Adding concept: much
nodeIds = List(1)
concepts = List(much)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.05494283454263407
Decoder1 Spans:
Span 1:  he => he
Span 2:  much => much
Decoder1 feats:
bias 2.0
c|p -0.4552788138203836
len 2.0

Concepts:
id = 1 concept = much
id = 0 concept = he
Spans:
Span 3-4:  he => he
Span 1-2:  much => much

rootDependencyPaths = List(List(4, 1, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 5))
getNodeById = Map(1 -> much, 0 -> he)
getNodeById2 = Map(1 -> much, 0 -> he)
getNodeById = Map(1 -> much, 0 -> he)
getNodeById2 = Map(1 -> much, 0 -> he)
Node = 1
Node = 0
visited = Set(0, 1)
Alg2 returning score = -94.4478147420168
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
amr-unknown List()
he List()
weigh-01 List()
clearUnalignedNodes():  removing unaligned node: Some(a) / amr-unknown
OracleGraph nodes = List(he, weigh-01)
OracleGraph triples: (w / weigh-01, ARG1, h / he)
rootDependencyPaths = List(List(4, 1, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 5))
Oracle Span 3-4:  he => he
Oracle Span 4-5:  weigh => weigh-01

Extra span: much => much
Missing span: weigh => weigh-01
Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	much	_	JJ	JJ	_	5	dep	_	_
3	does	_	VBZ	VBZ	_	5	aux	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	weigh	_	VB	VB	_	0	root	_	_
6	?	_	.	.	_	5	punct	_	_

Oracle:
(w / weigh-01, ARG1, h / he)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),he,he,false), Span(1,2,List(1),much,much,false)),Map(1 -> much, 0 -> he),Map(h -> he, m -> much))),[Ljava.lang.String;@4009e306,Annotation([Ljava.lang.String;@43c1b556,[Ljava.lang.String;@587e5365,[Ljava.lang.String;@22fcf7ab),Annotation([Ljava.lang.String;@2de23121,[Ljava.lang.String;@63475ace,[Ledu.cmu.lti.nlp.amr.Dependency;@4988d8b8),Annotation([Ljava.lang.String;@c0c2f8d,[Ljava.lang.String;@305b7c14,[Ljava.lang.String;@6913c1fb),Annotation([Ljava.lang.String;@66d18979,[Ljava.lang.String;@bccb269,[Ledu.cmu.lti.nlp.amr.Entity;@609cd4d8))
AMR:
(m / much, domain, h / he)

Decoded in 11,576 microseconds
Sentence: How much money does his father make ? "


--- Decoder1 ---

Sentence: How much money does his father make ? "
word = How
Finding date entities
Possible invoked concepts: List()
word = much
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = money
Finding date entities
Possible invoked concepts: List()
word = does
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false)))
concept = PhraseConceptPair(List(does),do-02,PhraseConceptFeatures(1.0,-2.9444389791664407,false,false))
score = 0
word = his
Finding date entities
Possible invoked concepts: List()
word = father
Finding date entities
Possible invoked concepts: List()
word = make
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false)), PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false)), PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)))
concept = PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.02932403466221358,PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),1)), None, None, None, None, None, None, None)
Adding concept: much
nodeIds = List(0)
concepts = List(much)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.029324034662213574
Decoder1 Spans:
Span 1:  much => much
Decoder1 feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

Concepts:
id = 0 concept = much
Spans:
Span 1-2:  much => much

rootDependencyPaths = List(List(6, 2, 1, 0), List(6, 2, 1), List(6, 2), List(6, 3), List(6, 5, 4), List(6, 5), List(6), List(6, 7), List(6, 8))
getNodeById = Map(0 -> much)
getNodeById2 = Map(0 -> much)
getNodeById = Map(0 -> much)
getNodeById2 = Map(0 -> much)
Node = 0
visited = Set(0)
Alg2 returning score = -11.275213265038813
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
have-rel-role-91 List()
he List()
monetary-quantity List()
amr-unknown List()
person List()
make-05 List()
father List()
clearUnalignedNodes():  removing unaligned node: Some(h) / he
clearUnalignedNodes():  removing unaligned node: Some(a) / amr-unknown
clearUnalignedNodes():  removing unaligned node: Some(p) / person
OracleGraph nodes = List(have-rel-role-91, monetary-quantity, make-05, father)
OracleGraph triples: (h2 / have-rel-role-91, ARG2, f / father)
(m / make-05, ARG1, m2 / monetary-quantity)
rootDependencyPaths = List(List(6, 2, 1, 0), List(6, 2, 1), List(6, 2), List(6, 3), List(6, 5, 4), List(6, 5), List(6), List(6, 7), List(6, 8))
Oracle Span 5-6:  father => (have-rel-role-91 :ARG2 father)
Oracle Span 6-7:  make => make-05
Oracle Span 2-3:  money => monetary-quantity

Extra span: much => much
Missing span: make => make-05
Missing span: father => (have-rel-role-91 :ARG2 father)
Missing span: money => monetary-quantity
Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	much	_	JJ	JJ	_	3	amod	_	_
3	money	_	NN	NN	_	7	dobj	_	_
4	does	_	VBZ	VBZ	_	7	aux	_	_
5	his	_	PRP$	PRP$	_	6	poss	_	_
6	father	_	NN	NN	_	7	nsubj	_	_
7	make	_	VB	VB	_	0	root	_	_
8	?	_	.	.	_	7	punct	_	_
9	"	_	''	''	_	7	punct	_	_

Oracle:
(h2 / have-rel-role-91, ARG2, f / father)
(m / make-05, ARG1, m2 / monetary-quantity)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),much,much,false)),Map(0 -> much),Map(m -> much))),[Ljava.lang.String;@17f7cd29,Annotation([Ljava.lang.String;@7d8704ef,[Ljava.lang.String;@13b6aecc,[Ljava.lang.String;@158a8276),Annotation([Ljava.lang.String;@3c3d9b6b,[Ljava.lang.String;@79d8407f,[Ledu.cmu.lti.nlp.amr.Dependency;@5fbe4146),Annotation([Ljava.lang.String;@1e66f1f5,[Ljava.lang.String;@4e50c791,[Ljava.lang.String;@7530ad9c),Annotation([Ljava.lang.String;@58a9760d,[Ljava.lang.String;@71e9ddb4,[Ledu.cmu.lti.nlp.amr.Entity;@394df057))
AMR:


Decoded in 11,472 microseconds
Sentence: Only from these figures do they think they have learned anything about him .


--- Decoder1 ---

Sentence: Only from these figures do they think they have learned anything about him .
word = Only
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Only),only,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(Only),only,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Only),only,PhraseConceptFeatures(3.0,0.0,false,false))
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = these
Finding date entities
Possible invoked concepts: List()
word = figures
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
word = do
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false)), PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)))
concept = PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false))
score = 0
concept = PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
score = 0
adding concept:PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = think
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(think),think-01,PhraseConceptFeatures(10.0,0.0,false,false)))
concept = PhraseConceptPair(List(think),think-01,PhraseConceptFeatures(10.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(think),think-01,PhraseConceptFeatures(10.0,0.0,false,false))
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = learned
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = anything
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false)))
concept = PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
score = 0
adding concept:PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
word = about
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)), PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false)))
concept = PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
adding concept:PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
concept = PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false))
score = 0
word = him
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(Only),only,PhraseConceptFeatures(3.0,0.0,false,false)),0)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false)),3)), Some((0.008412119642531832,PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)),4)), Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),5)), Some((0.029773585223834276,PhraseConceptPair(List(think),think-01,PhraseConceptFeatures(10.0,0.0,false,false)),6)), Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),7)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),8)), Some((0.029773585223834276,PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false)),9)), Some((0.028326374564312088,PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false)),10)), Some((0.010387320494361422,PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)),11)), None, None)
Adding concept: about
nodeIds = List(0)
concepts = List(about)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
feats:
bias 1.0
c|p -1.916922612182061
len 1.0

score:
0.010387320494361418
Adding concept: anything
nodeIds = List(1)
concepts = List(anything)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
feats:
bias 1.0
c|p -0.1431008436406733
len 1.0

score:
0.0387136950586735
Adding concept: learn-01
nodeIds = List(2)
concepts = List(learn-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.06848728028250778
Adding concept: have-03
nodeIds = List(3)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.06865178462911242
Adding concept: they
nodeIds = List(4)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.09122984932908934
Adding concept: think-01
nodeIds = List(5)
concepts = List(think-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(think),think-01,PhraseConceptFeatures(10.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.12100343455292362
Adding concept: they
nodeIds = List(6)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.14358149925290054
Adding concept: do-02
nodeIds = List(7)
concepts = List(do-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
feats:
bias 1.0
c|p -2.1122313645028266
len 1.0

score:
0.15199361889543236
Adding concept: figure
nodeIds = List(8)
concepts = List(figure)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.18176720411926664
Adding concept: only
nodeIds = List(9)
concepts = List(only)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Only),only,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.21154078934310092
Decoder1 Spans:
Span 1:  about => about
Span 2:  anything => anything
Span 3:  do => do-02
Span 4:  figures => figure
Span 5:  have => have-03
Span 6:  learned => learn-01
Span 7:  Only => only
Span 8:  they => they
Span 9:  they => they
Span 10:  think => think-01
Decoder1 feats:
bias 10.0
c|p -8.52300674874963
len 10.0

Concepts:
id = 2 concept = learn-01
id = 5 concept = think-01
id = 8 concept = figure
id = 7 concept = do-02
id = 1 concept = anything
id = 4 concept = they
id = 6 concept = they
id = 9 concept = only
id = 0 concept = about
id = 3 concept = have-03
Spans:
Span 11-12:  about => about
Span 10-11:  anything => anything
Span 4-5:  do => do-02
Span 3-4:  figures => figure
Span 8-9:  have => have-03
Span 9-10:  learned => learn-01
Span 0-1:  Only => only
Span 7-8:  they => they
Span 5-6:  they => they
Span 6-7:  think => think-01

rootDependencyPaths = List(List(4, 0), List(4, 0, 1), List(4, 0, 1, 3, 2), List(4, 0, 1, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 6, 9, 7), List(4, 6, 9, 8), List(4, 6, 9), List(4, 6, 9, 10), List(4, 6, 9, 11), List(4, 6, 9, 11, 12), List(4, 13))
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 148.58011122549374
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 138.75216751709087
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 130.75216751709087
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 122.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 114.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 106.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 98.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 90.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 82.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 74.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 66.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 58.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 50.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 42.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 9
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 34.75216751709088
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 9
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 27.400579653135082
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 9
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 21.400579653135082
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 9
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 15.400579653135123
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 9
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 9.400579653135123
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 9
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = 3.400579653135124
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 4
Node = 9
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -2.599420346864876
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -8.188244721382675
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -12.18824472138269
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -16.188244721382674
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -20.188244721382674
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 5
Node = 8
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -24.188244721382674
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 4
Node = 9
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -27.8088319147531
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -28.96348844556354
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 4
Node = 9
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -30.8088319147531
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -31.96348844556354
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 4
Node = 9
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -33.8088319147531
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -34.96348844556354
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 4
Node = 9
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -36.8088319147531
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -37.96348844556354
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 4
Node = 9
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -39.8088319147531
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -40.96348844556354
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 4
Node = 9
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -42.8088319147531
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -43.96348844556354
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 4
Node = 9
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -45.8088319147531
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -46.96348844556354
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 4
Node = 9
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -47.98122578250553
getNodeById = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03)
getNodeById2 = Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 0 -> about, 9 -> only, 3 -> have-03)
Node = 7
Node = 8
Node = 5
Node = 6
Node = 3
Node = 2
Node = 9
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -48.730744081542056
Langrangian relaxation converged after 42 iterations. Delta = 0.0
Node.spans:
this List()
figure List()
learn-01 List()
he List()
anything List()
they List()
think-01 List()
only List()
clearUnalignedNodes():  removing unaligned node: Some(t3) / this
clearUnalignedNodes():  removing unaligned node: Some(h) / he
OracleGraph nodes = List(figure, learn-01, anything, they, think-01, only)
OracleGraph triples: (l / learn-01, ARG0, t2 / they)
(l / learn-01, ARG1, a / anything)
(l / learn-01, source, f / figure)
(t / think-01, ARG0, t2 / they)
(t / think-01, ARG1, l / learn-01)
rootDependencyPaths = List(List(4, 0), List(4, 0, 1), List(4, 0, 1, 3, 2), List(4, 0, 1, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 6, 9, 7), List(4, 6, 9, 8), List(4, 6, 9), List(4, 6, 9, 10), List(4, 6, 9, 11), List(4, 6, 9, 11, 12), List(4, 13))
Oracle Span 10-11:  anything => anything
Oracle Span 3-4:  figures => figure
Oracle Span 9-10:  learned => learn-01
Oracle Span 0-1:  Only => only
Oracle Span 5-6:  they => they
Oracle Span 6-7:  think => think-01

Extra span: about => about
Extra span: have => have-03
Extra span: they => they
Extra span: do => do-02
Dependencies:
1	Only	_	JJ	JJ	_	5	nsubj	_	_
2	from	_	IN	IN	_	1	prep	_	_
3	these	_	DT	DT	_	4	det	_	_
4	figures	_	NNS	NNS	_	2	pobj	_	_
5	do	_	VBP	VBP	_	0	root	_	_
6	they	_	PRP	PRP	_	7	nsubj	_	_
7	think	_	VBP	VBP	_	5	ccomp	_	_
8	they	_	PRP	PRP	_	10	nsubj	_	_
9	have	_	VBP	VBP	_	10	aux	_	_
10	learned	_	VBN	VBN	_	7	ccomp	_	_
11	anything	_	NN	NN	_	10	dobj	_	_
12	about	_	IN	IN	_	10	prep	_	_
13	him	_	PRP	PRP	_	12	pobj	_	_
14	.	_	.	.	_	5	punct	_	_

Oracle:
(l / learn-01, ARG0, t2 / they)
(l / learn-01, ARG1, a / anything)
(l / learn-01, source, f / figure)
(t / think-01, ARG0, t2 / they)
(t / think-01, ARG1, l / learn-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),about,about,false), Span(10,11,List(1),anything,anything,false), Span(9,10,List(2),learned,learn-01,false), Span(8,9,List(3),have,have-03,false), Span(7,8,List(4),they,they,false), Span(6,7,List(5),think,think-01,false), Span(5,6,List(6),they,they,false), Span(4,5,List(7),do,do-02,false), Span(3,4,List(8),figures,figure,false), Span(0,1,List(9),Only,only,false)),Map(2 -> learn-01, 5 -> think-01, 8 -> figure, 7 -> do-02, 1 -> anything, 4 -> they, 6 -> they, 9 -> only, 0 -> about, 3 -> have-03),Map(h -> have-03, t -> they, d -> do-02, t3 -> they, a -> about, t2 -> think-01, a2 -> anything, l -> learn-01, o -> only, f -> figure))),[Ljava.lang.String;@4961f6af,Annotation([Ljava.lang.String;@5aebe890,[Ljava.lang.String;@65d09a04,[Ljava.lang.String;@33c911a1),Annotation([Ljava.lang.String;@75db5df9,[Ljava.lang.String;@707194ba,[Ledu.cmu.lti.nlp.amr.Dependency;@1190200a),Annotation([Ljava.lang.String;@6a2f6f80,[Ljava.lang.String;@45b4c3a9,[Ljava.lang.String;@399c4be1),Annotation([Ljava.lang.String;@291caca8,[Ljava.lang.String;@385e9564,[Ledu.cmu.lti.nlp.amr.Entity;@5b94b04d))
AMR:
(a2 / anything, location, a / about)
(d / do-02, ARG0, t3 / they)
(d / do-02, ARG1, t2 / think-01)
(d / do-02, ARG2, f / figure)
(h / have-03, ARG1, o / only)
(l / learn-01, ARG0, t / they)
(l / learn-01, ARG1, a2 / anything)
(t2 / think-01, ARG1, l / learn-01)
(t2 / think-01, ARG2, t3 / they)
(t2 / think-01, manner, h / have-03)

Decoded in 276,796 microseconds
Sentence: If you were to say to the grown - ups : " I saw a beautiful house made of rosy brick , with geraniums in the windows and doves on the roof , " they would not be able to get any idea of that house at all .


--- Decoder1 ---

Sentence: If you were to say to the grown - ups : " I saw a beautiful house made of rosy brick , with geraniums in the windows and doves on the roof , " they would not be able to get any idea of that house at all .
word = If
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)))
concept = PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
score = 0
adding concept:PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = were
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = say
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)))
concept = PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
score = 0
adding concept:PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = grown
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
word = -
Finding date entities
Possible invoked concepts: List()
word = ups
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = saw
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = beautiful
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false)))
concept = PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false))
word = house
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = rosy
Finding date entities
Possible invoked concepts: List()
word = brick
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = with
Finding date entities
Possible invoked concepts: List()
word = geraniums
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = windows
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = doves
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = roof
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = not
Finding date entities
Possible invoked concepts: List()
word = be
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false)))
concept = PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false))
score = 0
word = able
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = get
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false)), PhraseConceptPair(List(get),get-05,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false)))
concept = PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
score = 0
adding concept:PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
concept = PhraseConceptPair(List(get),get-05,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false))
score = 0
word = any
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false)), PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)))
concept = PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false))
score = 0
concept = PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
score = 0
adding concept:PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
word = idea
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = house
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.0011206685260514437,PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)),0)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),1)), None, None, Some((0.020663730542327237,PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)),4)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)),7)), None, None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),12)), Some((0.029773585223834276,PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false)),13)), None, Some((0.029773585223834276,PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false)),15)), Some((0.029773585223834276,PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)),16)), Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),17)), None, None, None, None, None, None, None, None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),27)), None, None, None, None, None, None, Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),34)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false)),38)), None, Some((0.011653123197224401,PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false)),40)), Some((0.017940394404303485,PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)),41)), Some((0.029773585223834276,PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false)),42)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),44)), Some((0.029773585223834276,PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)),45)), None, Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),47)), None)
Adding concept: all
nodeIds = List(0)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.019261665021472682
Adding concept: house
nodeIds = List(1)
concepts = List(house)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04903525024530696
Adding concept: that
nodeIds = List(2)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.06565305863452274
Adding concept: idea
nodeIds = List(3)
concepts = List(idea)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.09542664385835702
Adding concept: any
nodeIds = List(4)
concepts = List(any)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
feats:
bias 1.0
c|p -1.1700712526502546
len 1.0

score:
0.1133670382626605
Adding concept: get-01
nodeIds = List(5)
concepts = List(get-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
feats:
bias 1.0
c|p -1.791759469228055
len 1.0

score:
0.12502016145988487
Adding concept: possible
nodeIds = List(6)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.15479374668371915
Adding concept: they
nodeIds = List(7)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.17737181138369607
Adding concept: and
nodeIds = List(8)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.1963297532061046
Adding concept: make-01
nodeIds = List(9)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.20841329124984587
Adding concept: house
nodeIds = List(10)
concepts = List(house)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.23818687647368014
Adding concept: beautiful
nodeIds = List(11)
concepts = List(beautiful)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2679604616975144
Adding concept: see-01
nodeIds = List(12)
concepts = List(see-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2977340469213487
Adding concept: i
nodeIds = List(13)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.32378325333957797
Adding concept: grown-up
nodeIds = List(14)
concepts = List(grown-up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.35355683856341225
Adding concept: say-01
nodeIds = List(15)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
feats:
bias 1.0
c|p -0.9007865453381898
len 1.0

score:
0.3742205691057395
Adding concept: you
nodeIds = List(16)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.4013659322005949
Adding concept: cause-01
nodeIds = List(17)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
feats:
bias 1.0
c|p -2.833213344056216
len 1.0

score:
0.4024866007266463
Decoder1 Spans:
Span 1:  able => possible
Span 2:  all => all
Span 3:  and => and
Span 4:  any => any
Span 5:  beautiful => beautiful
Span 6:  get => get-01
Span 7:  grown => grown-up
Span 8:  house => house
Span 9:  house => house
Span 10:  I => i
Span 11:  idea => idea
Span 12:  If => cause-01
Span 13:  made => make-01
Span 14:  saw => see-01
Span 15:  say => say-01
Span 16:  that => that
Span 17:  they => they
Span 18:  you => you
Decoder1 feats:
bias 18.0
c|p -13.19440311166695
len 18.0

Concepts:
id = 2 concept = that
id = 5 concept = get-01
id = 12 concept = see-01
id = 15 concept = say-01
id = 8 concept = and
id = 7 concept = they
id = 17 concept = cause-01
id = 1 concept = house
id = 4 concept = any
id = 11 concept = beautiful
id = 14 concept = grown-up
id = 6 concept = possible
id = 0 concept = all
id = 9 concept = make-01
id = 16 concept = you
id = 3 concept = idea
id = 10 concept = house
id = 13 concept = i
Spans:
Span 38-39:  able => possible
Span 47-48:  all => all
Span 27-28:  and => and
Span 41-42:  any => any
Span 15-16:  beautiful => beautiful
Span 40-41:  get => get-01
Span 7-8:  grown => grown-up
Span 45-46:  house => house
Span 16-17:  house => house
Span 12-13:  I => i
Span 42-43:  idea => idea
Span 0-1:  If => cause-01
Span 17-18:  made => make-01
Span 13-14:  saw => see-01
Span 4-5:  say => say-01
Span 44-45:  that => that
Span 34-35:  they => they
Span 1-2:  you => you

rootDependencyPaths = List(List(38, 13, 2, 0), List(38, 13, 2, 1), List(38, 13, 2), List(38, 13, 2, 4, 3), List(38, 13, 2, 4), List(38, 13, 2, 4, 5), List(38, 13, 2, 4, 5, 7, 6), List(38, 13, 2, 4, 5, 7), List(38, 13, 2, 4, 5, 7, 8), List(38, 13, 2, 4, 5, 7, 9), List(38, 13, 2, 4, 5, 7, 10), List(38, 13, 2, 4, 11), List(38, 13, 12), List(38, 13), List(38, 13, 17, 16, 14), List(38, 13, 17, 16, 15), List(38, 13, 17, 16), List(38, 13, 17), List(38, 13, 17, 18), List(38, 13, 17, 18, 20, 19), List(38, 13, 17, 18, 20), List(38, 13, 17, 21), List(38, 13, 17, 22), List(38, 13, 17, 22, 23), List(38, 13, 17, 22, 23, 24), List(38, 13, 17, 22, 23, 24, 26, 25), List(38, 13, 17, 22, 23, 24, 26), List(38, 13, 17, 22, 23, 24, 26, 27), List(38, 13, 17, 22, 23, 24, 26, 28), List(38, 13, 17, 22, 23, 24, 26, 29), List(38, 13, 17, 22, 23, 24, 26, 29, 31, 30), List(38, 13, 17, 22, 23, 24, 26, 29, 31), List(38, 32), List(38, 33), List(38, 34), List(38, 35), List(38, 36), List(38, 37), List(38), List(38, 40, 39), List(38, 40), List(38, 40, 42, 41), List(38, 40, 42), List(38, 40, 42, 43), List(38, 40, 42, 43, 45, 44), List(38, 40, 42, 43, 45), List(38, 40, 42, 43, 45, 46), List(38, 40, 42, 43, 45, 46, 47), List(38, 48))
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 10
Node = 15
Node = 0
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -135.9280222503373
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -145.9486385343544
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -153.9486385343544
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -161.9486385343544
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -169.94863853435436
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -177.94863853435436
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -185.94863853435436
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -193.22253322994635
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -200.9486385343543
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -208.2225332299464
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -215.94863853435436
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -223.2225332299464
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -230.94863853435436
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -238.11428947507898
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -243.84039477948693
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -249.11428947507898
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 8
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -254.84039477948693
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -259.3998631171608
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -265.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -269.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -273.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -277.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -281.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 13
Node = 16
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -285.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -289.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 9
Node = 16
Node = 13
Node = 0
Node = 10
Node = 15
Node = 5
Node = 11
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -293.0570528467862
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -296.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 9
Node = 16
Node = 13
Node = 0
Node = 10
Node = 15
Node = 5
Node = 11
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -300.0570528467862
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -303.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 9
Node = 16
Node = 13
Node = 0
Node = 10
Node = 15
Node = 5
Node = 11
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -307.0570528467862
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -310.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 9
Node = 16
Node = 13
Node = 0
Node = 10
Node = 15
Node = 5
Node = 11
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -314.0570528467862
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -317.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 9
Node = 16
Node = 13
Node = 0
Node = 10
Node = 15
Node = 5
Node = 11
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -321.0570528467862
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -324.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 9
Node = 16
Node = 13
Node = 0
Node = 10
Node = 15
Node = 5
Node = 11
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -328.0570528467862
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -331.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 16
Node = 13
Node = 15
Node = 5
Node = 9
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 0
Node = 10
Node = 2
Node = 4
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -334.5324706910916
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -339.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 16
Node = 13
Node = 15
Node = 5
Node = 9
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 0
Node = 10
Node = 2
Node = 4
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -342.5324706910916
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -347.12596842156876
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 16
Node = 13
Node = 15
Node = 5
Node = 9
Node = 14
Node = 1
Node = 6
Node = 3
Node = 7
Node = 0
Node = 10
Node = 2
Node = 4
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -350.5324706910916
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -355.1017127078817
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -356.66666382240885
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 16
Node = 13
Node = 5
Node = 15
Node = 9
Node = 1
Node = 3
Node = 7
Node = 14
Node = 0
Node = 10
Node = 2
Node = 4
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -357.57713055218716
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 9
Node = 16
Node = 13
Node = 5
Node = 0
Node = 10
Node = 15
Node = 1
Node = 3
Node = 7
Node = 11
Node = 14
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -360.66666382240885
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 16
Node = 13
Node = 5
Node = 15
Node = 9
Node = 1
Node = 3
Node = 7
Node = 14
Node = 0
Node = 10
Node = 2
Node = 4
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -361.57713055218716
getNodeById = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i)
getNodeById2 = Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 9 -> make-01, 0 -> all, 16 -> you, 10 -> house, 3 -> idea, 13 -> i)
Node = 17
Node = 8
Node = 12
Node = 6
Node = 16
Node = 9
Node = 13
Node = 5
Node = 15
Node = 0
Node = 10
Node = 1
Node = 3
Node = 7
Node = 14
Node = 11
Node = 2
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -364.31047140352126
Langrangian relaxation converged after 48 iterations. Delta = 0.0
Node.spans:
at List()
window List()
geranium List()
and List()
get-01 List()
you List()
house List()
any List()
all List()
brick List()
- List()
idea List()
make-01 List()
grown-up List()
possible List()
roof List()
dove List()
rosy List()
beautiful List()
say-01 List()
see-01 List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(at, window, geranium, and, get-01, you, house, any, all, brick, idea, make-01, grown-up, possible, roof, dove, rosy, beautiful, say-01, see-01)
OracleGraph triples: (a2 / at, mod, a3 / all)
(a4 / and, op, d / dove)
(a4 / and, op, g3 / geranium)
(b / brick, mod, r / rosy)
(d / dove, location, r2 / roof)
(g / get-01, ARG0, g2 / grown-up)
(g / get-01, ARG1, i / idea)
(g3 / geranium, location, w / window)
(h2 / house, accompanier, a4 / and)
(h2 / house, mod, b3 / beautiful)
(i / idea, mod, a / any)
(i / idea, mod, a2 / at)
(i / idea, topic, h2 / house)
(m / make-01, ARG1, h2 / house)
(m / make-01, ARG2, b / brick)
(p / possible, condition, s / say-01)
(p / possible, domain, g / get-01)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, g2 / grown-up)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, h2 / house)
rootDependencyPaths = List(List(38, 13, 2, 0), List(38, 13, 2, 1), List(38, 13, 2), List(38, 13, 2, 4, 3), List(38, 13, 2, 4), List(38, 13, 2, 4, 5), List(38, 13, 2, 4, 5, 7, 6), List(38, 13, 2, 4, 5, 7), List(38, 13, 2, 4, 5, 7, 8), List(38, 13, 2, 4, 5, 7, 9), List(38, 13, 2, 4, 5, 7, 10), List(38, 13, 2, 4, 11), List(38, 13, 12), List(38, 13), List(38, 13, 17, 16, 14), List(38, 13, 17, 16, 15), List(38, 13, 17, 16), List(38, 13, 17), List(38, 13, 17, 18), List(38, 13, 17, 18, 20, 19), List(38, 13, 17, 18, 20), List(38, 13, 17, 21), List(38, 13, 17, 22), List(38, 13, 17, 22, 23), List(38, 13, 17, 22, 23, 24), List(38, 13, 17, 22, 23, 24, 26, 25), List(38, 13, 17, 22, 23, 24, 26), List(38, 13, 17, 22, 23, 24, 26, 27), List(38, 13, 17, 22, 23, 24, 26, 28), List(38, 13, 17, 22, 23, 24, 26, 29), List(38, 13, 17, 22, 23, 24, 26, 29, 31, 30), List(38, 13, 17, 22, 23, 24, 26, 29, 31), List(38, 32), List(38, 33), List(38, 34), List(38, 35), List(38, 36), List(38, 37), List(38), List(38, 40, 39), List(38, 40), List(38, 40, 42, 41), List(38, 40, 42), List(38, 40, 42, 43), List(38, 40, 42, 43, 45, 44), List(38, 40, 42, 43, 45), List(38, 40, 42, 43, 45, 46), List(38, 40, 42, 43, 45, 46, 47), List(38, 48))
Oracle Span 38-39:  able => possible
Oracle Span 47-48:  all => all
Oracle Span 27-28:  and => and
Oracle Span 41-42:  any => any
Oracle Span 46-47:  at => at
Oracle Span 15-16:  beautiful => beautiful
Oracle Span 20-21:  brick => brick
Oracle Span 28-29:  doves => dove
Oracle Span 23-24:  geraniums => geranium
Oracle Span 40-41:  get => get-01
Oracle Span 7-8:  grown => grown-up
Oracle Span 16-17:  house => house
Oracle Span 42-43:  idea => idea
Oracle Span 17-18:  made => make-01
Oracle Span 31-32:  roof => roof
Oracle Span 19-20:  rosy => rosy
Oracle Span 13-14:  saw => see-01
Oracle Span 4-5:  say => say-01
Oracle Span 26-27:  windows => window
Oracle Span 1-2:  you => you

Extra span: house => house
Extra span: that => that
Extra span: they => they
Extra span: I => i
Extra span: If => cause-01
Missing span: doves => dove
Missing span: roof => roof
Missing span: geraniums => geranium
Missing span: windows => window
Missing span: brick => brick
Missing span: rosy => rosy
Missing span: at => at
Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	were	_	VBD	VBD	_	14	advcl	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	say	_	VB	VB	_	3	xcomp	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	grown	_	JJ	JJ	_	6	pobj	_	_
9	-	_	:	:	_	8	punct	_	_
10	ups	_	NNS	NNS	_	8	dep	_	_
11	:	_	:	:	_	8	punct	_	_
12	"	_	''	''	_	5	punct	_	_
13	I	_	PRP	PRP	_	14	nsubj	_	_
14	saw	_	VBD	VBD	_	39	ccomp	_	_
15	a	_	DT	DT	_	17	det	_	_
16	beautiful	_	JJ	JJ	_	17	amod	_	_
17	house	_	NN	NN	_	18	nsubj	_	_
18	made	_	VBD	VBD	_	14	ccomp	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	rosy	_	JJ	JJ	_	21	amod	_	_
21	brick	_	NN	NN	_	19	pobj	_	_
22	,	_	,	,	_	18	punct	_	_
23	with	_	IN	IN	_	18	prep	_	_
24	geraniums	_	NNS	NNS	_	23	pobj	_	_
25	in	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	windows	_	NNS	NNS	_	25	pobj	_	_
28	and	_	CC	CC	_	27	cc	_	_
29	doves	_	NNS	NNS	_	27	conj	_	_
30	on	_	IN	IN	_	27	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	roof	_	NN	NN	_	30	pobj	_	_
33	,	_	,	,	_	39	punct	_	_
34	"	_	''	''	_	39	punct	_	_
35	they	_	PRP	PRP	_	39	nsubj	_	_
36	would	_	MD	MD	_	39	aux	_	_
37	not	_	RB	RB	_	39	neg	_	_
38	be	_	VB	VB	_	39	cop	_	_
39	able	_	JJ	JJ	_	0	root	_	_
40	to	_	TO	TO	_	41	aux	_	_
41	get	_	VB	VB	_	39	xcomp	_	_
42	any	_	DT	DT	_	43	det	_	_
43	idea	_	NN	NN	_	41	dobj	_	_
44	of	_	IN	IN	_	43	prep	_	_
45	that	_	DT	DT	_	46	det	_	_
46	house	_	NN	NN	_	44	pobj	_	_
47	at	_	IN	IN	_	46	advmod	_	_
48	all	_	DT	DT	_	47	pobj	_	_
49	.	_	.	.	_	39	punct	_	_

Oracle:
(a2 / at, mod, a3 / all)
(a4 / and, op, d / dove)
(a4 / and, op, g3 / geranium)
(b / brick, mod, r / rosy)
(d / dove, location, r2 / roof)
(g / get-01, ARG0, g2 / grown-up)
(g / get-01, ARG1, i / idea)
(g3 / geranium, location, w / window)
(h2 / house, accompanier, a4 / and)
(h2 / house, mod, b3 / beautiful)
(i / idea, mod, a / any)
(i / idea, mod, a2 / at)
(i / idea, topic, h2 / house)
(m / make-01, ARG1, h2 / house)
(m / make-01, ARG2, b / brick)
(p / possible, condition, s / say-01)
(p / possible, domain, g / get-01)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, g2 / grown-up)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, h2 / house)

Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),all,all,false), Span(45,46,List(1),house,house,false), Span(44,45,List(2),that,that,false), Span(42,43,List(3),idea,idea,false), Span(41,42,List(4),any,any,false), Span(40,41,List(5),get,get-01,false), Span(38,39,List(6),able,possible,false), Span(34,35,List(7),they,they,false), Span(27,28,List(8),and,and,false), Span(17,18,List(9),made,make-01,false), Span(16,17,List(10),house,house,false), Span(15,16,List(11),beautiful,beautiful,false), Span(13,14,List(12),saw,see-01,false), Span(12,13,List(13),I,i,false), Span(7,8,List(14),grown,grown-up,false), Span(4,5,List(15),say,say-01,false), Span(1,2,List(16),you,you,false), Span(0,1,List(17),If,cause-01,false)),Map(2 -> that, 5 -> get-01, 12 -> see-01, 15 -> say-01, 8 -> and, 7 -> they, 17 -> cause-01, 1 -> house, 4 -> any, 11 -> beautiful, 14 -> grown-up, 6 -> possible, 0 -> all, 9 -> make-01, 16 -> you, 3 -> idea, 10 -> house, 13 -> i),Map(h -> house, s2 -> say-01, h2 -> house, t -> that, b -> beautiful, a3 -> and, s -> see-01, m -> make-01, g2 -> grown-up, y -> you, g -> get-01, p -> possible, a -> all, i2 -> i, t2 -> they, i -> idea, a2 -> any, c -> cause-01))),[Ljava.lang.String;@8c3b9d,Annotation([Ljava.lang.String;@4c39bec8,[Ljava.lang.String;@f79e,[Ljava.lang.String;@7ee8290b),Annotation([Ljava.lang.String;@1f59a598,[Ljava.lang.String;@1e178745,[Ledu.cmu.lti.nlp.amr.Dependency;@192c3f1e),Annotation([Ljava.lang.String;@26b3fd41,[Ljava.lang.String;@7494f96a,[Ljava.lang.String;@561b6512),Annotation([Ljava.lang.String;@2e377400,[Ljava.lang.String;@1757cd72,[Ledu.cmu.lti.nlp.amr.Entity;@445b295b))
AMR:
(c / cause-01, ARG0, s / see-01)
(c / cause-01, ARG1, a3 / and)
(g / get-01, ARG0, t2 / they)
(g / get-01, ARG1, i / idea)
(g / get-01, location, h / house)
(h / house, mod, t / that)
(h2 / house, mod, b / beautiful)
(i / idea, mod, a2 / any)
(m / make-01, ARG0, h2 / house)
(m / make-01, ARG1, a / all)
(p / possible, domain, g / get-01)
(s / see-01, ARG0, i2 / i)
(s / see-01, ARG1, m / make-01)
(s / see-01, ARG2, y / you)
(s / see-01, mod, p / possible)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, g2 / grown-up)

Decoded in 1,176,303 microseconds
Sentence: You would have to say to them : " I saw a house that cost $ 20,000 . "


--- Decoder1 ---

Sentence: You would have to say to them : " I saw a house that cost $ 20,000 . "
word = You
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)))
concept = PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
score = 0
adding concept:PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = say
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)))
concept = PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
score = 0
adding concept:PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = them
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = saw
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = house
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = cost
Finding date entities
Possible invoked concepts: List()
word = $
Finding date entities
Possible invoked concepts: List()
word = 20,000
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.02918429879609327,PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)),0)), None, Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),2)), None, Some((0.020663730542327237,PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)),4)), None, None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),9)), Some((0.029773585223834276,PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false)),10)), None, Some((0.029773585223834276,PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)),12)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),13)), None, None, None, None, None)
Adding concept: that
nodeIds = List(0)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.016617808389215782
Adding concept: house
nodeIds = List(1)
concepts = List(house)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04639139361305006
Adding concept: see-01
nodeIds = List(2)
concepts = List(see-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07616497883688433
Adding concept: i
nodeIds = List(3)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.1022141852551136
Adding concept: say-01
nodeIds = List(4)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
feats:
bias 1.0
c|p -0.9007865453381898
len 1.0

score:
0.12287791579744083
Adding concept: have-03
nodeIds = List(5)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.12304242014404547
Adding concept: you
nodeIds = List(6)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
feats:
bias 1.0
c|p -0.05826890812397576
len 1.0

score:
0.15222671894013873
Decoder1 Spans:
Span 1:  have => have-03
Span 2:  house => house
Span 3:  I => i
Span 4:  saw => see-01
Span 5:  say => say-01
Span 6:  that => that
Span 7:  You => you
Decoder1 feats:
bias 7.0
c|p -5.555932156992521
len 7.0

Concepts:
id = 2 concept = see-01
id = 5 concept = have-03
id = 1 concept = house
id = 4 concept = say-01
id = 6 concept = you
id = 0 concept = that
id = 3 concept = i
Spans:
Span 2-3:  have => have-03
Span 12-13:  house => house
Span 9-10:  I => i
Span 10-11:  saw => see-01
Span 4-5:  say => say-01
Span 13-14:  that => that
Span 0-1:  You => you

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 4, 5), List(2, 4, 5, 6), List(2, 7), List(2, 8), List(2, 10, 9), List(2, 10), List(2, 10, 12, 11), List(2, 10, 12), List(2, 10, 12, 14, 13), List(2, 10, 12, 14), List(2, 10, 12, 14, 15), List(2, 10, 12, 14, 15, 16), List(2, 17), List(2, 18))
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 100.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 96.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 92.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 88.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 84.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 80.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 76.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 72.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 68.81883340559722
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 6
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 65.42803049175453
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 61.81883340559723
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 6
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 58.42803049175453
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 55.393308629925926
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 6
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 52.42803049175453
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 49.393308629925926
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 6
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 46.42803049175453
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 43.393308629925926
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 40.49400878597706
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 37.45928692414846
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 35.884811699819764
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 34.45928692414846
getNodeById = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i)
Node = 5
Node = 4
Node = 3
Node = 0
Node = 6
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 33.213415782845956
Langrangian relaxation converged after 22 iterations. Delta = 0.0
Node.spans:
you List()
monetary-quantity List()
cost-01 List()
they List()
20000 List()
dollar List()
see-01 List()
say-01 List()
obligate-01 List()
house List()
clearUnalignedNodes():  removing unaligned node: Some(m) / monetary-quantity
clearUnalignedNodes():  removing unaligned node: Some(t) / they
clearUnalignedNodes():  removing unaligned node: None / 20000
clearUnalignedNodes():  removing unaligned node: Some(d) / dollar
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
OracleGraph nodes = List(you, cost-01, see-01, say-01, house)
OracleGraph triples: (c / cost-01, ARG1, h / house)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, h / house)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 4, 5), List(2, 4, 5, 6), List(2, 7), List(2, 8), List(2, 10, 9), List(2, 10), List(2, 10, 12, 11), List(2, 10, 12), List(2, 10, 12, 14, 13), List(2, 10, 12, 14), List(2, 10, 12, 14, 15), List(2, 10, 12, 14, 15, 16), List(2, 17), List(2, 18))
Oracle Span 14-15:  cost => cost-01
Oracle Span 12-13:  house => house
Oracle Span 10-11:  saw => see-01
Oracle Span 4-5:  say => say-01
Oracle Span 0-1:  You => you

Extra span: that => that
Extra span: I => i
Extra span: have => have-03
Missing span: cost => cost-01
Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	would	_	MD	MD	_	3	aux	_	_
3	have	_	VB	VB	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	say	_	VB	VB	_	3	xcomp	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	:	_	:	:	_	3	punct	_	_
9	"	_	''	''	_	3	punct	_	_
10	I	_	PRP	PRP	_	11	nsubj	_	_
11	saw	_	VBD	VBD	_	3	ccomp	_	_
12	a	_	DT	DT	_	13	det	_	_
13	house	_	NN	NN	_	11	dobj	_	_
14	that	_	WDT	WDT	_	15	nsubj	_	_
15	cost	_	VBD	VBD	_	13	rcmod	_	_
16	$	_	$	$	_	15	dobj	_	_
17	20,000	_	CD	CD	_	16	num	_	_
18	.	_	.	.	_	3	punct	_	_
19	"	_	''	''	_	3	punct	_	_

Oracle:
(c / cost-01, ARG1, h / house)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, h / house)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),that,that,false), Span(12,13,List(1),house,house,false), Span(10,11,List(2),saw,see-01,false), Span(9,10,List(3),I,i,false), Span(4,5,List(4),say,say-01,false), Span(2,3,List(5),have,have-03,false), Span(0,1,List(6),You,you,false)),Map(2 -> see-01, 5 -> have-03, 1 -> house, 4 -> say-01, 6 -> you, 0 -> that, 3 -> i),Map(h -> house, h2 -> have-03, s2 -> say-01, t -> that, s -> see-01, y -> you, i -> i))),[Ljava.lang.String;@49e5f737,Annotation([Ljava.lang.String;@5c671d7f,[Ljava.lang.String;@757277dc,[Ljava.lang.String;@687e99d8),Annotation([Ljava.lang.String;@e4487af,[Ljava.lang.String;@6aaceffd,[Ledu.cmu.lti.nlp.amr.Dependency;@c86b9e3),Annotation([Ljava.lang.String;@10aa41f2,[Ljava.lang.String;@3af9c5b7,[Ljava.lang.String;@37271612),Annotation([Ljava.lang.String;@ed7f8b4,[Ljava.lang.String;@4c309d4d,[Ledu.cmu.lti.nlp.amr.Entity;@38102d01))
AMR:
(h2 / have-03, ARG0, i / i)
(h2 / have-03, ARG1, s2 / say-01)
(s / see-01, ARG0, i / i)
(s / see-01, ARG1, h / house)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, t / that)

Decoded in 120,468 microseconds
Sentence: Then they would exclaim : " Oh , what a pretty house that is ! "


--- Decoder1 ---

Sentence: Then they would exclaim : " Oh , what a pretty house that is ! "
word = Then
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false)))
concept = PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
score = 0
adding concept:PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = exclaim
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = Oh
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Oh),Oh,PhraseConceptFeatures(1.0,-3.332204510175204,false,false)), PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false)))
concept = PhraseConceptPair(List(Oh),Oh,PhraseConceptFeatures(1.0,-3.332204510175204,false,false))
score = 0
concept = PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
score = 0
adding concept:PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = what
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = pretty
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(pretty),pretty,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(pretty),pretty,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(pretty),pretty,PhraseConceptFeatures(1.0,0.0,false,false))
word = house
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = !
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026433777593784454,PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false)),0)), Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),1)), None, None, None, None, Some((0.019360815055007176,PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false)),6)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(pretty),pretty,PhraseConceptFeatures(1.0,0.0,false,false)),10)), Some((0.029773585223834276,PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false)),11)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),12)), None, None, None)
Adding concept: that
nodeIds = List(0)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.016617808389215782
Adding concept: house
nodeIds = List(1)
concepts = List(house)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(house),house,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04639139361305006
Adding concept: pretty
nodeIds = List(2)
concepts = List(pretty)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(pretty),pretty,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07616497883688433
Adding concept: oh
nodeIds = List(3)
concepts = List(oh)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
feats:
bias 1.0
c|p -1.0296194171811581
len 1.0

score:
0.09552579389189152
Adding concept: they
nodeIds = List(4)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.11810385859186844
Adding concept: then
nodeIds = List(5)
concepts = List(then)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
feats:
bias 1.0
c|p -0.33024168687057687
len 1.0

score:
0.1445376361856529
Decoder1 Spans:
Span 1:  house => house
Span 2:  Oh => oh
Span 3:  pretty => pretty
Span 4:  that => that
Span 5:  Then => then
Span 6:  they => they
Decoder1 feats:
bias 6.0
c|p -3.3722065784428827
len 6.0

Concepts:
id = 2 concept = pretty
id = 5 concept = then
id = 1 concept = house
id = 4 concept = they
id = 0 concept = that
id = 3 concept = oh
Spans:
Span 11-12:  house => house
Span 6-7:  Oh => oh
Span 10-11:  pretty => pretty
Span 12-13:  that => that
Span 0-1:  Then => then
Span 1-2:  they => they

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 13, 6), List(3, 13, 7), List(3, 13, 11, 8), List(3, 13, 11, 9), List(3, 13, 11, 10), List(3, 13, 11), List(3, 13, 12), List(3, 13), List(3, 14), List(3, 15))
getNodeById = Map(2 -> pretty, 5 -> then, 1 -> house, 4 -> they, 0 -> that, 3 -> oh)
getNodeById2 = Map(2 -> pretty, 5 -> then, 1 -> house, 4 -> they, 0 -> that, 3 -> oh)
getNodeById = Map(2 -> pretty, 5 -> then, 1 -> house, 4 -> they, 0 -> that, 3 -> oh)
getNodeById2 = Map(2 -> pretty, 5 -> then, 1 -> house, 4 -> they, 0 -> that, 3 -> oh)
Node = 2
Node = 1
Node = 4
Node = 0
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -420.29221626169175
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
pretty List()
that List()
house List()
they List()
exclaim-01 List()
then List()
OracleGraph nodes = List(pretty, that, house, they, exclaim-01, then)
OracleGraph triples: (e / exclaim-01, ARG0, t / they)
(e / exclaim-01, ARG1, p2 / pretty)
(e / exclaim-01, time, t3 / then)
(h2 / house, mod, t4 / that)
(p2 / pretty, domain, h2 / house)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 13, 6), List(3, 13, 7), List(3, 13, 11, 8), List(3, 13, 11, 9), List(3, 13, 11, 10), List(3, 13, 11), List(3, 13, 12), List(3, 13), List(3, 14), List(3, 15))
Oracle Span 3-4:  exclaim => exclaim-01
Oracle Span 11-12:  house => house
Oracle Span 10-11:  pretty => pretty
Oracle Span 12-13:  that => that
Oracle Span 0-1:  Then => then
Oracle Span 1-2:  they => they

Extra span: Oh => oh
Missing span: exclaim => exclaim-01
Dependencies:
1	Then	_	RB	RB	_	4	advmod	_	_
2	they	_	PRP	PRP	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	exclaim	_	VB	VB	_	0	root	_	_
5	:	_	:	:	_	4	punct	_	_
6	"	_	''	''	_	4	punct	_	_
7	Oh	_	UH	UH	_	14	discourse	_	_
8	,	_	,	,	_	14	punct	_	_
9	what	_	WP	WP	_	12	dep	_	_
10	a	_	DT	DT	_	12	det	_	_
11	pretty	_	JJ	JJ	_	12	amod	_	_
12	house	_	NN	NN	_	14	dep	_	_
13	that	_	DT	DT	_	14	nsubj	_	_
14	is	_	VBZ	VBZ	_	4	ccomp	_	_
15	!	_	.	.	_	4	punct	_	_
16	"	_	''	''	_	4	punct	_	_

Oracle:
(e / exclaim-01, ARG0, t / they)
(e / exclaim-01, ARG1, p2 / pretty)
(e / exclaim-01, time, t3 / then)
(h2 / house, mod, t4 / that)
(p2 / pretty, domain, h2 / house)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),that,that,false), Span(11,12,List(1),house,house,false), Span(10,11,List(2),pretty,pretty,false), Span(6,7,List(3),Oh,oh,false), Span(1,2,List(4),they,they,false), Span(0,1,List(5),Then,then,false)),Map(2 -> pretty, 5 -> then, 1 -> house, 4 -> they, 0 -> that, 3 -> oh),Map(h -> house, t -> that, t3 -> then, p -> pretty, t2 -> they, o -> oh))),[Ljava.lang.String;@37883b97,Annotation([Ljava.lang.String;@6ab778a,[Ljava.lang.String;@4e3958e7,[Ljava.lang.String;@77f80c04),Annotation([Ljava.lang.String;@1dac5ef,[Ljava.lang.String;@5c90e579,[Ledu.cmu.lti.nlp.amr.Dependency;@58ea606c),Annotation([Ljava.lang.String;@6f45df59,[Ljava.lang.String;@38e79ae3,[Ljava.lang.String;@63070bab),Annotation([Ljava.lang.String;@68e5eea7,[Ljava.lang.String;@291b4bf5,[Ledu.cmu.lti.nlp.amr.Entity;@2d2ffcb7))
AMR:
(h / house, domain, o / oh)
(h / house, mod, p / pretty)
(t / that, mod, h / house)
(t2 / they, location, t3 / then)
(t2 / they, part, h / house)

Decoded in 30,276 microseconds
Sentence: Just so , you might say to them : " The proof that the little prince existed is that he was charming , that he laughed , and that he was looking for a sheep .


--- Decoder1 ---

Sentence: Just so , you might say to them : " The proof that the little prince existed is that he was charming , that he laughed , and that he was looking for a sheep .
word = Just
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false))
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = might
Finding date entities
Possible invoked concepts: List()
word = say
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)))
concept = PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
score = 0
adding concept:PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = them
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = The
Finding date entities
Possible invoked concepts: List()
word = proof
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = existed
Finding date entities
Possible invoked concepts: List()
word = is
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = charming
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = laughed
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = looking
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(looking),(thing :ARG1-of look-01),PhraseConceptFeatures(5.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(looking),(thing :ARG1-of look-01),PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(looking),(thing :ARG1-of look-01),PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
word = for
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false)),0)), Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),1)), None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),3)), None, Some((0.020663730542327237,PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)),5)), None, None, None, None, None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),12)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),14)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),15)), None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),18)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),19)), None, Some((0.029773585223834276,PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false)),21)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),23)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),24)), Some((0.029773585223834276,PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false)),25)), None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),27)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),28)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),29)), None, Some((0.015753682017072397,PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false)),31)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),34)), None)
Adding concept: sheep
nodeIds = List(0)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: look-01
nodeIds = List(1)
concepts = List(look-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.045527267240906666
Adding concept: he
nodeIds = List(2)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.07114606712132716
Adding concept: that
nodeIds = List(3)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.08776387551054295
Adding concept: and
nodeIds = List(4)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.10672181733295148
Adding concept: laugh-01
nodeIds = List(5)
concepts = List(laugh-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13649540255678577
Adding concept: he
nodeIds = List(6)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.16211420243720626
Adding concept: that
nodeIds = List(7)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.17873201082642204
Adding concept: charm-01
nodeIds = List(8)
concepts = List(charm-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.20850559605025631
Adding concept: he
nodeIds = List(9)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.2341243959306768
Adding concept: that
nodeIds = List(10)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.2507422043198926
Adding concept: prince
nodeIds = List(11)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.2804531687714221
Adding concept: little
nodeIds = List(12)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.30307198050305567
Adding concept: that
nodeIds = List(13)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.31968978889227145
Adding concept: say-01
nodeIds = List(14)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
feats:
bias 1.0
c|p -0.9007865453381898
len 1.0

score:
0.3403535194345987
Adding concept: you
nodeIds = List(15)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.3674988825294541
Adding concept: so
nodeIds = List(16)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.3928041148592282
Adding concept: just
nodeIds = List(17)
concepts = List(just)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.4225777000830625
Decoder1 Spans:
Span 1:  and => and
Span 2:  charming => charm-01
Span 3:  he => he
Span 4:  he => he
Span 5:  he => he
Span 6:  Just => just
Span 7:  laughed => laugh-01
Span 8:  little => little
Span 9:  looking => look-01
Span 10:  prince => prince
Span 11:  say => say-01
Span 12:  sheep => sheep
Span 13:  so => so
Span 14:  that => that
Span 15:  that => that
Span 16:  that => that
Span 17:  that => that
Span 18:  you => you
Decoder1 feats:
bias 18.0
c|p -11.20778613323689
len 18.0

Concepts:
id = 2 concept = he
id = 5 concept = laugh-01
id = 12 concept = little
id = 15 concept = you
id = 8 concept = charm-01
id = 7 concept = that
id = 17 concept = just
id = 1 concept = look-01
id = 4 concept = and
id = 11 concept = prince
id = 14 concept = say-01
id = 6 concept = he
id = 0 concept = sheep
id = 9 concept = he
id = 16 concept = so
id = 3 concept = that
id = 10 concept = that
id = 13 concept = that
Spans:
Span 27-28:  and => and
Span 21-22:  charming => charm-01
Span 29-30:  he => he
Span 24-25:  he => he
Span 19-20:  he => he
Span 0-1:  Just => just
Span 25-26:  laughed => laugh-01
Span 14-15:  little => little
Span 31-32:  looking => look-01
Span 15-16:  prince => prince
Span 5-6:  say => say-01
Span 34-35:  sheep => sheep
Span 1-2:  so => so
Span 28-29:  that => that
Span 23-24:  that => that
Span 18-19:  that => that
Span 12-13:  that => that
Span 3-4:  you => you

rootDependencyPaths = List(List(5, 1, 0), List(5, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 6, 7), List(5, 8), List(5, 9), List(5, 17, 11, 10), List(5, 17, 11), List(5, 17, 11, 16, 12), List(5, 17, 11, 16, 15, 13), List(5, 17, 11, 16, 15, 14), List(5, 17, 11, 16, 15), List(5, 17, 11, 16), List(5, 17), List(5, 17, 21, 18), List(5, 17, 21, 19), List(5, 17, 21, 20), List(5, 17, 21), List(5, 17, 21, 22), List(5, 17, 21, 25, 23), List(5, 17, 21, 25, 24), List(5, 17, 21, 25), List(5, 17, 21, 25, 26), List(5, 17, 21, 25, 27), List(5, 17, 21, 25, 31, 28), List(5, 17, 21, 25, 31, 29), List(5, 17, 21, 25, 31, 30), List(5, 17, 21, 25, 31), List(5, 17, 21, 25, 31, 32), List(5, 17, 21, 25, 31, 32, 34, 33), List(5, 17, 21, 25, 31, 32, 34), List(5, 35))
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 13
Node = 16
Node = 11
Node = 2
Node = 15
Node = 17
Node = 12
Node = 1
Node = 3
Node = 0
Node = 6
Node = 8
Node = 5
Node = 10
Node = 9
Node = 7
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -11.13355867302182
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 13
Node = 16
Node = 11
Node = 2
Node = 15
Node = 17
Node = 12
Node = 1
Node = 3
Node = 0
Node = 6
Node = 8
Node = 5
Node = 10
Node = 9
Node = 7
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -27.133558673021813
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 13
Node = 16
Node = 11
Node = 2
Node = 15
Node = 17
Node = 12
Node = 1
Node = 3
Node = 0
Node = 6
Node = 8
Node = 5
Node = 10
Node = 9
Node = 7
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -42.52950776607295
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 6
Node = 8
Node = 1
Node = 10
Node = 9
Node = 3
Node = 13
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -53.89358916401304
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 6
Node = 8
Node = 1
Node = 10
Node = 9
Node = 3
Node = 13
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -63.89358916401304
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 6
Node = 8
Node = 1
Node = 10
Node = 9
Node = 3
Node = 13
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -73.89358916401304
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 6
Node = 8
Node = 1
Node = 10
Node = 9
Node = 3
Node = 13
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -83.89358916401304
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 13
Node = 6
Node = 8
Node = 1
Node = 10
Node = 9
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -93.31254994935185
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 8
Node = 6
Node = 10
Node = 9
Node = 1
Node = 3
Node = 13
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -102.7712985133222
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 11
Node = 15
Node = 1
Node = 17
Node = 12
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -109.57161693532765
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 11
Node = 15
Node = 1
Node = 17
Node = 12
Node = 3
Node = 13
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -115.15265614998884
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 11
Node = 15
Node = 1
Node = 17
Node = 12
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -120.36600519900773
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 11
Node = 15
Node = 1
Node = 17
Node = 12
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -124.36600519900773
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 11
Node = 15
Node = 1
Node = 17
Node = 12
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -128.36600519900773
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 11
Node = 2
Node = 16
Node = 15
Node = 12
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -131.55715065849895
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 8
Node = 13
Node = 6
Node = 10
Node = 9
Node = 1
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -134.9846475623411
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 11
Node = 2
Node = 16
Node = 15
Node = 12
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -139.55715065849895
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 8
Node = 13
Node = 6
Node = 10
Node = 9
Node = 1
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -142.9846475623411
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 11
Node = 2
Node = 16
Node = 15
Node = 12
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -147.55715065849895
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 8
Node = 13
Node = 6
Node = 10
Node = 9
Node = 1
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -150.9846475623411
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 11
Node = 2
Node = 16
Node = 15
Node = 12
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -155.5571506584989
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 8
Node = 13
Node = 6
Node = 10
Node = 9
Node = 1
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -158.98464756234105
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 11
Node = 2
Node = 16
Node = 15
Node = 12
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -163.5571506584989
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 8
Node = 13
Node = 6
Node = 10
Node = 9
Node = 1
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -166.98464756234105
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 11
Node = 2
Node = 16
Node = 15
Node = 12
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -171.5571506584989
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 4
Node = 16
Node = 11
Node = 15
Node = 5
Node = 17
Node = 12
Node = 7
Node = 8
Node = 13
Node = 6
Node = 10
Node = 9
Node = 1
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -174.98464756234105
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 15
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -179.47215016402154
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 15
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -181.47215016402154
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 15
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -183.47215016402154
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 15
Node = 1
Node = 17
Node = 3
Node = 0
Node = 6
Node = 5
Node = 7
Node = 4
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -185.47215016402154
getNodeById = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that)
getNodeById2 = Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 9 -> he, 0 -> sheep, 16 -> so, 10 -> that, 3 -> that, 13 -> that)
Node = 14
Node = 2
Node = 16
Node = 15
Node = 1
Node = 17
Node = 4
Node = 3
Node = 0
Node = 5
Node = 7
Node = 8
Node = 13
Node = 6
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 17, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -186.7982186030982
Langrangian relaxation converged after 31 iterations. Delta = 0.0
Node.spans:
you List()
he List()
charming List()
they List()
look-01 List()
sheep List()
exist-01 List()
little List()
say-01 List()
prove-01 List()
possible List()
and List()
laugh-01 List()
prince List()
just-so List()
clearUnalignedNodes():  removing unaligned node: Some(t) / they
clearUnalignedNodes():  removing unaligned node: Some(p2) / prove-01
clearUnalignedNodes():  removing unaligned node: Some(p) / possible
OracleGraph nodes = List(you, he, charming, look-01, sheep, exist-01, little, say-01, and, laugh-01, prince, just-so)
OracleGraph triples: (a / and, op, c / charming)
(a / and, op, l / laugh-01)
(a / and, op, l2 / look-01)
(c / charming, domain, h / he)
(e / exist-01, ARG1, p3 / prince)
(l / laugh-01, ARG0, h / he)
(l2 / look-01, ARG0, h / he)
(l2 / look-01, ARG1, s3 / sheep)
(p3 / prince, mod, l3 / little)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, manner, j / just-so)
rootDependencyPaths = List(List(5, 1, 0), List(5, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 6, 7), List(5, 8), List(5, 9), List(5, 17, 11, 10), List(5, 17, 11), List(5, 17, 11, 16, 12), List(5, 17, 11, 16, 15, 13), List(5, 17, 11, 16, 15, 14), List(5, 17, 11, 16, 15), List(5, 17, 11, 16), List(5, 17), List(5, 17, 21, 18), List(5, 17, 21, 19), List(5, 17, 21, 20), List(5, 17, 21), List(5, 17, 21, 22), List(5, 17, 21, 25, 23), List(5, 17, 21, 25, 24), List(5, 17, 21, 25), List(5, 17, 21, 25, 26), List(5, 17, 21, 25, 27), List(5, 17, 21, 25, 31, 28), List(5, 17, 21, 25, 31, 29), List(5, 17, 21, 25, 31, 30), List(5, 17, 21, 25, 31), List(5, 17, 21, 25, 31, 32), List(5, 17, 21, 25, 31, 32, 34, 33), List(5, 17, 21, 25, 31, 32, 34), List(5, 35))
Oracle Span 27-28:  and => and
Oracle Span 21-22:  charming => charming
Oracle Span 16-17:  existed => exist-01
Oracle Span 19-20:  he => he
Oracle Span 0-1:  Just => just-so
Oracle Span 25-26:  laughed => laugh-01
Oracle Span 14-15:  little => little
Oracle Span 31-32:  looking => look-01
Oracle Span 15-16:  prince => prince
Oracle Span 5-6:  say => say-01
Oracle Span 34-35:  sheep => sheep
Oracle Span 3-4:  you => you

Extra span: he => he
Extra span: that => that
Extra span: he => he
Extra span: that => that
Incorrect span: charming => charm-01
Extra span: that => that
Extra span: that => that
Extra span: so => so
Incorrect span: Just => just
Missing span: charming => charming
Missing span: existed => exist-01
Missing span: Just => just-so
Dependencies:
1	Just	_	RB	RB	_	2	advmod	_	_
2	so	_	RB	RB	_	6	advmod	_	_
3	,	_	,	,	_	6	punct	_	_
4	you	_	PRP	PRP	_	6	nsubj	_	_
5	might	_	MD	MD	_	6	aux	_	_
6	say	_	VB	VB	_	0	root	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	them	_	PRP	PRP	_	7	pobj	_	_
9	:	_	:	:	_	6	punct	_	_
10	"	_	''	''	_	6	punct	_	_
11	The	_	DT	DT	_	12	det	_	_
12	proof	_	NN	NN	_	18	nsubj	_	_
13	that	_	IN	IN	_	17	mark	_	_
14	the	_	DT	DT	_	16	det	_	_
15	little	_	JJ	JJ	_	16	amod	_	_
16	prince	_	NN	NN	_	17	nsubj	_	_
17	existed	_	VBD	VBD	_	12	dep	_	_
18	is	_	VBZ	VBZ	_	6	ccomp	_	_
19	that	_	IN	IN	_	22	mark	_	_
20	he	_	PRP	PRP	_	22	nsubj	_	_
21	was	_	VBD	VBD	_	22	cop	_	_
22	charming	_	JJ	JJ	_	18	ccomp	_	_
23	,	_	,	,	_	22	punct	_	_
24	that	_	IN	IN	_	26	mark	_	_
25	he	_	PRP	PRP	_	26	nsubj	_	_
26	laughed	_	VBD	VBD	_	22	ccomp	_	_
27	,	_	,	,	_	26	punct	_	_
28	and	_	CC	CC	_	26	cc	_	_
29	that	_	IN	IN	_	32	mark	_	_
30	he	_	PRP	PRP	_	32	nsubj	_	_
31	was	_	VBD	VBD	_	32	aux	_	_
32	looking	_	VBG	VBG	_	26	conj	_	_
33	for	_	IN	IN	_	32	prep	_	_
34	a	_	DT	DT	_	35	det	_	_
35	sheep	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c / charming)
(a / and, op, l / laugh-01)
(a / and, op, l2 / look-01)
(c / charming, domain, h / he)
(e / exist-01, ARG1, p3 / prince)
(l / laugh-01, ARG0, h / he)
(l2 / look-01, ARG0, h / he)
(l2 / look-01, ARG1, s3 / sheep)
(p3 / prince, mod, l3 / little)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, manner, j / just-so)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),sheep,sheep,false), Span(31,32,List(1),looking,look-01,false), Span(29,30,List(2),he,he,false), Span(28,29,List(3),that,that,false), Span(27,28,List(4),and,and,false), Span(25,26,List(5),laughed,laugh-01,false), Span(24,25,List(6),he,he,false), Span(23,24,List(7),that,that,false), Span(21,22,List(8),charming,charm-01,false), Span(19,20,List(9),he,he,false), Span(18,19,List(10),that,that,false), Span(15,16,List(11),prince,prince,false), Span(14,15,List(12),little,little,false), Span(12,13,List(13),that,that,false), Span(5,6,List(14),say,say-01,false), Span(3,4,List(15),you,you,false), Span(1,2,List(16),so,so,false), Span(0,1,List(17),Just,just,false)),Map(2 -> he, 5 -> laugh-01, 12 -> little, 15 -> you, 8 -> charm-01, 7 -> that, 17 -> just, 1 -> look-01, 4 -> and, 11 -> prince, 14 -> say-01, 6 -> he, 0 -> sheep, 9 -> he, 16 -> so, 3 -> that, 10 -> that, 13 -> that),Map(t4 -> that, h -> he, s2 -> say-01, h2 -> he, t -> that, j -> just, l3 -> little, s -> sheep, t3 -> that, y -> you, p -> prince, a -> and, t2 -> that, l2 -> laugh-01, s3 -> so, c -> charm-01, h3 -> he, l -> look-01))),[Ljava.lang.String;@762ef0ea,Annotation([Ljava.lang.String;@31f9b85e,[Ljava.lang.String;@424e1977,[Ljava.lang.String;@10d68fcd),Annotation([Ljava.lang.String;@117e949d,[Ljava.lang.String;@6db9f5a4,[Ledu.cmu.lti.nlp.amr.Dependency;@5f8edcc5),Annotation([Ljava.lang.String;@7b02881e,[Ljava.lang.String;@1ebd319f,[Ljava.lang.String;@3c0be339),Annotation([Ljava.lang.String;@15ca7889,[Ljava.lang.String;@7a675056,[Ledu.cmu.lti.nlp.amr.Entity;@d21a74c))
AMR:
(a / and, op, l / look-01)
(a / and, op, l2 / laugh-01)
(c / charm-01, ARG0, p / prince)
(c / charm-01, ARG1, h3 / he)
(c / charm-01, ARG3, l2 / laugh-01)
(l / look-01, ARG0, h / he)
(l / look-01, ARG1, s / sheep)
(l2 / laugh-01, ARG0, h2 / he)
(l2 / laugh-01, ARG1, t4 / that)
(p / prince, mod, l3 / little)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, s3 / so)
(s2 / say-01, ARG2, h / he)
(s3 / so, mod, j / just)
(t / that, op, l / look-01)
(t2 / that, op, l2 / laugh-01)
(t3 / that, mod, c / charm-01)

Decoded in 627,509 microseconds
Sentence: If anybody wants a sheep , that is a proof that he exists . "


--- Decoder1 ---

Sentence: If anybody wants a sheep , that is a proof that he exists . "
word = If
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)))
concept = PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
score = 0
adding concept:PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
word = anybody
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(anybody),anybody,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(anybody),anybody,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(anybody),anybody,PhraseConceptFeatures(1.0,0.0,false,false))
word = wants
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = proof
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = exists
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.0011206685260514437,PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(anybody),anybody,PhraseConceptFeatures(1.0,0.0,false,false)),1)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),4)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),6)), None, None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),10)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),11)), None, None, None)
Adding concept: he
nodeIds = List(0)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.025618799880420498
Adding concept: that
nodeIds = List(1)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.04223660826963628
Adding concept: that
nodeIds = List(2)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.05885441665885206
Adding concept: sheep
nodeIds = List(3)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08862800188268634
Adding concept: anybody
nodeIds = List(4)
concepts = List(anybody)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(anybody),anybody,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11840158710652061
Adding concept: cause-01
nodeIds = List(5)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
feats:
bias 1.0
c|p -2.833213344056216
len 1.0

score:
0.11952225563257206
Decoder1 Spans:
Span 1:  anybody => anybody
Span 2:  he => he
Span 3:  If => cause-01
Span 4:  sheep => sheep
Span 5:  that => that
Span 6:  that => that
Decoder1 feats:
bias 6.0
c|p -5.845738705631778
len 6.0

Concepts:
id = 2 concept = that
id = 5 concept = cause-01
id = 1 concept = that
id = 4 concept = anybody
id = 0 concept = he
id = 3 concept = sheep
Spans:
Span 1-2:  anybody => anybody
Span 11-12:  he => he
Span 0-1:  If => cause-01
Span 4-5:  sheep => sheep
Span 10-11:  that => that
Span 6-7:  that => that

rootDependencyPaths = List(List(9, 2, 0), List(9, 2, 1), List(9, 2), List(9, 2, 4, 3), List(9, 2, 4), List(9, 5), List(9, 6), List(9, 7), List(9, 8), List(9), List(9, 12, 10), List(9, 12, 11), List(9, 12), List(9, 13), List(9, 14))
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -297.6196631043397
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -305.6196631043397
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -313.6196631043397
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 1
Node = 3
Node = 2
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -320.8960855650207
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 1
Node = 3
Node = 2
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -324.8960855650207
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 1
Node = 3
Node = 2
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -328.8960855650207
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 1
Node = 3
Node = 2
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -332.8960855650207
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -336.16476642538504
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -338.16476642538504
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -340.16476642538504
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -342.16476642538504
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -344.1647664253851
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -345.51968727753945
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -347.1647664253851
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -348.51968727753945
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -350.1647664253851
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -351.51968727753945
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -353.1647664253851
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -354.51968727753945
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -356.1647664253851
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -357.51968727753945
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -359.1647664253851
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -360.51968727753945
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -362.1647664253851
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 3
Node = 4
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -362.8225310288963
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 4
Node = 1
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -366.1647664253851
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 3
Node = 4
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -366.8225310288963
getNodeById = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
getNodeById2 = Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep)
Node = 5
Node = 1
Node = 2
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -369.71998320147793
Langrangian relaxation converged after 28 iterations. Delta = 0.0
Node.spans:
anybody List()
exist-01 List()
sheep List()
want-01 List()
prove-01 List()
clearUnalignedNodes():  removing unaligned node: Some(p) / prove-01
OracleGraph nodes = List(anybody, exist-01, sheep, want-01)
OracleGraph triples: (e / exist-01, ARG1, a / anybody)
(w / want-01, ARG0, a / anybody)
(w / want-01, ARG1, s / sheep)
rootDependencyPaths = List(List(9, 2, 0), List(9, 2, 1), List(9, 2), List(9, 2, 4, 3), List(9, 2, 4), List(9, 5), List(9, 6), List(9, 7), List(9, 8), List(9), List(9, 12, 10), List(9, 12, 11), List(9, 12), List(9, 13), List(9, 14))
Oracle Span 1-2:  anybody => anybody
Oracle Span 12-13:  exists => exist-01
Oracle Span 4-5:  sheep => sheep
Oracle Span 2-3:  wants => want-01

Extra span: he => he
Extra span: that => that
Extra span: that => that
Extra span: If => cause-01
Missing span: wants => want-01
Missing span: exists => exist-01
Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	anybody	_	NN	NN	_	3	nsubj	_	_
3	wants	_	VBZ	VBZ	_	10	advcl	_	_
4	a	_	DT	DT	_	5	det	_	_
5	sheep	_	NN	NN	_	3	dobj	_	_
6	,	_	,	,	_	10	punct	_	_
7	that	_	DT	DT	_	10	nsubj	_	_
8	is	_	VBZ	VBZ	_	10	cop	_	_
9	a	_	DT	DT	_	10	det	_	_
10	proof	_	NN	NN	_	0	root	_	_
11	that	_	IN	IN	_	13	mark	_	_
12	he	_	PRP	PRP	_	13	nsubj	_	_
13	exists	_	VBZ	VBZ	_	10	ccomp	_	_
14	.	_	.	.	_	10	punct	_	_
15	"	_	''	''	_	10	punct	_	_

Oracle:
(e / exist-01, ARG1, a / anybody)
(w / want-01, ARG0, a / anybody)
(w / want-01, ARG1, s / sheep)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),he,he,false), Span(10,11,List(1),that,that,false), Span(6,7,List(2),that,that,false), Span(4,5,List(3),sheep,sheep,false), Span(1,2,List(4),anybody,anybody,false), Span(0,1,List(5),If,cause-01,false)),Map(2 -> that, 5 -> cause-01, 1 -> that, 4 -> anybody, 0 -> he, 3 -> sheep),Map(h -> he, t -> that, s -> sheep, a -> anybody, t2 -> that, c -> cause-01))),[Ljava.lang.String;@6e509ffa,Annotation([Ljava.lang.String;@2898ac89,[Ljava.lang.String;@683dbc2c,[Ljava.lang.String;@68267da0),Annotation([Ljava.lang.String;@2638011,[Ljava.lang.String;@6ff29830,[Ledu.cmu.lti.nlp.amr.Dependency;@6a2b953e),Annotation([Ljava.lang.String;@313b2ea6,[Ljava.lang.String;@2f465398,[Ljava.lang.String;@548e6d58),Annotation([Ljava.lang.String;@623a8092,[Ljava.lang.String;@a1cdc6d,[Ledu.cmu.lti.nlp.amr.Entity;@175b9425))
AMR:
(c / cause-01, ARG1, s / sheep)
(c / cause-01, ARG2, a / anybody)
(c / cause-01, manner, t / that)
(c / cause-01, manner, t2 / that)
(h / he, mod, t / that)

Decoded in 89,617 microseconds
Sentence: And what good would it do to tell them that ?


--- Decoder1 ---

Sentence: And what good would it do to tell them that ?
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = what
Finding date entities
Possible invoked concepts: List()
word = good
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)), PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)))
concept = PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
score = 0
adding concept:PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
concept = PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
word = would
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = do
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false)), PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)))
concept = PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false))
score = 0
concept = PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
score = 0
adding concept:PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = tell
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false))
word = them
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), None, Some((0.01924113055266132,PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)),2)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),4)), Some((0.008412119642531832,PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)),5)), None, Some((0.029773585223834276,PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false)),7)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),9)), None)
Adding concept: that
nodeIds = List(0)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.016617808389215782
Adding concept: tell-01
nodeIds = List(1)
concepts = List(tell-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(tell),tell-01,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04639139361305006
Adding concept: do-02
nodeIds = List(2)
concepts = List(do-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
feats:
bias 1.0
c|p -2.1122313645028266
len 1.0

score:
0.05480351325558189
Adding concept: it
nodeIds = List(3)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.07372263267939438
Adding concept: good
nodeIds = List(4)
concepts = List(good)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
feats:
bias 1.0
c|p -1.041453874828161
len 1.0

score:
0.0929637632320557
Adding concept: and
nodeIds = List(5)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.12182563036102416
Decoder1 Spans:
Span 1:  And => and
Span 2:  do => do-02
Span 3:  good => good
Span 4:  it => it
Span 5:  tell => tell-01
Span 6:  that => that
Decoder1 feats:
bias 6.0
c|p -5.617979972172111
len 6.0

Concepts:
id = 2 concept = do-02
id = 5 concept = and
id = 1 concept = tell-01
id = 4 concept = good
id = 0 concept = that
id = 3 concept = it
Spans:
Span 0-1:  And => and
Span 5-6:  do => do-02
Span 2-3:  good => good
Span 4-5:  it => it
Span 7-8:  tell => tell-01
Span 9-10:  that => that

rootDependencyPaths = List(List(5, 0), List(5, 2, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 7, 6), List(5, 7), List(5, 7, 8), List(5, 7, 9), List(5, 10))
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 66.28569084119628
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 62.285690841196285
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 58.285690841196285
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 54.285690841196285
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 50.285690841196285
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 46.285690841196285
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 42.285690841196285
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 38.285690841196285
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 34.285690841196285
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 4
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 30.679343285711937
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 28.2545609824828
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 4
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 26.648213426998453
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 25.2545609824828
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 4
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 23.648213426998453
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 22.2545609824828
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 4
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 20.648213426998453
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 19.2545609824828
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 4
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 17.648213426998453
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 16.2545609824828
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 4
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 14.648213426998455
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 13.982367736266882
getNodeById = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
getNodeById2 = Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it)
Node = 5
Node = 2
Node = 1
Node = 4
Node = 3
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 12.376020180782534
Langrangian relaxation converged after 22 iterations. Delta = 0.0
Node.spans:
tell-01 List()
that List()
good List()
do-02 List()
and List()
amr-unknown List()
they List()
clearUnalignedNodes():  removing unaligned node: Some(a2) / amr-unknown
clearUnalignedNodes():  removing unaligned node: Some(t2) / they
OracleGraph nodes = List(tell-01, that, good, do-02, and)
OracleGraph triples: (a / and, op, d / do-02)
(d / do-02, ARG0, t / tell-01)
(d / do-02, ARG1, g / good)
(t / tell-01, ARG1, t3 / that)
rootDependencyPaths = List(List(5, 0), List(5, 2, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 7, 6), List(5, 7), List(5, 7, 8), List(5, 7, 9), List(5, 10))
Oracle Span 0-1:  And => and
Oracle Span 5-6:  do => do-02
Oracle Span 2-3:  good => good
Oracle Span 7-8:  tell => tell-01
Oracle Span 9-10:  that => that

Extra span: it => it
Dependencies:
1	And	_	CC	CC	_	6	cc	_	_
2	what	_	WDT	WDT	_	3	det	_	_
3	good	_	NN	NN	_	6	dep	_	_
4	would	_	MD	MD	_	6	aux	_	_
5	it	_	PRP	PRP	_	6	nsubj	_	_
6	do	_	VB	VB	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	tell	_	VB	VB	_	6	xcomp	_	_
9	them	_	PRP	PRP	_	8	iobj	_	_
10	that	_	DT	DT	_	8	dobj	_	_
11	?	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, d / do-02)
(d / do-02, ARG0, t / tell-01)
(d / do-02, ARG1, g / good)
(t / tell-01, ARG1, t3 / that)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),that,that,false), Span(7,8,List(1),tell,tell-01,false), Span(5,6,List(2),do,do-02,false), Span(4,5,List(3),it,it,false), Span(2,3,List(4),good,good,false), Span(0,1,List(5),And,and,false)),Map(2 -> do-02, 5 -> and, 1 -> tell-01, 4 -> good, 0 -> that, 3 -> it),Map(t -> that, d -> do-02, g -> good, a -> and, t2 -> tell-01, i -> it))),[Ljava.lang.String;@6a03bcb1,Annotation([Ljava.lang.String;@21b2e768,[Ljava.lang.String;@57250572,[Ljava.lang.String;@5609159b),Annotation([Ljava.lang.String;@2118cddf,[Ljava.lang.String;@17a7f733,[Ledu.cmu.lti.nlp.amr.Dependency;@68567e20),Annotation([Ljava.lang.String;@76ed1b7c,[Ljava.lang.String;@11fc564b,[Ljava.lang.String;@394a2528),Annotation([Ljava.lang.String;@6236eb5f,[Ljava.lang.String;@7c1e2a9e,[Ledu.cmu.lti.nlp.amr.Entity;@fa36558))
AMR:
(a / and, op, d / do-02)
(d / do-02, ARG0, i / it)
(d / do-02, ARG1, g / good)
(d / do-02, purpose, t2 / tell-01)
(t2 / tell-01, ARG0, i / it)
(t2 / tell-01, ARG1, t / that)

Decoded in 74,272 microseconds
Sentence: They would shrug their shoulders , and treat you like a child .


--- Decoder1 ---

Sentence: They would shrug their shoulders , and treat you like a child .
word = They
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false)))
concept = PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = shrug
Finding date entities
Possible invoked concepts: List()
word = their
Finding date entities
Possible invoked concepts: List()
word = shoulders
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(shoulders),shoulder,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(shoulders),shoulder,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(shoulders),shoulder,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = treat
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(treat),treat,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(treat),treat,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(treat),treat,PhraseConceptFeatures(1.0,0.0,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = child
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(child),child,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(child),child,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(child),child,PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false)),0)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(shoulders),shoulder,PhraseConceptFeatures(1.0,0.0,false,false)),4)), None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),6)), Some((0.029773585223834276,PhraseConceptPair(List(treat),treat,PhraseConceptFeatures(1.0,0.0,false,false)),7)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),8)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(child),child,PhraseConceptFeatures(1.0,0.0,false,false)),11)), None)
Adding concept: child
nodeIds = List(0)
concepts = List(child)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(child),child,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: you
nodeIds = List(1)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.0569189483186897
Adding concept: treat
nodeIds = List(2)
concepts = List(treat)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(treat),treat,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08669253354252397
Adding concept: and
nodeIds = List(3)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.10565047536493251
Adding concept: shoulder
nodeIds = List(4)
concepts = List(shoulder)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(shoulders),shoulder,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13542406058876677
Adding concept: they
nodeIds = List(5)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.16519764581260105
Decoder1 Spans:
Span 1:  and => and
Span 2:  child => child
Span 3:  shoulders => shoulder
Span 4:  They => they
Span 5:  treat => treat
Span 6:  you => you
Decoder1 feats:
bias 6.0
c|p -1.3293354955164833
len 6.0

Concepts:
id = 2 concept = treat
id = 5 concept = they
id = 1 concept = you
id = 4 concept = shoulder
id = 0 concept = child
id = 3 concept = and
Spans:
Span 6-7:  and => and
Span 11-12:  child => child
Span 4-5:  shoulders => shoulder
Span 0-1:  They => they
Span 7-8:  treat => treat
Span 8-9:  you => you

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 5), List(2, 6), List(2, 7), List(2, 7, 8), List(2, 7, 9), List(2, 7, 9, 11, 10), List(2, 7, 9, 11), List(2, 12))
getNodeById = Map(2 -> treat, 5 -> they, 1 -> you, 4 -> shoulder, 0 -> child, 3 -> and)
getNodeById2 = Map(2 -> treat, 5 -> they, 1 -> you, 4 -> shoulder, 0 -> child, 3 -> and)
getNodeById = Map(2 -> treat, 5 -> they, 1 -> you, 4 -> shoulder, 0 -> child, 3 -> and)
getNodeById2 = Map(2 -> treat, 5 -> they, 1 -> you, 4 -> shoulder, 0 -> child, 3 -> and)
Node = 3
Node = 2
Node = 0
Node = 1
Node = 4
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -132.48903601887076
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
they List()
child List()
treat-01 List()
you List()
shoulder List()
shrug-01 List()
and List()
OracleGraph nodes = List(they, child, treat-01, you, shoulder, shrug-01, and)
OracleGraph triples: (a / and, op, s / shrug-01)
(a / and, op, t2 / treat-01)
(s / shrug-01, ARG0, t / they)
(s / shrug-01, ARG1, s2 / shoulder)
(s2 / shoulder, poss, t / they)
(t2 / treat-01, ARG0, t / they)
(t2 / treat-01, ARG1, y / you)
(t2 / treat-01, ARG2, c / child)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 5), List(2, 6), List(2, 7), List(2, 7, 8), List(2, 7, 9), List(2, 7, 9, 11, 10), List(2, 7, 9, 11), List(2, 12))
Oracle Span 6-7:  and => and
Oracle Span 11-12:  child => child
Oracle Span 4-5:  shoulders => shoulder
Oracle Span 2-3:  shrug => shrug-01
Oracle Span 0-1:  They => they
Oracle Span 7-8:  treat => treat-01
Oracle Span 8-9:  you => you

Incorrect span: treat => treat
Missing span: treat => treat-01
Missing span: shrug => shrug-01
Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	would	_	MD	MD	_	3	aux	_	_
3	shrug	_	VB	VB	_	0	root	_	_
4	their	_	PRP$	PRP$	_	5	poss	_	_
5	shoulders	_	NNS	NNS	_	3	dobj	_	_
6	,	_	,	,	_	3	punct	_	_
7	and	_	CC	CC	_	3	cc	_	_
8	treat	_	VB	VB	_	3	conj	_	_
9	you	_	PRP	PRP	_	8	dobj	_	_
10	like	_	IN	IN	_	8	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	child	_	NN	NN	_	10	pobj	_	_
13	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, s / shrug-01)
(a / and, op, t2 / treat-01)
(s / shrug-01, ARG0, t / they)
(s / shrug-01, ARG1, s2 / shoulder)
(s2 / shoulder, poss, t / they)
(t2 / treat-01, ARG0, t / they)
(t2 / treat-01, ARG1, y / you)
(t2 / treat-01, ARG2, c / child)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),child,child,false), Span(8,9,List(1),you,you,false), Span(7,8,List(2),treat,treat,false), Span(6,7,List(3),and,and,false), Span(4,5,List(4),shoulders,shoulder,false), Span(0,1,List(5),They,they,false)),Map(2 -> treat, 5 -> they, 1 -> you, 4 -> shoulder, 0 -> child, 3 -> and),Map(t -> treat, s -> shoulder, y -> you, a -> and, t2 -> they, c -> child))),[Ljava.lang.String;@672872e1,Annotation([Ljava.lang.String;@32910148,[Ljava.lang.String;@3f56875e,[Ljava.lang.String;@2b4bac49),Annotation([Ljava.lang.String;@fd07cbb,[Ljava.lang.String;@3571b748,[Ledu.cmu.lti.nlp.amr.Dependency;@3e96bacf),Annotation([Ljava.lang.String;@484970b0,[Ljava.lang.String;@4470f8a6,[Ljava.lang.String;@7c83dc97),Annotation([Ljava.lang.String;@7748410a,[Ljava.lang.String;@740773a3,[Ledu.cmu.lti.nlp.amr.Entity;@37f1104d))
AMR:
(a / and, op, t / treat)
(s / shoulder, poss, t2 / they)
(t / treat, beneficiary, s / shoulder)
(t / treat, poss, y / you)
(t / treat, time, c / child)

Decoded in 36,394 microseconds
Sentence: But if you said to them : " The planet he came from is Asteroid B-612 , " then they would be convinced , and leave you in peace from their questions .


--- Decoder1 ---

Sentence: But if you said to them : " The planet he came from is Asteroid B - 612 , " then they would be convinced , and leave you in peace from their questions .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = if
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)))
concept = PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
score = 0
adding concept:PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = them
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = The
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = came
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false)), PhraseConceptPair(List(came),come-04,PhraseConceptFeatures(1.0,-3.4011973816621555,false,false)))
concept = PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
score = 0
adding concept:PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
concept = PhraseConceptPair(List(came),come-04,PhraseConceptFeatures(1.0,-3.4011973816621555,false,false))
score = 0
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = is
Finding date entities
Possible invoked concepts: List()
word = Asteroid
NER Entity: (thing :name (name :op "Asteroid" :op "B" :op "-" :op "612"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Asteroid, B),(thing :name (name :op "Asteroid" :op "B" :op "-" :op "612")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(Asteroid, B),(thing :name (name :op "Asteroid" :op "B" :op "-" :op "612")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = B
Finding date entities
Possible invoked concepts: List()
word = -
Finding date entities
Possible invoked concepts: List()
word = 612
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = then
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false)))
concept = PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
score = 0
adding concept:PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = be
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false)))
concept = PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false))
score = 0
word = convinced
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = leave
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(leave),leave-01,PhraseConceptFeatures(6.0,0.0,false,false)))
concept = PhraseConceptPair(List(leave),leave-01,PhraseConceptFeatures(6.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(leave),leave-01,PhraseConceptFeatures(6.0,0.0,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = peace
Finding date entities
Possible invoked concepts: List()
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = their
Finding date entities
Possible invoked concepts: List()
word = questions
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(questions),question,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)), PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)))
concept = PhraseConceptPair(List(questions),question,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
score = 0
adding concept:PhraseConceptPair(List(questions),question,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
concept = PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
score = 0
adding concept:PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), Some((0.003833681888436611,PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)),1)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),3)), None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),9)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),10)), Some((0.019626967847386725,PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false)),11)), None, None, None, None, None, None, None, None, Some((0.023573123325860184,PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false)),20)), Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),21)), None, None, None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),26)), Some((0.029773585223834276,PhraseConceptPair(List(leave),leave-01,PhraseConceptFeatures(6.0,0.0,false,false)),27)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),28)), None, None, None, None, Some((0.01759754047199135,PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)),33)), None)
Adding concept: question-01
nodeIds = List(0)
concepts = List(question-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(questions),question-01,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
feats:
bias 1.0
c|p -1.2039728043259361
len 1.0

score:
0.017597540471991358
Adding concept: you
nodeIds = List(1)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.04474290356684678
Adding concept: leave-01
nodeIds = List(2)
concepts = List(leave-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(leave),leave-01,PhraseConceptFeatures(6.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07451648879068105
Adding concept: and
nodeIds = List(3)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.09347443061308959
Adding concept: they
nodeIds = List(4)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.11605249531306651
Adding concept: then
nodeIds = List(5)
concepts = List(then)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
feats:
bias 1.0
c|p -0.6131044728864089
len 1.0

score:
0.1396256186389267
Adding concept: come-01
nodeIds = List(6)
concepts = List(come-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
feats:
bias 1.0
c|p -1.0033021088637848
len 1.0

score:
0.1592525864863134
Adding concept: he
nodeIds = List(7)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.1848713863667339
Adding concept: planet
nodeIds = List(8)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.21464497159056817
Adding concept: say-01
nodeIds = List(9)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.24441855681440244
Adding concept: you
nodeIds = List(10)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.2715639199092579
Adding concept: cause-01
nodeIds = List(11)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
feats:
bias 1.0
c|p -2.5649493574615367
len 1.0

score:
0.27539760179769446
Adding concept: contrast-01
nodeIds = List(12)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.2961059430096894
Decoder1 Spans:
Span 1:  and => and
Span 2:  But => contrast-01
Span 3:  came => come-01
Span 4:  he => he
Span 5:  if => cause-01
Span 6:  leave => leave-01
Span 7:  planet => planet
Span 8:  questions => question-01
Span 9:  said => say-01
Span 10:  then => then
Span 11:  they => they
Span 12:  you => you
Span 13:  you => you
Decoder1 feats:
bias 13.0
c|p -8.993242822844884
len 13.0

Concepts:
id = 2 concept = leave-01
id = 5 concept = then
id = 12 concept = contrast-01
id = 8 concept = planet
id = 7 concept = he
id = 1 concept = you
id = 4 concept = they
id = 11 concept = cause-01
id = 6 concept = come-01
id = 0 concept = question-01
id = 9 concept = say-01
id = 3 concept = and
id = 10 concept = you
Spans:
Span 26-27:  and => and
Span 0-1:  But => contrast-01
Span 11-12:  came => come-01
Span 10-11:  he => he
Span 1-2:  if => cause-01
Span 27-28:  leave => leave-01
Span 9-10:  planet => planet
Span 33-34:  questions => question-01
Span 3-4:  said => say-01
Span 20-21:  then => then
Span 21-22:  they => they
Span 28-29:  you => you
Span 2-3:  you => you

rootDependencyPaths = List(List(22, 0), List(22, 3, 1), List(22, 3, 2), List(22, 3), List(22, 3, 4), List(22, 3, 4, 5), List(22, 3, 4, 5, 6), List(22, 3, 7), List(22, 3, 9, 8), List(22, 3, 9), List(22, 3, 9, 11, 10), List(22, 3, 9, 11), List(22, 3, 9, 11, 15, 12), List(22, 3, 9, 11, 15, 13), List(22, 3, 9, 11, 15, 14), List(22, 3, 9, 11, 15), List(22, 3, 16), List(22, 3, 17), List(22, 18), List(22, 19), List(22, 20), List(22, 21), List(22), List(22, 23), List(22, 24), List(22, 25), List(22, 25, 26), List(22, 25, 27), List(22, 25, 27, 28), List(22, 25, 29), List(22, 25, 29, 31, 30), List(22, 25, 29, 31), List(22, 32))
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 150.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 144.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 138.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 132.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 126.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 120.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 114.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 108.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 102.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 96.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 90.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 84.67476693598303
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 78.674766935983
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 72.674766935983
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 66.67476693598302
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 60.674766935983044
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 55.00753521037139
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 51.00753521037139
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 47.00753521037139
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 43.00753521037139
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 39.00753521037139
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 35.00753521037139
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 31.007535210371387
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 27.007535210371387
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 23.007535210371387
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 19.007535210371387
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 15.007535210371385
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 11.007535210371378
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 7.007535210371378
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 3.007535210371378
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -0.9924647896286221
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -4.197672963285635
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -5.208266019263073
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -7.197672963285635
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -8.208266019263073
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -10.197672963285635
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -11.208266019263073
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -13.197672963285635
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -14.208266019263073
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -16.197672963285633
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -17.20826601926307
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -19.197672963285633
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -20.20826601926307
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -22.197672963285633
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -23.20826601926307
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -25.197672963285633
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -26.20826601926307
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -28.197672963285633
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -29.20826601926307
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 8
Node = 10
Node = 2
Node = 5
Node = 6
Node = 3
Node = 0
Node = 1
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -31.197672963285633
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 8
Node = 12
Node = 10
Node = 6
Node = 2
Node = 5
Node = 7
Node = 3
Node = 0
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -32.20826601926307
getNodeById = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
getNodeById2 = Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you)
Node = 11
Node = 9
Node = 12
Node = 10
Node = 2
Node = 5
Node = 8
Node = 3
Node = 0
Node = 1
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -34.07896947064369
Langrangian relaxation converged after 52 iterations. Delta = 0.0
Node.spans:
convince-01 List()
come-01 List()
he List()
they List()
- List()
question-01 List()
say-01 List()
name List()
you List()
"B-612" List()
and List()
leave-01 List()
contrast-01 List()
- List()
planet List()
peace List()
"Asteroid" List()
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(convince-01, come-01, he, they, question-01, say-01, name, you, "B-612", and, leave-01, contrast-01, planet, peace, "Asteroid")
OracleGraph triples: (a / and, condition, s / say-01)
(a / and, op, c / convince-01)
(a / and, op, l / leave-01)
(c / convince-01, ARG1, t / they)
(c2 / come-01, ARG1, h / he)
(c2 / come-01, ARG3, p / planet)
(c3 / contrast-01, ARG2, a / and)
(l / leave-01, ARG0, t / they)
(l / leave-01, ARG1, y / you)
(l / leave-01, ARG2, p2 / peace)
(n / name, op, "Asteroid")
(n / name, op, "B-612")
(p / planet, name, n / name)
(p2 / peace, topic, q2 / question-01)
(q2 / question-01, ARG0, t / they)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, c2 / come-01)
(s / say-01, ARG2, t / they)
rootDependencyPaths = List(List(22, 0), List(22, 3, 1), List(22, 3, 2), List(22, 3), List(22, 3, 4), List(22, 3, 4, 5), List(22, 3, 4, 5, 6), List(22, 3, 7), List(22, 3, 9, 8), List(22, 3, 9), List(22, 3, 9, 11, 10), List(22, 3, 9, 11), List(22, 3, 9, 11, 15, 12), List(22, 3, 9, 11, 15, 13), List(22, 3, 9, 11, 15, 14), List(22, 3, 9, 11, 15), List(22, 3, 16), List(22, 3, 17), List(22, 18), List(22, 19), List(22, 20), List(22, 21), List(22), List(22, 23), List(22, 24), List(22, 25), List(22, 25, 26), List(22, 25, 27), List(22, 25, 27, 28), List(22, 25, 29), List(22, 25, 29, 31, 30), List(22, 25, 29, 31), List(22, 32))
Oracle Span 26-27:  and => and
Oracle Span 14-16:  Asteroid B => (name :op "B-612" :op "Asteroid")
Oracle Span 0-1:  But => contrast-01
Oracle Span 11-12:  came => come-01
Oracle Span 24-25:  convinced => convince-01
Oracle Span 10-11:  he => he
Oracle Span 27-28:  leave => leave-01
Oracle Span 30-31:  peace => peace
Oracle Span 9-10:  planet => planet
Oracle Span 33-34:  questions => question-01
Oracle Span 3-4:  said => say-01
Oracle Span 21-22:  they => they
Oracle Span 2-3:  you => you

Extra span: you => you
Extra span: then => then
Extra span: if => cause-01
Missing span: Asteroid B => (name :op "B-612" :op "Asteroid")
Missing span: peace => peace
Missing span: convinced => convince-01
Dependencies:
1	But	_	CC	CC	_	23	cc	_	_
2	if	_	IN	IN	_	4	mark	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	said	_	VBD	VBD	_	23	advcl	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	them	_	PRP	PRP	_	5	pobj	_	_
7	:	_	:	:	_	6	punct	_	_
8	"	_	''	''	_	4	punct	_	_
9	The	_	DT	DT	_	10	det	_	_
10	planet	_	NN	NN	_	4	dobj	_	_
11	he	_	PRP	PRP	_	12	nsubj	_	_
12	came	_	VBD	VBD	_	10	rcmod	_	_
13	from	_	IN	IN	_	16	mark	_	_
14	is	_	VBZ	VBZ	_	16	cop	_	_
15	Asteroid	_	NNP	NNP	_	16	nn	_	_
16	B-612	_	NNP	NNP	_	12	advcl	_	_
17	,	_	,	,	_	4	punct	_	_
18	"	_	''	''	_	4	punct	_	_
19	then	_	RB	RB	_	23	advmod	_	_
20	they	_	PRP	PRP	_	23	nsubj	_	_
21	would	_	MD	MD	_	23	aux	_	_
22	be	_	VB	VB	_	23	cop	_	_
23	convinced	_	JJ	JJ	_	0	root	_	_
24	,	_	,	,	_	23	punct	_	_
25	and	_	CC	CC	_	23	cc	_	_
26	leave	_	VB	VB	_	23	conj	_	_
27	you	_	PRP	PRP	_	26	dobj	_	_
28	in	_	IN	IN	_	26	prep	_	_
29	peace	_	NN	NN	_	28	pobj	_	_
30	from	_	IN	IN	_	26	prep	_	_
31	their	_	PRP$	PRP$	_	32	poss	_	_
32	questions	_	NNS	NNS	_	30	pobj	_	_
33	.	_	.	.	_	23	punct	_	_

Oracle:
(a / and, condition, s / say-01)
(a / and, op, c / convince-01)
(a / and, op, l / leave-01)
(c / convince-01, ARG1, t / they)
(c2 / come-01, ARG1, h / he)
(c2 / come-01, ARG3, p / planet)
(c3 / contrast-01, ARG2, a / and)
(l / leave-01, ARG0, t / they)
(l / leave-01, ARG1, y / you)
(l / leave-01, ARG2, p2 / peace)
(n / name, op, "Asteroid")
(n / name, op, "B-612")
(p / planet, name, n / name)
(p2 / peace, topic, q2 / question-01)
(q2 / question-01, ARG0, t / they)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, c2 / come-01)
(s / say-01, ARG2, t / they)

Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),questions,question-01,false), Span(28,29,List(1),you,you,false), Span(27,28,List(2),leave,leave-01,false), Span(26,27,List(3),and,and,false), Span(21,22,List(4),they,they,false), Span(20,21,List(5),then,then,false), Span(11,12,List(6),came,come-01,false), Span(10,11,List(7),he,he,false), Span(9,10,List(8),planet,planet,false), Span(3,4,List(9),said,say-01,false), Span(2,3,List(10),you,you,false), Span(1,2,List(11),if,cause-01,false), Span(0,1,List(12),But,contrast-01,false)),Map(2 -> leave-01, 5 -> then, 12 -> contrast-01, 8 -> planet, 7 -> he, 1 -> you, 4 -> they, 11 -> cause-01, 6 -> come-01, 0 -> question-01, 9 -> say-01, 3 -> and, 10 -> you),Map(h -> he, q -> question-01, t -> they, s -> say-01, y -> you, p -> planet, a -> and, c3 -> contrast-01, t2 -> then, c -> come-01, l -> leave-01, y2 -> you, c2 -> cause-01))),[Ljava.lang.String;@55740540,Annotation([Ljava.lang.String;@60015ef5,[Ljava.lang.String;@2f54a33d,[Ljava.lang.String;@1018bde2),Annotation([Ljava.lang.String;@65b3f4a4,[Ljava.lang.String;@f2ff811,[Ledu.cmu.lti.nlp.amr.Dependency;@568ff82),Annotation([Ljava.lang.String;@50caa560,[Ljava.lang.String;@2a266d09,[Ljava.lang.String;@5ab9e72c),Annotation([Ljava.lang.String;@186f8716,[Ljava.lang.String;@1d8bd0de,[Ledu.cmu.lti.nlp.amr.Entity;@45ca843))
AMR:
(a / and, op, l / leave-01)
(c / come-01, ARG1, p / planet)
(c / come-01, ARG2, h / he)
(c2 / cause-01, ARG1, s / say-01)
(c3 / contrast-01, ARG0, t2 / then)
(c3 / contrast-01, ARG2, l / leave-01)
(l / leave-01, ARG0, t / they)
(l / leave-01, ARG1, y / you)
(l / leave-01, manner, q / question-01)
(s / say-01, ARG0, y2 / you)
(s / say-01, ARG1, c3 / contrast-01)
(y2 / you, source, p / planet)

Decoded in 527,405 microseconds
Sentence: They are like that .


--- Decoder1 ---

Sentence: They are like that .
word = They
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false)))
concept = PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
word = are
Finding date entities
Possible invoked concepts: List()
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false)),0)), None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),3)), None)
Adding concept: that
nodeIds = List(0)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.016617808389215782
Adding concept: they
nodeIds = List(1)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04639139361305006
Decoder1 Spans:
Span 1:  that => that
Span 2:  They => they
Decoder1 feats:
bias 2.0
c|p -1.300849155163006
len 2.0

Concepts:
id = 1 concept = they
id = 0 concept = that
Spans:
Span 3-4:  that => that
Span 0-1:  They => they

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 3), List(1, 4))
getNodeById = Map(1 -> they, 0 -> that)
getNodeById2 = Map(1 -> they, 0 -> that)
getNodeById = Map(1 -> they, 0 -> that)
getNodeById2 = Map(1 -> they, 0 -> that)
Node = 0
Node = 1
visited = Set(0, 1)
Alg2 returning score = -164.45461015753165
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
that List()
they List()
resemble-01 List()
clearUnalignedNodes():  removing unaligned node: Some(r) / resemble-01
OracleGraph nodes = List(that, they)
OracleGraph triples: 
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 3), List(1, 4))
Oracle Span 3-4:  that => that
Oracle Span 0-1:  They => they

Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	are	_	VBP	VBP	_	0	root	_	_
3	like	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	3	pobj	_	_
5	.	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),that,that,false), Span(0,1,List(1),They,they,false)),Map(1 -> they, 0 -> that),Map(t -> that, t2 -> they))),[Ljava.lang.String;@11c9af63,Annotation([Ljava.lang.String;@757acd7b,[Ljava.lang.String;@36b4fe2a,[Ljava.lang.String;@574b560f),Annotation([Ljava.lang.String;@ba54932,[Ljava.lang.String;@28975c28,[Ledu.cmu.lti.nlp.amr.Dependency;@3943a2be),Annotation([Ljava.lang.String;@343570b7,[Ljava.lang.String;@157853da,[Ljava.lang.String;@71c3b41),Annotation([Ljava.lang.String;@236e3f4e,[Ljava.lang.String;@3cc1435c,[Ledu.cmu.lti.nlp.amr.Entity;@6bf0219d))
AMR:
(t2 / they, mod, t / that)

Decoded in 8,218 microseconds
Sentence: One must not hold it against them .


--- Decoder1 ---

Sentence: One must not hold it against them .
word = One
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(One),1,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)), PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false)))
concept = PhraseConceptPair(List(One),1,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
concept = PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
score = 0
adding concept:PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
word = must
Finding date entities
Possible invoked concepts: List()
word = not
Finding date entities
Possible invoked concepts: List()
word = hold
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = against
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(against),again,PhraseConceptFeatures(1.0,-1.791759469228055,false,false)))
concept = PhraseConceptPair(List(against),again,PhraseConceptFeatures(1.0,-1.791759469228055,false,false))
score = 0
adding concept:PhraseConceptPair(List(against),again,PhraseConceptFeatures(1.0,-1.791759469228055,false,false))
word = them
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.022150523336194265,PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false)),0)), None, None, None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),4)), Some((0.011653123197224401,PhraseConceptPair(List(against),again,PhraseConceptFeatures(1.0,-1.791759469228055,false,false)),5)), None, None)
Adding concept: again
nodeIds = List(0)
concepts = List(again)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(against),again,PhraseConceptFeatures(1.0,-1.791759469228055,false,false))
feats:
bias 1.0
c|p -1.791759469228055
len 1.0

score:
0.011653123197224391
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.030572242621036888
Adding concept: one
nodeIds = List(2)
concepts = List(one)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
feats:
bias 1.0
c|p -0.7537718023763802
len 1.0

score:
0.05272276595723116
Decoder1 Spans:
Span 1:  against => again
Span 2:  it => it
Span 3:  One => one
Decoder1 feats:
bias 3.0
c|p -3.618825752288255
len 3.0

Concepts:
id = 2 concept = one
id = 1 concept = it
id = 0 concept = again
Spans:
Span 5-6:  against => again
Span 4-5:  it => it
Span 0-1:  One => one

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 5, 6), List(3, 7))
getNodeById = Map(2 -> one, 1 -> it, 0 -> again)
getNodeById2 = Map(2 -> one, 1 -> it, 0 -> again)
getNodeById = Map(2 -> one, 1 -> it, 0 -> again)
getNodeById2 = Map(2 -> one, 1 -> it, 0 -> again)
Node = 2
Node = 0
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -179.008600430529
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
it List()
hold-01 List()
- List()
one List()
they List()
obligate-01 List()
against List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(t) / they
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
OracleGraph nodes = List(it, hold-01, one, against)
OracleGraph triples: (h / hold-01, ARG0, o2 / one)
(h / hold-01, ARG1, i / it)
(h / hold-01, ARG2, a / against)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 5, 6), List(3, 7))
Oracle Span 5-6:  against => against
Oracle Span 3-4:  hold => hold-01
Oracle Span 4-5:  it => it
Oracle Span 0-1:  One => one

Incorrect span: against => again
Missing span: hold => hold-01
Missing span: against => against
Dependencies:
1	One	_	PRP	PRP	_	4	nsubj	_	_
2	must	_	MD	MD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	hold	_	VB	VB	_	0	root	_	_
5	it	_	PRP	PRP	_	4	dobj	_	_
6	against	_	IN	IN	_	4	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	.	_	.	.	_	4	punct	_	_

Oracle:
(h / hold-01, ARG0, o2 / one)
(h / hold-01, ARG1, i / it)
(h / hold-01, ARG2, a / against)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),against,again,false), Span(4,5,List(1),it,it,false), Span(0,1,List(2),One,one,false)),Map(2 -> one, 1 -> it, 0 -> again),Map(a -> again, i -> it, o -> one))),[Ljava.lang.String;@dd0c991,Annotation([Ljava.lang.String;@5f16132a,[Ljava.lang.String;@69fb6037,[Ljava.lang.String;@36d585c),Annotation([Ljava.lang.String;@87a85e1,[Ljava.lang.String;@671a5887,[Ledu.cmu.lti.nlp.amr.Dependency;@5552768b),Annotation([Ljava.lang.String;@3c947bc5,[Ljava.lang.String;@609db43b,[Ljava.lang.String;@55f616cf),Annotation([Ljava.lang.String;@1356d4d4,[Ljava.lang.String;@c03cf28,[Ledu.cmu.lti.nlp.amr.Entity;@1329eff))
AMR:
(a / again, op, o / one)
(i / it, mod, a / again)

Decoded in 14,112 microseconds
Sentence: Children should always show great forbearance toward grown - up people .


--- Decoder1 ---

Sentence: Children should always show great forbearance toward grown - up people .
word = Children
Finding date entities
Possible invoked concepts: List()
word = should
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)))
concept = PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
word = always
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false)))
concept = PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
word = show
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(show),show-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(show),show-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(show),show-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = great
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
word = forbearance
Finding date entities
Possible invoked concepts: List()
word = toward
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false)))
concept = PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
score = 0
adding concept:PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
word = grown
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
word = -
Finding date entities
Possible invoked concepts: List()
word = up
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false)))
concept = PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
score = 0
adding concept:PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
word = people
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(people),people-01,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false)))
concept = PhraseConceptPair(List(people),people-01,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false))
score = 0
adding concept:PhraseConceptPair(List(people),people-01,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.012844289233539447,PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)),1)), Some((0.029773585223834276,PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(show),show-01,PhraseConceptFeatures(2.0,0.0,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)),4)), None, Some((0.02460749207537229,PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false)),6)), Some((0.029773585223834276,PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)),7)), None, Some((0.019093489647122215,PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false)),9)), Some((0.0046431715938434585,PhraseConceptPair(List(people),people-01,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false)),10)), None)
Adding concept: people-01
nodeIds = List(0)
concepts = List(people-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(people),people-01,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false))
feats:
bias 1.0
c|p -2.4849066497880004
len 1.0

score:
0.004643171593843448
Adding concept: up
nodeIds = List(1)
concepts = List(up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
feats:
bias 1.0
c|p -1.0560526742493137
len 1.0

score:
0.023736661240965656
Adding concept: grown-up
nodeIds = List(2)
concepts = List(grown-up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05351024646479993
Adding concept: toward
nodeIds = List(3)
concepts = List(toward)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
feats:
bias 1.0
c|p -0.5108256237659907
len 1.0

score:
0.07811773854017222
Adding concept: great
nodeIds = List(4)
concepts = List(great)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1078913237640065
Adding concept: show-01
nodeIds = List(5)
concepts = List(show-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(show),show-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13766490898784078
Adding concept: always
nodeIds = List(6)
concepts = List(always)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.16743849421167506
Adding concept: recommend-01
nodeIds = List(7)
concepts = List(recommend-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
feats:
bias 1.0
c|p -1.6739764335716716
len 1.0

score:
0.1802827834452145
Decoder1 Spans:
Span 1:  always => always
Span 2:  great => great
Span 3:  grown => grown-up
Span 4:  people => people-01
Span 5:  should => recommend-01
Span 6:  show => show-01
Span 7:  toward => toward
Span 8:  up => up
Decoder1 feats:
bias 8.0
c|p -5.725761381374976
len 8.0

Concepts:
id = 2 concept = grown-up
id = 5 concept = show-01
id = 7 concept = recommend-01
id = 1 concept = up
id = 4 concept = great
id = 6 concept = always
id = 0 concept = people-01
id = 3 concept = toward
Spans:
Span 2-3:  always => always
Span 4-5:  great => great
Span 7-8:  grown => grown-up
Span 10-11:  people => people-01
Span 1-2:  should => recommend-01
Span 3-4:  show => show-01
Span 6-7:  toward => toward
Span 9-10:  up => up

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 6), List(3, 6, 7), List(3, 6, 7, 8), List(3, 6, 7, 9), List(3, 6, 7, 10), List(3, 11))
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -237.74209338159727
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -243.74209338159727
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -249.17056521557646
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -253.17056521557646
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -257.17056521557646
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -261.17056521557646
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -265.17056521557646
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -269.17056521557646
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -272.1025898668296
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -275.17056521557646
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -278.1025898668296
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -281.17056521557646
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 4
Node = 5
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -284.1025898668296
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 5
Node = 4
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -286.794463142622
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 5
Node = 4
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -288.794463142622
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 5
Node = 4
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -290.794463142622
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 5
Node = 4
Node = 6
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -292.794463142622
getNodeById = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
getNodeById2 = Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward)
Node = 7
Node = 5
Node = 4
Node = 6
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -294.499769304763
Langrangian relaxation converged after 18 iterations. Delta = 0.0
Node.spans:
child List()
grown-up List()
forbearance List()
show-01 List()
recommend-01 List()
great List()
always List()
OracleGraph nodes = List(child, grown-up, forbearance, show-01, recommend-01, great, always)
OracleGraph triples: (f / forbearance, mod, g / great)
(r / recommend-01, ARG1, s / show-01)
(s / show-01, ARG0, c / child)
(s / show-01, ARG1, f / forbearance)
(s / show-01, ARG2, g2 / grown-up)
(s / show-01, time, a / always)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 6), List(3, 6, 7), List(3, 6, 7, 8), List(3, 6, 7, 9), List(3, 6, 7, 10), List(3, 11))
Oracle Span 2-3:  always => always
Oracle Span 0-1:  Children => child
Oracle Span 5-6:  forbearance => forbearance
Oracle Span 4-5:  great => great
Oracle Span 7-8:  grown => grown-up
Oracle Span 1-2:  should => recommend-01
Oracle Span 3-4:  show => show-01

Extra span: people => people-01
Extra span: up => up
Extra span: toward => toward
Missing span: forbearance => forbearance
Missing span: Children => child
Dependencies:
1	Children	_	NNP	NNP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	always	_	RB	RB	_	4	advmod	_	_
4	show	_	VB	VB	_	0	root	_	_
5	great	_	JJ	JJ	_	6	amod	_	_
6	forbearance	_	NN	NN	_	4	dobj	_	_
7	toward	_	IN	IN	_	4	prep	_	_
8	grown	_	JJ	JJ	_	7	pobj	_	_
9	-	_	:	:	_	8	punct	_	_
10	up	_	IN	IN	_	8	advmod	_	_
11	people	_	NNS	NNS	_	8	dep	_	_
12	.	_	.	.	_	4	punct	_	_

Oracle:
(f / forbearance, mod, g / great)
(r / recommend-01, ARG1, s / show-01)
(s / show-01, ARG0, c / child)
(s / show-01, ARG1, f / forbearance)
(s / show-01, ARG2, g2 / grown-up)
(s / show-01, time, a / always)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),people,people-01,false), Span(9,10,List(1),up,up,false), Span(7,8,List(2),grown,grown-up,false), Span(6,7,List(3),toward,toward,false), Span(4,5,List(4),great,great,false), Span(3,4,List(5),show,show-01,false), Span(2,3,List(6),always,always,false), Span(1,2,List(7),should,recommend-01,false)),Map(2 -> grown-up, 5 -> show-01, 7 -> recommend-01, 1 -> up, 4 -> great, 6 -> always, 0 -> people-01, 3 -> toward),Map(t -> toward, s -> show-01, g2 -> great, g -> grown-up, p -> people-01, a -> always, r -> recommend-01, u -> up))),[Ljava.lang.String;@6497b078,Annotation([Ljava.lang.String;@41c2284a,[Ljava.lang.String;@53aad5d5,[Ljava.lang.String;@46fa7c39),Annotation([Ljava.lang.String;@1fb700ee,[Ljava.lang.String;@4f67eb2a,[Ledu.cmu.lti.nlp.amr.Dependency;@4a668b6e),Annotation([Ljava.lang.String;@5f683daf,[Ljava.lang.String;@78ffe6dc,[Ljava.lang.String;@8317c52),Annotation([Ljava.lang.String;@76f2bbc1,[Ljava.lang.String;@68e965f5,[Ledu.cmu.lti.nlp.amr.Entity;@6f27a732))
AMR:
(p / people-01, ARG0, u / up)
(p / people-01, ARG1, t / toward)
(r / recommend-01, ARG1, g2 / great)
(r / recommend-01, manner, s / show-01)
(s / show-01, ARG1, g / grown-up)
(s / show-01, ARG2, t / toward)
(s / show-01, time, a / always)

Decoded in 93,974 microseconds
Sentence: But certainly , for us who understand life , figures are a matter of indifference .


--- Decoder1 ---

Sentence: But certainly , for us who understand life , figures are a matter of indifference .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = certainly
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = for
Finding date entities
Possible invoked concepts: List()
word = us
Finding date entities
Possible invoked concepts: List()
word = who
Finding date entities
Possible invoked concepts: List()
word = understand
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(understand),(thing :manner-of understand-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false)))
concept = PhraseConceptPair(List(understand),(thing :manner-of understand-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
score = 0
adding concept:PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
word = life
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false)))
concept = PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
score = 0
adding concept:PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = figures
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
word = are
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = matter
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)), PhraseConceptPair(List(matter),matter-01,PhraseConceptFeatures(1.0,-2.3025850929940455,false,false)))
concept = PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
score = 0
adding concept:PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
concept = PhraseConceptPair(List(matter),matter-01,PhraseConceptFeatures(1.0,-2.3025850929940455,false,false))
score = 0
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = indifference
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false)),1)), None, None, None, None, Some((0.022110941201849425,PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false)),6)), Some((0.017104114690078137,PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false)),7)), None, Some((0.029773585223834276,PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false)),9)), None, None, Some((0.013496981652143358,PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)),12)), None, None, None)
Adding concept: matter
nodeIds = List(0)
concepts = List(matter)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
feats:
bias 1.0
c|p -1.6094379124341003
len 1.0

score:
0.013496981652143358
Adding concept: figure
nodeIds = List(1)
concepts = List(figure)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.043270566875977634
Adding concept: life
nodeIds = List(2)
concepts = List(life)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
feats:
bias 1.0
c|p -1.252762968495368
len 1.0

score:
0.06037468156605577
Adding concept: understand-01
nodeIds = List(3)
concepts = List(understand-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
feats:
bias 1.0
c|p -0.7576857016975165
len 1.0

score:
0.08248562276790519
Adding concept: certain
nodeIds = List(4)
concepts = List(certain)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11225920799173947
Adding concept: contrast-01
nodeIds = List(5)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.13296754920373438
Decoder1 Spans:
Span 1:  But => contrast-01
Span 2:  certainly => certain
Span 3:  figures => figure
Span 4:  life => life
Span 5:  matter => matter
Span 6:  understand => understand-01
Decoder1 feats:
bias 6.0
c|p -4.516262004800199
len 6.0

Concepts:
id = 2 concept = life
id = 5 concept = contrast-01
id = 1 concept = figure
id = 4 concept = certain
id = 0 concept = matter
id = 3 concept = understand-01
Spans:
Span 0-1:  But => contrast-01
Span 1-2:  certainly => certain
Span 9-10:  figures => figure
Span 7-8:  life => life
Span 12-13:  matter => matter
Span 6-7:  understand => understand-01

rootDependencyPaths = List(List(12, 0), List(12, 1), List(12, 2), List(12, 3), List(12, 3, 4), List(12, 3, 4, 6, 5), List(12, 3, 4, 6), List(12, 3, 4, 6, 7), List(12, 8), List(12, 9), List(12, 10), List(12, 11), List(12), List(12, 13), List(12, 13, 14), List(12, 15))
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -211.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -213.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -215.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -217.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -219.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -221.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -223.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -225.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -227.25465810567596
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -228.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -230.25465810567596
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -231.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 3
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -233.0791498014238
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -234.25465810567596
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -235.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 3
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -237.0791498014238
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -238.25465810567596
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -239.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 3
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -241.0791498014238
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -242.25465810567596
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 1
Node = 4
Node = 3
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -243.82913333000465
getNodeById = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
getNodeById2 = Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01)
Node = 5
Node = 3
Node = 1
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -244.89018369263874
Langrangian relaxation converged after 22 iterations. Delta = 0.0
Node.spans:
indifferent-41 List()
we List()
life List()
certain List()
contrast-01 List()
figure List()
understand-01 List()
clearUnalignedNodes():  removing unaligned node: Some(w2) / we
OracleGraph nodes = List(indifferent-41, life, certain, contrast-01, figure, understand-01)
OracleGraph triples: (c / certain, domain, i2 / indifferent-41)
(c2 / contrast-01, ARG2, c / certain)
(i2 / indifferent-41, ARG2, f2 / figure)
(u / understand-01, ARG1, l / life)
rootDependencyPaths = List(List(12, 0), List(12, 1), List(12, 2), List(12, 3), List(12, 3, 4), List(12, 3, 4, 6, 5), List(12, 3, 4, 6), List(12, 3, 4, 6, 7), List(12, 8), List(12, 9), List(12, 10), List(12, 11), List(12), List(12, 13), List(12, 13, 14), List(12, 15))
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  certainly => certain
Oracle Span 9-10:  figures => figure
Oracle Span 14-15:  indifference => indifferent-41
Oracle Span 7-8:  life => life
Oracle Span 6-7:  understand => understand-01

Extra span: matter => matter
Missing span: indifference => indifferent-41
Dependencies:
1	But	_	CC	CC	_	13	cc	_	_
2	certainly	_	RB	RB	_	13	advmod	_	_
3	,	_	,	,	_	13	punct	_	_
4	for	_	IN	IN	_	13	prep	_	_
5	us	_	PRP	PRP	_	4	pobj	_	_
6	who	_	WP	WP	_	7	nsubj	_	_
7	understand	_	VBP	VBP	_	5	rcmod	_	_
8	life	_	NN	NN	_	7	dobj	_	_
9	,	_	,	,	_	13	punct	_	_
10	figures	_	NNS	NNS	_	13	nsubj	_	_
11	are	_	VBP	VBP	_	13	cop	_	_
12	a	_	DT	DT	_	13	det	_	_
13	matter	_	NN	NN	_	0	root	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	indifference	_	NN	NN	_	14	pobj	_	_
16	.	_	.	.	_	13	punct	_	_

Oracle:
(c / certain, domain, i2 / indifferent-41)
(c2 / contrast-01, ARG2, c / certain)
(i2 / indifferent-41, ARG2, f2 / figure)
(u / understand-01, ARG1, l / life)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),matter,matter,false), Span(9,10,List(1),figures,figure,false), Span(7,8,List(2),life,life,false), Span(6,7,List(3),understand,understand-01,false), Span(1,2,List(4),certainly,certain,false), Span(0,1,List(5),But,contrast-01,false)),Map(2 -> life, 5 -> contrast-01, 1 -> figure, 4 -> certain, 0 -> matter, 3 -> understand-01),Map(m -> matter, c -> certain, u -> understand-01, l -> life, f -> figure, c2 -> contrast-01))),[Ljava.lang.String;@6c779568,Annotation([Ljava.lang.String;@f381794,[Ljava.lang.String;@2cdd0d4b,[Ljava.lang.String;@7e9131d5),Annotation([Ljava.lang.String;@2e1d27ba,[Ljava.lang.String;@61d6015a,[Ledu.cmu.lti.nlp.amr.Dependency;@2525ff7e),Annotation([Ljava.lang.String;@524d6d96,[Ljava.lang.String;@152aa092,[Ljava.lang.String;@44a7bfbc),Annotation([Ljava.lang.String;@4ef37659,[Ljava.lang.String;@776b83cc,[Ledu.cmu.lti.nlp.amr.Entity;@37858383))
AMR:
(c2 / contrast-01, ARG0, c / certain)
(c2 / contrast-01, ARG1, f / figure)
(c2 / contrast-01, ARG2, u / understand-01)
(u / understand-01, ARG0, m / matter)
(u / understand-01, ARG1, l / life)

Decoded in 99,226 microseconds
Sentence: I should have liked to begin this story in the fashion of the fairy - tales .


--- Decoder1 ---

Sentence: I should have liked to begin this story in the fashion of the fairy - tales .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = should
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)))
concept = PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = liked
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(liked),like-02,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(liked),like-02,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(liked),like-02,PhraseConceptFeatures(1.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = begin
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = story
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = fashion
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = fairy
Finding date entities
Possible invoked concepts: List()
word = -
Finding date entities
Possible invoked concepts: List()
word = tales
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.012844289233539447,PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)),1)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(liked),like-02,PhraseConceptFeatures(1.0,0.0,false,false)),3)), None, Some((0.029773585223834276,PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false)),5)), Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),6)), Some((0.029773585223834276,PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false)),7)), None, None, None, None, None, None, None, None, None)
Adding concept: story
nodeIds = List(0)
concepts = List(story)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: this
nodeIds = List(1)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.05822617949098785
Adding concept: begin-01
nodeIds = List(2)
concepts = List(begin-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08799976471482213
Adding concept: like-02
nodeIds = List(3)
concepts = List(like-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(liked),like-02,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1177733499386564
Adding concept: have-03
nodeIds = List(4)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.11793785428526105
Adding concept: recommend-01
nodeIds = List(5)
concepts = List(recommend-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
feats:
bias 1.0
c|p -1.6739764335716716
len 1.0

score:
0.1307821435188005
Adding concept: i
nodeIds = List(6)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.15683134993702974
Decoder1 Spans:
Span 1:  begin => begin-01
Span 2:  have => have-03
Span 3:  I => i
Span 4:  liked => like-02
Span 5:  should => recommend-01
Span 6:  story => story
Span 7:  this => this
Decoder1 feats:
bias 7.0
c|p -5.100624164356085
len 7.0

Concepts:
id = 2 concept = begin-01
id = 5 concept = recommend-01
id = 1 concept = this
id = 4 concept = have-03
id = 6 concept = i
id = 0 concept = story
id = 3 concept = like-02
Spans:
Span 5-6:  begin => begin-01
Span 2-3:  have => have-03
Span 0-1:  I => i
Span 3-4:  liked => like-02
Span 1-2:  should => recommend-01
Span 7-8:  story => story
Span 6-7:  this => this

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 5, 7, 6), List(3, 5, 7), List(3, 5, 7, 8), List(3, 5, 7, 8, 10, 9), List(3, 5, 7, 8, 10), List(3, 5, 7, 8, 10, 11), List(3, 5, 7, 8, 10, 11, 13, 12), List(3, 5, 7, 8, 10, 11, 13), List(3, 5, 7, 14), List(3, 5, 7, 15), List(3, 16))
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 3.787348321218513
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = 1.7873483212185093
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -0.21265167878149072
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -2.2126516787814907
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -4.212651678781491
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 6
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -6.177140222705084
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -7.212651678781491
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -8.954405048500895
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -11.21265167878149
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -12.954405048500895
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -15.21265167878149
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -16.954405048500895
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -19.21265167878149
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -20.954405048500895
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -23.21265167878149
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -24.954405048500895
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -27.21265167878149
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -28.954405048500895
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -31.21265167878149
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -32.954405048500895
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 6
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -35.21265167878149
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 4
Node = 3
Node = 2
Node = 0
Node = 6
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -36.736927186727364
getNodeById = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
getNodeById2 = Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02)
Node = 5
Node = 3
Node = 2
Node = 4
Node = 0
Node = 6
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -37.95966236093155
Langrangian relaxation converged after 23 iterations. Delta = 0.0
Node.spans:
tale List()
fashion List()
begin-01 List()
this List()
story List()
i List()
like-02 List()
fairy List()
OracleGraph nodes = List(tale, fashion, begin-01, this, story, i, like-02, fairy)
OracleGraph triples: (b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, s / story)
(b / begin-01, manner, f / fashion)
(f / fashion, mod, t2 / tale)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, b / begin-01)
(s / story, mod, t / this)
(t2 / tale, mod, f2 / fairy)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 5, 7, 6), List(3, 5, 7), List(3, 5, 7, 8), List(3, 5, 7, 8, 10, 9), List(3, 5, 7, 8, 10), List(3, 5, 7, 8, 10, 11), List(3, 5, 7, 8, 10, 11, 13, 12), List(3, 5, 7, 8, 10, 11, 13), List(3, 5, 7, 14), List(3, 5, 7, 15), List(3, 16))
Oracle Span 5-6:  begin => begin-01
Oracle Span 13-14:  fairy => fairy
Oracle Span 10-11:  fashion => fashion
Oracle Span 0-1:  I => i
Oracle Span 3-4:  liked => like-02
Oracle Span 7-8:  story => story
Oracle Span 15-16:  tales => tale
Oracle Span 6-7:  this => this

Extra span: have => have-03
Extra span: should => recommend-01
Missing span: fashion => fashion
Missing span: tales => tale
Missing span: fairy => fairy
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	have	_	VB	VB	_	4	aux	_	_
4	liked	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	begin	_	VB	VB	_	4	xcomp	_	_
7	this	_	DT	DT	_	8	det	_	_
8	story	_	NN	NN	_	6	dobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	fashion	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	fairy	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	8	punct	_	_
16	tales	_	NNS	NNS	_	8	dep	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, s / story)
(b / begin-01, manner, f / fashion)
(f / fashion, mod, t2 / tale)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, b / begin-01)
(s / story, mod, t / this)
(t2 / tale, mod, f2 / fairy)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),story,story,false), Span(6,7,List(1),this,this,false), Span(5,6,List(2),begin,begin-01,false), Span(3,4,List(3),liked,like-02,false), Span(2,3,List(4),have,have-03,false), Span(1,2,List(5),should,recommend-01,false), Span(0,1,List(6),I,i,false)),Map(2 -> begin-01, 5 -> recommend-01, 1 -> this, 4 -> have-03, 6 -> i, 0 -> story, 3 -> like-02),Map(h -> have-03, b -> begin-01, t -> this, s -> story, i -> i, r -> recommend-01, l -> like-02))),[Ljava.lang.String;@4e268090,Annotation([Ljava.lang.String;@1bb266b3,[Ljava.lang.String;@306cf3ea,[Ljava.lang.String;@2beee7ff),Annotation([Ljava.lang.String;@5136d012,[Ljava.lang.String;@5939a379,[Ledu.cmu.lti.nlp.amr.Dependency;@e1de817),Annotation([Ljava.lang.String;@52102734,[Ljava.lang.String;@3541cb24,[Ljava.lang.String;@2177849e),Annotation([Ljava.lang.String;@40cb8df7,[Ljava.lang.String;@13b13b5d,[Ledu.cmu.lti.nlp.amr.Entity;@2892dae4))
AMR:
(b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, s / story)
(l / like-02, ARG0, h / have-03)
(l / like-02, ARG1, b / begin-01)
(r / recommend-01, ARG1, l / like-02)
(s / story, mod, t / this)

Decoded in 124,287 microseconds
Sentence: I should have like to say : " Once upon a time there was a little prince who lived on a planet that was scarcely any bigger than himself , and who had need of a sheep ... "


--- Decoder1 ---

Sentence: I should have like to say : " Once upon a time there was a little prince who lived on a planet that was scarcely any bigger than himself , and who had need of a sheep ... "
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = should
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)))
concept = PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = say
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)))
concept = PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
score = 0
adding concept:PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = Once
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Once),once,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(Once),once,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(Once),once,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = upon
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = time
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)), PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false)))
concept = PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
score = 0
adding concept:PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
concept = PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false))
score = 0
word = there
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)))
concept = PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
score = 0
adding concept:PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = who
Finding date entities
Possible invoked concepts: List()
word = lived
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = scarcely
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false))
word = any
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false)), PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)))
concept = PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false))
score = 0
concept = PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
score = 0
adding concept:PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
word = bigger
Finding date entities
Possible invoked concepts: List()
word = than
Finding date entities
Possible invoked concepts: List()
word = himself
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = who
Finding date entities
Possible invoked concepts: List()
word = had
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false)), PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false)))
concept = PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
word = need
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false)))
concept = PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = ...
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.012844289233539447,PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)),1)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),2)), None, None, Some((0.020663730542327237,PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)),5)), None, None, Some((0.022763633620453336,PhraseConceptPair(List(Once),once,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),8)), None, None, Some((0.017491641887458505,PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)),11)), Some((0.018974275428782817,PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)),12)), None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),15)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),16)), None, Some((0.029773585223834276,PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false)),18)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),21)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),22)), None, Some((0.029773585223834276,PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false)),24)), Some((0.017940394404303485,PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)),25)), None, None, None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),30)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false)),33)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),36)), None, None)
Adding concept: sheep
nodeIds = List(0)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: need-01
nodeIds = List(1)
concepts = List(need-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: and
nodeIds = List(2)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.07850511227007709
Adding concept: any
nodeIds = List(3)
concepts = List(any)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
feats:
bias 1.0
c|p -1.1700712526502546
len 1.0

score:
0.09644550667438057
Adding concept: scarce
nodeIds = List(4)
concepts = List(scarce)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(scarcely),scarce,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.12621909189821484
Adding concept: that
nodeIds = List(5)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.14283690028743062
Adding concept: planet
nodeIds = List(6)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1726104855112649
Adding concept: live-01
nodeIds = List(7)
concepts = List(live-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.20238407073509918
Adding concept: prince
nodeIds = List(8)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.23209503518662872
Adding concept: little
nodeIds = List(9)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.25471384691826227
Adding concept: there
nodeIds = List(10)
concepts = List(there)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
feats:
bias 1.0
c|p -1.067840630001356
len 1.0

score:
0.2736881223470451
Adding concept: time
nodeIds = List(11)
concepts = List(time)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
feats:
bias 1.0
c|p -1.2144441041932315
len 1.0

score:
0.2911797642345036
Adding concept: once
nodeIds = List(12)
concepts = List(once)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Once),once,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.31394339785495695
Adding concept: say-01
nodeIds = List(13)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
feats:
bias 1.0
c|p -0.9007865453381898
len 1.0

score:
0.3346071283972842
Adding concept: have-03
nodeIds = List(14)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.3347716327438888
Adding concept: recommend-01
nodeIds = List(15)
concepts = List(recommend-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
feats:
bias 1.0
c|p -1.6739764335716716
len 1.0

score:
0.3476159219774283
Adding concept: i
nodeIds = List(16)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.3736651283956576
Decoder1 Spans:
Span 1:  and => and
Span 2:  any => any
Span 3:  have => have-03
Span 4:  I => i
Span 5:  little => little
Span 6:  lived => live-01
Span 7:  need => need-01
Span 8:  Once => once
Span 9:  planet => planet
Span 10:  prince => prince
Span 11:  say => say-01
Span 12:  scarcely => scarce
Span 13:  sheep => sheep
Span 14:  should => recommend-01
Span 15:  that => that
Span 16:  there => there
Span 17:  time => time
Decoder1 feats:
bias 17.0
c|p -13.100257758804272
len 17.0

Concepts:
id = 2 concept = and
id = 5 concept = that
id = 12 concept = once
id = 15 concept = recommend-01
id = 8 concept = prince
id = 7 concept = live-01
id = 1 concept = need-01
id = 4 concept = scarce
id = 11 concept = time
id = 14 concept = have-03
id = 6 concept = planet
id = 0 concept = sheep
id = 9 concept = little
id = 16 concept = i
id = 3 concept = any
id = 10 concept = there
id = 13 concept = say-01
Spans:
Span 30-31:  and => and
Span 25-26:  any => any
Span 2-3:  have => have-03
Span 0-1:  I => i
Span 15-16:  little => little
Span 18-19:  lived => live-01
Span 33-34:  need => need-01
Span 8-9:  Once => once
Span 21-22:  planet => planet
Span 16-17:  prince => prince
Span 5-6:  say => say-01
Span 24-25:  scarcely => scarce
Span 36-37:  sheep => sheep
Span 1-2:  should => recommend-01
Span 22-23:  that => that
Span 12-13:  there => there
Span 11-12:  time => time

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 6), List(3, 7), List(3, 13, 8), List(3, 13, 8, 9), List(3, 13, 8, 9, 11, 10), List(3, 13, 8, 9, 11), List(3, 13, 12), List(3, 13), List(3, 13, 16, 14), List(3, 13, 16, 15), List(3, 13, 16), List(3, 13, 16, 18, 17), List(3, 13, 16, 18), List(3, 13, 16, 18, 19), List(3, 13, 16, 18, 19, 21, 20), List(3, 13, 16, 18, 19, 21), List(3, 13, 16, 18, 26, 22), List(3, 13, 16, 18, 26, 23), List(3, 13, 16, 18, 26, 24), List(3, 13, 16, 18, 26, 25), List(3, 13, 16, 18, 26), List(3, 13, 16, 18, 26, 27), List(3, 13, 16, 18, 26, 27, 28), List(3, 13, 16, 18, 26, 29), List(3, 13, 16, 18, 26, 30), List(3, 13, 16, 18, 26, 32, 31), List(3, 13, 16, 18, 26, 32), List(3, 13, 16, 18, 26, 32, 33), List(3, 13, 16, 18, 26, 32, 33, 34), List(3, 13, 16, 18, 26, 32, 33, 34, 36, 35), List(3, 13, 16, 18, 26, 32, 33, 34, 36), List(3, 37), List(3, 38))
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 2
Node = 8
Node = 16
Node = 1
Node = 9
Node = 7
Node = 12
Node = 11
Node = 10
Node = 0
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -660.6289555558238
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 12
Node = 14
Node = 13
Node = 2
Node = 8
Node = 16
Node = 1
Node = 9
Node = 7
Node = 0
Node = 11
Node = 10
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -682.5396807936845
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 12
Node = 14
Node = 13
Node = 2
Node = 8
Node = 16
Node = 1
Node = 9
Node = 7
Node = 0
Node = 11
Node = 10
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -696.5396807936845
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 11
Node = 10
Node = 1
Node = 12
Node = 2
Node = 8
Node = 16
Node = 0
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -709.6113437770742
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 12
Node = 2
Node = 8
Node = 16
Node = 1
Node = 9
Node = 7
Node = 0
Node = 11
Node = 10
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -718.4735233990839
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 10
Node = 12
Node = 2
Node = 8
Node = 16
Node = 1
Node = 9
Node = 7
Node = 0
Node = 11
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -730.3138962207225
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 12
Node = 14
Node = 13
Node = 2
Node = 8
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 4
Node = 5
Node = 3
Node = 0
Node = 11
Node = 10
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -739.9435449665837
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 13
Node = 11
Node = 10
Node = 1
Node = 2
Node = 8
Node = 16
Node = 0
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -751.2768656195091
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 13
Node = 10
Node = 2
Node = 8
Node = 16
Node = 1
Node = 9
Node = 7
Node = 0
Node = 11
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -760.9794180631575
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 13
Node = 10
Node = 2
Node = 8
Node = 16
Node = 1
Node = 9
Node = 7
Node = 0
Node = 11
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -770.9794180631575
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 13
Node = 10
Node = 2
Node = 8
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 4
Node = 5
Node = 3
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -779.3832822360567
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 1
Node = 14
Node = 11
Node = 12
Node = 0
Node = 13
Node = 10
Node = 2
Node = 8
Node = 16
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -785.8011186392331
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 11
Node = 1
Node = 13
Node = 10
Node = 12
Node = 4
Node = 0
Node = 2
Node = 8
Node = 16
Node = 9
Node = 7
Node = 6
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -793.8900302901515
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 3
Node = 13
Node = 10
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 4
Node = 5
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -801.5758487330187
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 12
Node = 4
Node = 14
Node = 13
Node = 10
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 5
Node = 3
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -807.219595684692
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 3
Node = 13
Node = 10
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 4
Node = 5
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -814.5758487330189
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 10
Node = 12
Node = 4
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 5
Node = 3
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -818.3134429451505
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 11
Node = 10
Node = 1
Node = 3
Node = 13
Node = 0
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -823.6313404137467
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 3
Node = 4
Node = 13
Node = 10
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 5
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -827.0523540520613
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 12
Node = 4
Node = 14
Node = 13
Node = 10
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 5
Node = 3
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -831.2195956846921
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 10
Node = 12
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 4
Node = 5
Node = 3
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -839.9858131113283
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 3
Node = 13
Node = 10
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 4
Node = 5
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -848.979712905918
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 4
Node = 14
Node = 13
Node = 10
Node = 12
Node = 8
Node = 2
Node = 16
Node = 9
Node = 7
Node = 1
Node = 6
Node = 5
Node = 3
Node = 0
Node = 11
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -853.7495741171921
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 3
Node = 13
Node = 10
Node = 1
Node = 8
Node = 2
Node = 16
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -859.8738168496532
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 10
Node = 12
Node = 1
Node = 8
Node = 2
Node = 16
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -861.2948809171945
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 12
Node = 3
Node = 4
Node = 14
Node = 13
Node = 1
Node = 8
Node = 2
Node = 16
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -863.4101165623141
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 13
Node = 1
Node = 8
Node = 2
Node = 16
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -867.3413688873765
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 4
Node = 13
Node = 3
Node = 1
Node = 8
Node = 2
Node = 16
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -867.8338812907161
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 4
Node = 13
Node = 3
Node = 1
Node = 8
Node = 2
Node = 16
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -869.1207179577759
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 12
Node = 1
Node = 8
Node = 2
Node = 16
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -870.6869467341731
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 13
Node = 12
Node = 4
Node = 1
Node = 8
Node = 2
Node = 16
Node = 3
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -871.5996127058644
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 13
Node = 1
Node = 8
Node = 2
Node = 16
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -872.3413688873765
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 13
Node = 1
Node = 8
Node = 2
Node = 16
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 5
Node = 3
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -872.7254157409654
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 14
Node = 12
Node = 4
Node = 13
Node = 3
Node = 1
Node = 8
Node = 2
Node = 16
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -873.8338812907161
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 16
Node = 14
Node = 12
Node = 4
Node = 13
Node = 3
Node = 1
Node = 8
Node = 2
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -874.7034238590126
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 16
Node = 14
Node = 13
Node = 12
Node = 1
Node = 8
Node = 2
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 6
Node = 4
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -875.2696526354098
getNodeById = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01)
getNodeById2 = Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 10 -> there, 3 -> any, 13 -> say-01)
Node = 15
Node = 16
Node = 14
Node = 13
Node = 12
Node = 1
Node = 8
Node = 2
Node = 10
Node = 0
Node = 11
Node = 9
Node = 7
Node = 4
Node = 6
Node = 5
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -875.9880645911776
Langrangian relaxation converged after 37 iterations. Delta = 0.0
Node.spans:
sheep List()
scarce List()
live-01 List()
say-01 List()
little List()
planet List()
big List()
once-upon-a-time List()
i List()
prince List()
like-02 List()
need-01 List()
more List()
clearUnalignedNodes():  removing unaligned node: Some(m) / more
OracleGraph nodes = List(sheep, scarce, live-01, say-01, little, planet, big, once-upon-a-time, i, prince, like-02, need-01)
OracleGraph triples: (b / big, compared-to, p / prince)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, s / say-01)
(l3 / live-01, ARG0, p / prince)
(l3 / live-01, location, p2 / planet)
(n / need-01, ARG0, p / prince)
(n / need-01, ARG1, s3 / sheep)
(p / prince, mod, l2 / little)
(p / prince, time, o / once-upon-a-time)
(p2 / planet, mod, b / big)
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, p / prince)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 6), List(3, 7), List(3, 13, 8), List(3, 13, 8, 9), List(3, 13, 8, 9, 11, 10), List(3, 13, 8, 9, 11), List(3, 13, 12), List(3, 13), List(3, 13, 16, 14), List(3, 13, 16, 15), List(3, 13, 16), List(3, 13, 16, 18, 17), List(3, 13, 16, 18), List(3, 13, 16, 18, 19), List(3, 13, 16, 18, 19, 21, 20), List(3, 13, 16, 18, 19, 21), List(3, 13, 16, 18, 26, 22), List(3, 13, 16, 18, 26, 23), List(3, 13, 16, 18, 26, 24), List(3, 13, 16, 18, 26, 25), List(3, 13, 16, 18, 26), List(3, 13, 16, 18, 26, 27), List(3, 13, 16, 18, 26, 27, 28), List(3, 13, 16, 18, 26, 29), List(3, 13, 16, 18, 26, 30), List(3, 13, 16, 18, 26, 32, 31), List(3, 13, 16, 18, 26, 32), List(3, 13, 16, 18, 26, 32, 33), List(3, 13, 16, 18, 26, 32, 33, 34), List(3, 13, 16, 18, 26, 32, 33, 34, 36, 35), List(3, 13, 16, 18, 26, 32, 33, 34, 36), List(3, 37), List(3, 38))
Oracle Span 26-27:  bigger => big
Oracle Span 0-1:  I => i
Oracle Span 3-4:  like => like-02
Oracle Span 15-16:  little => little
Oracle Span 18-19:  lived => live-01
Oracle Span 33-34:  need => need-01
Oracle Span 8-9:  Once => once-upon-a-time
Oracle Span 21-22:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 5-6:  say => say-01
Oracle Span 24-25:  scarcely => scarce
Oracle Span 36-37:  sheep => sheep

Extra span: and => and
Extra span: any => any
Extra span: that => that
Extra span: there => there
Extra span: time => time
Incorrect span: Once => once
Extra span: have => have-03
Extra span: should => recommend-01
Missing span: like => like-02
Missing span: bigger => big
Missing span: Once => once-upon-a-time
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	have	_	VB	VB	_	4	aux	_	_
4	like	_	VBP	VBP	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	say	_	VB	VB	_	4	xcomp	_	_
7	:	_	:	:	_	4	punct	_	_
8	"	_	''	''	_	4	punct	_	_
9	Once	_	RB	RB	_	14	advmod	_	_
10	upon	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	time	_	NN	NN	_	10	pobj	_	_
13	there	_	EX	EX	_	14	expl	_	_
14	was	_	VBD	VBD	_	4	ccomp	_	_
15	a	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	nsubj	_	_
18	who	_	WP	WP	_	19	nsubj	_	_
19	lived	_	VBD	VBD	_	17	rcmod	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	a	_	DT	DT	_	22	det	_	_
22	planet	_	NN	NN	_	20	pobj	_	_
23	that	_	WDT	WDT	_	27	nsubj	_	_
24	was	_	VBD	VBD	_	27	cop	_	_
25	scarcely	_	RB	RB	_	27	advmod	_	_
26	any	_	RB	RB	_	27	advmod	_	_
27	bigger	_	JJR	JJR	_	19	dep	_	_
28	than	_	IN	IN	_	27	prep	_	_
29	himself	_	PRP	PRP	_	28	pobj	_	_
30	,	_	,	,	_	27	punct	_	_
31	and	_	CC	CC	_	27	cc	_	_
32	who	_	WP	WP	_	33	nsubj	_	_
33	had	_	VBD	VBD	_	27	conj	_	_
34	need	_	NN	NN	_	33	dobj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	a	_	DT	DT	_	37	det	_	_
37	sheep	_	NN	NN	_	35	pobj	_	_
38	...	_	.	.	_	4	punct	_	_
39	"	_	''	''	_	4	punct	_	_

Oracle:
(b / big, compared-to, p / prince)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, s / say-01)
(l3 / live-01, ARG0, p / prince)
(l3 / live-01, location, p2 / planet)
(n / need-01, ARG0, p / prince)
(n / need-01, ARG1, s3 / sheep)
(p / prince, mod, l2 / little)
(p / prince, time, o / once-upon-a-time)
(p2 / planet, mod, b / big)
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, p / prince)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),sheep,sheep,false), Span(33,34,List(1),need,need-01,false), Span(30,31,List(2),and,and,false), Span(25,26,List(3),any,any,false), Span(24,25,List(4),scarcely,scarce,false), Span(22,23,List(5),that,that,false), Span(21,22,List(6),planet,planet,false), Span(18,19,List(7),lived,live-01,false), Span(16,17,List(8),prince,prince,false), Span(15,16,List(9),little,little,false), Span(12,13,List(10),there,there,false), Span(11,12,List(11),time,time,false), Span(8,9,List(12),Once,once,false), Span(5,6,List(13),say,say-01,false), Span(2,3,List(14),have,have-03,false), Span(1,2,List(15),should,recommend-01,false), Span(0,1,List(16),I,i,false)),Map(2 -> and, 5 -> that, 12 -> once, 15 -> recommend-01, 8 -> prince, 7 -> live-01, 1 -> need-01, 4 -> scarce, 11 -> time, 14 -> have-03, 6 -> planet, 0 -> sheep, 9 -> little, 16 -> i, 3 -> any, 10 -> there, 13 -> say-01),Map(n -> need-01, h -> have-03, s2 -> scarce, t -> that, p2 -> prince, s -> sheep, t3 -> time, p -> planet, a -> and, t2 -> there, l2 -> little, i -> i, r -> recommend-01, a2 -> any, s3 -> say-01, l -> live-01, o -> once))),[Ljava.lang.String;@355ce81c,Annotation([Ljava.lang.String;@29647f75,[Ljava.lang.String;@3315d2d7,[Ljava.lang.String;@d6e7bab),Annotation([Ljava.lang.String;@5fa07e12,[Ljava.lang.String;@55b53d44,[Ledu.cmu.lti.nlp.amr.Dependency;@482bce4f),Annotation([Ljava.lang.String;@366647c2,[Ljava.lang.String;@6a6afff2,[Ljava.lang.String;@1649b0e6),Annotation([Ljava.lang.String;@865dd6,[Ljava.lang.String;@4da4253,[Ledu.cmu.lti.nlp.amr.Entity;@3972a855))
AMR:
(a2 / any, degree, s2 / scarce)
(h / have-03, ARG0, o / once)
(l / live-01, ARG0, p2 / prince)
(l / live-01, ARG1, t / that)
(l / live-01, location, p / planet)
(l / live-01, time, s2 / scarce)
(n / need-01, ARG0, t3 / time)
(n / need-01, ARG1, s / sheep)
(n / need-01, ARG2, t2 / there)
(p2 / prince, mod, l2 / little)
(r / recommend-01, ARG1, h / have-03)
(r / recommend-01, ARG2, i / i)
(s3 / say-01, ARG0, i / i)
(s3 / say-01, ARG1, a / and)
(s3 / say-01, ARG2, p2 / prince)
(s3 / say-01, condition, n / need-01)

Decoded in 591,380 microseconds
Sentence: To those who understand life , that would have given a much greater air of truth to my story .


--- Decoder1 ---

Sentence: To those who understand life , that would have given a much greater air of truth to my story .
word = To
Finding date entities
Possible invoked concepts: List()
word = those
Finding date entities
Possible invoked concepts: List()
word = who
Finding date entities
Possible invoked concepts: List()
word = understand
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(understand),(thing :manner-of understand-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false)))
concept = PhraseConceptPair(List(understand),(thing :manner-of understand-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
score = 0
adding concept:PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
word = life
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false)))
concept = PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
score = 0
adding concept:PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = given
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = much
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = greater
Finding date entities
Possible invoked concepts: List()
word = air
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(air),air,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false)))
concept = PhraseConceptPair(List(air),air,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
score = 0
adding concept:PhraseConceptPair(List(air),air,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = truth
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(truth),truth,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(truth),truth,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(truth),truth,PhraseConceptFeatures(3.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = my
Finding date entities
Possible invoked concepts: List()
word = story
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, Some((0.022110941201849425,PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false)),3)), Some((0.017104114690078137,PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false)),4)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),6)), None, Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),8)), Some((0.029773585223834276,PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false)),9)), None, Some((0.02932403466221358,PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),11)), None, Some((0.02460749207537229,PhraseConceptPair(List(air),air,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false)),13)), None, Some((0.029773585223834276,PhraseConceptPair(List(truth),truth,PhraseConceptFeatures(3.0,0.0,false,false)),15)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false)),18)), None)
Adding concept: story
nodeIds = List(0)
concepts = List(story)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(story),story,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: truth
nodeIds = List(1)
concepts = List(truth)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(truth),truth,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: air
nodeIds = List(2)
concepts = List(air)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(air),air,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
feats:
bias 1.0
c|p -0.5108256237659907
len 1.0

score:
0.08415466252304084
Adding concept: much
nodeIds = List(3)
concepts = List(much)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.11347869718525441
Adding concept: give-01
nodeIds = List(4)
concepts = List(give-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(given),give-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1432522824090887
Adding concept: have-03
nodeIds = List(5)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.14341678675569333
Adding concept: that
nodeIds = List(6)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.16003459514490911
Adding concept: life
nodeIds = List(7)
concepts = List(life)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
feats:
bias 1.0
c|p -1.252762968495368
len 1.0

score:
0.17713870983498725
Adding concept: understand-01
nodeIds = List(8)
concepts = List(understand-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
feats:
bias 1.0
c|p -0.7576857016975165
len 1.0

score:
0.19924965103683667
Decoder1 Spans:
Span 1:  air => air
Span 2:  given => give-01
Span 3:  have => have-03
Span 4:  life => life
Span 5:  much => much
Span 6:  story => story
Span 7:  that => that
Span 8:  truth => truth
Span 9:  understand => understand-01
Decoder1 feats:
bias 9.0
c|p -6.7943345016605
len 9.0

Concepts:
id = 2 concept = air
id = 5 concept = have-03
id = 8 concept = understand-01
id = 7 concept = life
id = 1 concept = truth
id = 4 concept = give-01
id = 6 concept = that
id = 0 concept = story
id = 3 concept = much
Spans:
Span 13-14:  air => air
Span 9-10:  given => give-01
Span 8-9:  have => have-03
Span 4-5:  life => life
Span 11-12:  much => much
Span 18-19:  story => story
Span 6-7:  that => that
Span 15-16:  truth => truth
Span 3-4:  understand => understand-01

rootDependencyPaths = List(List(9, 0), List(9, 0, 1), List(9, 0, 1, 3, 2), List(9, 0, 1, 3), List(9, 0, 1, 3, 4), List(9, 5), List(9, 6), List(9, 7), List(9, 8), List(9), List(9, 13, 10), List(9, 13, 12, 11), List(9, 13, 12), List(9, 13), List(9, 13, 14), List(9, 13, 14, 15), List(9, 16), List(9, 16, 18, 17), List(9, 16, 18), List(9, 19))
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 2
Node = 5
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -272.05046788411204
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 3
Node = 2
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -276.6903207075265
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 3
Node = 2
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -280.6903207075265
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 3
Node = 2
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -284.6903207075265
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 3
Node = 2
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -288.6903207075265
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 3
Node = 2
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -292.6903207075265
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 3
Node = 2
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -296.6903207075265
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 3
Node = 2
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -300.6903207075265
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -304.5543610155048
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -306.5543610155048
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -308.5543610155048
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -310.5543610155048
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -312.55436101550487
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 0
Node = 1
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -314.14501908141096
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -315.55436101550487
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 1
Node = 7
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -316.6591168251931
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 0
Node = 1
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -318.14501908141096
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -319.55436101550487
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 1
Node = 7
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -320.6591168251931
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 0
Node = 1
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -322.14501908141096
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -323.55436101550487
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 1
Node = 7
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -324.6591168251931
getNodeById = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
getNodeById2 = Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much)
Node = 8
Node = 4
Node = 7
Node = 0
Node = 5
Node = 2
Node = 3
Node = 6
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -325.7002378321466
Langrangian relaxation converged after 23 iterations. Delta = 0.0
Node.spans:
life List()
much List()
i List()
truth List()
great List()
air List()
that List()
person List()
more List()
give-01 List()
understand-01 List()
story List()
clearUnalignedNodes():  removing unaligned node: Some(i) / i
clearUnalignedNodes():  removing unaligned node: Some(m) / more
OracleGraph nodes = List(life, much, truth, great, air, that, person, give-01, understand-01, story)
OracleGraph triples: (a / air, mod, g2 / great)
(g / give-01, ARG0, t / that)
(g / give-01, ARG1, t3 / truth)
(g / give-01, ARG2, s / story)
(g / give-01, beneficiary, p / person)
(t3 / truth, quant, a / air)
(u / understand-01, ARG0, p / person)
(u / understand-01, ARG1, l / life)
rootDependencyPaths = List(List(9, 0), List(9, 0, 1), List(9, 0, 1, 3, 2), List(9, 0, 1, 3), List(9, 0, 1, 3, 4), List(9, 5), List(9, 6), List(9, 7), List(9, 8), List(9), List(9, 13, 10), List(9, 13, 12, 11), List(9, 13, 12), List(9, 13), List(9, 13, 14), List(9, 13, 14, 15), List(9, 16), List(9, 16, 18, 17), List(9, 16, 18), List(9, 19))
Oracle Span 13-14:  air => air
Oracle Span 9-10:  given => give-01
Oracle Span 12-13:  greater => great
Oracle Span 4-5:  life => life
Oracle Span 11-12:  much => much
Oracle Span 18-19:  story => story
Oracle Span 6-7:  that => that
Oracle Span 15-16:  truth => truth
Oracle Span 3-4:  understand => (person :ARG0-of understand-01)

Extra span: have => have-03
Incorrect span: understand => understand-01
Missing span: understand => (person :ARG0-of understand-01)
Missing span: greater => great
Dependencies:
1	To	_	TO	TO	_	10	prep	_	_
2	those	_	DT	DT	_	1	pobj	_	_
3	who	_	WP	WP	_	4	nsubj	_	_
4	understand	_	VBP	VBP	_	2	rcmod	_	_
5	life	_	NN	NN	_	4	dobj	_	_
6	,	_	,	,	_	10	punct	_	_
7	that	_	DT	DT	_	10	nsubj	_	_
8	would	_	MD	MD	_	10	aux	_	_
9	have	_	VB	VB	_	10	aux	_	_
10	given	_	VBN	VBN	_	0	root	_	_
11	a	_	DT	DT	_	14	det	_	_
12	much	_	RB	RB	_	13	advmod	_	_
13	greater	_	JJR	JJR	_	14	amod	_	_
14	air	_	NN	NN	_	10	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	truth	_	NN	NN	_	15	pobj	_	_
17	to	_	TO	TO	_	10	prep	_	_
18	my	_	PRP$	PRP$	_	19	poss	_	_
19	story	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	10	punct	_	_

Oracle:
(a / air, mod, g2 / great)
(g / give-01, ARG0, t / that)
(g / give-01, ARG1, t3 / truth)
(g / give-01, ARG2, s / story)
(g / give-01, beneficiary, p / person)
(t3 / truth, quant, a / air)
(u / understand-01, ARG0, p / person)
(u / understand-01, ARG1, l / life)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),story,story,false), Span(15,16,List(1),truth,truth,false), Span(13,14,List(2),air,air,false), Span(11,12,List(3),much,much,false), Span(9,10,List(4),given,give-01,false), Span(8,9,List(5),have,have-03,false), Span(6,7,List(6),that,that,false), Span(4,5,List(7),life,life,false), Span(3,4,List(8),understand,understand-01,false)),Map(2 -> air, 5 -> have-03, 8 -> understand-01, 7 -> life, 1 -> truth, 4 -> give-01, 6 -> that, 0 -> story, 3 -> much),Map(h -> have-03, t -> truth, s -> story, m -> much, g -> give-01, a -> air, t2 -> that, u -> understand-01, l -> life))),[Ljava.lang.String;@62e7f11d,Annotation([Ljava.lang.String;@503d687a,[Ljava.lang.String;@6a370f4,[Ljava.lang.String;@2abf4075),Annotation([Ljava.lang.String;@770d3326,[Ljava.lang.String;@4cc8eb05,[Ledu.cmu.lti.nlp.amr.Dependency;@51f116b8),Annotation([Ljava.lang.String;@19d481b,[Ljava.lang.String;@1f97cf0d,[Ljava.lang.String;@140c9f39),Annotation([Ljava.lang.String;@4d910fd6,[Ljava.lang.String;@26275bef,[Ledu.cmu.lti.nlp.amr.Entity;@7690781))
AMR:
(a / air, domain, t / truth)
(g / give-01, ARG0, h / have-03)
(g / give-01, ARG1, s / story)
(g / give-01, ARG2, u / understand-01)
(h / have-03, ARG0, t2 / that)
(h / have-03, ARG1, m / much)
(h / have-03, ARG2, a / air)
(u / understand-01, ARG1, l / life)

Decoded in 132,245 microseconds
Sentence: For I do not want any one to read my book carelessly .


--- Decoder1 ---

Sentence: For I do not want any one to read my book carelessly .
word = For
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = do
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false)), PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)))
concept = PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false))
score = 0
concept = PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
score = 0
adding concept:PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
word = not
Finding date entities
Possible invoked concepts: List()
word = want
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false)))
concept = PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false))
word = any
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false)), PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)))
concept = PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false))
score = 0
concept = PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
score = 0
adding concept:PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = read
Finding date entities
Possible invoked concepts: List()
word = my
Finding date entities
Possible invoked concepts: List()
word = book
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false))
word = carelessly
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), Some((0.008412119642531832,PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)),2)), None, Some((0.029773585223834276,PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false)),4)), Some((0.017940394404303485,PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)),5)), Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),6)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false)),10)), None, None)
Adding concept: book
nodeIds = List(0)
concepts = List(book)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: 1
nodeIds = List(1)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.040431162070142634
Adding concept: any
nodeIds = List(2)
concepts = List(any)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
feats:
bias 1.0
c|p -1.1700712526502546
len 1.0

score:
0.05837155647444611
Adding concept: want-01
nodeIds = List(3)
concepts = List(want-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08814514169828039
Adding concept: do-02
nodeIds = List(4)
concepts = List(do-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
feats:
bias 1.0
c|p -2.1122313645028266
len 1.0

score:
0.09655726134081222
Adding concept: i
nodeIds = List(5)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.12260646775904148
Decoder1 Spans:
Span 1:  any => any
Span 2:  book => book
Span 3:  do => do-02
Span 4:  I => i
Span 5:  one => 1
Span 6:  want => want-01
Decoder1 feats:
bias 6.0
c|p -5.540770417593953
len 6.0

Concepts:
id = 2 concept = any
id = 5 concept = i
id = 1 concept = 1
id = 4 concept = do-02
id = 0 concept = book
id = 3 concept = want-01
Spans:
Span 5-6:  any => any
Span 10-11:  book => book
Span 2-3:  do => do-02
Span 1-2:  I => i
Span 6-7:  one => 1
Span 4-5:  want => want-01

rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 6, 8, 7), List(4, 6, 8), List(4, 6, 8, 10, 9), List(4, 6, 8, 10), List(4, 6, 8, 11), List(4, 12))
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -117.86645277726693
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -121.86645277726693
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -125.72944522775681
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -128.86645277726691
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -132.7294452277568
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -135.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -137.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -139.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -141.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -142.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -144.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -145.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -147.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -148.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -150.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -151.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -153.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -154.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -156.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -157.7563785173829
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -158.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -160.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -161.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -162.7563785173829
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -163.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -165.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -166.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -167.7563785173829
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -168.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -170.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -171.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -172.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -173.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -175.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -176.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -177.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -178.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -180.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -181.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -182.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -183.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -185.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -186.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -187.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -188.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -190.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -191.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -192.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -193.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -195.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -196.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -197.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -198.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -200.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -201.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -202.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -203.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -205.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -206.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -207.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -208.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -210.14128011322998
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -211.71575533755868
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 1
Node = 2
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -212.75637851738287
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 4
Node = 2
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -213.84802165425626
getNodeById = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
getNodeById2 = Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01)
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -215.09443733170858
Langrangian relaxation converged after 66 iterations. Delta = 0.0
Node.spans:
i List()
careless List()
- List()
book List()
read-01 List()
want-01 List()
cause-01 List()
anyone List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
clearUnalignedNodes():  removing unaligned node: Some(a) / anyone
OracleGraph nodes = List(i, careless, book, read-01, want-01)
OracleGraph triples: (b / book, poss, i / i)
(r / read-01, ARG1, b / book)
(r / read-01, manner, c2 / careless)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, r / read-01)
rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 6, 8, 7), List(4, 6, 8), List(4, 6, 8, 10, 9), List(4, 6, 8, 10), List(4, 6, 8, 11), List(4, 12))
Oracle Span 10-11:  book => book
Oracle Span 11-12:  carelessly => careless
Oracle Span 1-2:  I => i
Oracle Span 8-9:  read => read-01
Oracle Span 4-5:  want => want-01

Extra span: one => 1
Extra span: any => any
Extra span: do => do-02
Missing span: read => read-01
Missing span: carelessly => careless
Dependencies:
1	For	_	IN	IN	_	5	dep	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	do	_	VBP	VBP	_	5	aux	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	want	_	VB	VB	_	0	root	_	_
6	any	_	DT	DT	_	7	det	_	_
7	one	_	NN	NN	_	5	dobj	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	read	_	VB	VB	_	7	vmod	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	book	_	NN	NN	_	9	dobj	_	_
12	carelessly	_	RB	RB	_	9	advmod	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(b / book, poss, i / i)
(r / read-01, ARG1, b / book)
(r / read-01, manner, c2 / careless)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, r / read-01)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),book,book,false), Span(6,7,List(1),one,1,false), Span(5,6,List(2),any,any,false), Span(4,5,List(3),want,want-01,false), Span(2,3,List(4),do,do-02,false), Span(1,2,List(5),I,i,false)),Map(2 -> any, 5 -> i, 1 -> 1, 4 -> do-02, 0 -> book, 3 -> want-01),Map(w -> want-01, b -> book, d -> do-02, 1 -> 1, a -> any, i -> i))),[Ljava.lang.String;@77eca502,Annotation([Ljava.lang.String;@3246fb96,[Ljava.lang.String;@2e222612,[Ljava.lang.String;@61386958),Annotation([Ljava.lang.String;@73ee04c8,[Ljava.lang.String;@7671cb68,[Ledu.cmu.lti.nlp.amr.Dependency;@49dc7102),Annotation([Ljava.lang.String;@6b8ca3c8,[Ljava.lang.String;@68c72235,[Ljava.lang.String;@10959ece),Annotation([Ljava.lang.String;@3a6bb9bf,[Ljava.lang.String;@34f7cfd9,[Ledu.cmu.lti.nlp.amr.Entity;@65f095f8))
AMR:
(d / do-02, ARG0, b / book)
(d / do-02, ARG1, w / want-01)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, 1 / 1)
(w / want-01, ARG4, a / any)

Decoded in 167,690 microseconds
Sentence: I have suffered too much grief in setting down these memories .


--- Decoder1 ---

Sentence: I have suffered too much grief in setting down these memories .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = suffered
Finding date entities
Possible invoked concepts: List()
word = too
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)))
concept = PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
score = 0
adding concept:PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
word = much
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = grief
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grief),grieve-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(grief),grieve-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(grief),grieve-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = setting
Finding date entities
Possible invoked concepts: List()
word = down
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(down),down,PhraseConceptFeatures(11.0,-0.7375989431307791,false,false)))
concept = PhraseConceptPair(List(down),down,PhraseConceptFeatures(11.0,-0.7375989431307791,false,false))
score = 0
adding concept:PhraseConceptPair(List(down),down,PhraseConceptFeatures(11.0,-0.7375989431307791,false,false))
word = these
Finding date entities
Possible invoked concepts: List()
word = memories
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(memories),memory,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(memories),memory,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(memories),memory,PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),1)), None, Some((0.029024114818713923,PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)),3)), Some((0.02932403466221358,PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),4)), Some((0.029773585223834276,PhraseConceptPair(List(grief),grieve-01,PhraseConceptFeatures(1.0,0.0,false,false)),5)), None, None, Some((0.02231408305883264,PhraseConceptPair(List(down),down,PhraseConceptFeatures(11.0,-0.7375989431307791,false,false)),8)), None, Some((0.029773585223834276,PhraseConceptPair(List(memories),memory,PhraseConceptFeatures(1.0,0.0,false,false)),10)), None)
Adding concept: memory
nodeIds = List(0)
concepts = List(memory)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(memories),memory,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: down
nodeIds = List(1)
concepts = List(down)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(down),down,PhraseConceptFeatures(11.0,-0.7375989431307791,false,false))
feats:
bias 1.0
c|p -0.7375989431307791
len 1.0

score:
0.05208766828266692
Adding concept: grieve-01
nodeIds = List(2)
concepts = List(grieve-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grief),grieve-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0818612535065012
Adding concept: much
nodeIds = List(3)
concepts = List(much)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.11118528816871477
Adding concept: too
nodeIds = List(4)
concepts = List(too)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
feats:
bias 1.0
c|p -0.07410797215372185
len 1.0

score:
0.14020940298742868
Adding concept: have-03
nodeIds = List(5)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.14037390733403332
Adding concept: i
nodeIds = List(6)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.1664231137522626
Decoder1 Spans:
Span 1:  down => down
Span 2:  grief => grieve-01
Span 3:  have => have-03
Span 4:  I => i
Span 5:  memories => memory
Span 6:  much => much
Span 7:  too => too
Decoder1 feats:
bias 7.0
c|p -4.152186226222684
len 7.0

Concepts:
id = 2 concept = grieve-01
id = 5 concept = have-03
id = 1 concept = down
id = 4 concept = too
id = 6 concept = i
id = 0 concept = memory
id = 3 concept = much
Spans:
Span 8-9:  down => down
Span 5-6:  grief => grieve-01
Span 1-2:  have => have-03
Span 0-1:  I => i
Span 10-11:  memories => memory
Span 4-5:  much => much
Span 3-4:  too => too

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 5, 3), List(2, 5, 4), List(2, 5), List(2, 6), List(2, 6, 7), List(2, 6, 7, 8), List(2, 6, 7, 10, 9), List(2, 6, 7, 10), List(2, 11))
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 0
Node = 1
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -303.21873328523475
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 0
Node = 1
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -305.21873328523475
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 1
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -306.5631458000995
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 0
Node = 1
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -308.21873328523475
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 1
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -309.5631458000995
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 5
Node = 0
Node = 1
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -310.668675363588
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 1
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -313.5631458000995
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 5
Node = 0
Node = 1
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -314.668675363588
getNodeById = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
getNodeById2 = Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much)
Node = 2
Node = 4
Node = 3
Node = 1
Node = 6
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -317.3931214329955
Langrangian relaxation converged after 9 iterations. Delta = 0.0
Node.spans:
memory List()
grief List()
too List()
this List()
much List()
i List()
suffer-01 List()
set-09 List()
clearUnalignedNodes():  removing unaligned node: Some(t2) / this
OracleGraph nodes = List(memory, grief, too, much, i, suffer-01, set-09)
OracleGraph triples: (g / grief, quant, m / much)
(m / much, degree, t / too)
(s / suffer-01, ARG0, i / i)
(s / suffer-01, ARG1, g / grief)
(s / suffer-01, time, s2 / set-09)
(s2 / set-09, ARG0, i / i)
(s2 / set-09, ARG1, m2 / memory)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 5, 3), List(2, 5, 4), List(2, 5), List(2, 6), List(2, 6, 7), List(2, 6, 7, 8), List(2, 6, 7, 10, 9), List(2, 6, 7, 10), List(2, 11))
Oracle Span 5-6:  grief => grief
Oracle Span 0-1:  I => i
Oracle Span 10-11:  memories => memory
Oracle Span 4-5:  much => much
Oracle Span 7-8:  setting => set-09
Oracle Span 2-3:  suffered => suffer-01
Oracle Span 3-4:  too => too

Extra span: down => down
Incorrect span: grief => grieve-01
Extra span: have => have-03
Missing span: suffered => suffer-01
Missing span: setting => set-09
Missing span: grief => grief
Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	suffered	_	VBN	VBN	_	0	root	_	_
4	too	_	RB	RB	_	6	advmod	_	_
5	much	_	RB	RB	_	6	advmod	_	_
6	grief	_	JJ	JJ	_	3	acomp	_	_
7	in	_	IN	IN	_	3	prep	_	_
8	setting	_	VBG	VBG	_	7	pcomp	_	_
9	down	_	RP	RP	_	8	prt	_	_
10	these	_	DT	DT	_	11	det	_	_
11	memories	_	NNS	NNS	_	8	dobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(g / grief, quant, m / much)
(m / much, degree, t / too)
(s / suffer-01, ARG0, i / i)
(s / suffer-01, ARG1, g / grief)
(s / suffer-01, time, s2 / set-09)
(s2 / set-09, ARG0, i / i)
(s2 / set-09, ARG1, m2 / memory)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),memories,memory,false), Span(8,9,List(1),down,down,false), Span(5,6,List(2),grief,grieve-01,false), Span(4,5,List(3),much,much,false), Span(3,4,List(4),too,too,false), Span(1,2,List(5),have,have-03,false), Span(0,1,List(6),I,i,false)),Map(2 -> grieve-01, 5 -> have-03, 1 -> down, 4 -> too, 6 -> i, 0 -> memory, 3 -> much),Map(h -> have-03, t -> too, m2 -> much, d -> down, m -> memory, g -> grieve-01, i -> i))),[Ljava.lang.String;@59af0466,Annotation([Ljava.lang.String;@3e6ef8ad,[Ljava.lang.String;@346d61be,[Ljava.lang.String;@55536d9e),Annotation([Ljava.lang.String;@747edf66,[Ljava.lang.String;@3d1cfad4,[Ledu.cmu.lti.nlp.amr.Dependency;@62230c58),Annotation([Ljava.lang.String;@2cd2a21f,[Ljava.lang.String;@2e55dd0c,[Ljava.lang.String;@74455848),Annotation([Ljava.lang.String;@e7edb54,[Ljava.lang.String;@378542de,[Ledu.cmu.lti.nlp.amr.Entity;@3738449f))
AMR:
(d / down, op, m / memory)
(g / grieve-01, ARG0, i / i)
(g / grieve-01, ARG1, d / down)
(g / grieve-01, degree, m2 / much)
(g / grieve-01, mod, t / too)
(h / have-03, ARG1, i / i)

Decoded in 48,638 microseconds
Sentence: Six years have already passed since my friend went away from me , with his sheep .


--- Decoder1 ---

Sentence: Six years have already passed since my friend went away from me , with his sheep .
word = Six
Finding date entities
Possible invoked concepts: List()
word = years
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(years),(temporal-quantity :unit year),PhraseConceptFeatures(7.0,-0.8266785731844679,false,false)), PhraseConceptPair(List(years),year,PhraseConceptFeatures(1.0,-2.772588722239781,false,false)))
concept = PhraseConceptPair(List(years),(temporal-quantity :unit year),PhraseConceptFeatures(7.0,-0.8266785731844679,false,false))
score = 0
adding concept:PhraseConceptPair(List(years),(temporal-quantity :unit year),PhraseConceptFeatures(7.0,-0.8266785731844679,false,false))
concept = PhraseConceptPair(List(years),year,PhraseConceptFeatures(1.0,-2.772588722239781,false,false))
score = 0
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = already
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(already),already,PhraseConceptFeatures(8.0,0.0,false,false)))
concept = PhraseConceptPair(List(already),already,PhraseConceptFeatures(8.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(already),already,PhraseConceptFeatures(8.0,0.0,false,false))
word = passed
Finding date entities
Possible invoked concepts: List()
word = since
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false)))
concept = PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false))
score = 0
adding concept:PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false))
word = my
Finding date entities
Possible invoked concepts: List()
word = friend
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)), PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)))
concept = PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
concept = PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
word = went
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(went),go-01,PhraseConceptFeatures(2.0,-3.7376696182833684,false,false)), PhraseConceptPair(List(went),go-02,PhraseConceptFeatures(4.0,-3.044522437723423,false,false)), PhraseConceptPair(List(went),go-03,PhraseConceptFeatures(1.0,-4.430816798843313,false,false)), PhraseConceptPair(List(went),go-06,PhraseConceptFeatures(1.0,-4.430816798843313,false,false)), PhraseConceptPair(List(went),go-23,PhraseConceptFeatures(1.0,-4.430816798843313,false,false)), PhraseConceptPair(List(went),go-25,PhraseConceptFeatures(5.0,-2.8213788864092133,false,false)))
concept = PhraseConceptPair(List(went),go-01,PhraseConceptFeatures(2.0,-3.7376696182833684,false,false))
score = 0
concept = PhraseConceptPair(List(went),go-02,PhraseConceptFeatures(4.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(went),go-03,PhraseConceptFeatures(1.0,-4.430816798843313,false,false))
score = 0
concept = PhraseConceptPair(List(went),go-06,PhraseConceptFeatures(1.0,-4.430816798843313,false,false))
score = 0
concept = PhraseConceptPair(List(went),go-23,PhraseConceptFeatures(1.0,-4.430816798843313,false,false))
score = 0
concept = PhraseConceptPair(List(went),go-25,PhraseConceptFeatures(5.0,-2.8213788864092133,false,false))
score = 0
adding concept:PhraseConceptPair(List(went),go-25,PhraseConceptFeatures(5.0,-2.8213788864092133,false,false))
word = away
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false)))
concept = PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
score = 0
adding concept:PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = me
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = with
Finding date entities
Possible invoked concepts: List()
word = his
Finding date entities
Possible invoked concepts: List()
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.021413200947447593,PhraseConceptPair(List(years),(temporal-quantity :unit year),PhraseConceptFeatures(7.0,-0.8266785731844679,false,false)),1)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(already),already,PhraseConceptFeatures(8.0,0.0,false,false)),3)), None, Some((0.025673026403986283,PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false)),5)), None, Some((0.018010382382001432,PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)),7)), Some((0.0012403530283973015,PhraseConceptPair(List(went),go-25,PhraseConceptFeatures(5.0,-2.8213788864092133,false,false)),8)), Some((0.025935722275322065,PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false)),9)), None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),15)), None)
Adding concept: sheep
nodeIds = List(0)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: away
nodeIds = List(1)
concepts = List(away)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
feats:
bias 1.0
c|p -0.3794896217049037
len 1.0

score:
0.05570930749915634
Adding concept: go-25
nodeIds = List(2)
concepts = List(go-25)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(went),go-25,PhraseConceptFeatures(5.0,-2.8213788864092133,false,false))
feats:
bias 1.0
c|p -2.8213788864092133
len 1.0

score:
0.05694966052755365
Adding concept: friend
nodeIds = List(3)
concepts = List(friend)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
feats:
bias 1.0
c|p -1.1631508098056809
len 1.0

score:
0.07496004290955507
Adding concept: since
nodeIds = List(4)
concepts = List(since)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false))
feats:
bias 1.0
c|p -0.40546510810816444
len 1.0

score:
0.10063306931354135
Adding concept: already
nodeIds = List(5)
concepts = List(already)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(already),already,PhraseConceptFeatures(8.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13040665453737563
Adding concept: have-03
nodeIds = List(6)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.13057115888398027
Adding concept: (temporal-quantity :unit year)
nodeIds = List(7, 8)
concepts = List(temporal-quantity, year)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(years),(temporal-quantity :unit year),PhraseConceptFeatures(7.0,-0.8266785731844679,false,false))
feats:
bias 1.0
c|p -0.8266785731844679
len 1.0

score:
0.15198435983142786
Decoder1 Spans:
Span 1:  already => already
Span 2:  away => away
Span 3:  friend => friend
Span 4:  have => have-03
Span 5:  sheep => sheep
Span 6:  since => since
Span 7:  went => go-25
Span 8:  years => (temporal-quantity :unit year)
Decoder1 feats:
bias 8.0
c|p -8.523922289180215
len 8.0

Concepts:
id = 2 concept = go-25
id = 5 concept = already
id = 8 concept = year
id = 7 concept = temporal-quantity
id = 1 concept = away
id = 4 concept = since
id = 6 concept = have-03
id = 0 concept = sheep
id = 3 concept = friend
Spans:
Span 3-4:  already => already
Span 9-10:  away => away
Span 7-8:  friend => friend
Span 2-3:  have => have-03
Span 15-16:  sheep => sheep
Span 5-6:  since => since
Span 8-9:  went => go-25
Span 1-2:  years => (temporal-quantity :unit year)

rootDependencyPaths = List(List(4, 1, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 8, 5), List(4, 8, 7, 6), List(4, 8, 7), List(4, 8), List(4, 8, 9), List(4, 8, 10), List(4, 8, 10, 11), List(4, 8, 12), List(4, 8, 13), List(4, 8, 13, 15, 14), List(4, 8, 13, 15), List(4, 16))
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -325.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -327.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -328.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -330.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -331.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -333.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -334.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -336.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -337.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -339.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -340.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -342.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -343.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -345.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -346.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -348.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -349.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -351.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -352.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -354.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -355.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -357.716987626783
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -358.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -360.71698762678307
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -361.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -363.71698762678307
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -364.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -366.71698762678307
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -367.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -369.71698762678307
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -370.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -372.71698762678307
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -373.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -375.71698762678307
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -376.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -378.71698762678307
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -379.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -381.71698762678307
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -382.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -384.6908973875548
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -386.8130202825378
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -388.6908973875548
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -389.85073685736046
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -393.6908973875548
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -394.85073685736046
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -398.2331169817895
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -399.3929564515952
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -401.2708335566121
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 6
Node = 3
Node = 5
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -401.7912313944535
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -403.3291496375443
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -403.3929564515952
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -405.2708335566121
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 6
Node = 3
Node = 5
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -405.7912313944535
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -407.3291496375443
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -407.3929564515952
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -409.2708335566121
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 6
Node = 3
Node = 5
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -409.7912313944535
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -411.3291496375443
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -411.3929564515952
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -413.2708335566121
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 6
Node = 3
Node = 5
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -413.7912313944535
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -415.3291496375443
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -415.3929564515951
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -417.2708335566121
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 6
Node = 3
Node = 5
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -417.79123139445346
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -419.3291496375443
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -419.3929564515951
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -421.2708335566121
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 6
Node = 3
Node = 5
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -421.79123139445346
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -423.3291496375443
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 0
Node = 3
Node = 7
Node = 8
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -423.3929564515951
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 7
Node = 3
Node = 8
Node = 6
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -425.2708335566121
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 6
Node = 3
Node = 5
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -425.79123139445346
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 5
Node = 3
Node = 6
Node = 0
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -427.15910050131555
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 5
Node = 0
Node = 3
Node = 6
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -427.2229073153664
getNodeById = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
getNodeById2 = Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend)
Node = 2
Node = 4
Node = 1
Node = 5
Node = 3
Node = 6
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -428.64086340202067
Langrangian relaxation converged after 76 iterations. Delta = 0.0
Node.spans:
have-rel-role-91 List()
i List()
year List()
away List()
already List()
6 List()
person List()
before List()
temporal-quantity List()
go-02 List()
friend List()
sheep List()
now List()
clearUnalignedNodes():  removing unaligned node: Some(i) / i
clearUnalignedNodes():  removing unaligned node: Some(b) / before
clearUnalignedNodes():  removing unaligned node: Some(n) / now
WARNING: Adding a variable name to a span
OracleGraph nodes = List(have-rel-role-91, year, away, already, 6, person, temporal-quantity, go-02, friend, sheep)
OracleGraph triples: (g / go-02, ARG0, p / person)
(g / go-02, accompanier, s / sheep)
(g / go-02, direction, a / away)
(g / go-02, time, a3 / already)
(h / have-rel-role-91, ARG0, p / person)
(h / have-rel-role-91, ARG2, f / friend)
(s / sheep, poss, p / person)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, y / year)
rootDependencyPaths = List(List(4, 1, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 8, 5), List(4, 8, 7, 6), List(4, 8, 7), List(4, 8), List(4, 8, 9), List(4, 8, 10), List(4, 8, 10, 11), List(4, 8, 12), List(4, 8, 13), List(4, 8, 13, 15, 14), List(4, 8, 13, 15), List(4, 16))
Oracle Span 3-4:  already => already
Oracle Span 9-10:  away => away
Oracle Span 7-8:  friend => friend
Oracle Span 2-3:  have => (person :ARG0-of have-rel-role-91)
Oracle Span 15-16:  sheep => sheep
Oracle Span 0-1:  Six => 6
Oracle Span 8-9:  went => go-02
Oracle Span 1-2:  years => (temporal-quantity :unit year)

Incorrect span: went => go-25
Extra span: since => since
Incorrect span: have => have-03
Missing span: went => go-02
Missing span: Six => 6
Missing span: have => (person :ARG0-of have-rel-role-91)
Dependencies:
1	Six	_	CD	CD	_	2	num	_	_
2	years	_	NNS	NNS	_	5	nsubj	_	_
3	have	_	VBP	VBP	_	5	aux	_	_
4	already	_	RB	RB	_	5	advmod	_	_
5	passed	_	VBN	VBN	_	0	root	_	_
6	since	_	IN	IN	_	9	mark	_	_
7	my	_	PRP$	PRP$	_	8	poss	_	_
8	friend	_	NN	NN	_	9	nsubj	_	_
9	went	_	VBD	VBD	_	5	advcl	_	_
10	away	_	RB	RB	_	9	advmod	_	_
11	from	_	IN	IN	_	9	prep	_	_
12	me	_	PRP	PRP	_	11	pobj	_	_
13	,	_	,	,	_	9	punct	_	_
14	with	_	IN	IN	_	9	prep	_	_
15	his	_	PRP$	PRP$	_	16	poss	_	_
16	sheep	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	5	punct	_	_

Oracle:
(g / go-02, ARG0, p / person)
(g / go-02, accompanier, s / sheep)
(g / go-02, direction, a / away)
(g / go-02, time, a3 / already)
(h / have-rel-role-91, ARG0, p / person)
(h / have-rel-role-91, ARG2, f / friend)
(s / sheep, poss, p / person)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),sheep,sheep,false), Span(9,10,List(1),away,away,false), Span(8,9,List(2),went,go-25,false), Span(7,8,List(3),friend,friend,false), Span(5,6,List(4),since,since,false), Span(3,4,List(5),already,already,false), Span(2,3,List(6),have,have-03,false), Span(1,2,List(8, 7),years,(temporal-quantity :unit year),false)),Map(2 -> go-25, 5 -> already, 8 -> year, 7 -> temporal-quantity, 1 -> away, 4 -> since, 6 -> have-03, 0 -> sheep, 3 -> friend),Map(h -> have-03, t -> temporal-quantity, s2 -> since, s -> sheep, y -> year, g -> go-25, a -> away, a2 -> already, f -> friend))),[Ljava.lang.String;@69e1dd28,Annotation([Ljava.lang.String;@11bd0f3b,[Ljava.lang.String;@c333c60,[Ljava.lang.String;@79da8dc5),Annotation([Ljava.lang.String;@1eb5174b,[Ljava.lang.String;@67080771,[Ledu.cmu.lti.nlp.amr.Dependency;@72cde7cc),Annotation([Ljava.lang.String;@5fd4f8f5,[Ljava.lang.String;@696da30b,[Ljava.lang.String;@4e7912d8),Annotation([Ljava.lang.String;@53976f5c,[Ljava.lang.String;@2bfc268b,[Ledu.cmu.lti.nlp.amr.Entity;@2f8dad04))
AMR:
(a2 / already, compared-to, g / go-25)
(g / go-25, ARG2, f / friend)
(g / go-25, direction, a / away)
(h / have-03, ARG0, s / sheep)
(h / have-03, ARG1, t / temporal-quantity)
(h / have-03, mod, a2 / already)
(s2 / since, op, g / go-25)
(t / temporal-quantity, unit, y / year)

Decoded in 420,999 microseconds
Sentence: If I try to describe him here , it is to make sure that I shall not forget him .


--- Decoder1 ---

Sentence: If I try to describe him here , it is to make sure that I shall not forget him .
word = If
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)))
concept = PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
score = 0
adding concept:PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = try
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = describe
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(describe),describe-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(describe),describe-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(describe),describe-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = him
Finding date entities
Possible invoked concepts: List()
word = here
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(here),here,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false)))
concept = PhraseConceptPair(List(here),here,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false))
score = 0
adding concept:PhraseConceptPair(List(here),here,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = make
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false)), PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false)), PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)))
concept = PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
word = sure
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false)))
concept = PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false))
score = 0
adding concept:PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = shall
Finding date entities
Possible invoked concepts: List()
word = not
Finding date entities
Possible invoked concepts: List()
word = forget
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = him
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.0011206685260514437,PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)),0)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), Some((0.029773585223834276,PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false)),2)), None, Some((0.029773585223834276,PhraseConceptPair(List(describe),describe-01,PhraseConceptFeatures(1.0,0.0,false,false)),4)), None, Some((0.028423152550828532,PhraseConceptPair(List(here),here,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false)),6)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),8)), None, None, None, Some((0.027231986514513487,PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false)),12)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),13)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),14)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false)),17)), None, None)
Adding concept: forget-01
nodeIds = List(0)
concepts = List(forget-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: i
nodeIds = List(1)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.05582279164206354
Adding concept: that
nodeIds = List(2)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.07244060003127932
Adding concept: sure
nodeIds = List(3)
concepts = List(sure)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false))
feats:
bias 1.0
c|p -0.25131442828090605
len 1.0

score:
0.09967258654579281
Adding concept: it
nodeIds = List(4)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.1185917059696053
Adding concept: here
nodeIds = List(5)
concepts = List(here)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(here),here,PhraseConceptFeatures(14.0,-0.13353139262452263,false,false))
feats:
bias 1.0
c|p -0.13353139262452263
len 1.0

score:
0.14701485852043383
Adding concept: describe-01
nodeIds = List(6)
concepts = List(describe-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(describe),describe-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1767884437442681
Adding concept: try-01
nodeIds = List(7)
concepts = List(try-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.20656202896810238
Adding concept: i
nodeIds = List(8)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.23261123538633166
Adding concept: cause-01
nodeIds = List(9)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
feats:
bias 1.0
c|p -2.833213344056216
len 1.0

score:
0.2337319039123831
Decoder1 Spans:
Span 1:  describe => describe-01
Span 2:  forget => forget-01
Span 3:  here => here
Span 4:  I => i
Span 5:  I => i
Span 6:  If => cause-01
Span 7:  it => it
Span 8:  sure => sure
Span 9:  that => that
Span 10:  try => try-01
Decoder1 feats:
bias 10.0
c|p -6.3287393176075994
len 10.0

Concepts:
id = 2 concept = that
id = 5 concept = here
id = 8 concept = i
id = 7 concept = try-01
id = 1 concept = i
id = 4 concept = it
id = 6 concept = describe-01
id = 9 concept = cause-01
id = 0 concept = forget-01
id = 3 concept = sure
Spans:
Span 4-5:  describe => describe-01
Span 17-18:  forget => forget-01
Span 6-7:  here => here
Span 14-15:  I => i
Span 1-2:  I => i
Span 0-1:  If => cause-01
Span 8-9:  it => it
Span 12-13:  sure => sure
Span 13-14:  that => that
Span 2-3:  try => try-01

rootDependencyPaths = List(List(9, 2, 0), List(9, 2, 1), List(9, 2), List(9, 2, 4, 3), List(9, 2, 4), List(9, 2, 4, 5), List(9, 2, 4, 6), List(9, 7), List(9, 8), List(9), List(9, 11, 10), List(9, 11), List(9, 11, 12), List(9, 11, 17, 13), List(9, 11, 17, 14), List(9, 11, 17, 15), List(9, 11, 17, 16), List(9, 11, 17), List(9, 11, 17, 18), List(9, 19))
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 3
Node = 4
Node = 7
Node = 0
Node = 5
Node = 6
Node = 8
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -159.17243597328616
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 5
Node = 6
Node = 1
Node = 8
Node = 0
Node = 3
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -168.11435521149076
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 0
Node = 5
Node = 6
Node = 8
Node = 3
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -175.48685413332026
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 5
Node = 6
Node = 8
Node = 0
Node = 3
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -182.51301187762414
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 5
Node = 6
Node = 8
Node = 0
Node = 3
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -188.51301187762414
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 5
Node = 6
Node = 8
Node = 0
Node = 3
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -194.51301187762414
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 5
Node = 6
Node = 8
Node = 0
Node = 3
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -200.51301187762414
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 5
Node = 6
Node = 8
Node = 0
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -206.2338024230096
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 5
Node = 6
Node = 8
Node = 0
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -210.2338024230096
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 6
Node = 5
Node = 8
Node = 0
Node = 4
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -212.85067164722693
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 5
Node = 6
Node = 8
Node = 0
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -215.87767634966366
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 0
Node = 6
Node = 5
Node = 8
Node = 2
Node = 3
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -219.82451390292306
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 5
Node = 6
Node = 8
Node = 0
Node = 4
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -222.39025035374658
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 6
Node = 8
Node = 5
Node = 0
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -225.27017317168423
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 0
Node = 6
Node = 8
Node = 2
Node = 3
Node = 1
Node = 5
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -227.75658943146323
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 6
Node = 8
Node = 5
Node = 0
Node = 4
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -228.78274717576716
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 3
Node = 4
Node = 6
Node = 8
Node = 0
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -229.96538563784281
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 6
Node = 1
Node = 8
Node = 5
Node = 0
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -230.22764257889685
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 6
Node = 8
Node = 5
Node = 4
Node = 0
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -232.42662110242117
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 0
Node = 6
Node = 8
Node = 2
Node = 3
Node = 1
Node = 5
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -233.75658943146323
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 6
Node = 8
Node = 5
Node = 0
Node = 4
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -234.78274717576716
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 3
Node = 4
Node = 6
Node = 8
Node = 0
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -235.96538563784281
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 6
Node = 1
Node = 8
Node = 5
Node = 0
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -236.22764257889685
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 6
Node = 8
Node = 5
Node = 4
Node = 0
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -238.42662110242117
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 0
Node = 6
Node = 8
Node = 2
Node = 3
Node = 1
Node = 5
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -239.75658943146323
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 6
Node = 8
Node = 5
Node = 0
Node = 4
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -240.78274717576716
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 3
Node = 4
Node = 6
Node = 8
Node = 0
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -241.96538563784281
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 4
Node = 7
Node = 6
Node = 1
Node = 8
Node = 5
Node = 0
Node = 2
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -242.22764257889685
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 6
Node = 8
Node = 5
Node = 4
Node = 0
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -244.42662110242117
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 0
Node = 6
Node = 8
Node = 2
Node = 3
Node = 1
Node = 5
Node = 4
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -245.75658943146323
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 6
Node = 8
Node = 5
Node = 0
Node = 4
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -246.78274717576716
getNodeById = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure)
getNodeById2 = Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 0 -> forget-01, 9 -> cause-01, 3 -> sure)
Node = 9
Node = 7
Node = 4
Node = 6
Node = 8
Node = 0
Node = 5
Node = 2
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -247.38672246396135
Langrangian relaxation converged after 32 iterations. Delta = 0.0
Node.spans:
he List()
he List()
describe-01 List()
try-01 List()
i List()
- List()
forget-01 List()
here List()
ensure-01 List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: Some(h3) / he
clearUnalignedNodes():  removing unaligned node: Some(h) / he
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(e) / ensure-01
OracleGraph nodes = List(describe-01, try-01, i, forget-01, here)
OracleGraph triples: (d / describe-01, ARG0, i / i)
(d / describe-01, location, h2 / here)
(f / forget-01, ARG0, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, d / describe-01)
rootDependencyPaths = List(List(9, 2, 0), List(9, 2, 1), List(9, 2), List(9, 2, 4, 3), List(9, 2, 4), List(9, 2, 4, 5), List(9, 2, 4, 6), List(9, 7), List(9, 8), List(9), List(9, 11, 10), List(9, 11), List(9, 11, 12), List(9, 11, 17, 13), List(9, 11, 17, 14), List(9, 11, 17, 15), List(9, 11, 17, 16), List(9, 11, 17), List(9, 11, 17, 18), List(9, 19))
Oracle Span 4-5:  describe => describe-01
Oracle Span 17-18:  forget => forget-01
Oracle Span 6-7:  here => here
Oracle Span 1-2:  I => i
Oracle Span 2-3:  try => try-01

Extra span: I => i
Extra span: that => that
Extra span: sure => sure
Extra span: it => it
Extra span: If => cause-01
Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	try	_	VBP	VBP	_	10	advcl	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	describe	_	VB	VB	_	3	xcomp	_	_
6	him	_	PRP	PRP	_	5	dobj	_	_
7	here	_	RB	RB	_	5	advmod	_	_
8	,	_	,	,	_	10	punct	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	is	_	VBZ	VBZ	_	0	root	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	make	_	VB	VB	_	10	xcomp	_	_
13	sure	_	JJ	JJ	_	12	acomp	_	_
14	that	_	IN	IN	_	18	mark	_	_
15	I	_	PRP	PRP	_	18	nsubj	_	_
16	shall	_	MD	MD	_	18	aux	_	_
17	not	_	RB	RB	_	18	neg	_	_
18	forget	_	VB	VB	_	12	ccomp	_	_
19	him	_	PRP	PRP	_	18	dobj	_	_
20	.	_	.	.	_	10	punct	_	_

Oracle:
(d / describe-01, ARG0, i / i)
(d / describe-01, location, h2 / here)
(f / forget-01, ARG0, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, d / describe-01)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),forget,forget-01,false), Span(14,15,List(1),I,i,false), Span(13,14,List(2),that,that,false), Span(12,13,List(3),sure,sure,false), Span(8,9,List(4),it,it,false), Span(6,7,List(5),here,here,false), Span(4,5,List(6),describe,describe-01,false), Span(2,3,List(7),try,try-01,false), Span(1,2,List(8),I,i,false), Span(0,1,List(9),If,cause-01,false)),Map(2 -> that, 5 -> here, 8 -> i, 7 -> try-01, 1 -> i, 4 -> it, 6 -> describe-01, 9 -> cause-01, 0 -> forget-01, 3 -> sure),Map(h -> here, t -> that, s -> sure, d -> describe-01, i3 -> i, t2 -> try-01, i2 -> it, i -> i, c -> cause-01, f -> forget-01))),[Ljava.lang.String;@29e495ff,Annotation([Ljava.lang.String;@41e1e210,[Ljava.lang.String;@be35cd9,[Ljava.lang.String;@4944252c),Annotation([Ljava.lang.String;@44821a96,[Ljava.lang.String;@a3d8174,[Ledu.cmu.lti.nlp.amr.Dependency;@1ba9117e),Annotation([Ljava.lang.String;@732c2a62,[Ljava.lang.String;@272ed83b,[Ljava.lang.String;@41fecb8b),Annotation([Ljava.lang.String;@120f102b,[Ljava.lang.String;@625732,[Ledu.cmu.lti.nlp.amr.Entity;@51dcb805))
AMR:
(c / cause-01, ARG0, i2 / it)
(c / cause-01, ARG1, t2 / try-01)
(d / describe-01, ARG0, i3 / i)
(d / describe-01, location, h / here)
(d / describe-01, purpose, f / forget-01)
(f / forget-01, ARG0, i / i)
(f / forget-01, ARG1, s / sure)
(t / that, op, f / forget-01)
(t2 / try-01, ARG0, i3 / i)
(t2 / try-01, ARG1, d / describe-01)

Decoded in 210,062 microseconds
Sentence: To forget a friend is sad .


--- Decoder1 ---

Sentence: To forget a friend is sad .
word = To
Finding date entities
Possible invoked concepts: List()
word = forget
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = friend
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)), PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)))
concept = PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
concept = PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = sad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.029773585223834276,PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false)),1)), None, Some((0.018010382382001432,PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)),3)), None, Some((0.029773585223834276,PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false)),5)), None)
Adding concept: sad
nodeIds = List(0)
concepts = List(sad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: friend
nodeIds = List(1)
concepts = List(friend)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
feats:
bias 1.0
c|p -1.1631508098056809
len 1.0

score:
0.0477839676058357
Adding concept: forget-01
nodeIds = List(2)
concepts = List(forget-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07755755282966997
Decoder1 Spans:
Span 1:  forget => forget-01
Span 2:  friend => friend
Span 3:  sad => sad
Decoder1 feats:
bias 3.0
c|p -1.1631508098056809
len 3.0

Concepts:
id = 2 concept = forget-01
id = 1 concept = friend
id = 0 concept = sad
Spans:
Span 1-2:  forget => forget-01
Span 3-4:  friend => friend
Span 5-6:  sad => sad

rootDependencyPaths = List(List(5, 1, 0), List(5, 1), List(5, 1, 3, 2), List(5, 1, 3), List(5, 4), List(5), List(5, 6))
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -72.26592368071196
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -74.26592368071196
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -76.26592368071196
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -78.26592368071196
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -80.26592368071196
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -82.26592368071196
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -84.26592368071196
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -86.26592368071196
getNodeById = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
getNodeById2 = Map(2 -> forget-01, 1 -> friend, 0 -> sad)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -87.72634497419237
Langrangian relaxation converged after 9 iterations. Delta = 0.0
Node.spans:
person List()
have-rel-role-91 List()
forget-01 List()
sad List()
friend List()
clearUnalignedNodes():  removing unaligned node: Some(p) / person
OracleGraph nodes = List(have-rel-role-91, forget-01, sad, friend)
OracleGraph triples: (h / have-rel-role-91, ARG2, f / friend)
(s2 / sad, domain, f3 / forget-01)
rootDependencyPaths = List(List(5, 1, 0), List(5, 1), List(5, 1, 3, 2), List(5, 1, 3), List(5, 4), List(5), List(5, 6))
Oracle Span 1-2:  forget => forget-01
Oracle Span 3-4:  friend => (have-rel-role-91 :ARG2 friend)
Oracle Span 5-6:  sad => sad

Incorrect span: friend => friend
Missing span: friend => (have-rel-role-91 :ARG2 friend)
Dependencies:
1	To	_	TO	TO	_	2	aux	_	_
2	forget	_	VB	VB	_	6	csubj	_	_
3	a	_	DT	DT	_	4	det	_	_
4	friend	_	NN	NN	_	2	dobj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	sad	_	JJ	JJ	_	0	root	_	_
7	.	_	.	.	_	6	punct	_	_

Oracle:
(h / have-rel-role-91, ARG2, f / friend)
(s2 / sad, domain, f3 / forget-01)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),sad,sad,false), Span(3,4,List(1),friend,friend,false), Span(1,2,List(2),forget,forget-01,false)),Map(2 -> forget-01, 1 -> friend, 0 -> sad),Map(s -> sad, f2 -> forget-01, f -> friend))),[Ljava.lang.String;@66498326,Annotation([Ljava.lang.String;@cad498c,[Ljava.lang.String;@1e6454ec,[Ljava.lang.String;@2accdbb5),Annotation([Ljava.lang.String;@b62d79,[Ljava.lang.String;@6631f5ca,[Ledu.cmu.lti.nlp.amr.Dependency;@5ace1ed4),Annotation([Ljava.lang.String;@1613674b,[Ljava.lang.String;@27ff5d15,[Ljava.lang.String;@4e096385),Annotation([Ljava.lang.String;@649bec2e,[Ljava.lang.String;@693fe6c9,[Ledu.cmu.lti.nlp.amr.Entity;@34f5090e))
AMR:
(f2 / forget-01, ARG0, s / sad)
(f2 / forget-01, ARG1, f / friend)

Decoded in 20,049 microseconds
Sentence: Not every one has had a friend .


--- Decoder1 ---

Sentence: Not every one has had a friend .
word = Not
Finding date entities
Possible invoked concepts: List()
word = every
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(every),every,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)))
concept = PhraseConceptPair(List(every),every,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
score = 0
adding concept:PhraseConceptPair(List(every),every,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = has
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)))
concept = PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
score = 0
adding concept:PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
word = had
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false)), PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false)))
concept = PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = friend
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)), PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)))
concept = PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
concept = PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.013496981652143358,PhraseConceptPair(List(every),every,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)),1)), Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),2)), Some((0.014562515980757347,PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)),3)), None, None, Some((0.018010382382001432,PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)),6)), None)
Adding concept: friend
nodeIds = List(0)
concepts = List(friend)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
feats:
bias 1.0
c|p -1.1631508098056809
len 1.0

score:
0.018010382382001422
Adding concept: have-03
nodeIds = List(1)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
feats:
bias 1.0
c|p -1.5040773967762742
len 1.0

score:
0.032572898362758756
Adding concept: 1
nodeIds = List(2)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.043230475209067115
Adding concept: every
nodeIds = List(3)
concepts = List(every)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(every),every,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
feats:
bias 1.0
c|p -1.6094379124341003
len 1.0

score:
0.056727456861210473
Decoder1 Spans:
Span 1:  every => every
Span 2:  friend => friend
Span 3:  has => have-03
Span 4:  one => 1
Decoder1 feats:
bias 4.0
c|p -6.166865661057363
len 4.0

Concepts:
id = 2 concept = 1
id = 1 concept = have-03
id = 0 concept = friend
id = 3 concept = every
Spans:
Span 1-2:  every => every
Span 6-7:  friend => friend
Span 3-4:  has => have-03
Span 2-3:  one => 1

rootDependencyPaths = List(List(4, 0), List(4, 2, 1), List(4, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 7))
getNodeById = Map(2 -> 1, 1 -> have-03, 0 -> friend, 3 -> every)
getNodeById2 = Map(2 -> 1, 1 -> have-03, 0 -> friend, 3 -> every)
getNodeById = Map(2 -> 1, 1 -> have-03, 0 -> friend, 3 -> every)
getNodeById2 = Map(2 -> 1, 1 -> have-03, 0 -> friend, 3 -> every)
Node = 1
Node = 0
Node = 3
Node = 2
visited = Set(3, 0, 1, 2)
Alg2 returning score = -74.80544093655094
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
have-rel-role-91 List()
everyone List()
friend List()
- List()
have-03 List()
person List()
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(have-rel-role-91, everyone, friend, have-03, person)
OracleGraph triples: (h / have-03, ARG0, e / everyone)
(h / have-03, ARG1, p / person)
(h2 / have-rel-role-91, ARG0, p / person)
(h2 / have-rel-role-91, ARG1, e / everyone)
(h2 / have-rel-role-91, ARG2, f / friend)
rootDependencyPaths = List(List(4, 0), List(4, 2, 1), List(4, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 7))
Oracle Span 1-2:  every => everyone
Oracle Span 6-7:  friend => friend
Oracle Span 4-5:  had => (person :ARG0-of have-rel-role-91)
Oracle Span 3-4:  has => have-03

Extra span: one => 1
Incorrect span: every => every
Missing span: had => (person :ARG0-of have-rel-role-91)
Missing span: every => everyone
Dependencies:
1	Not	_	RB	RB	_	5	neg	_	_
2	every	_	DT	DT	_	3	det	_	_
3	one	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	had	_	VBN	VBN	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	friend	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(h / have-03, ARG0, e / everyone)
(h / have-03, ARG1, p / person)
(h2 / have-rel-role-91, ARG0, p / person)
(h2 / have-rel-role-91, ARG1, e / everyone)
(h2 / have-rel-role-91, ARG2, f / friend)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),friend,friend,false), Span(3,4,List(1),has,have-03,false), Span(2,3,List(2),one,1,false), Span(1,2,List(3),every,every,false)),Map(2 -> 1, 1 -> have-03, 0 -> friend, 3 -> every),Map(e -> every, h -> have-03, 1 -> 1, f -> friend))),[Ljava.lang.String;@31e5415e,Annotation([Ljava.lang.String;@a2431d0,[Ljava.lang.String;@1cbb87f3,[Ljava.lang.String;@1a4013),Annotation([Ljava.lang.String;@1b6e1eff,[Ljava.lang.String;@306f16f3,[Ledu.cmu.lti.nlp.amr.Dependency;@702b8b12),Annotation([Ljava.lang.String;@22e357dc,[Ljava.lang.String;@49912c99,[Ljava.lang.String;@10163d6),Annotation([Ljava.lang.String;@2dde1bff,[Ljava.lang.String;@15bbf42f,[Ledu.cmu.lti.nlp.amr.Entity;@550ee7e5))
AMR:
(h / have-03, ARG0, 1 / 1)
(h / have-03, ARG1, e / every)
(h / have-03, ARG2, f / friend)

Decoded in 19,677 microseconds
Sentence: And if I forget him , I may become like the grown - ups who are no longer interested in anything but figures ...


--- Decoder1 ---

Sentence: And if I forget him , I may become like the grown - ups who are no longer interested in anything but figures ...
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = if
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)))
concept = PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
score = 0
adding concept:PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = forget
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = him
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = may
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(may),(date-entity :month 5),PhraseConceptFeatures(0.0,0.0,false,true)), PhraseConceptPair(List(may),possible,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false)))
concept = PhraseConceptPair(List(may),(date-entity :month 5),PhraseConceptFeatures(0.0,0.0,false,true))
score = 0
adding concept:PhraseConceptPair(List(may),(date-entity :month 5),PhraseConceptFeatures(0.0,0.0,false,true))
concept = PhraseConceptPair(List(may),possible,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false))
score = 0
word = become
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(become),become-01,PhraseConceptFeatures(3.0,-0.2876820724517809,false,false)))
concept = PhraseConceptPair(List(become),become-01,PhraseConceptFeatures(3.0,-0.2876820724517809,false,false))
score = 0
adding concept:PhraseConceptPair(List(become),become-01,PhraseConceptFeatures(3.0,-0.2876820724517809,false,false))
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = grown
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
word = -
Finding date entities
Possible invoked concepts: List()
word = ups
Finding date entities
Possible invoked concepts: List()
word = who
Finding date entities
Possible invoked concepts: List()
word = are
Finding date entities
Possible invoked concepts: List()
word = no
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)), PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false)))
concept = PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
score = 0
adding concept:PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
concept = PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false))
score = 0
word = longer
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(longer),long,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(longer),long,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(longer),long,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
word = interested
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(interested),interest-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(interested),interest-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(interested),interest-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = anything
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false)))
concept = PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
score = 0
adding concept:PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
word = but
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false)))
concept = PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
score = 0
adding concept:PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
word = figures
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
word = ...
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), Some((0.003833681888436611,PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)),1)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false)),3)), None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),6)), Some((0.029773585223834276,PhraseConceptPair(List(may),(date-entity :month 5),PhraseConceptFeatures(0.0,0.0,false,true)),7)), Some((0.02686419244030133,PhraseConceptPair(List(become),become-01,PhraseConceptFeatures(3.0,-0.2876820724517809,false,false)),8)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)),11)), None, None, None, None, Some((0.012421585574902895,PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)),16)), Some((0.01866307480060534,PhraseConceptPair(List(longer),long,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)),17)), Some((0.029773585223834276,PhraseConceptPair(List(interested),interest-01,PhraseConceptFeatures(1.0,0.0,false,false)),18)), None, Some((0.028326374564312088,PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false)),20)), Some((0.025497139841755487,PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false)),21)), Some((0.029773585223834276,PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false)),22)), None)
Adding concept: figure
nodeIds = List(0)
concepts = List(figure)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(figures),figure,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: contrast-01
nodeIds = List(1)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
feats:
bias 1.0
c|p -0.4228568508200336
len 1.0

score:
0.05527072506558976
Adding concept: anything
nodeIds = List(2)
concepts = List(anything)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
feats:
bias 1.0
c|p -0.1431008436406733
len 1.0

score:
0.08359709962990185
Adding concept: interest-01
nodeIds = List(3)
concepts = List(interest-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(interested),interest-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11337068485373612
Adding concept: long
nodeIds = List(4)
concepts = List(long)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(longer),long,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.13203375965434144
Adding concept: -
nodeIds = List(5)
concepts = List(-)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
feats:
bias 1.0
c|p -1.7157735622501329
len 1.0

score:
0.14445534522924433
Adding concept: grown-up
nodeIds = List(6)
concepts = List(grown-up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1742289304530786
Adding concept: become-01
nodeIds = List(7)
concepts = List(become-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(become),become-01,PhraseConceptFeatures(3.0,-0.2876820724517809,false,false))
feats:
bias 1.0
c|p -0.2876820724517809
len 1.0

score:
0.20109312289337994
Adding concept: (date-entity :month 5)
nodeIds = List(8, 9)
concepts = List(date-entity, 5)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(may),(date-entity :month 5),PhraseConceptFeatures(0.0,0.0,false,true))
feats:
bias 1.0
len 1.0

score:
0.23086670811721421
Adding concept: i
nodeIds = List(10)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.2569159145354435
Adding concept: forget-01
nodeIds = List(11)
concepts = List(forget-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(forget),forget-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.28668949975927777
Adding concept: i
nodeIds = List(12)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.31273870617750704
Adding concept: cause-01
nodeIds = List(13)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
feats:
bias 1.0
c|p -2.5649493574615367
len 1.0

score:
0.3165723880659437
Adding concept: and
nodeIds = List(14)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.3454342551949121
Decoder1 Spans:
Span 1:  And => and
Span 2:  anything => anything
Span 3:  become => become-01
Span 4:  but => contrast-01
Span 5:  figures => figure
Span 6:  forget => forget-01
Span 7:  grown => grown-up
Span 8:  I => i
Span 9:  I => i
Span 10:  if => cause-01
Span 11:  interested => interest-01
Span 12:  longer => long
Span 13:  may => (date-entity :month 5)
Span 14:  no => -
Decoder1 feats:
bias 14.0
c|p -7.059662589085693
len 14.0

Concepts:
id = 2 concept = anything
id = 5 concept = -
id = 12 concept = i
id = 8 concept = date-entity
id = 7 concept = become-01
id = 1 concept = contrast-01
id = 4 concept = long
id = 11 concept = forget-01
id = 14 concept = and
id = 6 concept = grown-up
id = 0 concept = figure
id = 9 concept = 5
id = 3 concept = interest-01
id = 10 concept = i
id = 13 concept = cause-01
Spans:
Span 0-1:  And => and
Span 20-21:  anything => anything
Span 8-9:  become => become-01
Span 21-22:  but => contrast-01
Span 22-23:  figures => figure
Span 3-4:  forget => forget-01
Span 11-12:  grown => grown-up
Span 6-7:  I => i
Span 2-3:  I => i
Span 1-2:  if => cause-01
Span 18-19:  interested => interest-01
Span 17-18:  longer => long
Span 7-8:  may => (date-entity :month 5)
Span 16-17:  no => -

WARNING: Adding a variable name to a span
rootDependencyPaths = List(List(8, 0), List(8, 3, 1), List(8, 3, 2), List(8, 3), List(8, 3, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 9), List(8, 9, 11, 10), List(8, 9, 11), List(8, 9, 11, 12), List(8, 9, 11, 13), List(8, 9, 11, 13, 18, 14), List(8, 9, 11, 13, 18, 15), List(8, 9, 11, 13, 18, 17, 16), List(8, 9, 11, 13, 18, 17), List(8, 9, 11, 13, 18), List(8, 9, 11, 13, 18, 19), List(8, 9, 11, 13, 18, 19, 20), List(8, 9, 11, 13, 18, 21), List(8, 9, 11, 13, 18, 22), List(8, 23))
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
Node = 6
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -246.34566451775132
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
Node = 6
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -250.34566451775135
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
Node = 6
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -254.34566451775135
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 6
Node = 5
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -257.78874321044253
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
Node = 6
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -261.34566451775135
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 6
Node = 5
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -264.4719597244327
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
Node = 6
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -267.34566451775135
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 6
Node = 5
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -270.4719597244327
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
Node = 6
Node = 4
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -273.34566451775135
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 4
Node = 6
Node = 5
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -276.12734890649267
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -279.0010536998114
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -280.6842702138014
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -282.0010536998114
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -283.6842702138014
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -285.0010536998114
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -286.6842702138014
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -288.0010536998114
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -289.6842702138014
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -291.0010536998114
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -292.6842702138014
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -294.0010536998114
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 0
Node = 3
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -295.6842702138014
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -297.0010536998114
getNodeById = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01)
getNodeById2 = Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 10 -> i, 3 -> interest-01, 13 -> cause-01)
Node = 1
Node = 3
Node = 0
Node = 2
Node = 4
Node = 5
Node = 6
Node = 7
Node = 14
Node = 8
Node = 13
Node = 10
Node = 9
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -298.26658488287245
Langrangian relaxation converged after 24 iterations. Delta = 0.0
Node.spans:
resemble-01 List()
i List()
anything List()
except-01 List()
figure List()
interest-01 List()
forget-01 List()
possible List()
- List()
and List()
he List()
grown-up List()
clearUnalignedNodes():  removing unaligned node: Some(r) / resemble-01
clearUnalignedNodes():  removing unaligned node: Some(e) / except-01
clearUnalignedNodes():  removing unaligned node: Some(h) / he
WARNING: Adding a variable name to a span
OracleGraph nodes = List(i, anything, figure, interest-01, forget-01, possible, -, and, grown-up)
OracleGraph triples: (a / and, op, p / possible)
(f2 / forget-01, ARG0, i / i)
(i2 / interest-01, ARG1, g / grown-up)
(i2 / interest-01, ARG2, a2 / anything)
(i2 / interest-01, polarity, - / -)
(p / possible, condition, f2 / forget-01)
rootDependencyPaths = List(List(8, 0), List(8, 3, 1), List(8, 3, 2), List(8, 3), List(8, 3, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 9), List(8, 9, 11, 10), List(8, 9, 11), List(8, 9, 11, 12), List(8, 9, 11, 13), List(8, 9, 11, 13, 18, 14), List(8, 9, 11, 13, 18, 15), List(8, 9, 11, 13, 18, 17, 16), List(8, 9, 11, 13, 18, 17), List(8, 9, 11, 13, 18), List(8, 9, 11, 13, 18, 19), List(8, 9, 11, 13, 18, 19, 20), List(8, 9, 11, 13, 18, 21), List(8, 9, 11, 13, 18, 22), List(8, 23))
Oracle Span 0-1:  And => and
Oracle Span 20-21:  anything => anything
Oracle Span 22-23:  figures => figure
Oracle Span 3-4:  forget => forget-01
Oracle Span 11-12:  grown => grown-up
Oracle Span 2-3:  I => i
Oracle Span 18-19:  interested => interest-01
Oracle Span 7-8:  may => possible
Oracle Span 16-17:  no => -

Extra span: but => contrast-01
Extra span: longer => long
Extra span: become => become-01
Incorrect span: may => (date-entity :month 5)
Extra span: I => i
Extra span: if => cause-01
Missing span: may => possible
Dependencies:
1	And	_	CC	CC	_	9	cc	_	_
2	if	_	IN	IN	_	4	mark	_	_
3	I	_	PRP	PRP	_	4	nsubj	_	_
4	forget	_	VB	VB	_	9	advcl	_	_
5	him	_	PRP	PRP	_	4	dobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	I	_	PRP	PRP	_	9	nsubj	_	_
8	may	_	MD	MD	_	9	aux	_	_
9	become	_	VB	VB	_	0	root	_	_
10	like	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	grown	_	JJ	JJ	_	10	pobj	_	_
13	-	_	:	:	_	12	punct	_	_
14	ups	_	NNS	NNS	_	12	dep	_	_
15	who	_	WP	WP	_	19	nsubjpass	_	_
16	are	_	VBP	VBP	_	19	auxpass	_	_
17	no	_	RB	RB	_	18	advmod	_	_
18	longer	_	RBR	RBR	_	19	advmod	_	_
19	interested	_	VBN	VBN	_	14	rcmod	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	anything	_	NN	NN	_	20	pobj	_	_
22	but	_	CC	CC	_	19	cc	_	_
23	figures	_	VBZ	VBZ	_	19	conj	_	_
24	...	_	:	:	_	9	punct	_	_

Oracle:
(a / and, op, p / possible)
(f2 / forget-01, ARG0, i / i)
(i2 / interest-01, ARG1, g / grown-up)
(i2 / interest-01, ARG2, a2 / anything)
(i2 / interest-01, polarity, - / -)
(p / possible, condition, f2 / forget-01)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),figures,figure,false), Span(21,22,List(1),but,contrast-01,false), Span(20,21,List(2),anything,anything,false), Span(18,19,List(3),interested,interest-01,false), Span(17,18,List(4),longer,long,false), Span(16,17,List(5),no,-,false), Span(11,12,List(6),grown,grown-up,false), Span(8,9,List(7),become,become-01,false), Span(7,8,List(9, 8),may,(date-entity :month 5),false), Span(6,7,List(10),I,i,false), Span(3,4,List(11),forget,forget-01,false), Span(2,3,List(12),I,i,false), Span(1,2,List(13),if,cause-01,false), Span(0,1,List(14),And,and,false)),Map(2 -> anything, 5 -> -, 12 -> i, 8 -> date-entity, 7 -> become-01, 1 -> contrast-01, 4 -> long, 11 -> forget-01, 14 -> and, 6 -> grown-up, 0 -> figure, 9 -> 5, 3 -> interest-01, 10 -> i, 13 -> cause-01),Map(5 -> 5, b -> become-01, d -> date-entity, i3 -> i, g -> grown-up, a -> anything, i2 -> i, a2 -> and, i -> interest-01, - -> -, c -> contrast-01, l -> long, f2 -> forget-01, f -> figure, c2 -> cause-01))),[Ljava.lang.String;@48974e45,Annotation([Ljava.lang.String;@6a84a97d,[Ljava.lang.String;@6c130c45,[Ljava.lang.String;@50ad3bc1),Annotation([Ljava.lang.String;@223aa2f7,[Ljava.lang.String;@6d3a388c,[Ledu.cmu.lti.nlp.amr.Dependency;@193f604a),Annotation([Ljava.lang.String;@20f5239f,[Ljava.lang.String;@57af006c,[Ljava.lang.String;@6bedbc4d),Annotation([Ljava.lang.String;@932bc4a,[Ljava.lang.String;@d29f28,[Ledu.cmu.lti.nlp.amr.Entity;@2fd1433e))
AMR:
(a2 / and, op, b / become-01)
(b / become-01, ARG0, i2 / i)
(b / become-01, ARG1, g / grown-up)
(c / contrast-01, ARG1, a / anything)
(c / contrast-01, ARG2, f / figure)
(c / contrast-01, op, i / interest-01)
(c2 / cause-01, ARG0, b / become-01)
(c2 / cause-01, ARG1, f2 / forget-01)
(d / date-entity, domain, b / become-01)
(d / date-entity, month, 5 / 5)
(f2 / forget-01, ARG0, i3 / i)
(i / interest-01, ARG0, g / grown-up)
(i / interest-01, ARG1, - / -)
(i / interest-01, time, l / long)

Decoded in 354,394 microseconds
Sentence: It is for that purpose , again , that I have bought a box of paints and some pencils .


--- Decoder1 ---

Sentence: It is for that purpose , again , that I have bought a box of paints and some pencils .
word = It
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)))
concept = PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
score = 0
adding concept:PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = for
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = purpose
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = again
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false)))
concept = PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = bought
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = box
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(box),box,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(box),box,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(box),box,PhraseConceptFeatures(1.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = paints
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = some
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)), PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false)))
concept = PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
score = 0
adding concept:PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
concept = PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false))
score = 0
word = pencils
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.023495028556213052,PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)),0)), None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),3)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false)),6)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),8)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),9)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),10)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(box),box,PhraseConceptFeatures(1.0,0.0,false,false)),13)), None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),16)), Some((0.019706599931381283,PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)),17)), None, None)
Adding concept: some
nodeIds = List(0)
concepts = List(some)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
feats:
bias 1.0
c|p -0.995428052432879
len 1.0

score:
0.019706599931381283
Adding concept: and
nodeIds = List(1)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.03866454175378982
Adding concept: box
nodeIds = List(2)
concepts = List(box)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(box),box,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0684381269776241
Adding concept: have-03
nodeIds = List(3)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.06860263132422874
Adding concept: i
nodeIds = List(4)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.094651837742458
Adding concept: that
nodeIds = List(5)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.11126964613167378
Adding concept: again
nodeIds = List(6)
concepts = List(again)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.14104323135550806
Adding concept: that
nodeIds = List(7)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.15766103974472384
Adding concept: it
nodeIds = List(8)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
feats:
bias 1.0
c|p -0.6208265189803193
len 1.0

score:
0.1811560683009369
Decoder1 Spans:
Span 1:  again => again
Span 2:  and => and
Span 3:  box => box
Span 4:  have => have-03
Span 5:  I => i
Span 6:  It => it
Span 7:  some => some
Span 8:  that => that
Span 9:  that => that
Decoder1 feats:
bias 9.0
c|p -8.583436134483213
len 9.0

Concepts:
id = 2 concept = box
id = 5 concept = that
id = 8 concept = it
id = 7 concept = that
id = 1 concept = and
id = 4 concept = i
id = 6 concept = again
id = 0 concept = some
id = 3 concept = have-03
Spans:
Span 6-7:  again => again
Span 16-17:  and => and
Span 13-14:  box => box
Span 10-11:  have => have-03
Span 9-10:  I => i
Span 0-1:  It => it
Span 17-18:  some => some
Span 8-9:  that => that
Span 3-4:  that => that

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 4, 3), List(1, 2, 4), List(1, 5), List(1, 6), List(1, 7), List(1, 11, 8), List(1, 11, 9), List(1, 11, 10), List(1, 11), List(1, 11, 13, 12), List(1, 11, 13), List(1, 11, 13, 14), List(1, 11, 13, 14, 15), List(1, 11, 13, 14, 15, 16), List(1, 11, 13, 14, 15, 18, 17), List(1, 11, 13, 14, 15, 18), List(1, 19))
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 2
Node = 6
Node = 0
Node = 7
Node = 5
Node = 4
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -445.76403364358845
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 2
Node = 5
Node = 4
Node = 6
Node = 0
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -469.71048968692446
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 2
Node = 5
Node = 4
Node = 6
Node = 0
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -487.71048968692446
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 2
Node = 0
Node = 7
Node = 5
Node = 4
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -504.0397945918861
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 5
Node = 6
Node = 2
Node = 4
Node = 0
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -516.648238313942
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 5
Node = 6
Node = 2
Node = 0
Node = 7
Node = 4
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -526.2333972324262
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 5
Node = 6
Node = 2
Node = 4
Node = 0
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -535.648238313942
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 5
Node = 6
Node = 2
Node = 0
Node = 7
Node = 4
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -545.2333972324262
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 5
Node = 6
Node = 2
Node = 4
Node = 0
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -554.648238313942
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 5
Node = 6
Node = 2
Node = 0
Node = 7
Node = 4
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -564.2333972324262
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 5
Node = 6
Node = 2
Node = 4
Node = 0
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -573.648238313942
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 0
Node = 7
Node = 5
Node = 6
Node = 2
Node = 4
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -580.8806340953221
getNodeById = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
getNodeById2 = Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03)
Node = 1
Node = 3
Node = 0
Node = 7
Node = 5
Node = 6
Node = 2
Node = 4
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -582.3650592082448
Langrangian relaxation converged after 13 iterations. Delta = 0.0
Node.spans:
some List()
pencil List()
and List()
box List()
paint List()
i List()
buy-01 List()
that List()
OracleGraph nodes = List(some, pencil, and, box, paint, i, buy-01, that)
OracleGraph triples: (a / and, op, p / paint)
(a / and, op, p2 / pencil)
(b / buy-01, ARG0, i / i)
(b / buy-01, ARG1, a / and)
(b / buy-01, purpose, t2 / that)
(p / paint, location, b2 / box)
(p2 / pencil, quant, s / some)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 4, 3), List(1, 2, 4), List(1, 5), List(1, 6), List(1, 7), List(1, 11, 8), List(1, 11, 9), List(1, 11, 10), List(1, 11), List(1, 11, 13, 12), List(1, 11, 13), List(1, 11, 13, 14), List(1, 11, 13, 14, 15), List(1, 11, 13, 14, 15, 16), List(1, 11, 13, 14, 15, 18, 17), List(1, 11, 13, 14, 15, 18), List(1, 19))
Oracle Span 16-17:  and => and
Oracle Span 11-12:  bought => buy-01
Oracle Span 13-14:  box => box
Oracle Span 9-10:  I => i
Oracle Span 15-16:  paints => paint
Oracle Span 18-19:  pencils => pencil
Oracle Span 17-18:  some => some
Oracle Span 3-4:  that => that

Extra span: have => have-03
Extra span: that => that
Extra span: again => again
Extra span: It => it
Missing span: bought => buy-01
Missing span: pencils => pencil
Missing span: paints => paint
Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	for	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	5	det	_	_
5	purpose	_	NN	NN	_	3	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	again	_	RB	RB	_	2	advmod	_	_
8	,	_	,	,	_	2	punct	_	_
9	that	_	IN	IN	_	12	mark	_	_
10	I	_	PRP	PRP	_	12	nsubj	_	_
11	have	_	VBP	VBP	_	12	aux	_	_
12	bought	_	VBN	VBN	_	2	ccomp	_	_
13	a	_	DT	DT	_	14	det	_	_
14	box	_	NN	NN	_	12	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	paints	_	NNS	NNS	_	15	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	some	_	DT	DT	_	19	det	_	_
19	pencils	_	NNS	NNS	_	16	conj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, p / paint)
(a / and, op, p2 / pencil)
(b / buy-01, ARG0, i / i)
(b / buy-01, ARG1, a / and)
(b / buy-01, purpose, t2 / that)
(p / paint, location, b2 / box)
(p2 / pencil, quant, s / some)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),some,some,false), Span(16,17,List(1),and,and,false), Span(13,14,List(2),box,box,false), Span(10,11,List(3),have,have-03,false), Span(9,10,List(4),I,i,false), Span(8,9,List(5),that,that,false), Span(6,7,List(6),again,again,false), Span(3,4,List(7),that,that,false), Span(0,1,List(8),It,it,false)),Map(2 -> box, 5 -> that, 8 -> it, 7 -> that, 1 -> and, 4 -> i, 6 -> again, 0 -> some, 3 -> have-03),Map(h -> have-03, t -> that, b -> box, s -> some, a -> and, i2 -> it, t2 -> that, a2 -> again, i -> i))),[Ljava.lang.String;@29d89d5d,Annotation([Ljava.lang.String;@3514a4c0,[Ljava.lang.String;@212b5695,[Ljava.lang.String;@446293d),Annotation([Ljava.lang.String;@69997e9d,[Ljava.lang.String;@793be5ca,[Ledu.cmu.lti.nlp.amr.Dependency;@2df9b86),Annotation([Ljava.lang.String;@37654521,[Ljava.lang.String;@15aab8c6,[Ljava.lang.String;@33990a0c),Annotation([Ljava.lang.String;@4de4b452,[Ljava.lang.String;@50b5ac82,[Ledu.cmu.lti.nlp.amr.Entity;@101952da))
AMR:
(h / have-03, ARG0, i2 / it)
(h / have-03, ARG1, i / i)
(h / have-03, ARG2, b / box)
(h / have-03, manner, a / and)
(h / have-03, manner, a2 / again)
(h / have-03, time, s / some)
(h / have-03, time, t2 / that)
(t / that, op, h / have-03)

Decoded in 98,041 microseconds
Sentence: It is hard to take up drawing again at my age , when I have never made any pictures except those of the boa constrictor from the outside and the boa constrictor from the inside , since I was six .


--- Decoder1 ---

Sentence: It is hard to take up drawing again at my age , when I have never made any pictures except those of the boa constrictor from the outside and the boa constrictor from the inside , since I was six .
word = It
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)))
concept = PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
score = 0
adding concept:PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = hard
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = take
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(take),take-01,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(take),take-03,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false)), PhraseConceptPair(List(take),take-10,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)))
concept = PhraseConceptPair(List(take),take-01,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(take),take-03,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false))
score = 0
adding concept:PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false))
concept = PhraseConceptPair(List(take),take-10,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
word = up
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false)))
concept = PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
score = 0
adding concept:PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
word = drawing
Finding date entities
Possible invoked concepts: List()
word = again
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false)))
concept = PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = my
Finding date entities
Possible invoked concepts: List()
word = age
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = when
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = never
Finding date entities
Possible invoked concepts: List()
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = any
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false)), PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)))
concept = PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false))
score = 0
concept = PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
score = 0
adding concept:PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
word = pictures
Finding date entities
Possible invoked concepts: List()
word = except
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(except),except-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(except),except-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(except),except-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = those
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = boa
Finding date entities
Possible invoked concepts: List()
word = constrictor
Finding date entities
Possible invoked concepts: List()
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = outside
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(outside),outside,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(outside),outside,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(outside),outside,PhraseConceptFeatures(1.0,0.0,false,false))
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = boa
Finding date entities
Possible invoked concepts: List()
word = constrictor
Finding date entities
Possible invoked concepts: List()
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = inside
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(inside),inside,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(inside),inside,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(inside),inside,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = since
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false)))
concept = PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false))
score = 0
adding concept:PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = six
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(six),6,PhraseConceptFeatures(4.0,-0.5596157879354228,false,false)))
concept = PhraseConceptPair(List(six),6,PhraseConceptFeatures(4.0,-0.5596157879354228,false,false))
score = 0
adding concept:PhraseConceptPair(List(six),6,PhraseConceptFeatures(4.0,-0.5596157879354228,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.023495028556213052,PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)),0)), None, None, None, Some((0.001733778810310515,PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false)),4)), Some((0.019093489647122215,PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false)),5)), None, Some((0.029773585223834276,PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false)),7)), None, None, None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),13)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),14)), None, Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),16)), Some((0.017940394404303485,PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)),17)), None, Some((0.022763633620453336,PhraseConceptPair(List(except),except-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),19)), None, None, None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(outside),outside,PhraseConceptFeatures(1.0,0.0,false,false)),27)), Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),28)), None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(inside),inside,PhraseConceptFeatures(1.0,0.0,false,false)),34)), None, Some((0.025673026403986283,PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false)),36)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),37)), None, Some((0.02411406629345908,PhraseConceptPair(List(six),6,PhraseConceptFeatures(4.0,-0.5596157879354228,false,false)),39)), None)
Adding concept: 6
nodeIds = List(0)
concepts = List(6)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(six),6,PhraseConceptFeatures(4.0,-0.5596157879354228,false,false))
feats:
bias 1.0
c|p -0.5596157879354228
len 1.0

score:
0.02411406629345908
Adding concept: i
nodeIds = List(1)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.05016327271168834
Adding concept: since
nodeIds = List(2)
concepts = List(since)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(since),since,PhraseConceptFeatures(4.0,-0.40546510810816444,false,false))
feats:
bias 1.0
c|p -0.40546510810816444
len 1.0

score:
0.07583629911567462
Adding concept: inside
nodeIds = List(3)
concepts = List(inside)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(inside),inside,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1056098843395089
Adding concept: and
nodeIds = List(4)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.12456782616191743
Adding concept: outside
nodeIds = List(5)
concepts = List(outside)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(outside),outside,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1543414113857517
Adding concept: except-01
nodeIds = List(6)
concepts = List(except-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(except),except-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.17710504500620503
Adding concept: any
nodeIds = List(7)
concepts = List(any)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
feats:
bias 1.0
c|p -1.1700712526502546
len 1.0

score:
0.1950454394105085
Adding concept: make-01
nodeIds = List(8)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.20712897745424977
Adding concept: have-03
nodeIds = List(9)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.2072934818008544
Adding concept: i
nodeIds = List(10)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.23334268821908366
Adding concept: again
nodeIds = List(11)
concepts = List(again)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(again),again,PhraseConceptFeatures(32.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.26311627344291794
Adding concept: up
nodeIds = List(12)
concepts = List(up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
feats:
bias 1.0
c|p -1.0560526742493137
len 1.0

score:
0.28220976309004014
Adding concept: take-05
nodeIds = List(13)
concepts = List(take-05)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false))
feats:
bias 1.0
c|p -2.772588722239781
len 1.0

score:
0.28394354190035065
Adding concept: it
nodeIds = List(14)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
feats:
bias 1.0
c|p -0.6208265189803193
len 1.0

score:
0.3074385704565637
Decoder1 Spans:
Span 1:  again => again
Span 2:  and => and
Span 3:  any => any
Span 4:  except => except-01
Span 5:  have => have-03
Span 6:  I => i
Span 7:  I => i
Span 8:  inside => inside
Span 9:  It => it
Span 10:  made => make-01
Span 11:  outside => outside
Span 12:  since => since
Span 13:  six => 6
Span 14:  take => take-05
Span 15:  up => up
Decoder1 feats:
bias 15.0
c|p -13.760718610676028
len 15.0

Concepts:
id = 2 concept = since
id = 5 concept = outside
id = 12 concept = up
id = 8 concept = make-01
id = 7 concept = any
id = 1 concept = i
id = 4 concept = and
id = 11 concept = again
id = 14 concept = it
id = 6 concept = except-01
id = 0 concept = 6
id = 9 concept = have-03
id = 3 concept = inside
id = 10 concept = i
id = 13 concept = take-05
Spans:
Span 7-8:  again => again
Span 28-29:  and => and
Span 17-18:  any => any
Span 19-20:  except => except-01
Span 14-15:  have => have-03
Span 37-38:  I => i
Span 13-14:  I => i
Span 34-35:  inside => inside
Span 0-1:  It => it
Span 16-17:  made => make-01
Span 27-28:  outside => outside
Span 36-37:  since => since
Span 39-40:  six => 6
Span 4-5:  take => take-05
Span 5-6:  up => up

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 4, 5), List(2, 4, 6), List(2, 4, 6, 7), List(2, 4, 6, 8), List(2, 4, 6, 8, 10, 9), List(2, 4, 6, 8, 10), List(2, 4, 6, 8, 10, 11), List(2, 4, 6, 8, 10, 16, 12), List(2, 4, 6, 8, 10, 16, 13), List(2, 4, 6, 8, 10, 16, 14), List(2, 4, 6, 8, 10, 16, 15), List(2, 4, 6, 8, 10, 16), List(2, 4, 6, 8, 10, 16, 18, 17), List(2, 4, 6, 8, 10, 16, 18), List(2, 4, 6, 8, 10, 16, 18, 19), List(2, 4, 6, 8, 10, 16, 18, 19, 20), List(2, 4, 6, 8, 10, 16, 18, 19, 20, 21), List(2, 4, 6, 8, 10, 16, 18, 19, 20, 21, 24, 22), List(2, 4, 6, 8, 10, 16, 18, 19, 20, 21, 24, 23), List(2, 4, 6, 8, 10, 16, 18, 19, 20, 21, 24), List(2, 4, 6, 8, 10, 16, 25), List(2, 4, 6, 8, 10, 16, 25, 27, 26), List(2, 4, 6, 8, 10, 16, 25, 27), List(2, 4, 6, 8, 10, 16, 25, 27, 28), List(2, 4, 6, 8, 10, 16, 25, 27, 31, 29), List(2, 4, 6, 8, 10, 16, 25, 27, 31, 30), List(2, 4, 6, 8, 10, 16, 25, 27, 31), List(2, 4, 6, 8, 10, 16, 32), List(2, 4, 6, 8, 10, 16, 32, 34, 33), List(2, 4, 6, 8, 10, 16, 32, 34), List(2, 35), List(2, 39, 36), List(2, 39, 37), List(2, 39, 38), List(2, 39), List(2, 40))
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 0
Node = 9
Node = 10
Node = 7
Node = 12
Node = 11
Node = 1
Node = 14
Node = 3
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -583.3311923519739
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 0
Node = 1
Node = 10
Node = 7
Node = 13
Node = 9
Node = 12
Node = 11
Node = 14
Node = 3
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -596.6751115605982
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 0
Node = 9
Node = 10
Node = 7
Node = 12
Node = 11
Node = 1
Node = 14
Node = 3
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -609.0652893609142
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 0
Node = 1
Node = 10
Node = 7
Node = 13
Node = 9
Node = 12
Node = 11
Node = 14
Node = 3
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -618.1219528827172
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 12
Node = 11
Node = 14
Node = 9
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -626.0984090329702
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 0
Node = 9
Node = 10
Node = 7
Node = 12
Node = 11
Node = 1
Node = 14
Node = 2
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -634.1527529245028
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 0
Node = 1
Node = 10
Node = 7
Node = 3
Node = 13
Node = 9
Node = 12
Node = 11
Node = 14
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -642.4983115660172
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 12
Node = 11
Node = 14
Node = 9
Node = 0
Node = 2
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -646.4747677162701
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 12
Node = 11
Node = 1
Node = 14
Node = 9
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -649.5201793288887
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 0
Node = 9
Node = 10
Node = 3
Node = 7
Node = 2
Node = 1
Node = 13
Node = 11
Node = 12
Node = 14
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -656.1649801849238
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 1
Node = 10
Node = 0
Node = 7
Node = 11
Node = 12
Node = 14
Node = 3
Node = 9
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -661.8902863224781
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 14
Node = 9
Node = 0
Node = 2
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -666.0044663143508
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 3
Node = 7
Node = 11
Node = 12
Node = 14
Node = 9
Node = 1
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -666.700488976544
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 9
Node = 0
Node = 10
Node = 7
Node = 11
Node = 12
Node = 1
Node = 14
Node = 2
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -671.6840909554735
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 0
Node = 3
Node = 7
Node = 11
Node = 12
Node = 14
Node = 9
Node = 1
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -676.7646546415174
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 0
Node = 10
Node = 7
Node = 11
Node = 12
Node = 1
Node = 14
Node = 9
Node = 3
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -679.4198498207967
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 14
Node = 9
Node = 0
Node = 2
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -682.0044663143508
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 0
Node = 10
Node = 3
Node = 7
Node = 11
Node = 12
Node = 2
Node = 14
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -682.5488945045742
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 1
Node = 14
Node = 9
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -685.7609828072581
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 9
Node = 0
Node = 1
Node = 10
Node = 7
Node = 11
Node = 12
Node = 2
Node = 14
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -690.9404067531017
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 0
Node = 3
Node = 7
Node = 11
Node = 12
Node = 14
Node = 9
Node = 1
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -697.7646546415174
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 1
Node = 14
Node = 9
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -700.456666346238
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 0
Node = 10
Node = 3
Node = 7
Node = 11
Node = 12
Node = 2
Node = 14
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -702.5488945045742
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 1
Node = 14
Node = 9
Node = 3
Node = 0
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -705.7609828072581
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 9
Node = 0
Node = 1
Node = 10
Node = 7
Node = 11
Node = 12
Node = 14
Node = 2
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -710.74922880572
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 14
Node = 9
Node = 0
Node = 2
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -715.0044663143508
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 0
Node = 6
Node = 13
Node = 10
Node = 3
Node = 7
Node = 11
Node = 12
Node = 2
Node = 14
Node = 9
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -715.4261989087695
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 0
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 1
Node = 14
Node = 9
Node = 3
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -718.333038464661
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 0
Node = 6
Node = 13
Node = 10
Node = 3
Node = 7
Node = 11
Node = 12
Node = 14
Node = 9
Node = 1
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -721.2725446339468
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 0
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 1
Node = 14
Node = 9
Node = 3
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -722.333038464661
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 0
Node = 6
Node = 13
Node = 1
Node = 10
Node = 7
Node = 11
Node = 12
Node = 14
Node = 3
Node = 9
Node = 2
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -724.6870714346188
getNodeById = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05)
getNodeById2 = Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 10 -> i, 3 -> inside, 13 -> take-05)
Node = 4
Node = 5
Node = 8
Node = 0
Node = 6
Node = 13
Node = 10
Node = 7
Node = 11
Node = 12
Node = 14
Node = 9
Node = 2
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -726.1697335524851
Langrangian relaxation converged after 32 iterations. Delta = 0.0
Node.spans:
6 List()
temporal-quantity List()
i List()
inside List()
age-01 List()
boa List()
temporal-quantity List()
time List()
except-01 List()
picture List()
outside List()
cause-01 List()
again List()
from List()
picture List()
- List()
ever List()
picture List()
and List()
any List()
take-13 List()
from List()
draw-01 List()
constrictor List()
hard List()
boa List()
constrictor List()
since List()
year List()
make-01 List()
clearUnalignedNodes():  removing unaligned node: Some(t3) / temporal-quantity
clearUnalignedNodes():  removing unaligned node: Some(t4) / temporal-quantity
clearUnalignedNodes():  removing unaligned node: Some(t2) / time
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
clearUnalignedNodes():  removing unaligned node: Some(p3) / picture
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(e) / ever
clearUnalignedNodes():  removing unaligned node: Some(p2) / picture
clearUnalignedNodes():  removing unaligned node: Some(y) / year
WARNING: Adding a variable name to a span
OracleGraph nodes = List(6, i, inside, age-01, boa, except-01, picture, outside, again, from, and, any, take-13, from, draw-01, constrictor, hard, boa, constrictor, since, make-01)
OracleGraph triples: (b / boa, direction, f / from)
(b / boa, mod, c2 / constrictor)
(b2 / boa, direction, f2 / from)
(b2 / boa, mod, c3 / constrictor)
(e2 / except-01, ARG1, a6 / and)
(e2 / except-01, ARG2, p / picture)
(f / from, op, o / outside)
(f2 / from, op, i2 / inside)
(h / hard, domain, t / take-13)
(m / make-01, ARG1, p / picture)
(m / make-01, duration, s / since)
(p / picture, mod, a5 / any)
(t / take-13, ARG0, i / i)
(t / take-13, ARG1, d / draw-01)
(t / take-13, mod, a / again)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 4, 5), List(2, 4, 6), List(2, 4, 6, 7), List(2, 4, 6, 8), List(2, 4, 6, 8, 10, 9), List(2, 4, 6, 8, 10), List(2, 4, 6, 8, 10, 11), List(2, 4, 6, 8, 10, 16, 12), List(2, 4, 6, 8, 10, 16, 13), List(2, 4, 6, 8, 10, 16, 14), List(2, 4, 6, 8, 10, 16, 15), List(2, 4, 6, 8, 10, 16), List(2, 4, 6, 8, 10, 16, 18, 17), List(2, 4, 6, 8, 10, 16, 18), List(2, 4, 6, 8, 10, 16, 18, 19), List(2, 4, 6, 8, 10, 16, 18, 19, 20), List(2, 4, 6, 8, 10, 16, 18, 19, 20, 21), List(2, 4, 6, 8, 10, 16, 18, 19, 20, 21, 24, 22), List(2, 4, 6, 8, 10, 16, 18, 19, 20, 21, 24, 23), List(2, 4, 6, 8, 10, 16, 18, 19, 20, 21, 24), List(2, 4, 6, 8, 10, 16, 25), List(2, 4, 6, 8, 10, 16, 25, 27, 26), List(2, 4, 6, 8, 10, 16, 25, 27), List(2, 4, 6, 8, 10, 16, 25, 27, 28), List(2, 4, 6, 8, 10, 16, 25, 27, 31, 29), List(2, 4, 6, 8, 10, 16, 25, 27, 31, 30), List(2, 4, 6, 8, 10, 16, 25, 27, 31), List(2, 4, 6, 8, 10, 16, 32), List(2, 4, 6, 8, 10, 16, 32, 34, 33), List(2, 4, 6, 8, 10, 16, 32, 34), List(2, 35), List(2, 39, 36), List(2, 39, 37), List(2, 39, 38), List(2, 39), List(2, 40))
Oracle Span 7-8:  again => again
Oracle Span 10-11:  age => age-01
Oracle Span 28-29:  and => and
Oracle Span 17-18:  any => any
Oracle Span 23-24:  boa => boa
Oracle Span 30-31:  boa => boa
Oracle Span 24-25:  constrictor => constrictor
Oracle Span 31-32:  constrictor => constrictor
Oracle Span 6-7:  drawing => draw-01
Oracle Span 19-20:  except => except-01
Oracle Span 25-26:  from => from
Oracle Span 32-33:  from => from
Oracle Span 2-3:  hard => hard
Oracle Span 13-14:  I => i
Oracle Span 34-35:  inside => inside
Oracle Span 16-17:  made => make-01
Oracle Span 27-28:  outside => outside
Oracle Span 18-19:  pictures => picture
Oracle Span 36-37:  since => since
Oracle Span 39-40:  six => 6
Oracle Span 4-5:  take => take-13

Extra span: I => i
Extra span: have => have-03
Extra span: up => up
Incorrect span: take => take-05
Extra span: It => it
Missing span: hard => hard
Missing span: take => take-13
Missing span: drawing => draw-01
Missing span: age => age-01
Missing span: pictures => picture
Missing span: boa => boa
Missing span: from => from
Missing span: constrictor => constrictor
Missing span: boa => boa
Missing span: from => from
Missing span: constrictor => constrictor
Dependencies:
1	It	_	PRP	PRP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	cop	_	_
3	hard	_	JJ	JJ	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	take	_	VB	VB	_	3	xcomp	_	_
6	up	_	RP	RP	_	5	prt	_	_
7	drawing	_	VBG	VBG	_	5	xcomp	_	_
8	again	_	RB	RB	_	7	advmod	_	_
9	at	_	IN	IN	_	7	prep	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	age	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	when	_	WRB	WRB	_	17	advmod	_	_
14	I	_	PRP	PRP	_	17	nsubj	_	_
15	have	_	VBP	VBP	_	17	aux	_	_
16	never	_	RB	RB	_	17	neg	_	_
17	made	_	VBN	VBN	_	11	rcmod	_	_
18	any	_	DT	DT	_	19	det	_	_
19	pictures	_	NNS	NNS	_	17	dobj	_	_
20	except	_	IN	IN	_	19	prep	_	_
21	those	_	DT	DT	_	20	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	25	det	_	_
24	boa	_	NN	NN	_	25	nn	_	_
25	constrictor	_	NN	NN	_	22	pobj	_	_
26	from	_	IN	IN	_	17	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	outside	_	NN	NN	_	26	pobj	_	_
29	and	_	CC	CC	_	28	cc	_	_
30	the	_	DT	DT	_	32	det	_	_
31	boa	_	NN	NN	_	32	nn	_	_
32	constrictor	_	NN	NN	_	28	conj	_	_
33	from	_	IN	IN	_	17	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	inside	_	NN	NN	_	33	pobj	_	_
36	,	_	,	,	_	3	punct	_	_
37	since	_	IN	IN	_	40	mark	_	_
38	I	_	PRP	PRP	_	40	nsubj	_	_
39	was	_	VBD	VBD	_	40	cop	_	_
40	six	_	CD	CD	_	3	advcl	_	_
41	.	_	.	.	_	3	punct	_	_

Oracle:
(b / boa, direction, f / from)
(b / boa, mod, c2 / constrictor)
(b2 / boa, direction, f2 / from)
(b2 / boa, mod, c3 / constrictor)
(e2 / except-01, ARG1, a6 / and)
(e2 / except-01, ARG2, p / picture)
(f / from, op, o / outside)
(f2 / from, op, i2 / inside)
(h / hard, domain, t / take-13)
(m / make-01, ARG1, p / picture)
(m / make-01, duration, s / since)
(p / picture, mod, a5 / any)
(t / take-13, ARG0, i / i)
(t / take-13, ARG1, d / draw-01)
(t / take-13, mod, a / again)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),six,6,false), Span(37,38,List(1),I,i,false), Span(36,37,List(2),since,since,false), Span(34,35,List(3),inside,inside,false), Span(28,29,List(4),and,and,false), Span(27,28,List(5),outside,outside,false), Span(19,20,List(6),except,except-01,false), Span(17,18,List(7),any,any,false), Span(16,17,List(8),made,make-01,false), Span(14,15,List(9),have,have-03,false), Span(13,14,List(10),I,i,false), Span(7,8,List(11),again,again,false), Span(5,6,List(12),up,up,false), Span(4,5,List(13),take,take-05,false), Span(0,1,List(14),It,it,false)),Map(2 -> since, 5 -> outside, 12 -> up, 8 -> make-01, 7 -> any, 1 -> i, 4 -> and, 11 -> again, 14 -> it, 6 -> except-01, 0 -> 6, 9 -> have-03, 3 -> inside, 10 -> i, 13 -> take-05),Map(e -> except-01, i4 -> it, h -> have-03, t -> take-05, a3 -> again, s -> since, m -> make-01, i3 -> i, a -> and, i2 -> inside, i -> i, a2 -> any, 6 -> 6, u -> up, o -> outside))),[Ljava.lang.String;@6babf3bf,Annotation([Ljava.lang.String;@3059cbc,[Ljava.lang.String;@7ea9e1e2,[Ljava.lang.String;@24fcf36f),Annotation([Ljava.lang.String;@10feca44,[Ljava.lang.String;@3fb1549b,[Ledu.cmu.lti.nlp.amr.Dependency;@ea6147e),Annotation([Ljava.lang.String;@4d02f94e,[Ljava.lang.String;@2b48a640,[Ljava.lang.String;@1e683a3e),Annotation([Ljava.lang.String;@2053d869,[Ljava.lang.String;@7a419da4,[Ledu.cmu.lti.nlp.amr.Entity;@14555e0a))
AMR:
(a / and, op, o / outside)
(e / except-01, ARG0, a2 / any)
(e / except-01, ARG1, m / make-01)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, i3 / i)
(h / have-03, ARG2, s / since)
(i2 / inside, poss, i / i)
(m / make-01, ARG0, i3 / i)
(m / make-01, ARG1, a / and)
(m / make-01, ARG2, 6 / 6)
(t / take-05, ARG0, i4 / it)
(t / take-05, ARG1, m / make-01)
(t / take-05, direction, u / up)
(t / take-05, mod, a3 / again)

Decoded in 477,478 microseconds
Sentence: I shall certainly try to make my portraits as true to life as possible .


--- Decoder1 ---

Sentence: I shall certainly try to make my portraits as true to life as possible .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = shall
Finding date entities
Possible invoked concepts: List()
word = certainly
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false))
word = try
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = make
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false)), PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false)), PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)))
concept = PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
word = my
Finding date entities
Possible invoked concepts: List()
word = portraits
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = true
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false)))
concept = PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
score = 0
adding concept:PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = life
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false)))
concept = PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
score = 0
adding concept:PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
word = as
Finding date entities
Possible invoked concepts: List()
word = possible
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), None, Some((0.029773585223834276,PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false)),3)), None, None, None, None, None, Some((0.028214625113307072,PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false)),9)), None, Some((0.017104114690078137,PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false)),11)), None, Some((0.029773585223834276,PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false)),13)), None)
Adding concept: possible
nodeIds = List(0)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: life
nodeIds = List(1)
concepts = List(life)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
feats:
bias 1.0
c|p -1.252762968495368
len 1.0

score:
0.04687769991391241
Adding concept: true
nodeIds = List(2)
concepts = List(true)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
feats:
bias 1.0
c|p -0.15415067982725836
len 1.0

score:
0.07509232502721949
Adding concept: try-01
nodeIds = List(3)
concepts = List(try-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(try),try-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10486591025105377
Adding concept: certain
nodeIds = List(4)
concepts = List(certain)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(certainly),certain,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13463949547488804
Adding concept: i
nodeIds = List(5)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.1606887018931173
Decoder1 Spans:
Span 1:  certainly => certain
Span 2:  I => i
Span 3:  life => life
Span 4:  possible => possible
Span 5:  true => true
Span 6:  try => try-01
Decoder1 feats:
bias 6.0
c|p -1.7751819067221903
len 6.0

Concepts:
id = 2 concept = true
id = 5 concept = i
id = 1 concept = life
id = 4 concept = certain
id = 0 concept = possible
id = 3 concept = try-01
Spans:
Span 2-3:  certainly => certain
Span 0-1:  I => i
Span 11-12:  life => life
Span 13-14:  possible => possible
Span 9-10:  true => true
Span 3-4:  try => try-01

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 5, 9, 7, 6), List(3, 5, 9, 7), List(3, 5, 9, 8), List(3, 5, 9), List(3, 5, 9, 10), List(3, 5, 9, 10, 11), List(3, 5, 9, 10, 11, 13, 12), List(3, 5, 9, 10, 11, 13), List(3, 14))
getNodeById = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
getNodeById2 = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
getNodeById = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
getNodeById2 = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
Node = 0
Node = 1
Node = 3
Node = 4
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -174.986870928352
getNodeById = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
getNodeById2 = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
Node = 0
Node = 1
Node = 3
Node = 4
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -176.986870928352
getNodeById = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
getNodeById2 = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
Node = 0
Node = 1
Node = 3
Node = 4
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -178.418465048347
getNodeById = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
getNodeById2 = Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -179.89956693582934
Langrangian relaxation converged after 4 iterations. Delta = 0.0
Node.spans:
life List()
make-02 List()
portrait List()
possible List()
true-41 List()
i List()
most List()
try-01 List()
certain List()
clearUnalignedNodes():  removing unaligned node: Some(m2) / most
OracleGraph nodes = List(life, make-02, portrait, possible, true-41, i, try-01, certain)
OracleGraph triples: (m / make-02, ARG0, i / i)
(m / make-02, ARG1, t2 / true-41)
(p / portrait, topic, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, m / make-02)
(t / try-01, mod, c / certain)
(t2 / true-41, ARG1, p / portrait)
(t2 / true-41, ARG2, l / life)
(t2 / true-41, compared-to, p2 / possible)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 5, 9, 7, 6), List(3, 5, 9, 7), List(3, 5, 9, 8), List(3, 5, 9), List(3, 5, 9, 10), List(3, 5, 9, 10, 11), List(3, 5, 9, 10, 11, 13, 12), List(3, 5, 9, 10, 11, 13), List(3, 14))
Oracle Span 2-3:  certainly => certain
Oracle Span 0-1:  I => i
Oracle Span 11-12:  life => life
Oracle Span 5-6:  make => make-02
Oracle Span 7-8:  portraits => portrait
Oracle Span 13-14:  possible => possible
Oracle Span 9-10:  true => true-41
Oracle Span 3-4:  try => try-01

Incorrect span: true => true
Missing span: make => make-02
Missing span: true => true-41
Missing span: portraits => portrait
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	shall	_	MD	MD	_	4	aux	_	_
3	certainly	_	RB	RB	_	4	advmod	_	_
4	try	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	my	_	PRP$	PRP$	_	8	poss	_	_
8	portraits	_	NNS	NNS	_	10	nsubj	_	_
9	as	_	RB	RB	_	10	advmod	_	_
10	true	_	JJ	JJ	_	6	xcomp	_	_
11	to	_	TO	TO	_	10	prep	_	_
12	life	_	NN	NN	_	11	pobj	_	_
13	as	_	RB	RB	_	14	advmod	_	_
14	possible	_	JJ	JJ	_	12	amod	_	_
15	.	_	.	.	_	4	punct	_	_

Oracle:
(m / make-02, ARG0, i / i)
(m / make-02, ARG1, t2 / true-41)
(p / portrait, topic, i / i)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, m / make-02)
(t / try-01, mod, c / certain)
(t2 / true-41, ARG1, p / portrait)
(t2 / true-41, ARG2, l / life)
(t2 / true-41, compared-to, p2 / possible)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),possible,possible,false), Span(11,12,List(1),life,life,false), Span(9,10,List(2),true,true,false), Span(3,4,List(3),try,try-01,false), Span(2,3,List(4),certainly,certain,false), Span(0,1,List(5),I,i,false)),Map(2 -> true, 5 -> i, 1 -> life, 4 -> certain, 0 -> possible, 3 -> try-01),Map(t -> true, p -> possible, t2 -> try-01, i -> i, c -> certain, l -> life))),[Ljava.lang.String;@4bb33f74,Annotation([Ljava.lang.String;@759d26fb,[Ljava.lang.String;@3c73951,[Ljava.lang.String;@3d5c822d),Annotation([Ljava.lang.String;@6f46426d,[Ljava.lang.String;@73700b80,[Ledu.cmu.lti.nlp.amr.Dependency;@49c7b90e),Annotation([Ljava.lang.String;@10d307f1,[Ljava.lang.String;@4d5b6aac,[Ljava.lang.String;@3e84448c),Annotation([Ljava.lang.String;@4a7f959b,[Ljava.lang.String;@429bffaa,[Ledu.cmu.lti.nlp.amr.Entity;@5403f35f))
AMR:
(l / life, mod, p / possible)
(t / true, ARG2, l / life)
(t2 / try-01, ARG0, i / i)
(t2 / try-01, ARG1, t / true)
(t2 / try-01, mod, c / certain)

Decoded in 41,808 microseconds
Sentence: But I am not at all sure of success .


--- Decoder1 ---

Sentence: But I am not at all sure of success .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = am
Finding date entities
Possible invoked concepts: List()
word = not
Finding date entities
Possible invoked concepts: List()
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = sure
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false)))
concept = PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false))
score = 0
adding concept:PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = success
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), None, None, None, Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),5)), Some((0.027231986514513487,PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false)),6)), None, None, None)
Adding concept: sure
nodeIds = List(0)
concepts = List(sure)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sure),sure,PhraseConceptFeatures(7.0,-0.25131442828090605,false,false))
feats:
bias 1.0
c|p -0.25131442828090605
len 1.0

score:
0.027231986514513487
Adding concept: all
nodeIds = List(1)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.04649365153598617
Adding concept: i
nodeIds = List(2)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.07254285795421543
Adding concept: contrast-01
nodeIds = List(3)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.09325119916621034
Decoder1 Spans:
Span 1:  all => all
Span 2:  But => contrast-01
Span 3:  I => i
Span 4:  sure => sure
Decoder1 feats:
bias 4.0
c|p -2.555381526131463
len 4.0

Concepts:
id = 2 concept = i
id = 1 concept = all
id = 0 concept = sure
id = 3 concept = contrast-01
Spans:
Span 5-6:  all => all
Span 0-1:  But => contrast-01
Span 1-2:  I => i
Span 6-7:  sure => sure

rootDependencyPaths = List(List(6, 0), List(6, 1), List(6, 2), List(6, 3), List(6, 4), List(6, 4, 5), List(6), List(6, 7), List(6, 7, 8), List(6, 9))
getNodeById = Map(2 -> i, 1 -> all, 0 -> sure, 3 -> contrast-01)
getNodeById2 = Map(2 -> i, 1 -> all, 0 -> sure, 3 -> contrast-01)
getNodeById = Map(2 -> i, 1 -> all, 0 -> sure, 3 -> contrast-01)
getNodeById2 = Map(2 -> i, 1 -> all, 0 -> sure, 3 -> contrast-01)
Node = 3
Node = 0
Node = 1
Node = 2
visited = Set(3, 0, 1, 2)
Alg2 returning score = -141.51197351936446
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
i List()
at List()
all List()
- List()
sure List()
contrast-01 List()
succeed-01 List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(i, at, all, sure, contrast-01, succeed-01)
OracleGraph triples: (a / at, op, a2 / all)
(c / contrast-01, ARG2, s / sure)
(s / sure, degree, a / at)
(s / sure, domain, i / i)
(s / sure, topic, s2 / succeed-01)
(s2 / succeed-01, ARG0, i / i)
rootDependencyPaths = List(List(6, 0), List(6, 1), List(6, 2), List(6, 3), List(6, 4), List(6, 4, 5), List(6), List(6, 7), List(6, 7, 8), List(6, 9))
Oracle Span 5-6:  all => all
Oracle Span 4-5:  at => at
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  I => i
Oracle Span 8-9:  success => succeed-01
Oracle Span 6-7:  sure => sure

Missing span: at => at
Missing span: success => succeed-01
Dependencies:
1	But	_	CC	CC	_	7	cc	_	_
2	I	_	PRP	PRP	_	7	nsubj	_	_
3	am	_	VBP	VBP	_	7	cop	_	_
4	not	_	RB	RB	_	7	neg	_	_
5	at	_	IN	IN	_	7	advmod	_	_
6	all	_	DT	DT	_	5	pobj	_	_
7	sure	_	JJ	JJ	_	0	root	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	success	_	NN	NN	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(a / at, op, a2 / all)
(c / contrast-01, ARG2, s / sure)
(s / sure, degree, a / at)
(s / sure, domain, i / i)
(s / sure, topic, s2 / succeed-01)
(s2 / succeed-01, ARG0, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),sure,sure,false), Span(5,6,List(1),all,all,false), Span(1,2,List(2),I,i,false), Span(0,1,List(3),But,contrast-01,false)),Map(2 -> i, 1 -> all, 0 -> sure, 3 -> contrast-01),Map(s -> sure, a -> all, i -> i, c -> contrast-01))),[Ljava.lang.String;@483f6d77,Annotation([Ljava.lang.String;@7e5afaa6,[Ljava.lang.String;@63a12c68,[Ljava.lang.String;@28f3b248),Annotation([Ljava.lang.String;@1b1426f4,[Ljava.lang.String;@32b260fa,[Ledu.cmu.lti.nlp.amr.Dependency;@581ac8a8),Annotation([Ljava.lang.String;@6d4e5011,[Ljava.lang.String;@57d7f8ca,[Ljava.lang.String;@76c3e77a),Annotation([Ljava.lang.String;@78123e82,[Ljava.lang.String;@67c33749,[Ledu.cmu.lti.nlp.amr.Entity;@fba92d3))
AMR:
(c / contrast-01, ARG0, a / all)
(c / contrast-01, ARG2, s / sure)
(s / sure, domain, i / i)

Decoded in 20,319 microseconds
Sentence: One drawing goes along all right , and another has no resemblance to its subject .


--- Decoder1 ---

Sentence: One drawing goes along all right , and another has no resemblance to its subject .
word = One
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(One),1,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)), PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false)))
concept = PhraseConceptPair(List(One),1,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
concept = PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
score = 0
adding concept:PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
word = drawing
Finding date entities
Possible invoked concepts: List()
word = goes
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(goes),(person :ARG1-of go-01),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(goes),go-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(goes),(person :ARG1-of go-01),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(goes),(person :ARG1-of go-01),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(goes),go-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(goes),go-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = along
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = right
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false)))
concept = PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false))
score = 0
adding concept:PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = another
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
word = has
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)))
concept = PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
score = 0
adding concept:PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
word = no
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)), PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false)))
concept = PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
score = 0
adding concept:PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
concept = PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false))
score = 0
word = resemblance
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = its
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
word = subject
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(subject),subject,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(subject),subject,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(subject),subject,PhraseConceptFeatures(2.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.022150523336194265,PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false)),0)), None, Some((0.015753682017072397,PhraseConceptPair(List(goes),go-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),2)), Some((0.015753682017072397,PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),3)), Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),4)), Some((0.02637076665838812,PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false)),5)), None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),7)), Some((0.029773585223834276,PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false)),8)), Some((0.014562515980757347,PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)),9)), Some((0.012421585574902895,PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)),10)), None, None, Some((0.01866307480060534,PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)),13)), Some((0.029773585223834276,PhraseConceptPair(List(subject),subject,PhraseConceptFeatures(2.0,0.0,false,false)),14)), None)
Adding concept: subject
nodeIds = List(0)
concepts = List(subject)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(subject),subject,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.04843666002443961
Adding concept: -
nodeIds = List(2)
concepts = List(-)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
feats:
bias 1.0
c|p -1.7157735622501329
len 1.0

score:
0.0608582455993425
Adding concept: have-03
nodeIds = List(3)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
feats:
bias 1.0
c|p -1.5040773967762742
len 1.0

score:
0.07542076158009983
Adding concept: another
nodeIds = List(4)
concepts = List(another)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10519434680393411
Adding concept: and
nodeIds = List(5)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.12415228862634264
Adding concept: right
nodeIds = List(6)
concepts = List(right)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false))
feats:
bias 1.0
c|p -0.3364722366212129
len 1.0

score:
0.15052305528473076
Adding concept: all
nodeIds = List(7)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.16978472030620345
Adding concept: along
nodeIds = List(8)
concepts = List(along)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.18553840232327584
Adding concept: go-01
nodeIds = List(9)
concepts = List(go-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(goes),go-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.20129208434034823
Adding concept: one
nodeIds = List(10)
concepts = List(one)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
feats:
bias 1.0
c|p -0.7537718023763802
len 1.0

score:
0.2234426076765425
Decoder1 Spans:
Span 1:  all => all
Span 2:  along => along
Span 3:  and => and
Span 4:  another => another
Span 5:  goes => go-01
Span 6:  has => have-03
Span 7:  its => it
Span 8:  no => -
Span 9:  One => one
Span 10:  right => right
Span 11:  subject => subject
Decoder1 feats:
bias 11.0
c|p -10.290175130586325
len 11.0

Concepts:
id = 2 concept = -
id = 5 concept = and
id = 8 concept = along
id = 7 concept = all
id = 1 concept = it
id = 4 concept = another
id = 6 concept = right
id = 9 concept = go-01
id = 0 concept = subject
id = 10 concept = one
id = 3 concept = have-03
Spans:
Span 4-5:  all => all
Span 3-4:  along => along
Span 7-8:  and => and
Span 8-9:  another => another
Span 2-3:  goes => go-01
Span 9-10:  has => have-03
Span 13-14:  its => it
Span 10-11:  no => -
Span 0-1:  One => one
Span 5-6:  right => right
Span 14-15:  subject => subject

WARNING: Adding a variable name to a span
rootDependencyPaths = List(List(2, 1, 0), List(2, 1), List(2), List(2, 3), List(2, 3, 4), List(2, 3, 5), List(2, 6), List(2, 7), List(2, 9, 8), List(2, 9), List(2, 9, 11, 10), List(2, 9, 11), List(2, 9, 11, 12), List(2, 9, 11, 12, 14, 13), List(2, 9, 11, 12, 14), List(2, 15))
getNodeById = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 9 -> go-01, 0 -> subject, 10 -> one, 3 -> have-03)
getNodeById2 = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 0 -> subject, 9 -> go-01, 3 -> have-03, 10 -> one)
getNodeById = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 9 -> go-01, 0 -> subject, 10 -> one, 3 -> have-03)
getNodeById2 = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 0 -> subject, 9 -> go-01, 3 -> have-03, 10 -> one)
Node = 5
Node = 9
Node = 3
Node = 0
Node = 7
Node = 10
Node = 2
Node = 4
Node = 1
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -315.50795492018733
getNodeById = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 9 -> go-01, 0 -> subject, 10 -> one, 3 -> have-03)
getNodeById2 = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 0 -> subject, 9 -> go-01, 3 -> have-03, 10 -> one)
Node = 5
Node = 9
Node = 3
Node = 7
Node = 10
Node = 2
Node = 4
Node = 1
Node = 6
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -321.19135631725226
getNodeById = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 9 -> go-01, 0 -> subject, 10 -> one, 3 -> have-03)
getNodeById2 = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 0 -> subject, 9 -> go-01, 3 -> have-03, 10 -> one)
Node = 5
Node = 9
Node = 3
Node = 7
Node = 10
Node = 2
Node = 4
Node = 1
Node = 6
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -323.19135631725214
getNodeById = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 9 -> go-01, 0 -> subject, 10 -> one, 3 -> have-03)
getNodeById2 = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 0 -> subject, 9 -> go-01, 3 -> have-03, 10 -> one)
Node = 5
Node = 9
Node = 3
Node = 7
Node = 10
Node = 2
Node = 4
Node = 1
Node = 6
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -325.19135631725214
getNodeById = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 9 -> go-01, 0 -> subject, 10 -> one, 3 -> have-03)
getNodeById2 = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 0 -> subject, 9 -> go-01, 3 -> have-03, 10 -> one)
Node = 5
Node = 9
Node = 3
Node = 7
Node = 10
Node = 2
Node = 4
Node = 1
Node = 6
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -327.19135631725214
getNodeById = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 9 -> go-01, 0 -> subject, 10 -> one, 3 -> have-03)
getNodeById2 = Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 0 -> subject, 9 -> go-01, 3 -> have-03, 10 -> one)
Node = 5
Node = 9
Node = 3
Node = 10
Node = 7
Node = 2
Node = 4
Node = 1
Node = 6
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -328.4802514369635
Langrangian relaxation converged after 6 iterations. Delta = 0.0
Node.spans:
thing List()
another List()
draw-01 List()
right List()
resemble-01 List()
subject List()
draw-01 List()
all List()
go-06 List()
thing List()
along List()
and List()
1 List()
- List()
clearUnalignedNodes():  removing unaligned node: Some(t) / thing
clearUnalignedNodes():  removing unaligned node: Some(d) / draw-01
WARNING: Adding a variable name to a span
WARNING: Adding a variable name to a span
OracleGraph nodes = List(another, right, resemble-01, subject, draw-01, all, go-06, thing, along, and, 1, -)
OracleGraph triples: (a / and, op, g / go-06)
(a / and, op, r2 / resemble-01)
(d2 / draw-01, ARG1, t2 / thing)
(g / go-06, ARG2, a2 / along)
(g / go-06, mod, r / right)
(r / right, mod, a3 / all)
(r2 / resemble-01, ARG1, t2 / thing)
(r2 / resemble-01, ARG2, s / subject)
(r2 / resemble-01, polarity, - / -)
(s / subject, poss, t2 / thing)
(t2 / thing, mod, a4 / another)
rootDependencyPaths = List(List(2, 1, 0), List(2, 1), List(2), List(2, 3), List(2, 3, 4), List(2, 3, 5), List(2, 6), List(2, 7), List(2, 9, 8), List(2, 9), List(2, 9, 11, 10), List(2, 9, 11), List(2, 9, 11, 12), List(2, 9, 11, 12, 14, 13), List(2, 9, 11, 12, 14), List(2, 15))
Oracle Span 4-5:  all => all
Oracle Span 3-4:  along => along
Oracle Span 7-8:  and => and
Oracle Span 8-9:  another => another
Oracle Span 1-2:  drawing => (thing :ARG1-of draw-01)
Oracle Span 2-3:  goes => go-06
Oracle Span 10-11:  no => -
Oracle Span 0-1:  One => 1
Oracle Span 11-12:  resemblance => resemble-01
Oracle Span 5-6:  right => right
Oracle Span 14-15:  subject => subject

Extra span: its => it
Extra span: has => have-03
Incorrect span: goes => go-01
Incorrect span: One => one
Missing span: drawing => (thing :ARG1-of draw-01)
Missing span: goes => go-06
Missing span: One => 1
Missing span: resemblance => resemble-01
Dependencies:
1	One	_	CD	CD	_	2	num	_	_
2	drawing	_	NN	NN	_	3	nsubj	_	_
3	goes	_	VBZ	VBZ	_	0	root	_	_
4	along	_	RB	RB	_	3	advmod	_	_
5	all	_	DT	DT	_	4	det	_	_
6	right	_	NN	NN	_	4	dep	_	_
7	,	_	,	,	_	3	punct	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	another	_	DT	DT	_	10	nsubj	_	_
10	has	_	VBZ	VBZ	_	3	conj	_	_
11	no	_	DT	DT	_	12	det	_	_
12	resemblance	_	NN	NN	_	10	dobj	_	_
13	to	_	TO	TO	_	12	prep	_	_
14	its	_	PRP$	PRP$	_	15	poss	_	_
15	subject	_	NN	NN	_	13	pobj	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, g / go-06)
(a / and, op, r2 / resemble-01)
(d2 / draw-01, ARG1, t2 / thing)
(g / go-06, ARG2, a2 / along)
(g / go-06, mod, r / right)
(r / right, mod, a3 / all)
(r2 / resemble-01, ARG1, t2 / thing)
(r2 / resemble-01, ARG2, s / subject)
(r2 / resemble-01, polarity, - / -)
(s / subject, poss, t2 / thing)
(t2 / thing, mod, a4 / another)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),subject,subject,false), Span(13,14,List(1),its,it,false), Span(10,11,List(2),no,-,false), Span(9,10,List(3),has,have-03,false), Span(8,9,List(4),another,another,false), Span(7,8,List(5),and,and,false), Span(5,6,List(6),right,right,false), Span(4,5,List(7),all,all,false), Span(3,4,List(8),along,along,false), Span(2,3,List(9),goes,go-01,false), Span(0,1,List(10),One,one,false)),Map(2 -> -, 5 -> and, 8 -> along, 7 -> all, 1 -> it, 4 -> another, 6 -> right, 9 -> go-01, 0 -> subject, 10 -> one, 3 -> have-03),Map(h -> have-03, a3 -> all, s -> subject, g -> go-01, a -> another, r -> right, a2 -> and, i -> it, - -> -, o -> one, a4 -> along))),[Ljava.lang.String;@662b4c69,Annotation([Ljava.lang.String;@fa49800,[Ljava.lang.String;@71238fc2,[Ljava.lang.String;@2a54a73f),Annotation([Ljava.lang.String;@16a0ee18,[Ljava.lang.String;@3d6f0054,[Ledu.cmu.lti.nlp.amr.Dependency;@505fc5a4),Annotation([Ljava.lang.String;@5fbdfdcf,[Ljava.lang.String;@4efc180e,[Ljava.lang.String;@bd4dc25),Annotation([Ljava.lang.String;@25084a1e,[Ljava.lang.String;@156b88f5,[Ledu.cmu.lti.nlp.amr.Entity;@3bf9ce3e))
AMR:
(a2 / and, op, g / go-01)
(a2 / and, op, h / have-03)
(a3 / all, mod, a4 / along)
(g / go-01, ARG0, a3 / all)
(g / go-01, ARG1, o / one)
(h / have-03, ARG1, i / it)
(h / have-03, mod, a / another)
(h / have-03, polarity, - / -)
(r / right, mod, a3 / all)
(s / subject, poss, i / it)

Decoded in 80,311 microseconds
Sentence: I make some errors , too , in the little prince 's height : in one place he is too tall and in another too short .


--- Decoder1 ---

Sentence: I make some errors , too , in the little prince 's height : in one place he is too tall and in another too short .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = make
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false)), PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false)), PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)))
concept = PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
word = some
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)), PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false)))
concept = PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
score = 0
adding concept:PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
concept = PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false))
score = 0
word = errors
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = too
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)))
concept = PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
score = 0
adding concept:PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = 's
Finding date entities
Possible invoked concepts: List()
word = height
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = place
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(place),place,PhraseConceptFeatures(10.0,-0.9555114450274363,false,false)), PhraseConceptPair(List(place),place-01,PhraseConceptFeatures(1.0,-3.258096538021482,false,false)))
concept = PhraseConceptPair(List(place),place,PhraseConceptFeatures(10.0,-0.9555114450274363,false,false))
score = 0
adding concept:PhraseConceptPair(List(place),place,PhraseConceptFeatures(10.0,-0.9555114450274363,false,false))
concept = PhraseConceptPair(List(place),place-01,PhraseConceptFeatures(1.0,-3.258096538021482,false,false))
score = 0
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = too
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)))
concept = PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
score = 0
adding concept:PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
word = tall
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = another
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
word = too
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)))
concept = PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
score = 0
adding concept:PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
word = short
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(short),short,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(short),short,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(short),short,PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), None, Some((0.019706599931381283,PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)),2)), None, None, Some((0.029024114818713923,PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)),5)), None, None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),9)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),10)), None, None, None, None, Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),15)), Some((0.020110285460127532,PhraseConceptPair(List(place),place,PhraseConceptFeatures(10.0,-0.9555114450274363,false,false)),16)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),17)), None, Some((0.029024114818713923,PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)),19)), None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),21)), None, Some((0.029773585223834276,PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false)),23)), Some((0.029024114818713923,PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)),24)), Some((0.029773585223834276,PhraseConceptPair(List(short),short,PhraseConceptFeatures(1.0,0.0,false,false)),25)), None)
Adding concept: short
nodeIds = List(0)
concepts = List(short)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(short),short,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: too
nodeIds = List(1)
concepts = List(too)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
feats:
bias 1.0
c|p -0.07410797215372185
len 1.0

score:
0.058797700042548195
Adding concept: another
nodeIds = List(2)
concepts = List(another)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08857128526638247
Adding concept: and
nodeIds = List(3)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.10752922708879101
Adding concept: too
nodeIds = List(4)
concepts = List(too)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
feats:
bias 1.0
c|p -0.07410797215372185
len 1.0

score:
0.13655334190750493
Adding concept: he
nodeIds = List(5)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.16217214178792544
Adding concept: place
nodeIds = List(6)
concepts = List(place)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(place),place,PhraseConceptFeatures(10.0,-0.9555114450274363,false,false))
feats:
bias 1.0
c|p -0.9555114450274363
len 1.0

score:
0.18228242724805296
Adding concept: 1
nodeIds = List(7)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.19294000409436132
Adding concept: prince
nodeIds = List(8)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.2226509685458909
Adding concept: little
nodeIds = List(9)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.24526978027752444
Adding concept: too
nodeIds = List(10)
concepts = List(too)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
feats:
bias 1.0
c|p -0.07410797215372185
len 1.0

score:
0.27429389509623836
Adding concept: some
nodeIds = List(11)
concepts = List(some)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
feats:
bias 1.0
c|p -0.995428052432879
len 1.0

score:
0.29400049502761966
Adding concept: i
nodeIds = List(12)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.32004970144584893
Decoder1 Spans:
Span 1:  and => and
Span 2:  another => another
Span 3:  he => he
Span 4:  I => i
Span 5:  little => little
Span 6:  one => 1
Span 7:  place => place
Span 8:  prince => prince
Span 9:  short => short
Span 10:  some => some
Span 11:  too => too
Span 12:  too => too
Span 13:  too => too
Decoder1 feats:
bias 13.0
c|p -6.6256731745711726
len 13.0

Concepts:
id = 2 concept = another
id = 5 concept = he
id = 12 concept = i
id = 8 concept = prince
id = 7 concept = 1
id = 1 concept = too
id = 4 concept = too
id = 11 concept = some
id = 6 concept = place
id = 0 concept = short
id = 9 concept = little
id = 3 concept = and
id = 10 concept = too
Spans:
Span 21-22:  and => and
Span 23-24:  another => another
Span 17-18:  he => he
Span 0-1:  I => i
Span 9-10:  little => little
Span 15-16:  one => 1
Span 16-17:  place => place
Span 10-11:  prince => prince
Span 25-26:  short => short
Span 2-3:  some => some
Span 24-25:  too => too
Span 19-20:  too => too
Span 5-6:  too => too

rootDependencyPaths = List(List(1, 0), List(1), List(1, 3, 2), List(1, 3), List(1, 4), List(1, 5), List(1, 6), List(1, 7), List(1, 7, 12, 10, 8), List(1, 7, 12, 10, 9), List(1, 7, 12, 10), List(1, 7, 12, 10, 11), List(1, 7, 12), List(1, 13), List(1, 20, 14), List(1, 20, 14, 16, 15), List(1, 20, 14, 16), List(1, 20, 17), List(1, 20, 18), List(1, 20, 19), List(1, 20), List(1, 20, 21), List(1, 20, 22), List(1, 20, 22, 25, 23), List(1, 20, 22, 25, 24), List(1, 20, 22, 25), List(1, 26))
getNodeById = Map(2 -> another, 5 -> he, 12 -> i, 8 -> prince, 7 -> 1, 1 -> too, 4 -> too, 11 -> some, 6 -> place, 0 -> short, 9 -> little, 3 -> and, 10 -> too)
getNodeById2 = Map(2 -> another, 5 -> he, 12 -> i, 8 -> prince, 7 -> 1, 1 -> too, 4 -> too, 11 -> some, 6 -> place, 0 -> short, 9 -> little, 3 -> and, 10 -> too)
getNodeById = Map(2 -> another, 5 -> he, 12 -> i, 8 -> prince, 7 -> 1, 1 -> too, 4 -> too, 11 -> some, 6 -> place, 0 -> short, 9 -> little, 3 -> and, 10 -> too)
getNodeById2 = Map(2 -> another, 5 -> he, 12 -> i, 8 -> prince, 7 -> 1, 1 -> too, 4 -> too, 11 -> some, 6 -> place, 0 -> short, 9 -> little, 3 -> and, 10 -> too)
Node = 3
Node = 12
Node = 5
Node = 4
Node = 2
Node = 10
Node = 6
Node = 9
Node = 11
Node = 1
Node = 7
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -856.1603599868396
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
too List()
place List()
height List()
some List()
little List()
place List()
too List()
i List()
prince List()
and List()
short List()
err-01 List()
one List()
another List()
too List()
tall List()
clearUnalignedNodes():  removing unaligned node: Some(p2) / place
clearUnalignedNodes():  removing unaligned node: Some(e) / err-01
OracleGraph nodes = List(too, place, height, some, little, too, i, prince, and, short, one, another, too, tall)
OracleGraph triples: (a / and, op, s / short)
(a / and, op, t2 / tall)
(h / height, poss, p / prince)
(p / prince, mod, l / little)
(p3 / place, mod, a2 / another)
(s / short, degree, t4 / too)
(s / short, domain, p / prince)
(s / short, location, p3 / place)
(t2 / tall, degree, t3 / too)
(t2 / tall, domain, p / prince)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 3, 2), List(1, 3), List(1, 4), List(1, 5), List(1, 6), List(1, 7), List(1, 7, 12, 10, 8), List(1, 7, 12, 10, 9), List(1, 7, 12, 10), List(1, 7, 12, 10, 11), List(1, 7, 12), List(1, 13), List(1, 20, 14), List(1, 20, 14, 16, 15), List(1, 20, 14, 16), List(1, 20, 17), List(1, 20, 18), List(1, 20, 19), List(1, 20), List(1, 20, 21), List(1, 20, 22), List(1, 20, 22, 25, 23), List(1, 20, 22, 25, 24), List(1, 20, 22, 25), List(1, 26))
Oracle Span 21-22:  and => and
Oracle Span 23-24:  another => another
Oracle Span 12-13:  height => height
Oracle Span 0-1:  I => i
Oracle Span 9-10:  little => little
Oracle Span 15-16:  one => one
Oracle Span 16-17:  place => place
Oracle Span 10-11:  prince => prince
Oracle Span 25-26:  short => short
Oracle Span 2-3:  some => some
Oracle Span 20-21:  tall => tall
Oracle Span 5-6:  too => too
Oracle Span 19-20:  too => too
Oracle Span 24-25:  too => too

Extra span: he => he
Incorrect span: one => 1
Missing span: height => height
Missing span: tall => tall
Missing span: one => one
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	make	_	VBP	VBP	_	0	root	_	_
3	some	_	DT	DT	_	4	det	_	_
4	errors	_	NNS	NNS	_	2	dobj	_	_
5	,	_	,	,	_	2	punct	_	_
6	too	_	RB	RB	_	2	advmod	_	_
7	,	_	,	,	_	2	punct	_	_
8	in	_	IN	IN	_	2	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	little	_	JJ	JJ	_	11	amod	_	_
11	prince	_	NN	NN	_	13	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	height	_	NN	NN	_	8	pobj	_	_
14	:	_	:	:	_	2	punct	_	_
15	in	_	IN	IN	_	21	prep	_	_
16	one	_	CD	CD	_	17	num	_	_
17	place	_	NN	NN	_	15	pobj	_	_
18	he	_	PRP	PRP	_	21	nsubj	_	_
19	is	_	VBZ	VBZ	_	21	cop	_	_
20	too	_	RB	RB	_	21	advmod	_	_
21	tall	_	JJ	JJ	_	2	parataxis	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	in	_	IN	IN	_	21	conj	_	_
24	another	_	DT	DT	_	26	det	_	_
25	too	_	RB	RB	_	26	advmod	_	_
26	short	_	JJ	JJ	_	23	pobj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, s / short)
(a / and, op, t2 / tall)
(h / height, poss, p / prince)
(p / prince, mod, l / little)
(p3 / place, mod, a2 / another)
(s / short, degree, t4 / too)
(s / short, domain, p / prince)
(s / short, location, p3 / place)
(t2 / tall, degree, t3 / too)
(t2 / tall, domain, p / prince)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),short,short,false), Span(24,25,List(1),too,too,false), Span(23,24,List(2),another,another,false), Span(21,22,List(3),and,and,false), Span(19,20,List(4),too,too,false), Span(17,18,List(5),he,he,false), Span(16,17,List(6),place,place,false), Span(15,16,List(7),one,1,false), Span(10,11,List(8),prince,prince,false), Span(9,10,List(9),little,little,false), Span(5,6,List(10),too,too,false), Span(2,3,List(11),some,some,false), Span(0,1,List(12),I,i,false)),Map(2 -> another, 5 -> he, 12 -> i, 8 -> prince, 7 -> 1, 1 -> too, 4 -> too, 11 -> some, 6 -> place, 0 -> short, 9 -> little, 3 -> and, 10 -> too),Map(h -> he, s2 -> some, t -> too, p2 -> prince, s -> short, 1 -> 1, t3 -> too, p -> place, a -> another, t2 -> too, a2 -> and, i -> i, l -> little))),[Ljava.lang.String;@16610890,Annotation([Ljava.lang.String;@71def8f8,[Ljava.lang.String;@383bfa16,[Ljava.lang.String;@4d465b11),Annotation([Ljava.lang.String;@53fdffa1,[Ljava.lang.String;@5562c41e,[Ledu.cmu.lti.nlp.amr.Dependency;@32ee6fee),Annotation([Ljava.lang.String;@4d0f2471,[Ljava.lang.String;@7133da86,[Ljava.lang.String;@3232a28a),Annotation([Ljava.lang.String;@73e22a3d,[Ljava.lang.String;@47faa49c,[Ledu.cmu.lti.nlp.amr.Entity;@28f2a10f))
AMR:
(a / another, poss, i / i)
(a2 / and, degree, t2 / too)
(a2 / and, domain, h / he)
(i / i, mod, t3 / too)
(i / i, poss, a2 / and)
(p / place, poss, h / he)
(p / place, quant, 1 / 1)
(p2 / prince, mod, l / little)
(s / short, degree, t / too)
(s2 / some, poss, a / another)
(t / too, domain, a / another)
(t2 / too, poss, l / little)

Decoded in 84,048 microseconds
Sentence: And I feel some doubts about the color of his costume .


--- Decoder1 ---

Sentence: And I feel some doubts about the color of his costume .
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = feel
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(feel),feel-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(feel),feel-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(feel),feel-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = some
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)), PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false)))
concept = PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
score = 0
adding concept:PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
concept = PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false))
score = 0
word = doubts
Finding date entities
Possible invoked concepts: List()
word = about
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)), PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false)))
concept = PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
adding concept:PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
concept = PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = color
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(color),color,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)), PhraseConceptPair(List(color),color-01,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(color),color,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
score = 0
adding concept:PhraseConceptPair(List(color),color,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
concept = PhraseConceptPair(List(color),color-01,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
score = 0
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = his
Finding date entities
Possible invoked concepts: List()
word = costume
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), Some((0.029773585223834276,PhraseConceptPair(List(feel),feel-01,PhraseConceptFeatures(2.0,0.0,false,false)),2)), Some((0.019706599931381283,PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)),3)), None, Some((0.010387320494361422,PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)),5)), None, Some((0.01985424083692039,PhraseConceptPair(List(color),color,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)),7)), None, None, None, None)
Adding concept: color
nodeIds = List(0)
concepts = List(color)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(color),color,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
feats:
bias 1.0
c|p -0.9808292530117262
len 1.0

score:
0.01985424083692039
Adding concept: about
nodeIds = List(1)
concepts = List(about)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
feats:
bias 1.0
c|p -1.916922612182061
len 1.0

score:
0.030241561331281808
Adding concept: some
nodeIds = List(2)
concepts = List(some)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
feats:
bias 1.0
c|p -0.995428052432879
len 1.0

score:
0.04994816126266309
Adding concept: feel-01
nodeIds = List(3)
concepts = List(feel-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(feel),feel-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07972174648649737
Adding concept: i
nodeIds = List(4)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.10577095290472663
Adding concept: and
nodeIds = List(5)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.1346328200336951
Decoder1 Spans:
Span 1:  about => about
Span 2:  And => and
Span 3:  color => color
Span 4:  feel => feel-01
Span 5:  I => i
Span 6:  some => some
Decoder1 feats:
bias 6.0
c|p -4.351599273020528
len 6.0

Concepts:
id = 2 concept = some
id = 5 concept = and
id = 1 concept = about
id = 4 concept = i
id = 0 concept = color
id = 3 concept = feel-01
Spans:
Span 5-6:  about => about
Span 0-1:  And => and
Span 7-8:  color => color
Span 2-3:  feel => feel-01
Span 1-2:  I => i
Span 3-4:  some => some

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 5), List(2, 5, 7, 6), List(2, 5, 7), List(2, 5, 7, 8), List(2, 5, 7, 8, 10, 9), List(2, 5, 7, 8, 10), List(2, 11))
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 0
Node = 2
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 3.8989613429499332
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 0
Node = 2
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 1.8989613429499332
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 0
Node = 2
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -0.10103865705006676
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 0
Node = 2
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -2.1010386570500668
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 0
Node = 2
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -4.101038657050067
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 0
Node = 2
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -6.101038657050067
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 0
Node = 2
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -8.101038657050067
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 0
Node = 2
Node = 1
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -10.101038657050067
getNodeById = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
getNodeById2 = Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01)
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
Node = 4
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -11.93280251561866
Langrangian relaxation converged after 9 iterations. Delta = 0.0
Node.spans:
i List()
he List()
costume List()
some List()
doubt-01 List()
feel-01 List()
and List()
color List()
clearUnalignedNodes():  removing unaligned node: Some(h) / he
OracleGraph nodes = List(i, costume, some, doubt-01, feel-01, and, color)
OracleGraph triples: (a / and, op, f / feel-01)
(c / color, poss, c2 / costume)
(d / doubt-01, ARG0, i / i)
(d / doubt-01, ARG1, c / color)
(d / doubt-01, quant, s / some)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, d / doubt-01)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 5), List(2, 5, 7, 6), List(2, 5, 7), List(2, 5, 7, 8), List(2, 5, 7, 8, 10, 9), List(2, 5, 7, 8, 10), List(2, 11))
Oracle Span 0-1:  And => and
Oracle Span 7-8:  color => color
Oracle Span 10-11:  costume => costume
Oracle Span 4-5:  doubts => doubt-01
Oracle Span 2-3:  feel => feel-01
Oracle Span 1-2:  I => i
Oracle Span 3-4:  some => some

Extra span: about => about
Missing span: doubts => doubt-01
Missing span: costume => costume
Dependencies:
1	And	_	CC	CC	_	3	cc	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	feel	_	VBP	VBP	_	0	root	_	_
4	some	_	DT	DT	_	5	det	_	_
5	doubts	_	NNS	NNS	_	3	dobj	_	_
6	about	_	IN	IN	_	3	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	color	_	NN	NN	_	6	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	his	_	PRP$	PRP$	_	11	poss	_	_
11	costume	_	NN	NN	_	9	pobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, f / feel-01)
(c / color, poss, c2 / costume)
(d / doubt-01, ARG0, i / i)
(d / doubt-01, ARG1, c / color)
(d / doubt-01, quant, s / some)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, d / doubt-01)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),color,color,false), Span(5,6,List(1),about,about,false), Span(3,4,List(2),some,some,false), Span(2,3,List(3),feel,feel-01,false), Span(1,2,List(4),I,i,false), Span(0,1,List(5),And,and,false)),Map(2 -> some, 5 -> and, 1 -> about, 4 -> i, 0 -> color, 3 -> feel-01),Map(s -> some, a -> about, a2 -> and, i -> i, c -> color, f -> feel-01))),[Ljava.lang.String;@f736069,Annotation([Ljava.lang.String;@6da21078,[Ljava.lang.String;@7fee8714,[Ljava.lang.String;@4229bb3f),Annotation([Ljava.lang.String;@56cdfb3b,[Ljava.lang.String;@2b91004a,[Ledu.cmu.lti.nlp.amr.Dependency;@20ccf40b),Annotation([Ljava.lang.String;@2fb3536e,[Ljava.lang.String;@169e6180,[Ljava.lang.String;@35aea049),Annotation([Ljava.lang.String;@7205765b,[Ljava.lang.String;@47987356,[Ledu.cmu.lti.nlp.amr.Entity;@22ef9844))
AMR:
(a2 / and, op, f / feel-01)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, s / some)
(f / feel-01, ARG2, c / color)
(f / feel-01, time, a / about)

Decoded in 44,904 microseconds
Sentence: So I fumble along as best I can , now good , now bad , and I hope generally fair - to - middling .


--- Decoder1 ---

Sentence: So I fumble along as best I can , now good , now bad , and I hope generally fair - to - middling .
word = So
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = fumble
Finding date entities
Possible invoked concepts: List()
word = along
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = as
Finding date entities
Possible invoked concepts: List()
word = best
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(best),(good :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(best),(good :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(best),(good :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = can
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(can),can,PhraseConceptFeatures(1.0,-4.127134385045092,false,false)), PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false)))
concept = PhraseConceptPair(List(can),can,PhraseConceptFeatures(1.0,-4.127134385045092,false,false))
score = 0
concept = PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
score = 0
adding concept:PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = now
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false)))
concept = PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
score = 0
adding concept:PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
word = good
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)), PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)))
concept = PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
score = 0
adding concept:PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
concept = PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = now
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false)))
concept = PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
score = 0
adding concept:PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
word = bad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)), PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
score = 0
adding concept:PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
concept = PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = hope
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(hope),hope-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(hope),hope-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(hope),hope-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = generally
Finding date entities
Possible invoked concepts: List()
word = fair
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(fair),fair,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(fair),fair,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(fair),fair,PhraseConceptFeatures(1.0,0.0,false,false))
word = -
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = -
Finding date entities
Possible invoked concepts: List()
word = middling
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), None, Some((0.015753682017072397,PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),3)), None, Some((0.015753682017072397,PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),5)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),6)), Some((0.022432022849293715,PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false)),7)), None, Some((0.028761418947378138,PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false)),9)), Some((0.01924113055266132,PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)),10)), None, Some((0.028761418947378138,PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false)),12)), Some((0.01985424083692039,PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)),13)), None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),15)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),16)), Some((0.029773585223834276,PhraseConceptPair(List(hope),hope-01,PhraseConceptFeatures(2.0,0.0,false,false)),17)), None, Some((0.029773585223834276,PhraseConceptPair(List(fair),fair,PhraseConceptFeatures(1.0,0.0,false,false)),19)), None, None, None, None, None)
Adding concept: fair
nodeIds = List(0)
concepts = List(fair)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(fair),fair,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: hope-01
nodeIds = List(1)
concepts = List(hope-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(hope),hope-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: i
nodeIds = List(2)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.08559637686589781
Adding concept: and
nodeIds = List(3)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.10455431868830635
Adding concept: bad
nodeIds = List(4)
concepts = List(bad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
feats:
bias 1.0
c|p -0.9808292530117262
len 1.0

score:
0.12440855952522674
Adding concept: now
nodeIds = List(5)
concepts = List(now)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
feats:
bias 1.0
c|p -0.10008345855698253
len 1.0

score:
0.15316997847260488
Adding concept: good
nodeIds = List(6)
concepts = List(good)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
feats:
bias 1.0
c|p -1.041453874828161
len 1.0

score:
0.17241110902526618
Adding concept: now
nodeIds = List(7)
concepts = List(now)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
feats:
bias 1.0
c|p -0.10008345855698253
len 1.0

score:
0.20117252797264434
Adding concept: possible
nodeIds = List(8)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
feats:
bias 1.0
c|p -0.7259370033829361
len 1.0

score:
0.22360455082193806
Adding concept: i
nodeIds = List(9)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.2496537572401673
Adding concept: (well :degree most)
nodeIds = List(10, 11)
concepts = List(well, most)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(best),(well :degree most),PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.2654074392572397
Adding concept: along
nodeIds = List(12)
concepts = List(along)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(along),along,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.2811611212743121
Adding concept: i
nodeIds = List(13)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.30721032769254136
Decoder1 Spans:
Span 1:  along => along
Span 2:  and => and
Span 3:  bad => bad
Span 4:  best => (well :degree most)
Span 5:  can => possible
Span 6:  fair => fair
Span 7:  good => good
Span 8:  hope => hope-01
Span 9:  I => i
Span 10:  I => i
Span 11:  I => i
Span 12:  now => now
Span 13:  now => now
Decoder1 feats:
bias 13.0
c|p -7.895236250151916
len 13.0

Concepts:
id = 2 concept = i
id = 5 concept = now
id = 12 concept = along
id = 8 concept = possible
id = 7 concept = now
id = 1 concept = hope-01
id = 4 concept = bad
id = 11 concept = most
id = 6 concept = good
id = 0 concept = fair
id = 9 concept = i
id = 3 concept = and
id = 10 concept = well
id = 13 concept = i
Spans:
Span 3-4:  along => along
Span 15-16:  and => and
Span 13-14:  bad => bad
Span 5-6:  best => (well :degree most)
Span 7-8:  can => possible
Span 19-20:  fair => fair
Span 10-11:  good => good
Span 17-18:  hope => hope-01
Span 16-17:  I => i
Span 6-7:  I => i
Span 1-2:  I => i
Span 12-13:  now => now
Span 9-10:  now => now

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 4), List(2, 4, 5), List(2, 4, 5, 7, 6), List(2, 4, 5, 7), List(2, 8), List(2, 10, 9), List(2, 10), List(2, 10, 11), List(2, 10, 13, 12), List(2, 10, 13), List(2, 14), List(2, 15), List(2, 17, 16), List(2, 17), List(2, 17, 19, 18), List(2, 17, 19), List(2, 17, 19, 20), List(2, 17, 19, 21), List(2, 17, 19, 22), List(2, 17, 19, 23), List(2, 24))
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 5
Node = 10
Node = 12
Node = 9
Node = 6
Node = 13
Node = 2
Node = 4
Node = 11
Node = 8
Node = 7
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -471.4073556493827
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 5
Node = 10
Node = 12
Node = 9
Node = 6
Node = 13
Node = 2
Node = 4
Node = 11
Node = 8
Node = 7
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -489.4073556493827
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 5
Node = 10
Node = 12
Node = 9
Node = 6
Node = 13
Node = 2
Node = 4
Node = 11
Node = 8
Node = 7
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -507.4073556493827
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 5
Node = 10
Node = 12
Node = 6
Node = 9
Node = 13
Node = 2
Node = 4
Node = 11
Node = 8
Node = 7
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -524.850434342074
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 5
Node = 10
Node = 12
Node = 9
Node = 6
Node = 13
Node = 2
Node = 4
Node = 11
Node = 8
Node = 7
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -542.4073556493827
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 5
Node = 10
Node = 12
Node = 6
Node = 13
Node = 2
Node = 4
Node = 9
Node = 11
Node = 8
Node = 7
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -556.9601286277355
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 10
Node = 12
Node = 6
Node = 13
Node = 2
Node = 9
Node = 11
Node = 8
Node = 5
Node = 7
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -566.9055278940859
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 10
Node = 12
Node = 6
Node = 13
Node = 2
Node = 9
Node = 11
Node = 8
Node = 5
Node = 7
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -574.9055278940859
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 6
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -582.2286580611265
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 6
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -586.2286580611265
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 10
Node = 6
Node = 12
Node = 13
Node = 2
Node = 9
Node = 11
Node = 8
Node = 5
Node = 7
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -589.5186386993366
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 6
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -593.2286580611265
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 10
Node = 6
Node = 12
Node = 13
Node = 2
Node = 9
Node = 11
Node = 8
Node = 5
Node = 7
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -596.5186386993366
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 6
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -600.2286580611265
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 0
Node = 10
Node = 6
Node = 12
Node = 13
Node = 2
Node = 9
Node = 11
Node = 8
Node = 5
Node = 7
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -603.5186386993366
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -607.0471519726415
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -610.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -612.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -614.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -616.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -618.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -620.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -622.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -624.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -626.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -628.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -630.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -632.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -634.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -636.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -638.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -640.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -642.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -644.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -646.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -648.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -650.3371326108517
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 0
Node = 10
Node = 13
Node = 12
Node = 2
Node = 5
Node = 7
Node = 9
Node = 11
Node = 8
Node = 4
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -651.8615913810124
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 8
Node = 0
Node = 12
Node = 13
Node = 2
Node = 5
Node = 7
Node = 10
Node = 4
Node = 9
Node = 11
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -652.7800349330328
getNodeById = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
getNodeById2 = Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i)
Node = 3
Node = 1
Node = 6
Node = 8
Node = 0
Node = 13
Node = 12
Node = 2
Node = 5
Node = 7
Node = 10
Node = 4
Node = 9
Node = 11
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -654.3044937031935
Langrangian relaxation converged after 40 iterations. Delta = 0.0
Node.spans:
i List()
good List()
possible List()
now List()
hope-01 List()
good List()
general List()
most List()
fair-to-middling List()
fumble-01 List()
along List()
bad List()
cause-01 List()
now List()
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
OracleGraph nodes = List(i, good, possible, now, hope-01, good, general, most, fair-to-middling, fumble-01, along, bad, now)
OracleGraph triples: (b / bad, time, n2 / now)
(f / fumble-01, ARG0, i / i)
(f / fumble-01, ARG1, a / along)
(f / fumble-01, manner, g / good)
(f2 / fair-to-middling, mod, g3 / general)
(g / good, compared-to, p / possible)
(g / good, degree, m / most)
(g / good, example, b / bad)
(g / good, example, f2 / fair-to-middling)
(g / good, example, g2 / good)
(g2 / good, time, n / now)
(h / hope-01, ARG0, i / i)
(h / hope-01, ARG1, f2 / fair-to-middling)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 4), List(2, 4, 5), List(2, 4, 5, 7, 6), List(2, 4, 5, 7), List(2, 8), List(2, 10, 9), List(2, 10), List(2, 10, 11), List(2, 10, 13, 12), List(2, 10, 13), List(2, 14), List(2, 15), List(2, 17, 16), List(2, 17), List(2, 17, 19, 18), List(2, 17, 19), List(2, 17, 19, 20), List(2, 17, 19, 21), List(2, 17, 19, 22), List(2, 17, 19, 23), List(2, 24))
Oracle Span 3-4:  along => along
Oracle Span 13-14:  bad => bad
Oracle Span 5-6:  best => (good :degree most)
Oracle Span 7-8:  can => possible
Oracle Span 19-20:  fair => fair-to-middling
Oracle Span 2-3:  fumble => fumble-01
Oracle Span 18-19:  generally => general
Oracle Span 10-11:  good => good
Oracle Span 17-18:  hope => hope-01
Oracle Span 1-2:  I => i
Oracle Span 9-10:  now => now
Oracle Span 12-13:  now => now

Incorrect span: fair => fair
Extra span: I => i
Extra span: and => and
Extra span: I => i
Incorrect span: best => (well :degree most)
Missing span: fumble => fumble-01
Missing span: best => (good :degree most)
Missing span: fair => fair-to-middling
Missing span: generally => general
Dependencies:
1	So	_	CC	CC	_	3	cc	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	fumble	_	VBP	VBP	_	0	root	_	_
4	along	_	RP	RP	_	3	prt	_	_
5	as	_	IN	IN	_	3	prep	_	_
6	best	_	JJS	JJS	_	5	pobj	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	can	_	MD	MD	_	6	rcmod	_	_
9	,	_	,	,	_	3	punct	_	_
10	now	_	RB	RB	_	11	advmod	_	_
11	good	_	JJ	JJ	_	3	dep	_	_
12	,	_	,	,	_	11	punct	_	_
13	now	_	RB	RB	_	14	advmod	_	_
14	bad	_	JJ	JJ	_	11	dep	_	_
15	,	_	,	,	_	3	punct	_	_
16	and	_	CC	CC	_	3	cc	_	_
17	I	_	PRP	PRP	_	18	nsubj	_	_
18	hope	_	VBP	VBP	_	3	conj	_	_
19	generally	_	RB	RB	_	20	advmod	_	_
20	fair	_	JJ	JJ	_	18	acomp	_	_
21	-	_	:	:	_	20	punct	_	_
22	to	_	TO	TO	_	20	prep	_	_
23	-	_	:	:	_	20	punct	_	_
24	middling	_	JJ	JJ	_	20	dep	_	_
25	.	_	.	.	_	3	punct	_	_

Oracle:
(b / bad, time, n2 / now)
(f / fumble-01, ARG0, i / i)
(f / fumble-01, ARG1, a / along)
(f / fumble-01, manner, g / good)
(f2 / fair-to-middling, mod, g3 / general)
(g / good, compared-to, p / possible)
(g / good, degree, m / most)
(g / good, example, b / bad)
(g / good, example, f2 / fair-to-middling)
(g / good, example, g2 / good)
(g2 / good, time, n / now)
(h / hope-01, ARG0, i / i)
(h / hope-01, ARG1, f2 / fair-to-middling)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),fair,fair,false), Span(17,18,List(1),hope,hope-01,false), Span(16,17,List(2),I,i,false), Span(15,16,List(3),and,and,false), Span(13,14,List(4),bad,bad,false), Span(12,13,List(5),now,now,false), Span(10,11,List(6),good,good,false), Span(9,10,List(7),now,now,false), Span(7,8,List(8),can,possible,false), Span(6,7,List(9),I,i,false), Span(5,6,List(11, 10),best,(well :degree most),false), Span(3,4,List(12),along,along,false), Span(1,2,List(13),I,i,false)),Map(2 -> i, 5 -> now, 12 -> along, 8 -> possible, 7 -> now, 1 -> hope-01, 4 -> bad, 11 -> most, 6 -> good, 0 -> fair, 9 -> i, 3 -> and, 10 -> well, 13 -> i),Map(n -> now, w -> well, h -> hope-01, b -> bad, m -> most, i3 -> i, g -> good, p -> possible, a -> and, i2 -> i, i -> i, a2 -> along, f -> fair, n2 -> now))),[Ljava.lang.String;@6283d8b8,Annotation([Ljava.lang.String;@3b6ddd1d,[Ljava.lang.String;@3f6b0be5,[Ljava.lang.String;@611889f4),Annotation([Ljava.lang.String;@1da2cb77,[Ljava.lang.String;@48f278eb,[Ledu.cmu.lti.nlp.amr.Dependency;@2f217633),Annotation([Ljava.lang.String;@a530d0a,[Ljava.lang.String;@1a18644,[Ljava.lang.String;@5acf93bb),Annotation([Ljava.lang.String;@7e7be63f,[Ljava.lang.String;@6cd28fa7,[Ledu.cmu.lti.nlp.amr.Entity;@614ca7df))
AMR:
(a / and, op, h / hope-01)
(b / bad, time, n / now)
(g / good, degree, n2 / now)
(h / hope-01, ARG0, i / i)
(h / hope-01, ARG1, a2 / along)
(h / hope-01, ARG2, i3 / i)
(h / hope-01, duration, f / fair)
(h / hope-01, manner, p / possible)
(h / hope-01, time, g / good)
(i2 / i, mod, w / well)
(n / now, mod, g / good)
(w / well, compared-to, p / possible)
(w / well, degree, m / most)

Decoded in 431,881 microseconds
Sentence: In certain more important details I shall make mistakes , also .


--- Decoder1 ---

Sentence: In certain more important details I shall make mistakes , also .
word = In
Finding date entities
Possible invoked concepts: List()
word = certain
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(certain),certain,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(certain),certain,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(certain),certain,PhraseConceptFeatures(2.0,0.0,false,false))
word = more
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false)))
concept = PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false))
score = 0
adding concept:PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false))
word = important
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false)))
concept = PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false))
word = details
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = shall
Finding date entities
Possible invoked concepts: List()
word = make
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false)), PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false)), PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)))
concept = PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
word = mistakes
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(mistakes),mistake,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(mistakes),mistake,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(mistakes),mistake,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = also
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false)))
concept = PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
score = 0
adding concept:PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.029773585223834276,PhraseConceptPair(List(certain),certain,PhraseConceptFeatures(2.0,0.0,false,false)),1)), Some((0.02648251610939313,PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false)),3)), None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),5)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(mistakes),mistake,PhraseConceptFeatures(1.0,0.0,false,false)),8)), None, Some((0.028214625113307072,PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false)),10)), None)
Adding concept: also
nodeIds = List(0)
concepts = List(also)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
feats:
bias 1.0
c|p -0.15415067982725836
len 1.0

score:
0.02821462511330708
Adding concept: mistake
nodeIds = List(1)
concepts = List(mistake)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(mistakes),mistake,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.057988210337141355
Adding concept: i
nodeIds = List(2)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.08403741675537062
Adding concept: important
nodeIds = List(3)
concepts = List(important)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11381100197920489
Adding concept: more
nodeIds = List(4)
concepts = List(more)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false))
feats:
bias 1.0
c|p -0.325422400434628
len 1.0

score:
0.14029351808859802
Adding concept: certain
nodeIds = List(5)
concepts = List(certain)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(certain),certain,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1700671033124323
Decoder1 Spans:
Span 1:  also => also
Span 2:  certain => certain
Span 3:  I => i
Span 4:  important => important
Span 5:  mistakes => mistake
Span 6:  more => more
Decoder1 feats:
bias 6.0
c|p -0.8478413386614504
len 6.0

Concepts:
id = 2 concept = i
id = 5 concept = certain
id = 1 concept = mistake
id = 4 concept = more
id = 0 concept = also
id = 3 concept = important
Spans:
Span 10-11:  also => also
Span 1-2:  certain => certain
Span 5-6:  I => i
Span 3-4:  important => important
Span 8-9:  mistakes => mistake
Span 2-3:  more => more

rootDependencyPaths = List(List(7, 0), List(7, 0, 4, 1), List(7, 0, 4, 3, 2), List(7, 0, 4, 3), List(7, 0, 4), List(7, 5), List(7, 6), List(7), List(7, 8), List(7, 9), List(7, 10), List(7, 11))
getNodeById = Map(2 -> i, 5 -> certain, 1 -> mistake, 4 -> more, 0 -> also, 3 -> important)
getNodeById2 = Map(2 -> i, 5 -> certain, 1 -> mistake, 4 -> more, 0 -> also, 3 -> important)
getNodeById = Map(2 -> i, 5 -> certain, 1 -> mistake, 4 -> more, 0 -> also, 3 -> important)
getNodeById2 = Map(2 -> i, 5 -> certain, 1 -> mistake, 4 -> more, 0 -> also, 3 -> important)
Node = 3
Node = 4
Node = 1
Node = 5
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -350.77215596431483
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
certain List()
mistake List()
important List()
detail List()
i List()
more List()
make-01 List()
also List()
OracleGraph nodes = List(certain, mistake, important, detail, i, more, make-01, also)
OracleGraph triples: (d / detail, mod, c / certain)
(d / detail, mod, i2 / important)
(i2 / important, degree, m3 / more)
(m / make-01, ARG0, i / i)
(m / make-01, ARG1, m2 / mistake)
(m / make-01, mod, a / also)
(m2 / mistake, topic, d / detail)
rootDependencyPaths = List(List(7, 0), List(7, 0, 4, 1), List(7, 0, 4, 3, 2), List(7, 0, 4, 3), List(7, 0, 4), List(7, 5), List(7, 6), List(7), List(7, 8), List(7, 9), List(7, 10), List(7, 11))
Oracle Span 10-11:  also => also
Oracle Span 1-2:  certain => certain
Oracle Span 4-5:  details => detail
Oracle Span 5-6:  I => i
Oracle Span 3-4:  important => important
Oracle Span 7-8:  make => make-01
Oracle Span 8-9:  mistakes => mistake
Oracle Span 2-3:  more => more

Missing span: make => make-01
Missing span: details => detail
Dependencies:
1	In	_	IN	IN	_	8	prep	_	_
2	certain	_	JJ	JJ	_	5	amod	_	_
3	more	_	RBR	RBR	_	4	advmod	_	_
4	important	_	JJ	JJ	_	5	amod	_	_
5	details	_	NNS	NNS	_	1	pobj	_	_
6	I	_	PRP	PRP	_	8	nsubj	_	_
7	shall	_	MD	MD	_	8	aux	_	_
8	make	_	VB	VB	_	0	root	_	_
9	mistakes	_	NNS	NNS	_	8	dobj	_	_
10	,	_	,	,	_	8	punct	_	_
11	also	_	RB	RB	_	8	advmod	_	_
12	.	_	.	.	_	8	punct	_	_

Oracle:
(d / detail, mod, c / certain)
(d / detail, mod, i2 / important)
(i2 / important, degree, m3 / more)
(m / make-01, ARG0, i / i)
(m / make-01, ARG1, m2 / mistake)
(m / make-01, mod, a / also)
(m2 / mistake, topic, d / detail)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),also,also,false), Span(8,9,List(1),mistakes,mistake,false), Span(5,6,List(2),I,i,false), Span(3,4,List(3),important,important,false), Span(2,3,List(4),more,more,false), Span(1,2,List(5),certain,certain,false)),Map(2 -> i, 5 -> certain, 1 -> mistake, 4 -> more, 0 -> also, 3 -> important),Map(m2 -> more, m -> mistake, a -> also, i2 -> important, i -> i, c -> certain))),[Ljava.lang.String;@4738a206,Annotation([Ljava.lang.String;@66d3eec0,[Ljava.lang.String;@1e04fa0a,[Ljava.lang.String;@1af2d44a),Annotation([Ljava.lang.String;@18d87d80,[Ljava.lang.String;@618425b5,[Ledu.cmu.lti.nlp.amr.Dependency;@58695725),Annotation([Ljava.lang.String;@543588e6,[Ljava.lang.String;@f5acb9d,[Ljava.lang.String;@4fb3ee4e),Annotation([Ljava.lang.String;@5d7148e2,[Ljava.lang.String;@25fb8912,[Ledu.cmu.lti.nlp.amr.Entity;@7c24b813))
AMR:
(c / certain, op, m2 / more)
(i / i, part, m / mistake)
(i2 / important, degree, m2 / more)
(m / mistake, mod, a / also)
(m2 / more, poss, m / mistake)

Decoded in 26,665 microseconds
Sentence: But that is something that will not be my fault .


--- Decoder1 ---

Sentence: But that is something that will not be my fault .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = something
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)))
concept = PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
score = 0
adding concept:PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = will
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(will),will,PhraseConceptFeatures(1.0,-4.290459441148391,false,false)))
concept = PhraseConceptPair(List(will),will,PhraseConceptFeatures(1.0,-4.290459441148391,false,false))
score = 0
word = not
Finding date entities
Possible invoked concepts: List()
word = be
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false)))
concept = PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false))
score = 0
word = my
Finding date entities
Possible invoked concepts: List()
word = fault
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(fault),fault,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false)), PhraseConceptPair(List(fault),fault-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)))
concept = PhraseConceptPair(List(fault),fault,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
score = 0
adding concept:PhraseConceptPair(List(fault),fault,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
concept = PhraseConceptPair(List(fault),fault-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
score = 0
adding concept:PhraseConceptPair(List(fault),fault-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),1)), None, Some((0.027516884858905237,PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)),3)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),4)), None, None, None, None, Some((0.01985424083692039,PhraseConceptPair(List(fault),fault-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)),9)), None)
Adding concept: fault-01
nodeIds = List(0)
concepts = List(fault-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(fault),fault-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
feats:
bias 1.0
c|p -0.9808292530117262
len 1.0

score:
0.01985424083692039
Adding concept: that
nodeIds = List(1)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.03647204922613617
Adding concept: something
nodeIds = List(2)
concepts = List(something)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
feats:
bias 1.0
c|p -0.2231435513142097
len 1.0

score:
0.06398893408504142
Adding concept: that
nodeIds = List(3)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.0806067424742572
Adding concept: contrast-01
nodeIds = List(4)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.10131508368625211
Decoder1 Spans:
Span 1:  But => contrast-01
Span 2:  fault => fault-01
Span 3:  something => something
Span 4:  that => that
Span 5:  that => that
Decoder1 feats:
bias 5.0
c|p -4.702046536825161
len 5.0

Concepts:
id = 2 concept = something
id = 1 concept = that
id = 4 concept = contrast-01
id = 0 concept = fault-01
id = 3 concept = that
Spans:
Span 0-1:  But => contrast-01
Span 9-10:  fault => fault-01
Span 3-4:  something => something
Span 4-5:  that => that
Span 1-2:  that => that

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 9, 4), List(3, 9, 5), List(3, 9, 6), List(3, 9, 7), List(3, 9, 8), List(3, 9), List(3, 10))
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -216.593932740492
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 2
Node = 1
Node = 3
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -217.56666063770427
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -219.65569380962205
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 3
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -220.9082913176391
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -222.593932740492
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 1
Node = 3
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -222.84653024850908
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 3
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -223.9082913176391
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -225.593932740492
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 1
Node = 3
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -225.84653024850908
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 3
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -226.9082913176391
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -228.593932740492
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 1
Node = 3
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -228.84653024850908
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 3
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -229.9082913176391
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -231.593932740492
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 1
Node = 3
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -231.84653024850908
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 3
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -232.9082913176391
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -234.593932740492
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 0
Node = 1
Node = 3
Node = 2
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -234.84653024850908
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -235.78890076334315
getNodeById = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
getNodeById2 = Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -237.18570726949412
Langrangian relaxation converged after 20 iterations. Delta = 0.0
Node.spans:
i List()
- List()
something List()
fault-01 List()
contrast-01 List()
that List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: Some(i) / i
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(something, fault-01, contrast-01, that)
OracleGraph triples: (c / contrast-01, ARG2, f2 / fault-01)
(f2 / fault-01, ARG2, s2 / something)
(s2 / something, mod, t2 / that)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 9, 4), List(3, 9, 5), List(3, 9, 6), List(3, 9, 7), List(3, 9, 8), List(3, 9), List(3, 10))
Oracle Span 0-1:  But => contrast-01
Oracle Span 9-10:  fault => fault-01
Oracle Span 3-4:  something => something
Oracle Span 1-2:  that => that

Extra span: that => that
Dependencies:
1	But	_	CC	CC	_	4	cc	_	_
2	that	_	DT	DT	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	something	_	NN	NN	_	0	root	_	_
5	that	_	WDT	WDT	_	10	nsubj	_	_
6	will	_	MD	MD	_	10	aux	_	_
7	not	_	RB	RB	_	10	neg	_	_
8	be	_	VB	VB	_	10	cop	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	fault	_	NN	NN	_	4	rcmod	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(c / contrast-01, ARG2, f2 / fault-01)
(f2 / fault-01, ARG2, s2 / something)
(s2 / something, mod, t2 / that)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),fault,fault-01,false), Span(4,5,List(1),that,that,false), Span(3,4,List(2),something,something,false), Span(1,2,List(3),that,that,false), Span(0,1,List(4),But,contrast-01,false)),Map(2 -> something, 1 -> that, 4 -> contrast-01, 0 -> fault-01, 3 -> that),Map(t -> that, s -> something, t2 -> that, c -> contrast-01, f -> fault-01))),[Ljava.lang.String;@2c35e847,Annotation([Ljava.lang.String;@7bd4937b,[Ljava.lang.String;@21e360a,[Ljava.lang.String;@5ba3f27a),Annotation([Ljava.lang.String;@58d75e99,[Ljava.lang.String;@74751b3,[Ledu.cmu.lti.nlp.amr.Dependency;@741a8937),Annotation([Ljava.lang.String;@306e95ec,[Ljava.lang.String;@52af26ee,[Ljava.lang.String;@6fd83fc1),Annotation([Ljava.lang.String;@4f2b503c,[Ljava.lang.String;@bae7dc0,[Ledu.cmu.lti.nlp.amr.Entity;@209da20d))
AMR:
(c / contrast-01, ARG0, f / fault-01)
(c / contrast-01, ARG2, t2 / that)
(f / fault-01, ARG1, t / that)
(s / something, domain, t2 / that)

Decoded in 47,319 microseconds
Sentence: My friend never explained anything to me .


--- Decoder1 ---

Sentence: My friend never explained anything to me .
word = My
Finding date entities
Possible invoked concepts: List()
word = friend
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)), PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)))
concept = PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
concept = PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
score = 0
adding concept:PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
word = never
Finding date entities
Possible invoked concepts: List()
word = explained
Finding date entities
Possible invoked concepts: List()
word = anything
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false)))
concept = PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
score = 0
adding concept:PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.018010382382001432,PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false)),1)), None, None, Some((0.028326374564312088,PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false)),4)), None, None, None)
Adding concept: anything
nodeIds = List(0)
concepts = List(anything)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(anything),anything,PhraseConceptFeatures(13.0,-0.1431008436406733,false,false))
feats:
bias 1.0
c|p -0.1431008436406733
len 1.0

score:
0.028326374564312085
Adding concept: friend
nodeIds = List(1)
concepts = List(friend)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(friend),friend,PhraseConceptFeatures(5.0,-1.1631508098056809,false,false))
feats:
bias 1.0
c|p -1.1631508098056809
len 1.0

score:
0.046336756946313506
Decoder1 Spans:
Span 1:  anything => anything
Span 2:  friend => friend
Decoder1 feats:
bias 2.0
c|p -1.3062516534463542
len 2.0

Concepts:
id = 1 concept = friend
id = 0 concept = anything
Spans:
Span 4-5:  anything => anything
Span 1-2:  friend => friend

rootDependencyPaths = List(List(3, 1, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 5, 6), List(3, 7))
getNodeById = Map(1 -> friend, 0 -> anything)
getNodeById2 = Map(1 -> friend, 0 -> anything)
getNodeById = Map(1 -> friend, 0 -> anything)
getNodeById2 = Map(1 -> friend, 0 -> anything)
Node = 1
Node = 0
visited = Set(0, 1)
Alg2 returning score = -80.83660616024603
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
person List()
ever List()
friend List()
have-rel-role-91 List()
- List()
i List()
explain-01 List()
anything List()
clearUnalignedNodes():  removing unaligned node: Some(p) / person
clearUnalignedNodes():  removing unaligned node: Some(e2) / ever
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(i) / i
OracleGraph nodes = List(friend, have-rel-role-91, explain-01, anything)
OracleGraph triples: (e / explain-01, ARG1, a / anything)
(h / have-rel-role-91, ARG2, f / friend)
rootDependencyPaths = List(List(3, 1, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 5, 6), List(3, 7))
Oracle Span 4-5:  anything => anything
Oracle Span 3-4:  explained => explain-01
Oracle Span 1-2:  friend => (have-rel-role-91 :ARG2 friend)

Incorrect span: friend => friend
Missing span: explained => explain-01
Missing span: friend => (have-rel-role-91 :ARG2 friend)
Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	friend	_	NN	NN	_	4	nsubj	_	_
3	never	_	RB	RB	_	4	neg	_	_
4	explained	_	VBD	VBD	_	0	root	_	_
5	anything	_	NN	NN	_	4	dobj	_	_
6	to	_	TO	TO	_	4	prep	_	_
7	me	_	PRP	PRP	_	6	pobj	_	_
8	.	_	.	.	_	4	punct	_	_

Oracle:
(e / explain-01, ARG1, a / anything)
(h / have-rel-role-91, ARG2, f / friend)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),anything,anything,false), Span(1,2,List(1),friend,friend,false)),Map(1 -> friend, 0 -> anything),Map(a -> anything, f -> friend))),[Ljava.lang.String;@e15b7e8,Annotation([Ljava.lang.String;@1b2abca6,[Ljava.lang.String;@6392827e,[Ljava.lang.String;@2ed2d9cb),Annotation([Ljava.lang.String;@d5b810e,[Ljava.lang.String;@43dac38f,[Ledu.cmu.lti.nlp.amr.Dependency;@342c38f8),Annotation([Ljava.lang.String;@c88a337,[Ljava.lang.String;@5d0a1059,[Ljava.lang.String;@485966cc),Annotation([Ljava.lang.String;@1de76cc7,[Ljava.lang.String;@54bff557,[Ledu.cmu.lti.nlp.amr.Entity;@593aaf41))
AMR:
(a / anything, poss, f / friend)

Decoded in 9,924 microseconds
Sentence: He thought , perhaps , that I was like himself .


--- Decoder1 ---

Sentence: He thought , perhaps , that I was like himself .
word = He
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false)))
concept = PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
word = thought
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(thought),(thing :ARG1-of think-01),PhraseConceptFeatures(1.0,-2.995732273553991,false,false)), PhraseConceptPair(List(thought),think-01,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false)))
concept = PhraseConceptPair(List(thought),(thing :ARG1-of think-01),PhraseConceptFeatures(1.0,-2.995732273553991,false,false))
score = 0
concept = PhraseConceptPair(List(thought),think-01,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false))
score = 0
adding concept:PhraseConceptPair(List(thought),think-01,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = perhaps
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(perhaps),perhaps,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(perhaps),perhaps,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(perhaps),perhaps,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = himself
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false)),0)), Some((0.021698099291839343,PhraseConceptPair(List(thought),think-01,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false)),1)), None, Some((0.022763633620453336,PhraseConceptPair(List(perhaps),perhaps,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),3)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),5)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),6)), None, None, None, None)
Adding concept: i
nodeIds = List(0)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.026049206418229262
Adding concept: that
nodeIds = List(1)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.042667014807445044
Adding concept: perhaps
nodeIds = List(2)
concepts = List(perhaps)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(perhaps),perhaps,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.06543064842789838
Adding concept: think-01
nodeIds = List(3)
concepts = List(think-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(thought),think-01,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false))
feats:
bias 1.0
c|p -0.7985076962177716
len 1.0

score:
0.08712874771973772
Adding concept: he
nodeIds = List(4)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.116902332943572
Decoder1 Spans:
Span 1:  He => he
Span 2:  I => i
Span 3:  perhaps => perhaps
Span 4:  that => that
Span 5:  thought => think-01
Decoder1 feats:
bias 5.0
c|p -3.160772290340287
len 5.0

Concepts:
id = 2 concept = perhaps
id = 1 concept = that
id = 4 concept = he
id = 0 concept = i
id = 3 concept = think-01
Spans:
Span 0-1:  He => he
Span 6-7:  I => i
Span 3-4:  perhaps => perhaps
Span 5-6:  that => that
Span 1-2:  thought => think-01

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 3), List(1, 4), List(1, 7, 5), List(1, 7, 6), List(1, 7), List(1, 7, 8), List(1, 7, 8, 9), List(1, 10))
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -17.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -19.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -21.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -23.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -25.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -27.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -29.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -31.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -33.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -35.95150059725284
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -37.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -39.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -41.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -43.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -45.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -47.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -49.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -51.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -53.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -55.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -57.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -59.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -61.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -63.951500597252846
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -65.95150059725285
getNodeById = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
getNodeById2 = Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01)
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -67.75165284938561
Langrangian relaxation converged after 26 iterations. Delta = 0.0
Node.spans:
resemble-01 List()
i List()
he List()
think-01 List()
perhaps List()
clearUnalignedNodes():  removing unaligned node: Some(r) / resemble-01
OracleGraph nodes = List(i, he, think-01, perhaps)
OracleGraph triples: (t / think-01, ARG0, h / he)
(t / think-01, mod, p / perhaps)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 3), List(1, 4), List(1, 7, 5), List(1, 7, 6), List(1, 7), List(1, 7, 8), List(1, 7, 8, 9), List(1, 10))
Oracle Span 0-1:  He => he
Oracle Span 6-7:  I => i
Oracle Span 3-4:  perhaps => perhaps
Oracle Span 1-2:  thought => think-01

Extra span: that => that
Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	thought	_	VBD	VBD	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	perhaps	_	RB	RB	_	2	advmod	_	_
5	,	_	,	,	_	2	punct	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	was	_	VBD	VBD	_	2	ccomp	_	_
9	like	_	IN	IN	_	8	prep	_	_
10	himself	_	PRP	PRP	_	9	pobj	_	_
11	.	_	.	.	_	2	punct	_	_

Oracle:
(t / think-01, ARG0, h / he)
(t / think-01, mod, p / perhaps)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),I,i,false), Span(5,6,List(1),that,that,false), Span(3,4,List(2),perhaps,perhaps,false), Span(1,2,List(3),thought,think-01,false), Span(0,1,List(4),He,he,false)),Map(2 -> perhaps, 1 -> that, 4 -> he, 0 -> i, 3 -> think-01),Map(h -> he, t -> that, p -> perhaps, t2 -> think-01, i -> i))),[Ljava.lang.String;@5a56cdac,Annotation([Ljava.lang.String;@7c711375,[Ljava.lang.String;@57cf54e1,[Ljava.lang.String;@5b03b9fe),Annotation([Ljava.lang.String;@37d4349f,[Ljava.lang.String;@434a63ab,[Ledu.cmu.lti.nlp.amr.Dependency;@6e0f5f7f),Annotation([Ljava.lang.String;@2805d709,[Ljava.lang.String;@3ee37e5a,[Ljava.lang.String;@2ea41516),Annotation([Ljava.lang.String;@3a44431a,[Ljava.lang.String;@3c7f66c4,[Ledu.cmu.lti.nlp.amr.Entity;@194bcebf))
AMR:
(i / i, mod, t / that)
(t2 / think-01, ARG0, i / i)
(t2 / think-01, ARG1, h / he)
(t2 / think-01, mod, p / perhaps)

Decoded in 51,546 microseconds
Sentence: But I , alas , do not know how to see sheep through the walls of boxes .


--- Decoder1 ---

Sentence: But I , alas , do not know how to see sheep through the walls of boxes .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = alas
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = do
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false)), PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)))
concept = PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false))
score = 0
concept = PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
score = 0
adding concept:PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
word = not
Finding date entities
Possible invoked concepts: List()
word = know
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(know),(person :ARG0-of know-01),PhraseConceptFeatures(1.0,-4.624972813284271,false,false)), PhraseConceptPair(List(know),(thing :ARG1-of know-01),PhraseConceptFeatures(1.0,-4.624972813284271,false,false)), PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false)))
concept = PhraseConceptPair(List(know),(person :ARG0-of know-01),PhraseConceptFeatures(1.0,-4.624972813284271,false,false))
score = 0
concept = PhraseConceptPair(List(know),(thing :ARG1-of know-01),PhraseConceptFeatures(1.0,-4.624972813284271,false,false))
score = 0
concept = PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false))
score = 0
adding concept:PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false))
word = how
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = see
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = through
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = walls
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = boxes
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), None, None, None, Some((0.008412119642531832,PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)),5)), None, Some((0.017728882868901986,PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false)),7)), None, None, Some((0.02932403466221358,PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),10)), Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),11)), Some((0.01866307480060534,PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)),12)), None, None, None, None, None)
Adding concept: through
nodeIds = List(0)
concepts = List(through)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.018663074800605334
Adding concept: sheep
nodeIds = List(1)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04843666002443961
Adding concept: see-01
nodeIds = List(2)
concepts = List(see-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.07776069468665318
Adding concept: know-01
nodeIds = List(3)
concepts = List(know-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false))
feats:
bias 1.0
c|p -1.1909856087991249
len 1.0

score:
0.09548957755555516
Adding concept: do-02
nodeIds = List(4)
concepts = List(do-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
feats:
bias 1.0
c|p -2.1122313645028266
len 1.0

score:
0.10390169719808699
Adding concept: i
nodeIds = List(5)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.12995090361631625
Adding concept: contrast-01
nodeIds = List(6)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.15065924482831117
Decoder1 Spans:
Span 1:  But => contrast-01
Span 2:  do => do-02
Span 3:  I => i
Span 4:  know => know-01
Span 5:  see => see-01
Span 6:  sheep => sheep
Span 7:  through => through
Decoder1 feats:
bias 7.0
c|p -5.710924705113673
len 7.0

Concepts:
id = 2 concept = see-01
id = 5 concept = i
id = 1 concept = sheep
id = 4 concept = do-02
id = 6 concept = contrast-01
id = 0 concept = through
id = 3 concept = know-01
Spans:
Span 0-1:  But => contrast-01
Span 5-6:  do => do-02
Span 1-2:  I => i
Span 7-8:  know => know-01
Span 10-11:  see => see-01
Span 11-12:  sheep => sheep
Span 12-13:  through => through

rootDependencyPaths = List(List(7, 0), List(7, 1), List(7, 2), List(7, 5, 3), List(7, 5, 4), List(7, 5), List(7, 5, 6), List(7), List(7, 10, 8), List(7, 10, 9), List(7, 10), List(7, 10, 11), List(7, 10, 12), List(7, 10, 12, 14, 13), List(7, 10, 12, 14), List(7, 10, 12, 14, 15), List(7, 10, 12, 14, 15, 16), List(7, 17))
getNodeById = Map(2 -> see-01, 5 -> i, 1 -> sheep, 4 -> do-02, 6 -> contrast-01, 0 -> through, 3 -> know-01)
getNodeById2 = Map(2 -> see-01, 5 -> i, 1 -> sheep, 4 -> do-02, 6 -> contrast-01, 0 -> through, 3 -> know-01)
getNodeById = Map(2 -> see-01, 5 -> i, 1 -> sheep, 4 -> do-02, 6 -> contrast-01, 0 -> through, 3 -> know-01)
getNodeById2 = Map(2 -> see-01, 5 -> i, 1 -> sheep, 4 -> do-02, 6 -> contrast-01, 0 -> through, 3 -> know-01)
Node = 6
Node = 3
Node = 1
Node = 4
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -54.67720063115773
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
- List()
through List()
alas List()
thing List()
box List()
wall List()
see-01 List()
sheep List()
i List()
know-01 List()
contrast-01 List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(through, alas, thing, box, wall, see-01, sheep, i, know-01, contrast-01)
OracleGraph triples: (b2 / box, consist, w / wall)
(c / contrast-01, ARG2, k / know-01)
(c / contrast-01, mod, a / alas)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t2 / thing)
(s / see-01, ARG1, s2 / sheep)
(s / see-01, manner, t2 / thing)
(s / see-01, path, t / through)
(t / through, op, w / wall)
rootDependencyPaths = List(List(7, 0), List(7, 1), List(7, 2), List(7, 5, 3), List(7, 5, 4), List(7, 5), List(7, 5, 6), List(7), List(7, 10, 8), List(7, 10, 9), List(7, 10), List(7, 10, 11), List(7, 10, 12), List(7, 10, 12, 14, 13), List(7, 10, 12, 14), List(7, 10, 12, 14, 15), List(7, 10, 12, 14, 15, 16), List(7, 17))
Oracle Span 3-4:  alas => alas
Oracle Span 16-17:  boxes => box
Oracle Span 0-1:  But => contrast-01
Oracle Span 1-2:  I => i
Oracle Span 7-8:  know => know-01
Oracle Span 10-11:  see => (thing :manner-of see-01)
Oracle Span 11-12:  sheep => sheep
Oracle Span 12-13:  through => through
Oracle Span 14-15:  walls => wall

Incorrect span: see => see-01
Extra span: do => do-02
Missing span: alas => alas
Missing span: see => (thing :manner-of see-01)
Missing span: walls => wall
Missing span: boxes => box
Dependencies:
1	But	_	CC	CC	_	8	cc	_	_
2	I	_	PRP	PRP	_	8	nsubj	_	_
3	,	_	,	,	_	8	punct	_	_
4	alas	_	UH	UH	_	6	discourse	_	_
5	,	_	,	,	_	6	punct	_	_
6	do	_	VB	VB	_	8	dep	_	_
7	not	_	RB	RB	_	6	neg	_	_
8	know	_	VBP	VBP	_	0	root	_	_
9	how	_	WRB	WRB	_	11	advmod	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	see	_	VB	VB	_	8	ccomp	_	_
12	sheep	_	NN	NN	_	11	dobj	_	_
13	through	_	IN	IN	_	11	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	walls	_	NNS	NNS	_	13	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	boxes	_	NNS	NNS	_	16	pobj	_	_
18	.	_	.	.	_	8	punct	_	_

Oracle:
(b2 / box, consist, w / wall)
(c / contrast-01, ARG2, k / know-01)
(c / contrast-01, mod, a / alas)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t2 / thing)
(s / see-01, ARG1, s2 / sheep)
(s / see-01, manner, t2 / thing)
(s / see-01, path, t / through)
(t / through, op, w / wall)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),through,through,false), Span(11,12,List(1),sheep,sheep,false), Span(10,11,List(2),see,see-01,false), Span(7,8,List(3),know,know-01,false), Span(5,6,List(4),do,do-02,false), Span(1,2,List(5),I,i,false), Span(0,1,List(6),But,contrast-01,false)),Map(2 -> see-01, 5 -> i, 1 -> sheep, 4 -> do-02, 6 -> contrast-01, 0 -> through, 3 -> know-01),Map(k -> know-01, s2 -> see-01, t -> through, s -> sheep, d -> do-02, i -> i, c -> contrast-01))),[Ljava.lang.String;@17497425,Annotation([Ljava.lang.String;@f0da945,[Ljava.lang.String;@4803b726,[Ljava.lang.String;@ffaa6af),Annotation([Ljava.lang.String;@53ce1329,[Ljava.lang.String;@316bcf94,[Ledu.cmu.lti.nlp.amr.Dependency;@6404f418),Annotation([Ljava.lang.String;@3e11f9e9,[Ljava.lang.String;@1de5f259,[Ljava.lang.String;@729d991e),Annotation([Ljava.lang.String;@31fa1761,[Ljava.lang.String;@957e06,[Ledu.cmu.lti.nlp.amr.Entity;@32502377))
AMR:
(c / contrast-01, ARG2, k / know-01)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, d / do-02)
(k / know-01, manner, s / sheep)
(s / sheep, location, t / through)
(s2 / see-01, ARG1, s / sheep)

Decoded in 33,811 microseconds
Sentence: Perhaps I am a little like the grown - ups .


--- Decoder1 ---

Sentence: Perhaps I am a little like the grown - ups .
word = Perhaps
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = am
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = grown
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
word = -
Finding date entities
Possible invoked concepts: List()
word = ups
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),4)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false)),7)), None, None, None)
Adding concept: grown-up
nodeIds = List(0)
concepts = List(grown-up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grown),grown-up,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: little
nodeIds = List(1)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.052392396955467824
Adding concept: i
nodeIds = List(2)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.07844160337369709
Decoder1 Spans:
Span 1:  grown => grown-up
Span 2:  I => i
Span 3:  little => little
Decoder1 feats:
bias 3.0
c|p -1.075735492734258
len 3.0

Concepts:
id = 2 concept = i
id = 1 concept = little
id = 0 concept = grown-up
Spans:
Span 7-8:  grown => grown-up
Span 1-2:  I => i
Span 4-5:  little => little

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 5, 4, 3), List(2, 5, 4), List(2, 5), List(2, 5, 9, 6), List(2, 5, 9, 7), List(2, 5, 9, 8), List(2, 5, 9), List(2, 10))
getNodeById = Map(2 -> i, 1 -> little, 0 -> grown-up)
getNodeById2 = Map(2 -> i, 1 -> little, 0 -> grown-up)
getNodeById = Map(2 -> i, 1 -> little, 0 -> grown-up)
getNodeById2 = Map(2 -> i, 1 -> little, 0 -> grown-up)
Node = 0
Node = 2
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = -214.7896454711887
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
grown-up List()
i List()
little List()
resemble-01 List()
perhaps List()
clearUnalignedNodes():  removing unaligned node: Some(r) / resemble-01
OracleGraph nodes = List(grown-up, i, little, perhaps)
OracleGraph triples: 
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 5, 4, 3), List(2, 5, 4), List(2, 5), List(2, 5, 9, 6), List(2, 5, 9, 7), List(2, 5, 9, 8), List(2, 5, 9), List(2, 10))
Oracle Span 7-8:  grown => grown-up
Oracle Span 1-2:  I => i
Oracle Span 4-5:  little => little
Oracle Span 0-1:  Perhaps => perhaps

Missing span: Perhaps => perhaps
Dependencies:
1	Perhaps	_	RB	RB	_	3	advmod	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	am	_	VBP	VBP	_	0	root	_	_
4	a	_	DT	DT	_	5	det	_	_
5	little	_	JJ	JJ	_	6	npadvmod	_	_
6	like	_	IN	IN	_	3	prep	_	_
7	the	_	DT	DT	_	10	det	_	_
8	grown	_	JJ	JJ	_	10	amod	_	_
9	-	_	CD	CD	_	10	num	_	_
10	ups	_	NNS	NNS	_	6	pobj	_	_
11	.	_	.	.	_	3	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),grown,grown-up,false), Span(4,5,List(1),little,little,false), Span(1,2,List(2),I,i,false)),Map(2 -> i, 1 -> little, 0 -> grown-up),Map(g -> grown-up, i -> i, l -> little))),[Ljava.lang.String;@2c1b194a,Annotation([Ljava.lang.String;@4dbb42b7,[Ljava.lang.String;@66f57048,[Ljava.lang.String;@550dbc7a),Annotation([Ljava.lang.String;@21282ed8,[Ljava.lang.String;@36916eb0,[Ledu.cmu.lti.nlp.amr.Dependency;@7bab3f1a),Annotation([Ljava.lang.String;@437da279,[Ljava.lang.String;@23c30a20,[Ljava.lang.String;@1e1a0406),Annotation([Ljava.lang.String;@3cebbb30,[Ljava.lang.String;@12aba8be,[Ledu.cmu.lti.nlp.amr.Entity;@290222c1))
AMR:
(g / grown-up, domain, i / i)
(l / little, mod, i / i)

Decoded in 13,337 microseconds
Sentence: I have had to grow old .


--- Decoder1 ---

Sentence: I have had to grow old .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = had
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false)), PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false)))
concept = PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = grow
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = old
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false)))
concept = PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),1)), None, None, Some((0.015753682017072397,PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),4)), Some((0.029773585223834276,PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false)),5)), None)
Adding concept: old
nodeIds = List(0)
concepts = List(old)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(old),old,PhraseConceptFeatures(14.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: grow-02
nodeIds = List(1)
concepts = List(grow-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.045527267240906666
Adding concept: have-03
nodeIds = List(2)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.04569177158751131
Adding concept: i
nodeIds = List(3)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.07174097800574057
Decoder1 Spans:
Span 1:  grow => grow-02
Span 2:  have => have-03
Span 3:  I => i
Span 4:  old => old
Decoder1 feats:
bias 4.0
c|p -4.68232190948724
len 4.0

Concepts:
id = 2 concept = have-03
id = 1 concept = grow-02
id = 0 concept = old
id = 3 concept = i
Spans:
Span 4-5:  grow => grow-02
Span 1-2:  have => have-03
Span 0-1:  I => i
Span 5-6:  old => old

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 4, 5), List(2, 6))
getNodeById = Map(2 -> have-03, 1 -> grow-02, 0 -> old, 3 -> i)
getNodeById2 = Map(2 -> have-03, 1 -> grow-02, 0 -> old, 3 -> i)
getNodeById = Map(2 -> have-03, 1 -> grow-02, 0 -> old, 3 -> i)
getNodeById2 = Map(2 -> have-03, 1 -> grow-02, 0 -> old, 3 -> i)
Node = 0
Node = 1
Node = 3
Node = 2
visited = Set(3, 0, 1, 2)
Alg2 returning score = -50.130576868100086
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
grow-02 List()
old List()
i List()
obligate-01 List()
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
OracleGraph nodes = List(grow-02, old, i)
OracleGraph triples: (g / grow-02, ARG1, i / i)
(g / grow-02, ARG2, o2 / old)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 4, 3), List(2, 4), List(2, 4, 5), List(2, 6))
Oracle Span 4-5:  grow => grow-02
Oracle Span 0-1:  I => i
Oracle Span 5-6:  old => old

Extra span: have => have-03
Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	had	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	grow	_	VB	VB	_	3	xcomp	_	_
6	old	_	JJ	JJ	_	5	acomp	_	_
7	.	_	.	.	_	3	punct	_	_

Oracle:
(g / grow-02, ARG1, i / i)
(g / grow-02, ARG2, o2 / old)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),old,old,false), Span(4,5,List(1),grow,grow-02,false), Span(1,2,List(2),have,have-03,false), Span(0,1,List(3),I,i,false)),Map(2 -> have-03, 1 -> grow-02, 0 -> old, 3 -> i),Map(h -> have-03, g -> grow-02, i -> i, o -> old))),[Ljava.lang.String;@67f639d3,Annotation([Ljava.lang.String;@6253c26,[Ljava.lang.String;@49049a04,[Ljava.lang.String;@71a8adcf),Annotation([Ljava.lang.String;@27462a88,[Ljava.lang.String;@82de64a,[Ledu.cmu.lti.nlp.amr.Dependency;@659499f1),Annotation([Ljava.lang.String;@51e69659,[Ljava.lang.String;@47e2e487,[Ljava.lang.String;@201a4587),Annotation([Ljava.lang.String;@61001b64,[Ljava.lang.String;@4310d43,[Ledu.cmu.lti.nlp.amr.Entity;@54a7079e))
AMR:
(g / grow-02, ARG0, i / i)
(g / grow-02, manner, o / old)
(h / have-03, ARG1, i / i)

Decoded in 11,126 microseconds
Sentence: Chapter 5 .


--- Decoder1 ---

Sentence: Chapter 5 .
word = Chapter
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false)))
concept = PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
word = 5
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false)),0)), None, None)
Adding concept: chapter
nodeIds = List(0)
concepts = List(chapter)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Decoder1 Spans:
Span 1:  Chapter => chapter
Decoder1 feats:
bias 1.0
len 1.0

Concepts:
id = 0 concept = chapter
Spans:
Span 0-1:  Chapter => chapter

rootDependencyPaths = List(List(0), List(0, 1), List(0, 2))
getNodeById = Map(0 -> chapter)
getNodeById2 = Map(0 -> chapter)
getNodeById = Map(0 -> chapter)
getNodeById2 = Map(0 -> chapter)
Node = 0
visited = Set(0)
Alg2 returning score = 0.11785127172591817
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
5 List()
chapter List()
WARNING: Adding a variable name to a span
OracleGraph nodes = List(5, chapter)
OracleGraph triples: (c / chapter, mod, 5 / 5)
rootDependencyPaths = List(List(0), List(0, 1), List(0, 2))
Oracle Span 1-2:  5 => 5
Oracle Span 0-1:  Chapter => chapter

Missing span: 5 => 5
Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	5	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 5 / 5)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false)),Map(0 -> chapter),Map(c -> chapter))),[Ljava.lang.String;@26e356f0,Annotation([Ljava.lang.String;@47d9a273,[Ljava.lang.String;@4b8ee4de,[Ljava.lang.String;@27f981c6),Annotation([Ljava.lang.String;@1b11171f,[Ljava.lang.String;@1151e434,[Ledu.cmu.lti.nlp.amr.Dependency;@2dc54ad4),Annotation([Ljava.lang.String;@4659191b,[Ljava.lang.String;@55634720,[Ljava.lang.String;@4b0d79fc),Annotation([Ljava.lang.String;@4c1909a3,[Ljava.lang.String;@428640fa,[Ledu.cmu.lti.nlp.amr.Entity;@d9345cd))
AMR:


Decoded in 3,859 microseconds
Sentence: As each day passed I would learn , in our talk , something about the little prince 's planet , his departure from it , his journey .


--- Decoder1 ---

Sentence: As each day passed I would learn , in our talk , something about the little prince 's planet , his departure from it , his journey .
word = As
Finding date entities
Possible invoked concepts: List()
word = each
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(each),each,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)))
concept = PhraseConceptPair(List(each),each,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
score = 0
adding concept:PhraseConceptPair(List(each),each,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = passed
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = learn
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = our
Finding date entities
Possible invoked concepts: List()
word = talk
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(talk),talk-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(talk),talk-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(talk),talk-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = something
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)))
concept = PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
score = 0
adding concept:PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
word = about
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)), PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false)))
concept = PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
adding concept:PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
concept = PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = 's
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = his
Finding date entities
Possible invoked concepts: List()
word = departure
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(departure),depart-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(departure),depart-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(departure),depart-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = his
Finding date entities
Possible invoked concepts: List()
word = journey
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(journey),journey-01,PhraseConceptFeatures(6.0,0.0,false,false)))
concept = PhraseConceptPair(List(journey),journey-01,PhraseConceptFeatures(6.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(journey),journey-01,PhraseConceptFeatures(6.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.027516884858905237,PhraseConceptPair(List(each),each,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)),1)), Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),2)), None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),4)), None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(talk),talk-01,PhraseConceptFeatures(1.0,0.0,false,false)),10)), None, Some((0.027516884858905237,PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)),12)), Some((0.010387320494361422,PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)),13)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),15)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),16)), None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),18)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(departure),depart-01,PhraseConceptFeatures(3.0,0.0,false,false)),21)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),23)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(journey),journey-01,PhraseConceptFeatures(6.0,0.0,false,false)),26)), None)
Adding concept: journey-01
nodeIds = List(0)
concepts = List(journey-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(journey),journey-01,PhraseConceptFeatures(6.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.04869270464764677
Adding concept: depart-01
nodeIds = List(2)
concepts = List(depart-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(departure),depart-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07846628987148105
Adding concept: planet
nodeIds = List(3)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10823987509531532
Adding concept: prince
nodeIds = List(4)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.1379508395468449
Adding concept: little
nodeIds = List(5)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.16056965127847844
Adding concept: about
nodeIds = List(6)
concepts = List(about)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
feats:
bias 1.0
c|p -1.916922612182061
len 1.0

score:
0.17095697177283986
Adding concept: something
nodeIds = List(7)
concepts = List(something)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
feats:
bias 1.0
c|p -0.2231435513142097
len 1.0

score:
0.1984738566317451
Adding concept: talk-01
nodeIds = List(8)
concepts = List(talk-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(talk),talk-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.22824744185557938
Adding concept: i
nodeIds = List(9)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.25429664827380866
Adding concept: day
nodeIds = List(10)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.2738396884825516
Adding concept: each
nodeIds = List(11)
concepts = List(each)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(each),each,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
feats:
bias 1.0
c|p -0.2231435513142097
len 1.0

score:
0.3013565733414568
Decoder1 Spans:
Span 1:  about => about
Span 2:  day => day
Span 3:  departure => depart-01
Span 4:  each => each
Span 5:  I => i
Span 6:  it => it
Span 7:  journey => journey-01
Span 8:  little => little
Span 9:  planet => planet
Span 10:  prince => prince
Span 11:  something => something
Span 12:  talk => talk-01
Decoder1 feats:
bias 12.0
c|p -5.530032570154959
len 12.0

Concepts:
id = 2 concept = depart-01
id = 5 concept = little
id = 8 concept = talk-01
id = 7 concept = something
id = 1 concept = it
id = 11 concept = each
id = 4 concept = prince
id = 6 concept = about
id = 9 concept = i
id = 0 concept = journey-01
id = 10 concept = day
id = 3 concept = planet
Spans:
Span 13-14:  about => about
Span 2-3:  day => day
Span 21-22:  departure => depart-01
Span 1-2:  each => each
Span 4-5:  I => i
Span 23-24:  it => it
Span 26-27:  journey => journey-01
Span 15-16:  little => little
Span 18-19:  planet => planet
Span 16-17:  prince => prince
Span 12-13:  something => something
Span 10-11:  talk => talk-01

rootDependencyPaths = List(List(18, 3, 0), List(18, 3, 2, 1), List(18, 3, 2), List(18, 3), List(18, 3, 6, 4), List(18, 3, 6, 5), List(18, 3, 6), List(18, 7), List(18, 8), List(18, 8, 10, 9), List(18, 8, 10), List(18, 11), List(18, 12), List(18, 12, 13), List(18, 12, 13, 16, 14), List(18, 12, 13, 16, 15), List(18, 12, 13, 16), List(18, 17), List(18), List(18, 19), List(18, 21, 20), List(18, 21), List(18, 21, 22), List(18, 21, 22, 23), List(18, 24), List(18, 26, 25), List(18, 26), List(18, 27))
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 4
Node = 9
Node = 2
Node = 6
Node = 5
Node = 7
Node = 8
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -611.4329528961002
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 4
Node = 9
Node = 2
Node = 6
Node = 5
Node = 7
Node = 8
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -617.4329528961002
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 4
Node = 9
Node = 2
Node = 6
Node = 5
Node = 7
Node = 8
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -623.4329528961002
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 4
Node = 9
Node = 2
Node = 6
Node = 5
Node = 7
Node = 8
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -629.4329528961001
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 4
Node = 9
Node = 6
Node = 5
Node = 2
Node = 8
Node = 1
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -634.0928986630283
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 4
Node = 9
Node = 2
Node = 6
Node = 5
Node = 7
Node = 8
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -637.4329528961001
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 9
Node = 2
Node = 7
Node = 4
Node = 3
Node = 6
Node = 5
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -641.8307208818875
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 2
Node = 7
Node = 1
Node = 3
Node = 8
Node = 6
Node = 4
Node = 5
Node = 0
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -644.6970657720682
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 9
Node = 2
Node = 7
Node = 4
Node = 3
Node = 6
Node = 5
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -649.8307208818875
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 4
Node = 9
Node = 6
Node = 5
Node = 2
Node = 8
Node = 1
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -652.8406720053943
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 9
Node = 2
Node = 7
Node = 4
Node = 3
Node = 6
Node = 5
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -655.8307208818875
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 0
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -658.6164663621752
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 6
Node = 0
Node = 4
Node = 9
Node = 5
Node = 2
Node = 1
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -662.5993620044424
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 4
Node = 9
Node = 2
Node = 6
Node = 5
Node = 8
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -664.4011027831058
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 6
Node = 0
Node = 4
Node = 9
Node = 5
Node = 2
Node = 7
Node = 1
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -668.3789854598026
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 9
Node = 2
Node = 7
Node = 4
Node = 3
Node = 6
Node = 5
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -669.8307208818875
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 0
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -672.6164663621752
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 6
Node = 0
Node = 4
Node = 9
Node = 5
Node = 2
Node = 1
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -676.5993620044424
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 4
Node = 9
Node = 2
Node = 6
Node = 5
Node = 8
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -678.4011027831058
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 6
Node = 0
Node = 4
Node = 9
Node = 5
Node = 2
Node = 7
Node = 1
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -682.3789854598027
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 9
Node = 2
Node = 7
Node = 4
Node = 3
Node = 6
Node = 5
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -683.8307208818876
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 0
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -686.0649844801934
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 0
Node = 6
Node = 3
Node = 9
Node = 4
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -688.426423740861
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 6
Node = 0
Node = 3
Node = 4
Node = 9
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -689.7956534648265
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 9
Node = 2
Node = 4
Node = 6
Node = 5
Node = 8
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -690.0270123422716
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 6
Node = 3
Node = 4
Node = 5
Node = 2
Node = 0
Node = 1
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -691.0658734454154
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 0
Node = 6
Node = 3
Node = 9
Node = 4
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -692.426423740861
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 6
Node = 0
Node = 3
Node = 4
Node = 9
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -693.7956534648265
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 2
Node = 1
Node = 4
Node = 0
Node = 6
Node = 5
Node = 9
Node = 8
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -693.8842950741675
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 9
Node = 2
Node = 4
Node = 6
Node = 5
Node = 8
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -695.0270123422716
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 6
Node = 3
Node = 4
Node = 5
Node = 2
Node = 0
Node = 1
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -696.0658734454154
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 0
Node = 6
Node = 3
Node = 9
Node = 4
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -697.426423740861
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 8
Node = 7
Node = 6
Node = 0
Node = 3
Node = 4
Node = 9
Node = 5
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -698.7956534648265
getNodeById = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet)
getNodeById2 = Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 4 -> prince, 11 -> each, 6 -> about, 0 -> journey-01, 9 -> i, 3 -> planet, 10 -> day)
Node = 11
Node = 10
Node = 0
Node = 1
Node = 9
Node = 2
Node = 4
Node = 6
Node = 5
Node = 8
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -698.8836374874716
Langrangian relaxation converged after 34 iterations. Delta = 0.0
Node.spans:
little List()
and List()
depart-01 List()
day List()
planet List()
i List()
something List()
each List()
prince List()
talk-01 List()
learn-01 List()
journey-01 List()
we List()
pass-03 List()
clearUnalignedNodes():  removing unaligned node: Some(a) / and
clearUnalignedNodes():  removing unaligned node: Some(w) / we
OracleGraph nodes = List(little, depart-01, day, planet, i, something, each, prince, talk-01, learn-01, journey-01, pass-03)
OracleGraph triples: (d / day, mod, e / each)
(d2 / depart-01, ARG0, p3 / prince)
(d2 / depart-01, ARG1, p2 / planet)
(j / journey-01, ARG0, p3 / prince)
(l / learn-01, ARG0, i / i)
(l / learn-01, source, t / talk-01)
(l / learn-01, time, p / pass-03)
(p / pass-03, ARG1, d / day)
(p2 / planet, poss, p3 / prince)
(p3 / prince, mod, l2 / little)
(s / something, topic, p2 / planet)
rootDependencyPaths = List(List(18, 3, 0), List(18, 3, 2, 1), List(18, 3, 2), List(18, 3), List(18, 3, 6, 4), List(18, 3, 6, 5), List(18, 3, 6), List(18, 7), List(18, 8), List(18, 8, 10, 9), List(18, 8, 10), List(18, 11), List(18, 12), List(18, 12, 13), List(18, 12, 13, 16, 14), List(18, 12, 13, 16, 15), List(18, 12, 13, 16), List(18, 17), List(18), List(18, 19), List(18, 21, 20), List(18, 21), List(18, 21, 22), List(18, 21, 22, 23), List(18, 24), List(18, 26, 25), List(18, 26), List(18, 27))
Oracle Span 2-3:  day => day
Oracle Span 21-22:  departure => depart-01
Oracle Span 1-2:  each => each
Oracle Span 4-5:  I => i
Oracle Span 26-27:  journey => journey-01
Oracle Span 6-7:  learn => learn-01
Oracle Span 15-16:  little => little
Oracle Span 3-4:  passed => pass-03
Oracle Span 18-19:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 12-13:  something => something
Oracle Span 10-11:  talk => talk-01

Extra span: it => it
Extra span: about => about
Missing span: learn => learn-01
Missing span: passed => pass-03
Dependencies:
1	As	_	IN	IN	_	4	mark	_	_
2	each	_	DT	DT	_	3	det	_	_
3	day	_	NN	NN	_	4	nsubj	_	_
4	passed	_	VBD	VBD	_	19	advcl	_	_
5	I	_	PRP	PRP	_	7	nsubj	_	_
6	would	_	MD	MD	_	7	aux	_	_
7	learn	_	VB	VB	_	4	ccomp	_	_
8	,	_	,	,	_	19	punct	_	_
9	in	_	IN	IN	_	19	prep	_	_
10	our	_	PRP$	PRP$	_	11	poss	_	_
11	talk	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	19	punct	_	_
13	something	_	NN	NN	_	19	nsubj	_	_
14	about	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	pobj	_	_
18	's	_	VBZ	VBZ	_	19	cop	_	_
19	planet	_	NN	NN	_	0	root	_	_
20	,	_	,	,	_	19	punct	_	_
21	his	_	PRP$	PRP$	_	22	poss	_	_
22	departure	_	NN	NN	_	19	appos	_	_
23	from	_	IN	IN	_	22	prep	_	_
24	it	_	PRP	PRP	_	23	pobj	_	_
25	,	_	,	,	_	19	punct	_	_
26	his	_	PRP$	PRP$	_	27	poss	_	_
27	journey	_	NN	NN	_	19	appos	_	_
28	.	_	.	.	_	19	punct	_	_

Oracle:
(d / day, mod, e / each)
(d2 / depart-01, ARG0, p3 / prince)
(d2 / depart-01, ARG1, p2 / planet)
(j / journey-01, ARG0, p3 / prince)
(l / learn-01, ARG0, i / i)
(l / learn-01, source, t / talk-01)
(l / learn-01, time, p / pass-03)
(p / pass-03, ARG1, d / day)
(p2 / planet, poss, p3 / prince)
(p3 / prince, mod, l2 / little)
(s / something, topic, p2 / planet)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),journey,journey-01,false), Span(23,24,List(1),it,it,false), Span(21,22,List(2),departure,depart-01,false), Span(18,19,List(3),planet,planet,false), Span(16,17,List(4),prince,prince,false), Span(15,16,List(5),little,little,false), Span(13,14,List(6),about,about,false), Span(12,13,List(7),something,something,false), Span(10,11,List(8),talk,talk-01,false), Span(4,5,List(9),I,i,false), Span(2,3,List(10),day,day,false), Span(1,2,List(11),each,each,false)),Map(2 -> depart-01, 5 -> little, 8 -> talk-01, 7 -> something, 1 -> it, 11 -> each, 4 -> prince, 6 -> about, 9 -> i, 0 -> journey-01, 10 -> day, 3 -> planet),Map(e -> each, t -> talk-01, p2 -> prince, s -> something, j -> journey-01, d -> depart-01, p -> planet, a -> about, d2 -> day, i2 -> i, i -> it, l -> little))),[Ljava.lang.String;@2d710f1a,Annotation([Ljava.lang.String;@29215f06,[Ljava.lang.String;@59505b48,[Ljava.lang.String;@4efac082),Annotation([Ljava.lang.String;@6bd61f98,[Ljava.lang.String;@48aca48b,[Ledu.cmu.lti.nlp.amr.Dependency;@13fd2ccd),Annotation([Ljava.lang.String;@b9b00e0,[Ljava.lang.String;@506ae4d4,[Ljava.lang.String;@7d4f9aae),Annotation([Ljava.lang.String;@72e5a8e,[Ljava.lang.String;@54e1c68b,[Ledu.cmu.lti.nlp.amr.Entity;@53aac487))
AMR:
(a / about, op, p2 / prince)
(d / depart-01, ARG0, p2 / prince)
(d / depart-01, ARG1, i / it)
(d2 / day, mod, e / each)
(j / journey-01, ARG0, i2 / i)
(j / journey-01, ARG1, i / it)
(j / journey-01, ARG2, d2 / day)
(p / planet, domain, s / something)
(p2 / prince, mod, l / little)
(t / talk-01, ARG1, a / about)
(t / talk-01, ARG2, s / something)

Decoded in 333,483 microseconds
Sentence: The information would come very slowly , as it might chance to fall from his thoughts .


--- Decoder1 ---

Sentence: The information would come very slowly , as it might chance to fall from his thoughts .
word = The
Finding date entities
Possible invoked concepts: List()
word = information
Finding date entities
Possible invoked concepts: List()
word = would
Finding date entities
Possible invoked concepts: List()
word = come
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false)), PhraseConceptPair(List(come),come-03,PhraseConceptFeatures(2.0,-4.356708826689592,false,false)), PhraseConceptPair(List(come),come-04,PhraseConceptFeatures(2.0,-4.356708826689592,false,false)), PhraseConceptPair(List(come),come-09,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)), PhraseConceptPair(List(come),come-13,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)), PhraseConceptPair(List(come),come-21,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)))
concept = PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
score = 0
adding concept:PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
concept = PhraseConceptPair(List(come),come-03,PhraseConceptFeatures(2.0,-4.356708826689592,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-04,PhraseConceptFeatures(2.0,-4.356708826689592,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-09,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-13,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-21,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = slowly
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(slowly),slow,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(slowly),slow,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(slowly),slow,PhraseConceptFeatures(3.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = might
Finding date entities
Possible invoked concepts: List()
word = chance
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(chance),chance,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(chance),chance,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(chance),chance,PhraseConceptFeatures(1.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = fall
Finding date entities
Possible invoked concepts: List()
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = his
Finding date entities
Possible invoked concepts: List()
word = thoughts
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, Some((0.008481034542355673,PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),4)), Some((0.029773585223834276,PhraseConceptPair(List(slowly),slow,PhraseConceptFeatures(3.0,0.0,false,false)),5)), None, None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),8)), None, Some((0.029773585223834276,PhraseConceptPair(List(chance),chance,PhraseConceptFeatures(1.0,0.0,false,false)),10)), None, None, None, None, None, None)
Adding concept: chance
nodeIds = List(0)
concepts = List(chance)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(chance),chance,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.04869270464764677
Adding concept: slow
nodeIds = List(2)
concepts = List(slow)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(slowly),slow,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07846628987148105
Adding concept: very
nodeIds = List(3)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10823987509531532
Adding concept: come-01
nodeIds = List(4)
concepts = List(come-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
feats:
bias 1.0
c|p -2.1054170280830964
len 1.0

score:
0.11672090963767101
Decoder1 Spans:
Span 1:  chance => chance
Span 2:  come => come-01
Span 3:  it => it
Span 4:  slowly => slow
Span 5:  very => very
Decoder1 feats:
bias 5.0
c|p -3.1787115087669164
len 5.0

Concepts:
id = 2 concept = slow
id = 1 concept = it
id = 4 concept = come-01
id = 0 concept = chance
id = 3 concept = very
Spans:
Span 10-11:  chance => chance
Span 3-4:  come => come-01
Span 8-9:  it => it
Span 5-6:  slowly => slow
Span 4-5:  very => very

rootDependencyPaths = List(List(3, 1, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 5, 6), List(3, 5, 9, 7), List(3, 5, 9, 8), List(3, 5, 9), List(3, 5, 9, 10), List(3, 5, 9, 12, 11), List(3, 5, 9, 12), List(3, 5, 9, 12, 13), List(3, 5, 9, 12, 13, 15, 14), List(3, 5, 9, 12, 13, 15), List(3, 16))
getNodeById = Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very)
getNodeById2 = Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very)
getNodeById = Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very)
getNodeById2 = Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very)
Node = 4
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -204.8565255173812
getNodeById = Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very)
getNodeById2 = Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very)
Node = 4
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -206.8565255173812
getNodeById = Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very)
getNodeById2 = Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very)
Node = 4
Node = 2
Node = 0
Node = 1
Node = 3
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -208.20093803224597
Langrangian relaxation converged after 3 iterations. Delta = 0.0
Node.spans:
thing List()
slow List()
he List()
think-01 List()
very List()
information List()
come-01 List()
possible List()
fall-01 List()
clearUnalignedNodes():  removing unaligned node: Some(t) / thing
clearUnalignedNodes():  removing unaligned node: Some(h) / he
clearUnalignedNodes():  removing unaligned node: Some(t2) / think-01
clearUnalignedNodes():  removing unaligned node: Some(p) / possible
OracleGraph nodes = List(slow, very, information, come-01, fall-01)
OracleGraph triples: (c / come-01, ARG1, i / information)
(c / come-01, manner, s / slow)
(c / come-01, time, f / fall-01)
(f / fall-01, ARG1, i / information)
(s / slow, degree, v / very)
rootDependencyPaths = List(List(3, 1, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 5, 6), List(3, 5, 9, 7), List(3, 5, 9, 8), List(3, 5, 9), List(3, 5, 9, 10), List(3, 5, 9, 12, 11), List(3, 5, 9, 12), List(3, 5, 9, 12, 13), List(3, 5, 9, 12, 13, 15, 14), List(3, 5, 9, 12, 13, 15), List(3, 16))
Oracle Span 3-4:  come => come-01
Oracle Span 12-13:  fall => fall-01
Oracle Span 1-2:  information => information
Oracle Span 5-6:  slowly => slow
Oracle Span 4-5:  very => very

Extra span: chance => chance
Extra span: it => it
Missing span: fall => fall-01
Missing span: information => information
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	information	_	NN	NN	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	come	_	VB	VB	_	0	root	_	_
5	very	_	RB	RB	_	6	advmod	_	_
6	slowly	_	RB	RB	_	4	advmod	_	_
7	,	_	,	,	_	6	punct	_	_
8	as	_	IN	IN	_	10	mark	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	might	_	MD	MD	_	6	ccomp	_	_
11	chance	_	NN	NN	_	10	dobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	fall	_	VB	VB	_	10	xcomp	_	_
14	from	_	IN	IN	_	13	prep	_	_
15	his	_	PRP$	PRP$	_	16	poss	_	_
16	thoughts	_	NNS	NNS	_	14	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(c / come-01, ARG1, i / information)
(c / come-01, manner, s / slow)
(c / come-01, time, f / fall-01)
(f / fall-01, ARG1, i / information)
(s / slow, degree, v / very)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),chance,chance,false), Span(8,9,List(1),it,it,false), Span(5,6,List(2),slowly,slow,false), Span(4,5,List(3),very,very,false), Span(3,4,List(4),come,come-01,false)),Map(2 -> slow, 1 -> it, 4 -> come-01, 0 -> chance, 3 -> very),Map(s -> slow, v -> very, i -> it, c -> chance, c2 -> come-01))),[Ljava.lang.String;@52b1beb6,Annotation([Ljava.lang.String;@273e7444,[Ljava.lang.String;@7db12bb6,[Ljava.lang.String;@783a467b),Annotation([Ljava.lang.String;@272113c4,[Ljava.lang.String;@73e9cf30,[Ledu.cmu.lti.nlp.amr.Dependency;@771a660),Annotation([Ljava.lang.String;@2d52216b,[Ljava.lang.String;@242b836,[Ljava.lang.String;@3f6f6701),Annotation([Ljava.lang.String;@3527942a,[Ljava.lang.String;@942a29c,[Ledu.cmu.lti.nlp.amr.Entity;@1ed6388a))
AMR:
(c2 / come-01, ARG0, i / it)
(c2 / come-01, ARG1, c / chance)
(c2 / come-01, manner, s / slow)
(s / slow, degree, v / very)

Decoded in 41,278 microseconds
Sentence: It was in this way that I heard , on the third day , about the catastrophe of the baobabs .


--- Decoder1 ---

Sentence: It was in this way that I heard , on the third day , about the catastrophe of the baobabs .
word = It
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)))
concept = PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
score = 0
adding concept:PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = way
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(way),way,PhraseConceptFeatures(6.0,-0.40546510810816444,false,false)))
concept = PhraseConceptPair(List(way),way,PhraseConceptFeatures(6.0,-0.40546510810816444,false,false))
score = 0
adding concept:PhraseConceptPair(List(way),way,PhraseConceptFeatures(6.0,-0.40546510810816444,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = heard
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(heard),hear-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(heard),hear-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(heard),hear-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = third
Finding date entities
Possible invoked concepts: List()
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = about
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)), PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false)))
concept = PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
adding concept:PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
concept = PhraseConceptPair(List(about),about-to,PhraseConceptFeatures(3.0,-2.4277482359480516,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = catastrophe
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.023495028556213052,PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)),0)), None, None, Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),3)), Some((0.025673026403986283,PhraseConceptPair(List(way),way,PhraseConceptFeatures(6.0,-0.40546510810816444,false,false)),4)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),5)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),6)), Some((0.029773585223834276,PhraseConceptPair(List(heard),hear-01,PhraseConceptFeatures(2.0,0.0,false,false)),7)), None, None, None, None, Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),12)), None, Some((0.010387320494361422,PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)),14)), None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),19)), None)
Adding concept: baobab
nodeIds = List(0)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: about
nodeIds = List(1)
concepts = List(about)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(about),about,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
feats:
bias 1.0
c|p -1.916922612182061
len 1.0

score:
0.040160905718195694
Adding concept: day
nodeIds = List(2)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.059703945926938604
Adding concept: hear-01
nodeIds = List(3)
concepts = List(hear-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(heard),hear-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08947753115077288
Adding concept: i
nodeIds = List(4)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.11552673756900214
Adding concept: that
nodeIds = List(5)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.13214454595821792
Adding concept: way
nodeIds = List(6)
concepts = List(way)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(way),way,PhraseConceptFeatures(6.0,-0.40546510810816444,false,false))
feats:
bias 1.0
c|p -0.40546510810816444
len 1.0

score:
0.1578175723622042
Adding concept: this
nodeIds = List(7)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.18627016662935778
Adding concept: it
nodeIds = List(8)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
feats:
bias 1.0
c|p -0.6208265189803193
len 1.0

score:
0.20976519518557082
Decoder1 Spans:
Span 1:  about => about
Span 2:  baobabs => baobab
Span 3:  day => day
Span 4:  heard => hear-01
Span 5:  I => i
Span 6:  It => it
Span 7:  that => that
Span 8:  this => this
Span 9:  way => way
Decoder1 feats:
bias 9.0
c|p -5.754552746928659
len 9.0

Concepts:
id = 2 concept = day
id = 5 concept = that
id = 8 concept = it
id = 7 concept = this
id = 1 concept = about
id = 4 concept = i
id = 6 concept = way
id = 0 concept = baobab
id = 3 concept = hear-01
Spans:
Span 14-15:  about => about
Span 19-20:  baobabs => baobab
Span 12-13:  day => day
Span 7-8:  heard => hear-01
Span 6-7:  I => i
Span 0-1:  It => it
Span 5-6:  that => that
Span 3-4:  this => this
Span 4-5:  way => way

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 4, 3), List(1, 2, 4), List(1, 7, 5), List(1, 7, 6), List(1, 7), List(1, 7, 8), List(1, 7, 9), List(1, 7, 9, 12, 10), List(1, 7, 9, 12, 11), List(1, 7, 9, 12), List(1, 7, 13), List(1, 7, 14), List(1, 7, 14, 16, 15), List(1, 7, 14, 16), List(1, 7, 14, 16, 17), List(1, 7, 14, 16, 17, 19, 18), List(1, 7, 14, 16, 17, 19), List(1, 20))
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 7
Node = 1
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -230.47390625092262
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 7
Node = 1
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -238.47390625092262
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 7
Node = 1
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -246.47390625092262
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 7
Node = 1
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -254.4651212136345
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 7
Node = 1
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -258.46512121363446
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -262.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -264.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -266.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -268.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -270.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -272.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -274.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -276.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -278.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -280.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -282.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -284.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -286.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -288.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -290.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -292.0146786204684
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -293.19715972718654
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 1
Node = 7
Node = 8
Node = 4
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -295.0146786204684
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 6
Node = 0
Node = 1
Node = 8
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -295.23190932487
getNodeById = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
getNodeById2 = Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01)
Node = 3
Node = 2
Node = 5
Node = 6
Node = 0
Node = 1
Node = 8
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -297.0494282181519
Langrangian relaxation converged after 25 iterations. Delta = 0.0
Node.spans:
3 List()
catastrophe List()
baobab List()
i List()
day List()
hear-01 List()
ordinal-entity List()
this List()
clearUnalignedNodes():  removing unaligned node: None / 3
clearUnalignedNodes():  removing unaligned node: Some(o) / ordinal-entity
OracleGraph nodes = List(catastrophe, baobab, i, day, hear-01, this)
OracleGraph triples: (c / catastrophe, poss, b / baobab)
(h / hear-01, ARG0, i / i)
(h / hear-01, ARG1, c / catastrophe)
(h / hear-01, manner, t / this)
(h / hear-01, time, d / day)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 4, 3), List(1, 2, 4), List(1, 7, 5), List(1, 7, 6), List(1, 7), List(1, 7, 8), List(1, 7, 9), List(1, 7, 9, 12, 10), List(1, 7, 9, 12, 11), List(1, 7, 9, 12), List(1, 7, 13), List(1, 7, 14), List(1, 7, 14, 16, 15), List(1, 7, 14, 16), List(1, 7, 14, 16, 17), List(1, 7, 14, 16, 17, 19, 18), List(1, 7, 14, 16, 17, 19), List(1, 20))
Oracle Span 19-20:  baobabs => baobab
Oracle Span 16-17:  catastrophe => catastrophe
Oracle Span 12-13:  day => day
Oracle Span 7-8:  heard => hear-01
Oracle Span 6-7:  I => i
Oracle Span 3-4:  this => this

Extra span: about => about
Extra span: that => that
Extra span: way => way
Extra span: It => it
Missing span: catastrophe => catastrophe
Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	was	_	VBD	VBD	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	this	_	DT	DT	_	5	det	_	_
5	way	_	NN	NN	_	3	pobj	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	heard	_	VBD	VBD	_	2	ccomp	_	_
9	,	_	,	,	_	8	punct	_	_
10	on	_	IN	IN	_	8	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	third	_	JJ	JJ	_	13	amod	_	_
13	day	_	NN	NN	_	10	pobj	_	_
14	,	_	,	,	_	8	punct	_	_
15	about	_	IN	IN	_	8	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	catastrophe	_	NN	NN	_	15	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	baobabs	_	NNS	NNS	_	18	pobj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(c / catastrophe, poss, b / baobab)
(h / hear-01, ARG0, i / i)
(h / hear-01, ARG1, c / catastrophe)
(h / hear-01, manner, t / this)
(h / hear-01, time, d / day)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),baobabs,baobab,false), Span(14,15,List(1),about,about,false), Span(12,13,List(2),day,day,false), Span(7,8,List(3),heard,hear-01,false), Span(6,7,List(4),I,i,false), Span(5,6,List(5),that,that,false), Span(4,5,List(6),way,way,false), Span(3,4,List(7),this,this,false), Span(0,1,List(8),It,it,false)),Map(2 -> day, 5 -> that, 8 -> it, 7 -> this, 1 -> about, 4 -> i, 6 -> way, 0 -> baobab, 3 -> hear-01),Map(w -> way, h -> hear-01, t -> that, b -> baobab, d -> day, a -> about, i2 -> it, t2 -> this, i -> i))),[Ljava.lang.String;@5a45133e,Annotation([Ljava.lang.String;@534a5a98,[Ljava.lang.String;@4f80542f,[Ljava.lang.String;@60bd273d),Annotation([Ljava.lang.String;@121314f7,[Ljava.lang.String;@130c12b7,[Ledu.cmu.lti.nlp.amr.Dependency;@5e600dd5),Annotation([Ljava.lang.String;@576d5deb,[Ljava.lang.String;@5d534f5d,[Ljava.lang.String;@2e3967ea),Annotation([Ljava.lang.String;@70e9c95d,[Ljava.lang.String;@4d5650ae,[Ledu.cmu.lti.nlp.amr.Entity;@a38c7fe))
AMR:
(h / hear-01, ARG0, i / i)
(h / hear-01, ARG1, i2 / it)
(h / hear-01, location, a / about)
(h / hear-01, location, b / baobab)
(h / hear-01, time, d / day)
(t / that, op, h / hear-01)
(w / way, mod, t2 / this)
(w / way, op, h / hear-01)

Decoded in 167,101 microseconds
Sentence: This time , once more , I had the sheep to thank for it .


--- Decoder1 ---

Sentence: This time , once more , I had the sheep to thank for it .
word = This
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false)))
concept = PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false))
word = time
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)), PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false)))
concept = PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
score = 0
adding concept:PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
concept = PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = once
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false)), PhraseConceptPair(List(once),once-more,PhraseConceptFeatures(1.0,-3.258096538021482,false,false)))
concept = PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
score = 0
adding concept:PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
concept = PhraseConceptPair(List(once),once-more,PhraseConceptFeatures(1.0,-3.258096538021482,false,false))
score = 0
word = more
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false)))
concept = PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false))
score = 0
adding concept:PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = had
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false)), PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false)))
concept = PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = thank
Finding date entities
Possible invoked concepts: List()
word = for
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false)),0)), Some((0.017491641887458505,PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)),1)), None, Some((0.013100333856746589,PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false)),3)), Some((0.02648251610939313,PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false)),4)), None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),6)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),9)), None, None, None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),13)), None)
Adding concept: it
nodeIds = List(0)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.018919119423812497
Adding concept: sheep
nodeIds = List(1)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.04869270464764677
Adding concept: i
nodeIds = List(2)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.07474191106587603
Adding concept: more
nodeIds = List(3)
concepts = List(more)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(more),more,PhraseConceptFeatures(26.0,-0.325422400434628,false,false))
feats:
bias 1.0
c|p -0.325422400434628
len 1.0

score:
0.10122442717526917
Adding concept: once
nodeIds = List(4)
concepts = List(once)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
feats:
bias 1.0
c|p -1.6486586255873816
len 1.0

score:
0.11432476103201575
Adding concept: time
nodeIds = List(5)
concepts = List(time)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
feats:
bias 1.0
c|p -1.2144441041932315
len 1.0

score:
0.13181640291947425
Adding concept: this
nodeIds = List(6)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(This),this,PhraseConceptFeatures(14.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.16158998814330852
Decoder1 Spans:
Span 1:  I => i
Span 2:  it => it
Span 3:  more => more
Span 4:  once => once
Span 5:  sheep => sheep
Span 6:  This => this
Span 7:  time => time
Decoder1 feats:
bias 7.0
c|p -4.630087869298625
len 7.0

Concepts:
id = 2 concept = i
id = 5 concept = time
id = 1 concept = sheep
id = 4 concept = once
id = 6 concept = this
id = 0 concept = it
id = 3 concept = more
Spans:
Span 6-7:  I => i
Span 13-14:  it => it
Span 4-5:  more => more
Span 3-4:  once => once
Span 9-10:  sheep => sheep
Span 0-1:  This => this
Span 1-2:  time => time

rootDependencyPaths = List(List(7, 1, 0), List(7, 1), List(7, 2), List(7, 4, 3), List(7, 4), List(7, 5), List(7, 6), List(7), List(7, 9, 8), List(7, 9), List(7, 9, 11, 10), List(7, 9, 11), List(7, 9, 11, 12), List(7, 9, 11, 12, 13), List(7, 14))
getNodeById = Map(2 -> i, 5 -> time, 1 -> sheep, 4 -> once, 6 -> this, 0 -> it, 3 -> more)
getNodeById2 = Map(2 -> i, 5 -> time, 1 -> sheep, 4 -> once, 6 -> this, 0 -> it, 3 -> more)
getNodeById = Map(2 -> i, 5 -> time, 1 -> sheep, 4 -> once, 6 -> this, 0 -> it, 3 -> more)
getNodeById2 = Map(2 -> i, 5 -> time, 1 -> sheep, 4 -> once, 6 -> this, 0 -> it, 3 -> more)
Node = 4
Node = 0
Node = 3
Node = 5
Node = 1
Node = 6
Node = 2
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -410.1479630394912
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
i List()
time List()
it List()
this List()
sheep List()
thank-01 List()
obligate-01 List()
again List()
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
clearUnalignedNodes():  removing unaligned node: Some(a) / again
OracleGraph nodes = List(i, time, it, this, sheep, thank-01)
OracleGraph triples: (t / thank-01, ARG0, i / i)
(t / thank-01, ARG1, s / sheep)
(t / thank-01, ARG2, i2 / it)
(t2 / time, mod, t3 / this)
rootDependencyPaths = List(List(7, 1, 0), List(7, 1), List(7, 2), List(7, 4, 3), List(7, 4), List(7, 5), List(7, 6), List(7), List(7, 9, 8), List(7, 9), List(7, 9, 11, 10), List(7, 9, 11), List(7, 9, 11, 12), List(7, 9, 11, 12, 13), List(7, 14))
Oracle Span 6-7:  I => i
Oracle Span 13-14:  it => it
Oracle Span 9-10:  sheep => sheep
Oracle Span 11-12:  thank => thank-01
Oracle Span 0-1:  This => this
Oracle Span 1-2:  time => time

Extra span: more => more
Extra span: once => once
Missing span: thank => thank-01
Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	time	_	NN	NN	_	8	nsubj	_	_
3	,	_	,	,	_	8	punct	_	_
4	once	_	RB	RB	_	5	advmod	_	_
5	more	_	RBR	RBR	_	8	advmod	_	_
6	,	_	,	,	_	8	punct	_	_
7	I	_	PRP	PRP	_	8	nsubj	_	_
8	had	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	10	det	_	_
10	sheep	_	NN	NN	_	8	dobj	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	thank	_	VB	VB	_	10	vmod	_	_
13	for	_	IN	IN	_	12	prep	_	_
14	it	_	PRP	PRP	_	13	pobj	_	_
15	.	_	.	.	_	8	punct	_	_

Oracle:
(t / thank-01, ARG0, i / i)
(t / thank-01, ARG1, s / sheep)
(t / thank-01, ARG2, i2 / it)
(t2 / time, mod, t3 / this)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),it,it,false), Span(9,10,List(1),sheep,sheep,false), Span(6,7,List(2),I,i,false), Span(4,5,List(3),more,more,false), Span(3,4,List(4),once,once,false), Span(1,2,List(5),time,time,false), Span(0,1,List(6),This,this,false)),Map(2 -> i, 5 -> time, 1 -> sheep, 4 -> once, 6 -> this, 0 -> it, 3 -> more),Map(t -> time, s -> sheep, m -> more, t2 -> this, i2 -> i, i -> it, o -> once))),[Ljava.lang.String;@6fdbe764,Annotation([Ljava.lang.String;@51c668e3,[Ljava.lang.String;@2e6a8155,[Ljava.lang.String;@6221a451),Annotation([Ljava.lang.String;@52719fb6,[Ljava.lang.String;@3012646b,[Ledu.cmu.lti.nlp.amr.Dependency;@4a883b15),Annotation([Ljava.lang.String;@25641d39,[Ljava.lang.String;@7b36aa0c,[Ljava.lang.String;@5824a83d),Annotation([Ljava.lang.String;@537f60bf,[Ljava.lang.String;@5677323c,[Ledu.cmu.lti.nlp.amr.Entity;@18df8434))
AMR:
(i / it, poss, o / once)
(i2 / i, part, s / sheep)
(m / more, domain, t / time)
(o / once, mod, m / more)
(t / time, mod, t2 / this)
(t / time, part, s / sheep)

Decoded in 27,456 microseconds
Sentence: For the little prince asked me abruptly -- as if seized by a grave doubt -- " It is true , is n't it , that sheep eat little bushes ? "


--- Decoder1 ---

Sentence: For the little prince asked me abruptly -- as if seized by a grave doubt -- " It is true , is n't it , that sheep eat little bushes ? "
word = For
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = asked
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false)))
concept = PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false))
word = me
Finding date entities
Possible invoked concepts: List()
word = abruptly
Finding date entities
Possible invoked concepts: List()
word = --
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = if
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)))
concept = PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
score = 0
adding concept:PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
word = seized
Finding date entities
Possible invoked concepts: List()
word = by
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)))
concept = PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
score = 0
adding concept:PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = grave
Finding date entities
Possible invoked concepts: List()
word = doubt
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(doubt),doubt-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(doubt),doubt-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(doubt),doubt-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = --
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = It
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)))
concept = PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
score = 0
adding concept:PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = true
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false)))
concept = PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
score = 0
adding concept:PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = is
Finding date entities
Possible invoked concepts: List()
word = n't
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = eat
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = bushes
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),2)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false)),4)), None, None, None, None, Some((0.003833681888436611,PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)),9)), None, Some((0.008432529785513981,PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)),11)), None, None, Some((0.022763633620453336,PhraseConceptPair(List(doubt),doubt-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),14)), None, None, Some((0.023495028556213052,PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)),17)), None, Some((0.028214625113307072,PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false)),19)), None, None, None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),23)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),25)), Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),26)), Some((0.029773585223834276,PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)),27)), Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),28)), Some((0.029773585223834276,PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false)),29)), None, None)
Adding concept: bush
nodeIds = List(0)
concepts = List(bush)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: little
nodeIds = List(1)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.052392396955467824
Adding concept: eat-01
nodeIds = List(2)
concepts = List(eat-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0821659821793021
Adding concept: sheep
nodeIds = List(3)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11193956740313638
Adding concept: that
nodeIds = List(4)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.12855737579235216
Adding concept: it
nodeIds = List(5)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.14747649521616465
Adding concept: true
nodeIds = List(6)
concepts = List(true)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
feats:
bias 1.0
c|p -0.15415067982725836
len 1.0

score:
0.17569112032947173
Adding concept: it
nodeIds = List(7)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
feats:
bias 1.0
c|p -0.6208265189803193
len 1.0

score:
0.19918614888568478
Adding concept: doubt-01
nodeIds = List(8)
concepts = List(doubt-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(doubt),doubt-01,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.22194978250613812
Adding concept: by
nodeIds = List(9)
concepts = List(by)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
feats:
bias 1.0
c|p -2.1102132003465894
len 1.0

score:
0.2303823122916521
Adding concept: cause-01
nodeIds = List(10)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
feats:
bias 1.0
c|p -2.5649493574615367
len 1.0

score:
0.2342159941800887
Adding concept: ask-01
nodeIds = List(11)
concepts = List(ask-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.263989579403923
Adding concept: prince
nodeIds = List(12)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.2937005438554525
Adding concept: little
nodeIds = List(13)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.31631935558708607
Decoder1 Spans:
Span 1:  asked => ask-01
Span 2:  bushes => bush
Span 3:  by => by
Span 4:  doubt => doubt-01
Span 5:  eat => eat-01
Span 6:  if => cause-01
Span 7:  it => it
Span 8:  It => it
Span 9:  little => little
Span 10:  little => little
Span 11:  prince => prince
Span 12:  sheep => sheep
Span 13:  that => that
Span 14:  true => true
Decoder1 feats:
bias 14.0
c|p -9.938557011939782
len 14.0

Concepts:
id = 2 concept = eat-01
id = 5 concept = it
id = 12 concept = prince
id = 8 concept = doubt-01
id = 7 concept = it
id = 1 concept = little
id = 4 concept = that
id = 11 concept = ask-01
id = 6 concept = true
id = 0 concept = bush
id = 9 concept = by
id = 3 concept = sheep
id = 10 concept = cause-01
id = 13 concept = little
Spans:
Span 4-5:  asked => ask-01
Span 29-30:  bushes => bush
Span 11-12:  by => by
Span 14-15:  doubt => doubt-01
Span 27-28:  eat => eat-01
Span 9-10:  if => cause-01
Span 23-24:  it => it
Span 17-18:  It => it
Span 28-29:  little => little
Span 2-3:  little => little
Span 3-4:  prince => prince
Span 26-27:  sheep => sheep
Span 25-26:  that => that
Span 19-20:  true => true

rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 5), List(4, 6), List(4, 6, 7), List(4, 6, 8), List(4, 6, 8, 10, 9), List(4, 6, 8, 10), List(4, 6, 8, 10, 11), List(4, 6, 8, 10, 11, 14, 12), List(4, 6, 8, 10, 11, 14, 13), List(4, 6, 8, 10, 11, 14), List(4, 15), List(4, 16), List(4, 19, 17), List(4, 19, 18), List(4, 19), List(4, 19, 20), List(4, 19, 23, 21), List(4, 19, 23, 22), List(4, 19, 23), List(4, 19, 24), List(4, 19, 27, 25), List(4, 19, 27, 26), List(4, 19, 27), List(4, 19, 27, 29, 28), List(4, 19, 27, 29), List(4, 30), List(4, 31))
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -229.43132409015644
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -237.43132409015644
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -245.4313240901564
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -253.43132409015647
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -261.43132409015647
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -269.43132409015647
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -277.43132409015647
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -285.43132409015647
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -293.43132409015647
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -299.5383987388251
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -303.5383987388251
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -307.5383987388251
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -311.5383987388251
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 0
Node = 3
Node = 4
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -314.3827974384856
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -317.5383987388251
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 0
Node = 3
Node = 4
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -320.3827974384856
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 0
Node = 4
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -323.5383987388251
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -325.94487079864507
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -327.2574618299018
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 5
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -328.61703620949595
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -329.94487079864507
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -331.2574618299018
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 5
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -332.61703620949595
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -333.94487079864507
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -335.2574618299018
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 5
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -336.61703620949595
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 4
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -337.9198799608528
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 0
Node = 4
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -338.8662333279742
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -341.2574618299018
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 5
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -342.61703620949595
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 4
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -343.9198799608528
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 0
Node = 4
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -344.8662333279742
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -347.2574618299018
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 5
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -348.3689634197424
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 5
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -349.61703620949595
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 4
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -350.9198799608528
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 0
Node = 4
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -351.8662333279742
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -354.2574618299018
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 5
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -355.3689634197424
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 5
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -356.61703620949595
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 4
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -357.9198799608528
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 0
Node = 4
Node = 3
Node = 5
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -358.8662333279742
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 12
Node = 5
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -360.7031397702509
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 5
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -361.8146413600915
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 5
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -363.0627141498451
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 5
Node = 4
Node = 0
Node = 3
Node = 12
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -364.36555790120195
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 0
Node = 4
Node = 3
Node = 12
Node = 5
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -365.31191126832334
getNodeById = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
getNodeById2 = Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little)
Node = 10
Node = 9
Node = 8
Node = 7
Node = 6
Node = 2
Node = 11
Node = 4
Node = 0
Node = 3
Node = 12
Node = 5
Node = 1
Node = 13
visited = Set(3, 4, 5, 13, 6, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -366.3905487389942
Langrangian relaxation converged after 48 iterations. Delta = 0.0
Node.spans:
little List()
sheep List()
true List()
eat-01 List()
grave List()
seize-01 List()
prince List()
interrogative List()
little List()
abrupt List()
doubt-01 List()
ask-01 List()
bush List()
i List()
clearUnalignedNodes():  removing unaligned node: None / interrogative
clearUnalignedNodes():  removing unaligned node: Some(i2) / i
OracleGraph nodes = List(little, sheep, true, eat-01, grave, seize-01, prince, little, abrupt, doubt-01, ask-01, bush)
OracleGraph triples: (a / ask-01, ARG0, p / prince)
(a / ask-01, ARG1, t / true)
(a / ask-01, conj-as-if, s2 / seize-01)
(a / ask-01, manner, a2 / abrupt)
(b / bush, mod, l / little)
(d / doubt-01, ARG0, p / prince)
(d / doubt-01, mod, g / grave)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(p / prince, mod, l2 / little)
(s2 / seize-01, ARG0, d / doubt-01)
(s2 / seize-01, ARG1, p / prince)
(t / true, domain, e / eat-01)
rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 5), List(4, 6), List(4, 6, 7), List(4, 6, 8), List(4, 6, 8, 10, 9), List(4, 6, 8, 10), List(4, 6, 8, 10, 11), List(4, 6, 8, 10, 11, 14, 12), List(4, 6, 8, 10, 11, 14, 13), List(4, 6, 8, 10, 11, 14), List(4, 15), List(4, 16), List(4, 19, 17), List(4, 19, 18), List(4, 19), List(4, 19, 20), List(4, 19, 23, 21), List(4, 19, 23, 22), List(4, 19, 23), List(4, 19, 24), List(4, 19, 27, 25), List(4, 19, 27, 26), List(4, 19, 27), List(4, 19, 27, 29, 28), List(4, 19, 27, 29), List(4, 30), List(4, 31))
************* WARNING: Cannot find label = :conj-as-if in the labelset ***************
Oracle Span 6-7:  abruptly => abrupt
Oracle Span 4-5:  asked => ask-01
Oracle Span 29-30:  bushes => bush
Oracle Span 14-15:  doubt => doubt-01
Oracle Span 27-28:  eat => eat-01
Oracle Span 13-14:  grave => grave
Oracle Span 2-3:  little => little
Oracle Span 28-29:  little => little
Oracle Span 3-4:  prince => prince
Oracle Span 10-11:  seized => seize-01
Oracle Span 26-27:  sheep => sheep
Oracle Span 19-20:  true => true

Extra span: that => that
Extra span: it => it
Extra span: It => it
Extra span: by => by
Extra span: if => cause-01
Missing span: seized => seize-01
Missing span: grave => grave
Missing span: abruptly => abrupt
Dependencies:
1	For	_	IN	IN	_	5	dep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	asked	_	VBD	VBD	_	0	root	_	_
6	me	_	PRP	PRP	_	5	dobj	_	_
7	abruptly	_	RB	RB	_	5	advmod	_	_
8	--	_	:	:	_	7	punct	_	_
9	as	_	RB	RB	_	7	advmod	_	_
10	if	_	IN	IN	_	11	mark	_	_
11	seized	_	VBN	VBN	_	9	dep	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	grave	_	JJ	JJ	_	15	amod	_	_
15	doubt	_	NN	NN	_	12	pobj	_	_
16	--	_	:	:	_	5	punct	_	_
17	"	_	''	''	_	5	punct	_	_
18	It	_	PRP	PRP	_	20	nsubj	_	_
19	is	_	VBZ	VBZ	_	20	cop	_	_
20	true	_	JJ	JJ	_	5	ccomp	_	_
21	,	_	,	,	_	20	punct	_	_
22	is	_	VBZ	VBZ	_	24	cop	_	_
23	n't	_	RB	RB	_	24	neg	_	_
24	it	_	PRP	PRP	_	20	dep	_	_
25	,	_	,	,	_	20	punct	_	_
26	that	_	IN	IN	_	28	mark	_	_
27	sheep	_	NN	NN	_	28	nsubj	_	_
28	eat	_	VBP	VBP	_	20	ccomp	_	_
29	little	_	JJ	JJ	_	30	amod	_	_
30	bushes	_	NNS	NNS	_	28	dobj	_	_
31	?	_	.	.	_	5	punct	_	_
32	"	_	''	''	_	5	punct	_	_

Oracle:
(a / ask-01, ARG0, p / prince)
(a / ask-01, ARG1, t / true)
(a / ask-01, conj-as-if, s2 / seize-01)
(a / ask-01, manner, a2 / abrupt)
(b / bush, mod, l / little)
(d / doubt-01, ARG0, p / prince)
(d / doubt-01, mod, g / grave)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(p / prince, mod, l2 / little)
(s2 / seize-01, ARG0, d / doubt-01)
(s2 / seize-01, ARG1, p / prince)
(t / true, domain, e / eat-01)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),bushes,bush,false), Span(28,29,List(1),little,little,false), Span(27,28,List(2),eat,eat-01,false), Span(26,27,List(3),sheep,sheep,false), Span(25,26,List(4),that,that,false), Span(23,24,List(5),it,it,false), Span(19,20,List(6),true,true,false), Span(17,18,List(7),It,it,false), Span(14,15,List(8),doubt,doubt-01,false), Span(11,12,List(9),by,by,false), Span(9,10,List(10),if,cause-01,false), Span(4,5,List(11),asked,ask-01,false), Span(3,4,List(12),prince,prince,false), Span(2,3,List(13),little,little,false)),Map(2 -> eat-01, 5 -> it, 12 -> prince, 8 -> doubt-01, 7 -> it, 1 -> little, 4 -> that, 11 -> ask-01, 6 -> true, 0 -> bush, 9 -> by, 3 -> sheep, 10 -> cause-01, 13 -> little),Map(e -> eat-01, b -> bush, t -> that, b2 -> by, s -> sheep, d -> doubt-01, p -> prince, a -> ask-01, t2 -> true, i2 -> it, l2 -> little, i -> it, c -> cause-01, l -> little))),[Ljava.lang.String;@229c6181,Annotation([Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072,[Ljava.lang.String;@791f145a),Annotation([Ljava.lang.String;@38cee291,[Ljava.lang.String;@4b45a2f5,[Ledu.cmu.lti.nlp.amr.Dependency;@f09733f),Annotation([Ljava.lang.String;@e350b40,[Ljava.lang.String;@41a0aa7d,[Ljava.lang.String;@2794eab6),Annotation([Ljava.lang.String;@6340e5f0,[Ljava.lang.String;@45099dd3,[Ledu.cmu.lti.nlp.amr.Entity;@13e344d))
AMR:
(a / ask-01, ARG0, i / it)
(a / ask-01, ARG1, t2 / true)
(a / ask-01, ARG2, p / prince)
(b / bush, mod, l / little)
(b2 / by, op, d / doubt-01)
(c / cause-01, ARG1, b2 / by)
(d / doubt-01, ARG0, i2 / it)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(e / eat-01, ARG2, t / that)
(p / prince, mod, l2 / little)
(t2 / true, domain, i2 / it)
(t2 / true, mod, e / eat-01)

Decoded in 525,917 microseconds
Sentence: " Yes , that is true . "


--- Decoder1 ---

Sentence: " Yes , that is true . "
word = "
Finding date entities
Possible invoked concepts: List()
word = Yes
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Yes),yes,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false)))
concept = PhraseConceptPair(List(Yes),yes,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false))
score = 0
adding concept:PhraseConceptPair(List(Yes),yes,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = true
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false)))
concept = PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
score = 0
adding concept:PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.021698099291839343,PhraseConceptPair(List(Yes),yes,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false)),1)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),3)), None, Some((0.028214625113307072,PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false)),5)), None, None)
Adding concept: true
nodeIds = List(0)
concepts = List(true)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(true),true,PhraseConceptFeatures(6.0,-0.15415067982725836,false,false))
feats:
bias 1.0
c|p -0.15415067982725836
len 1.0

score:
0.02821462511330708
Adding concept: that
nodeIds = List(1)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.04483243350252286
Adding concept: yes
nodeIds = List(2)
concepts = List(yes)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Yes),yes,PhraseConceptFeatures(9.0,-0.7985076962177716,false,false))
feats:
bias 1.0
c|p -0.7985076962177716
len 1.0

score:
0.0665305327943622
Decoder1 Spans:
Span 1:  that => that
Span 2:  true => true
Span 3:  Yes => yes
Decoder1 feats:
bias 3.0
c|p -2.2535075312080357
len 3.0

Concepts:
id = 2 concept = yes
id = 1 concept = that
id = 0 concept = true
Spans:
Span 3-4:  that => that
Span 5-6:  true => true
Span 1-2:  Yes => yes

rootDependencyPaths = List(List(5, 0), List(5, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 7))
getNodeById = Map(2 -> yes, 1 -> that, 0 -> true)
getNodeById2 = Map(2 -> yes, 1 -> that, 0 -> true)
getNodeById = Map(2 -> yes, 1 -> that, 0 -> true)
getNodeById2 = Map(2 -> yes, 1 -> that, 0 -> true)
Node = 0
Node = 1
Node = 2
visited = Set(0, 1, 2)
Alg2 returning score = -81.19173284549584
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
that List()
true List()
OracleGraph nodes = List(that, true)
OracleGraph triples: (t / true, domain, t2 / that)
rootDependencyPaths = List(List(5, 0), List(5, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 7))
Oracle Span 3-4:  that => that
Oracle Span 5-6:  true => true

Extra span: Yes => yes
Dependencies:
1	"	_	''	''	_	6	punct	_	_
2	Yes	_	RB	RB	_	6	advmod	_	_
3	,	_	,	,	_	6	punct	_	_
4	that	_	DT	DT	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	true	_	JJ	JJ	_	0	root	_	_
7	.	_	.	.	_	6	punct	_	_
8	"	_	''	''	_	6	punct	_	_

Oracle:
(t / true, domain, t2 / that)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),true,true,false), Span(3,4,List(1),that,that,false), Span(1,2,List(2),Yes,yes,false)),Map(2 -> yes, 1 -> that, 0 -> true),Map(t -> true, y -> yes, t2 -> that))),[Ljava.lang.String;@1ffaf86,Annotation([Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54,[Ljava.lang.String;@1c7696c6),Annotation([Ljava.lang.String;@60099951,[Ljava.lang.String;@20140db9,[Ledu.cmu.lti.nlp.amr.Dependency;@1e6a3214),Annotation([Ljava.lang.String;@368247b9,[Ljava.lang.String;@1a6d8329,[Ljava.lang.String;@1a942c18),Annotation([Ljava.lang.String;@55a147cc,[Ljava.lang.String;@71ba6d4e,[Ledu.cmu.lti.nlp.amr.Entity;@738dc9b))
AMR:
(t / true, domain, t2 / that)
(y / yes, ARG1, t / true)

Decoded in 12,593 microseconds
Sentence: " Ah !


--- Decoder1 ---

Sentence: " Ah !
word = "
Finding date entities
Possible invoked concepts: List()
word = Ah
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Ah),ah,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)), PhraseConceptPair(List(Ah),ah-01,PhraseConceptFeatures(2.0,-2.772588722239781,false,false)))
concept = PhraseConceptPair(List(Ah),ah,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
score = 0
adding concept:PhraseConceptPair(List(Ah),ah,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
concept = PhraseConceptPair(List(Ah),ah-01,PhraseConceptFeatures(2.0,-2.772588722239781,false,false))
score = 0
word = !
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.020663730542327237,PhraseConceptPair(List(Ah),ah,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)),1)), None)
Adding concept: ah
nodeIds = List(0)
concepts = List(ah)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Ah),ah,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
feats:
bias 1.0
c|p -0.9007865453381898
len 1.0

score:
0.02066373054232723
Decoder1 Spans:
Span 1:  Ah => ah
Decoder1 feats:
bias 1.0
c|p -0.9007865453381898
len 1.0

Concepts:
id = 0 concept = ah
Spans:
Span 1-2:  Ah => ah

rootDependencyPaths = List(List(0), List(0, 1), List(0, 1, 2))
getNodeById = Map(0 -> ah)
getNodeById2 = Map(0 -> ah)
getNodeById = Map(0 -> ah)
getNodeById2 = Map(0 -> ah)
Node = 0
visited = Set(0)
Alg2 returning score = 0.0
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
expressive List()
ah List()
clearUnalignedNodes():  removing unaligned node: None / expressive
OracleGraph nodes = List(ah)
OracleGraph triples: 
rootDependencyPaths = List(List(0), List(0, 1), List(0, 1, 2))
Oracle Span 1-2:  Ah => ah

Dependencies:
1	"	_	VB	VB	_	0	root	_	_
2	Ah	_	UH	UH	_	1	dep	_	_
3	!	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),Ah,ah,false)),Map(0 -> ah),Map(a -> ah))),[Ljava.lang.String;@3c77d488,Annotation([Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8,[Ljava.lang.String;@d86a6f),Annotation([Ljava.lang.String;@2892d68,[Ljava.lang.String;@5ab956d7,[Ledu.cmu.lti.nlp.amr.Dependency;@3646a422),Annotation([Ljava.lang.String;@750e2b97,[Ljava.lang.String;@3e27aa33,[Ljava.lang.String;@2e385cce),Annotation([Ljava.lang.String;@2ddc9a9f,[Ljava.lang.String;@298a5e20,[Ledu.cmu.lti.nlp.amr.Entity;@2a7f1f10))
AMR:


Decoded in 2,942 microseconds
Sentence: I am glad ! "


--- Decoder1 ---

Sentence: I am glad ! "
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = am
Finding date entities
Possible invoked concepts: List()
word = glad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(glad),glad,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(glad),glad,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(glad),glad,PhraseConceptFeatures(3.0,0.0,false,false))
word = !
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), None, Some((0.029773585223834276,PhraseConceptPair(List(glad),glad,PhraseConceptFeatures(3.0,0.0,false,false)),2)), None, None)
Adding concept: glad
nodeIds = List(0)
concepts = List(glad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(glad),glad,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: i
nodeIds = List(1)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.05582279164206354
Decoder1 Spans:
Span 1:  glad => glad
Span 2:  I => i
Decoder1 feats:
bias 2.0
c|p -0.36826825839956406
len 2.0

Concepts:
id = 1 concept = i
id = 0 concept = glad
Spans:
Span 2-3:  glad => glad
Span 0-1:  I => i

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 4))
getNodeById = Map(1 -> i, 0 -> glad)
getNodeById2 = Map(1 -> i, 0 -> glad)
getNodeById = Map(1 -> i, 0 -> glad)
getNodeById2 = Map(1 -> i, 0 -> glad)
Node = 0
Node = 1
visited = Set(0, 1)
Alg2 returning score = -11.092248185872144
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
i List()
glad List()
OracleGraph nodes = List(i, glad)
OracleGraph triples: (g / glad, domain, i / i)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 4))
Oracle Span 2-3:  glad => glad
Oracle Span 0-1:  I => i

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	am	_	VBP	VBP	_	3	cop	_	_
3	glad	_	JJ	JJ	_	0	root	_	_
4	!	_	.	.	_	3	punct	_	_
5	"	_	''	''	_	3	punct	_	_

Oracle:
(g / glad, domain, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),glad,glad,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> glad),Map(g -> glad, i -> i))),[Ljava.lang.String;@46cdf8bd,Annotation([Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06,[Ljava.lang.String;@26d9b808),Annotation([Ljava.lang.String;@f78a47e,[Ljava.lang.String;@644baf4a,[Ledu.cmu.lti.nlp.amr.Dependency;@7526515b),Annotation([Ljava.lang.String;@1ed4ae0f,[Ljava.lang.String;@54c5a2ff,[Ljava.lang.String;@6d4d66d2),Annotation([Ljava.lang.String;@2a265ea9,[Ljava.lang.String;@11392934,[Ledu.cmu.lti.nlp.amr.Entity;@6892b3b6))
AMR:
(g / glad, domain, i / i)

Decoded in 7,532 microseconds
Sentence: I did not understand why it was so important that sheep should eat little bushes .


--- Decoder1 ---

Sentence: I did not understand why it was so important that sheep should eat little bushes .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = did
Finding date entities
Possible invoked concepts: List()
word = not
Finding date entities
Possible invoked concepts: List()
word = understand
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(understand),(thing :manner-of understand-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false)))
concept = PhraseConceptPair(List(understand),(thing :manner-of understand-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
score = 0
adding concept:PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
word = why
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = important
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false)))
concept = PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = should
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)))
concept = PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
score = 0
adding concept:PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
word = eat
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = bushes
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), None, None, Some((0.022110941201849425,PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false)),3)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),5)), None, Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),7)), Some((0.029773585223834276,PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false)),8)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),9)), Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),10)), Some((0.012844289233539447,PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)),12)), Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),13)), Some((0.029773585223834276,PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false)),14)), None)
Adding concept: bush
nodeIds = List(0)
concepts = List(bush)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: little
nodeIds = List(1)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.052392396955467824
Adding concept: eat-01
nodeIds = List(2)
concepts = List(eat-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0821659821793021
Adding concept: recommend-01
nodeIds = List(3)
concepts = List(recommend-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(should),recommend-01,PhraseConceptFeatures(3.0,-1.6739764335716716,false,false))
feats:
bias 1.0
c|p -1.6739764335716716
len 1.0

score:
0.09501027141284155
Adding concept: sheep
nodeIds = List(4)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.12478385663667582
Adding concept: that
nodeIds = List(5)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.1414016650258916
Adding concept: important
nodeIds = List(6)
concepts = List(important)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(important),important,PhraseConceptFeatures(10.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.17117525024972588
Adding concept: so
nodeIds = List(7)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.19648048257950002
Adding concept: it
nodeIds = List(8)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.2153996020033125
Adding concept: understand-01
nodeIds = List(9)
concepts = List(understand-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
feats:
bias 1.0
c|p -0.7576857016975165
len 1.0

score:
0.23751054320516193
Adding concept: i
nodeIds = List(10)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.2635597496233912
Decoder1 Spans:
Span 1:  bushes => bush
Span 2:  eat => eat-01
Span 3:  I => i
Span 4:  important => important
Span 5:  it => it
Span 6:  little => little
Span 7:  sheep => sheep
Span 8:  should => recommend-01
Span 9:  so => so
Span 10:  that => that
Span 11:  understand => understand-01
Decoder1 feats:
bias 11.0
c|p -6.323374016129311
len 11.0

Concepts:
id = 2 concept = eat-01
id = 5 concept = that
id = 8 concept = it
id = 7 concept = so
id = 1 concept = little
id = 4 concept = sheep
id = 6 concept = important
id = 9 concept = understand-01
id = 0 concept = bush
id = 10 concept = i
id = 3 concept = recommend-01
Spans:
Span 14-15:  bushes => bush
Span 12-13:  eat => eat-01
Span 0-1:  I => i
Span 8-9:  important => important
Span 5-6:  it => it
Span 13-14:  little => little
Span 10-11:  sheep => sheep
Span 11-12:  should => recommend-01
Span 7-8:  so => so
Span 9-10:  that => that
Span 3-4:  understand => understand-01

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 8, 4), List(3, 8, 5), List(3, 8, 6), List(3, 8, 7), List(3, 8), List(3, 8, 12, 9), List(3, 8, 12, 10), List(3, 8, 12, 11), List(3, 8, 12), List(3, 8, 12, 14, 13), List(3, 8, 12, 14), List(3, 15))
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 0
Node = 5
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -145.21388192045634
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 0
Node = 5
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -151.21388192045634
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 0
Node = 5
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -157.21388192045637
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 5
Node = 2
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -162.31247352036323
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 5
Node = 2
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -166.31247352036323
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 5
Node = 2
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -170.31247352036323
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 5
Node = 2
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -174.31247352036323
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 5
Node = 2
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -178.31247352036323
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 5
Node = 2
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -182.31247352036323
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -185.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -187.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -189.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -191.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -193.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -195.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -197.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -199.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 6
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -200.69740493283692
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 6
Node = 2
Node = 5
Node = 8
Node = 7
Node = 0
Node = 4
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -201.89337844806025
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 6
Node = 5
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -203.1672731436523
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -204.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 6
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -205.69740493283692
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 6
Node = 2
Node = 5
Node = 8
Node = 7
Node = 0
Node = 4
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -206.89337844806025
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 6
Node = 5
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -208.1672731436523
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -209.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 6
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -210.69740493283692
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 6
Node = 2
Node = 5
Node = 8
Node = 7
Node = 0
Node = 4
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -211.89337844806025
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 6
Node = 5
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -213.1672731436523
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -214.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 6
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -215.69740493283692
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 6
Node = 2
Node = 5
Node = 8
Node = 7
Node = 0
Node = 4
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -216.89337844806025
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 6
Node = 5
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -218.1672731436523
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -219.60136864007453
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 6
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -220.69740493283692
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 6
Node = 2
Node = 5
Node = 8
Node = 7
Node = 0
Node = 4
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -221.89337844806025
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 6
Node = 5
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -223.1672731436523
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 0
Node = 8
Node = 4
Node = 1
Node = 6
Node = 9
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -224.05162186711814
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 5
Node = 6
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -225.14765815988054
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 6
Node = 2
Node = 8
Node = 7
Node = 5
Node = 0
Node = 4
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -226.34363167510392
getNodeById = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01)
getNodeById2 = Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 0 -> bush, 9 -> understand-01, 3 -> recommend-01, 10 -> i)
Node = 3
Node = 2
Node = 6
Node = 5
Node = 0
Node = 4
Node = 8
Node = 7
Node = 1
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -227.61752637069597
Langrangian relaxation converged after 40 iterations. Delta = 0.0
Node.spans:
little List()
bush List()
eat-01 List()
so List()
i List()
sheep List()
- List()
cause-01 List()
understand-01 List()
amr-unknown List()
recommend-01 List()
important List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
clearUnalignedNodes():  removing unaligned node: Some(a) / amr-unknown
OracleGraph nodes = List(little, bush, eat-01, so, i, sheep, understand-01, recommend-01, important)
OracleGraph triples: (b / bush, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(i2 / important, domain, r / recommend-01)
(i2 / important, mod, s2 / so)
(r / recommend-01, ARG1, e / eat-01)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, i2 / important)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 8, 4), List(3, 8, 5), List(3, 8, 6), List(3, 8, 7), List(3, 8), List(3, 8, 12, 9), List(3, 8, 12, 10), List(3, 8, 12, 11), List(3, 8, 12), List(3, 8, 12, 14, 13), List(3, 8, 12, 14), List(3, 15))
Oracle Span 14-15:  bushes => bush
Oracle Span 12-13:  eat => eat-01
Oracle Span 0-1:  I => i
Oracle Span 8-9:  important => important
Oracle Span 13-14:  little => little
Oracle Span 10-11:  sheep => sheep
Oracle Span 11-12:  should => recommend-01
Oracle Span 7-8:  so => so
Oracle Span 3-4:  understand => understand-01

Extra span: that => that
Extra span: it => it
Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	did	_	VBD	VBD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	understand	_	VB	VB	_	0	root	_	_
5	why	_	WRB	WRB	_	9	advmod	_	_
6	it	_	PRP	PRP	_	9	nsubj	_	_
7	was	_	VBD	VBD	_	9	cop	_	_
8	so	_	RB	RB	_	9	advmod	_	_
9	important	_	JJ	JJ	_	4	advcl	_	_
10	that	_	IN	IN	_	13	mark	_	_
11	sheep	_	NN	NN	_	13	nsubj	_	_
12	should	_	MD	MD	_	13	aux	_	_
13	eat	_	VB	VB	_	9	ccomp	_	_
14	little	_	JJ	JJ	_	15	amod	_	_
15	bushes	_	NNS	NNS	_	13	dobj	_	_
16	.	_	.	.	_	4	punct	_	_

Oracle:
(b / bush, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(i2 / important, domain, r / recommend-01)
(i2 / important, mod, s2 / so)
(r / recommend-01, ARG1, e / eat-01)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, i2 / important)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),bushes,bush,false), Span(13,14,List(1),little,little,false), Span(12,13,List(2),eat,eat-01,false), Span(11,12,List(3),should,recommend-01,false), Span(10,11,List(4),sheep,sheep,false), Span(9,10,List(5),that,that,false), Span(8,9,List(6),important,important,false), Span(7,8,List(7),so,so,false), Span(5,6,List(8),it,it,false), Span(3,4,List(9),understand,understand-01,false), Span(0,1,List(10),I,i,false)),Map(2 -> eat-01, 5 -> that, 8 -> it, 7 -> so, 1 -> little, 4 -> sheep, 6 -> important, 9 -> understand-01, 0 -> bush, 10 -> i, 3 -> recommend-01),Map(e -> eat-01, s2 -> so, t -> that, b -> bush, s -> sheep, i3 -> i, i2 -> it, i -> important, r -> recommend-01, u -> understand-01, l -> little))),[Ljava.lang.String;@6e6f2380,Annotation([Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b,[Ljava.lang.String;@53fe15ff),Annotation([Ljava.lang.String;@449a4f23,[Ljava.lang.String;@1530c739,[Ledu.cmu.lti.nlp.amr.Dependency;@5b1669c0),Annotation([Ljava.lang.String;@78e4deb0,[Ljava.lang.String;@6e9175d8,[Ljava.lang.String;@7d0b7e3c),Annotation([Ljava.lang.String;@15bb5034,[Ljava.lang.String;@4b741d6d,[Ledu.cmu.lti.nlp.amr.Entity;@2eae8e6e))
AMR:
(b / bush, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / bush)
(i / important, degree, s2 / so)
(i / important, domain, i2 / it)
(r / recommend-01, ARG0, i / important)
(r / recommend-01, ARG1, e / eat-01)
(t / that, op, e / eat-01)
(u / understand-01, ARG0, i3 / i)
(u / understand-01, ARG1, i2 / it)

Decoded in 263,031 microseconds
Sentence: But the little prince added : " Then it follows that they also eat baobabs ? "


--- Decoder1 ---

Sentence: But the little prince added : " Then it follows that they also eat baobabs ? "
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = added
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false)))
concept = PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = Then
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false)))
concept = PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
score = 0
adding concept:PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = follows
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = also
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false)))
concept = PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
score = 0
adding concept:PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
word = eat
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),2)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false)),4)), None, None, Some((0.026433777593784454,PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false)),7)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),8)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),10)), Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),11)), Some((0.028214625113307072,PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false)),12)), Some((0.029773585223834276,PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)),13)), Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),14)), None, None)
Adding concept: baobab
nodeIds = List(0)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: eat-01
nodeIds = List(1)
concepts = List(eat-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: also
nodeIds = List(2)
concepts = List(also)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(also),also,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
feats:
bias 1.0
c|p -0.15415067982725836
len 1.0

score:
0.08776179556097563
Adding concept: they
nodeIds = List(3)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.11033986026095255
Adding concept: that
nodeIds = List(4)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.12695766865016833
Adding concept: it
nodeIds = List(5)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.14587678807398083
Adding concept: then
nodeIds = List(6)
concepts = List(then)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
feats:
bias 1.0
c|p -0.33024168687057687
len 1.0

score:
0.1723105656677653
Adding concept: add-01
nodeIds = List(7)
concepts = List(add-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.20208415089159956
Adding concept: prince
nodeIds = List(8)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.23179511534312913
Adding concept: little
nodeIds = List(9)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.2544139270747627
Adding concept: contrast-01
nodeIds = List(10)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.27512226828675757
Decoder1 Spans:
Span 1:  added => add-01
Span 2:  also => also
Span 3:  baobabs => baobab
Span 4:  But => contrast-01
Span 5:  eat => eat-01
Span 6:  it => it
Span 7:  little => little
Span 8:  prince => prince
Span 9:  that => that
Span 10:  Then => then
Span 11:  they => they
Decoder1 feats:
bias 11.0
c|p -5.180066948528632
len 11.0

Concepts:
id = 2 concept = also
id = 5 concept = it
id = 8 concept = prince
id = 7 concept = add-01
id = 1 concept = eat-01
id = 4 concept = that
id = 6 concept = then
id = 9 concept = little
id = 0 concept = baobab
id = 10 concept = contrast-01
id = 3 concept = they
Spans:
Span 4-5:  added => add-01
Span 12-13:  also => also
Span 14-15:  baobabs => baobab
Span 0-1:  But => contrast-01
Span 13-14:  eat => eat-01
Span 8-9:  it => it
Span 2-3:  little => little
Span 3-4:  prince => prince
Span 10-11:  that => that
Span 7-8:  Then => then
Span 11-12:  they => they

rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 5), List(4, 6), List(4, 9, 7), List(4, 9, 8), List(4, 9), List(4, 9, 13, 10), List(4, 9, 13, 11), List(4, 9, 13, 12), List(4, 9, 13), List(4, 9, 13, 14), List(4, 15), List(4, 16))
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 2
Node = 5
Node = 0
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -163.2530688751267
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 2
Node = 5
Node = 0
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -171.2530688751267
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 2
Node = 5
Node = 0
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -179.2530688751267
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 2
Node = 5
Node = 0
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -187.2530688751267
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -194.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -198.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -202.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -206.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -210.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -214.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -218.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -222.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -226.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -230.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -234.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -238.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -242.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -246.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -250.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -254.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -258.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -262.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -266.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -270.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 8
Node = 9
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -274.63616162307676
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 1
Node = 8
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -278.293850817662
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 1
Node = 8
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -280.293850817662
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 1
Node = 8
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -282.293850817662
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 1
Node = 8
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -284.293850817662
getNodeById = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they)
getNodeById2 = Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 0 -> baobab, 9 -> little, 3 -> they, 10 -> contrast-01)
Node = 10
Node = 7
Node = 6
Node = 1
Node = 8
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -286.0478245723918
Langrangian relaxation converged after 30 iterations. Delta = 0.0
Node.spans:
prince List()
they List()
little List()
have-condition-91 List()
also List()
follow-05 List()
add-01 List()
contrast-01 List()
baobab List()
eat-01 List()
clearUnalignedNodes():  removing unaligned node: Some(h) / have-condition-91
OracleGraph nodes = List(prince, they, little, also, follow-05, add-01, contrast-01, baobab, eat-01)
OracleGraph triples: (a / add-01, ARG0, p / prince)
(a / add-01, ARG1, f / follow-05)
(c / contrast-01, ARG1, a / add-01)
(e / eat-01, ARG0, t / they)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, mod, a2 / also)
(f / follow-05, ARG1, e / eat-01)
(p / prince, mod, l / little)
rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 5), List(4, 6), List(4, 9, 7), List(4, 9, 8), List(4, 9), List(4, 9, 13, 10), List(4, 9, 13, 11), List(4, 9, 13, 12), List(4, 9, 13), List(4, 9, 13, 14), List(4, 15), List(4, 16))
Oracle Span 4-5:  added => add-01
Oracle Span 12-13:  also => also
Oracle Span 14-15:  baobabs => baobab
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  eat => eat-01
Oracle Span 9-10:  follows => follow-05
Oracle Span 2-3:  little => little
Oracle Span 3-4:  prince => prince
Oracle Span 11-12:  they => they

Extra span: that => that
Extra span: it => it
Extra span: Then => then
Missing span: follows => follow-05
Dependencies:
1	But	_	CC	CC	_	5	cc	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	added	_	VBD	VBD	_	0	root	_	_
6	:	_	:	:	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_
8	Then	_	RB	RB	_	10	advmod	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	follows	_	VBZ	VBZ	_	5	ccomp	_	_
11	that	_	IN	IN	_	14	mark	_	_
12	they	_	PRP	PRP	_	14	nsubj	_	_
13	also	_	RB	RB	_	14	advmod	_	_
14	eat	_	VBP	VBP	_	10	ccomp	_	_
15	baobabs	_	NNS	NNS	_	14	dobj	_	_
16	?	_	.	.	_	5	punct	_	_
17	"	_	''	''	_	5	punct	_	_

Oracle:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, f / follow-05)
(c / contrast-01, ARG1, a / add-01)
(e / eat-01, ARG0, t / they)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, mod, a2 / also)
(f / follow-05, ARG1, e / eat-01)
(p / prince, mod, l / little)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),baobabs,baobab,false), Span(13,14,List(1),eat,eat-01,false), Span(12,13,List(2),also,also,false), Span(11,12,List(3),they,they,false), Span(10,11,List(4),that,that,false), Span(8,9,List(5),it,it,false), Span(7,8,List(6),Then,then,false), Span(4,5,List(7),added,add-01,false), Span(3,4,List(8),prince,prince,false), Span(2,3,List(9),little,little,false), Span(0,1,List(10),But,contrast-01,false)),Map(2 -> also, 5 -> it, 8 -> prince, 7 -> add-01, 1 -> eat-01, 4 -> that, 6 -> then, 9 -> little, 0 -> baobab, 10 -> contrast-01, 3 -> they),Map(e -> eat-01, t -> they, b -> baobab, p -> prince, t3 -> then, a -> also, t2 -> that, a2 -> add-01, i -> it, c -> contrast-01, l -> little))),[Ljava.lang.String;@8f2ef19,Annotation([Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b,[Ljava.lang.String;@7674f035),Annotation([Ljava.lang.String;@69e153c5,[Ljava.lang.String;@173ed316,[Ledu.cmu.lti.nlp.amr.Dependency;@25ce9dc4),Annotation([Ljava.lang.String;@74ea2410,[Ljava.lang.String;@17f62e33,[Ljava.lang.String;@76b1e9b8),Annotation([Ljava.lang.String;@27406a17,[Ljava.lang.String;@2af004b,[Ledu.cmu.lti.nlp.amr.Entity;@248e319b))
AMR:
(a2 / add-01, ARG0, p / prince)
(a2 / add-01, ARG1, e / eat-01)
(c / contrast-01, ARG1, t3 / then)
(c / contrast-01, ARG2, a2 / add-01)
(e / eat-01, ARG0, t / they)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, ARG2, i / it)
(e / eat-01, mod, a / also)
(e / eat-01, time, t2 / that)
(p / prince, mod, l / little)

Decoded in 215,914 microseconds
Sentence: I pointed out to the little prince that baobabs were not little bushes , but , on the contrary , trees as big as castles ; and that even if he took a whole herd of elephants away with him , the herd would not eat up one single baobab .


--- Decoder1 ---

Sentence: I pointed out to the little prince that baobabs were not little bushes , but , on the contrary , trees as big as castles ; and that even if he took a whole herd of elephants away with him , the herd would not eat up one single baobab .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = pointed
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(pointed),pointed,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(pointed),pointed,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(pointed),pointed,PhraseConceptFeatures(1.0,0.0,false,false))
word = out
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(out),out,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)))
concept = PhraseConceptPair(List(out),out,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = were
Finding date entities
Possible invoked concepts: List()
word = not
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = bushes
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = but
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false)))
concept = PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
score = 0
adding concept:PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = contrary
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(contrary),contrary-41,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(contrary),contrary-41,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(contrary),contrary-41,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = trees
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = big
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false))
word = as
Finding date entities
Possible invoked concepts: List()
word = castles
Finding date entities
Possible invoked concepts: List()
word = ;
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false)))
concept = PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
score = 0
adding concept:PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = even
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(even),even,PhraseConceptFeatures(6.0,-1.8718021769015913,false,false)), PhraseConceptPair(List(even),even-if,PhraseConceptFeatures(1.0,-3.6635616461296463,false,false)), PhraseConceptPair(List(even),even-when,PhraseConceptFeatures(1.0,-3.6635616461296463,false,false)))
concept = PhraseConceptPair(List(even),even,PhraseConceptFeatures(6.0,-1.8718021769015913,false,false))
score = 0
adding concept:PhraseConceptPair(List(even),even,PhraseConceptFeatures(6.0,-1.8718021769015913,false,false))
concept = PhraseConceptPair(List(even),even-if,PhraseConceptFeatures(1.0,-3.6635616461296463,false,false))
score = 0
concept = PhraseConceptPair(List(even),even-when,PhraseConceptFeatures(1.0,-3.6635616461296463,false,false))
score = 0
word = if
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)))
concept = PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
score = 0
adding concept:PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = took
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(took),take-01,PhraseConceptFeatures(7.0,-1.550597412411167,false,false)), PhraseConceptPair(List(took),take-13,PhraseConceptFeatures(2.0,-2.803360380906535,false,false)), PhraseConceptPair(List(took),take-23,PhraseConceptFeatures(1.0,-3.4965075614664802,false,false)))
concept = PhraseConceptPair(List(took),take-01,PhraseConceptFeatures(7.0,-1.550597412411167,false,false))
score = 0
adding concept:PhraseConceptPair(List(took),take-01,PhraseConceptFeatures(7.0,-1.550597412411167,false,false))
concept = PhraseConceptPair(List(took),take-13,PhraseConceptFeatures(2.0,-2.803360380906535,false,false))
score = 0
concept = PhraseConceptPair(List(took),take-23,PhraseConceptFeatures(1.0,-3.4965075614664802,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = whole
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(whole),whole,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(whole),whole,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(whole),whole,PhraseConceptFeatures(3.0,0.0,false,false))
word = herd
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = elephants
Finding date entities
Possible invoked concepts: List()
word = away
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false)))
concept = PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
score = 0
adding concept:PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
word = with
Finding date entities
Possible invoked concepts: List()
word = him
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = herd
Finding date entities
Possible invoked concepts: List()
word = would
Finding date entities
Possible invoked concepts: List()
word = not
Finding date entities
Possible invoked concepts: List()
word = eat
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = up
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false)))
concept = PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
score = 0
adding concept:PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = single
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(single),single,PhraseConceptFeatures(6.0,-0.2876820724517809,false,false)))
concept = PhraseConceptPair(List(single),single,PhraseConceptFeatures(6.0,-0.2876820724517809,false,false))
score = 0
adding concept:PhraseConceptPair(List(single),single,PhraseConceptFeatures(6.0,-0.2876820724517809,false,false))
word = baobab
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(pointed),pointed,PhraseConceptFeatures(1.0,0.0,false,false)),1)), None, None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),5)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),6)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),7)), Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),8)), None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false)),12)), None, Some((0.025497139841755487,PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false)),14)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(contrary),contrary-41,PhraseConceptFeatures(1.0,0.0,false,false)),18)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false)),22)), None, None, Some((0.023341689372509314,PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false)),25)), Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),26)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),27)), Some((0.010843633491817554,PhraseConceptPair(List(even),even,PhraseConceptFeatures(6.0,-1.8718021769015913,false,false)),28)), Some((0.003833681888436611,PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)),29)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),30)), Some((0.014092048715889174,PhraseConceptPair(List(took),take-01,PhraseConceptFeatures(7.0,-1.550597412411167,false,false)),31)), None, Some((0.029773585223834276,PhraseConceptPair(List(whole),whole,PhraseConceptFeatures(3.0,0.0,false,false)),33)), None, None, None, Some((0.025935722275322065,PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false)),37)), None, None, None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)),45)), Some((0.019093489647122215,PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false)),46)), Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),47)), Some((0.02686419244030133,PhraseConceptPair(List(single),single,PhraseConceptFeatures(6.0,-0.2876820724517809,false,false)),48)), Some((0.029773585223834276,PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false)),49)), None)
Adding concept: baobab
nodeIds = List(0)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: single
nodeIds = List(1)
concepts = List(single)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(single),single,PhraseConceptFeatures(6.0,-0.2876820724517809,false,false))
feats:
bias 1.0
c|p -0.2876820724517809
len 1.0

score:
0.05663777766413561
Adding concept: 1
nodeIds = List(2)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.06729535451044397
Adding concept: up
nodeIds = List(3)
concepts = List(up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
feats:
bias 1.0
c|p -1.0560526742493137
len 1.0

score:
0.08638884415756617
Adding concept: eat-01
nodeIds = List(4)
concepts = List(eat-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11616242938140045
Adding concept: away
nodeIds = List(5)
concepts = List(away)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
feats:
bias 1.0
c|p -0.3794896217049037
len 1.0

score:
0.14209815165672252
Adding concept: whole
nodeIds = List(6)
concepts = List(whole)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(whole),whole,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1718717368805568
Adding concept: take-01
nodeIds = List(7)
concepts = List(take-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(took),take-01,PhraseConceptFeatures(7.0,-1.550597412411167,false,false))
feats:
bias 1.0
c|p -1.550597412411167
len 1.0

score:
0.18596378559644597
Adding concept: he
nodeIds = List(8)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.21158258547686648
Adding concept: cause-01
nodeIds = List(9)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
feats:
bias 1.0
c|p -2.5649493574615367
len 1.0

score:
0.2154162673653031
Adding concept: even
nodeIds = List(10)
concepts = List(even)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(even),even,PhraseConceptFeatures(6.0,-1.8718021769015913,false,false))
feats:
bias 1.0
c|p -1.8718021769015913
len 1.0

score:
0.22625990085712064
Adding concept: that
nodeIds = List(11)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.24287770924633642
Adding concept: and
nodeIds = List(12)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.26183565106874496
Adding concept: and
nodeIds = List(13)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
feats:
bias 1.0
c|p -0.6359887667199967
len 1.0

score:
0.28517734044125426
Adding concept: big
nodeIds = List(14)
concepts = List(big)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.31495092566508853
Adding concept: contrary-41
nodeIds = List(15)
concepts = List(contrary-41)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(contrary),contrary-41,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.3447245108889228
Adding concept: contrast-01
nodeIds = List(16)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
feats:
bias 1.0
c|p -0.4228568508200336
len 1.0

score:
0.3702216507306783
Adding concept: bush
nodeIds = List(17)
concepts = List(bush)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.3999952359545126
Adding concept: little
nodeIds = List(18)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.42261404768614613
Adding concept: baobab
nodeIds = List(19)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.4523876329099804
Adding concept: that
nodeIds = List(20)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.4690054412991962
Adding concept: prince
nodeIds = List(21)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.49871640575072573
Adding concept: little
nodeIds = List(22)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.5213352174823593
Adding concept: pointed
nodeIds = List(23)
concepts = List(pointed)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(pointed),pointed,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.5511088027061937
Adding concept: i
nodeIds = List(24)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.5771580091244229
Decoder1 Spans:
Span 1:  ; => and
Span 2:  and => and
Span 3:  away => away
Span 4:  baobab => baobab
Span 5:  baobabs => baobab
Span 6:  big => big
Span 7:  bushes => bush
Span 8:  but => contrast-01
Span 9:  contrary => contrary-41
Span 10:  eat => eat-01
Span 11:  even => even
Span 12:  he => he
Span 13:  I => i
Span 14:  if => cause-01
Span 15:  little => little
Span 16:  little => little
Span 17:  one => 1
Span 18:  pointed => pointed
Span 19:  prince => prince
Span 20:  single => single
Span 21:  that => that
Span 22:  that => that
Span 23:  took => take-01
Span 24:  up => up
Span 25:  whole => whole
Decoder1 feats:
bias 25.0
c|p -16.53099423803072
len 25.0

Concepts:
id = 2 concept = 1
id = 5 concept = away
id = 12 concept = and
id = 8 concept = he
id = 15 concept = contrary-41
id = 21 concept = prince
id = 18 concept = little
id = 24 concept = i
id = 7 concept = take-01
id = 1 concept = single
id = 17 concept = bush
id = 23 concept = pointed
id = 4 concept = eat-01
id = 11 concept = that
id = 14 concept = big
id = 20 concept = that
id = 6 concept = whole
id = 9 concept = cause-01
id = 0 concept = baobab
id = 22 concept = little
id = 16 concept = contrast-01
id = 19 concept = baobab
id = 10 concept = even
id = 3 concept = up
id = 13 concept = and
Spans:
Span 25-26:  ; => and
Span 26-27:  and => and
Span 37-38:  away => away
Span 49-50:  baobab => baobab
Span 8-9:  baobabs => baobab
Span 22-23:  big => big
Span 12-13:  bushes => bush
Span 14-15:  but => contrast-01
Span 18-19:  contrary => contrary-41
Span 45-46:  eat => eat-01
Span 28-29:  even => even
Span 30-31:  he => he
Span 0-1:  I => i
Span 29-30:  if => cause-01
Span 11-12:  little => little
Span 5-6:  little => little
Span 47-48:  one => 1
Span 1-2:  pointed => pointed
Span 6-7:  prince => prince
Span 48-49:  single => single
Span 27-28:  that => that
Span 7-8:  that => that
Span 31-32:  took => take-01
Span 46-47:  up => up
Span 33-34:  whole => whole

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 3), List(1, 3, 6, 4), List(1, 3, 6, 5), List(1, 3, 6), List(1, 12, 7), List(1, 12, 8), List(1, 12, 9), List(1, 12, 10), List(1, 12, 11), List(1, 12), List(1, 12, 13), List(1, 12, 14), List(1, 12, 15), List(1, 12, 16), List(1, 12, 16, 18, 17), List(1, 12, 16, 18), List(1, 12, 16, 18, 19), List(1, 12, 16, 18, 20), List(1, 12, 16, 18, 20, 21), List(1, 12, 16, 18, 20, 21, 22), List(1, 12, 16, 18, 20, 21, 22, 23), List(1, 12, 16, 18, 20, 21, 22, 23, 24), List(1, 12, 25), List(1, 12, 26), List(1, 12, 45, 27), List(1, 12, 45, 31, 28), List(1, 12, 45, 31, 29), List(1, 12, 45, 31, 30), List(1, 12, 45, 31), List(1, 12, 45, 31, 34, 32), List(1, 12, 45, 31, 34, 33), List(1, 12, 45, 31, 34), List(1, 12, 45, 31, 34, 35), List(1, 12, 45, 31, 34, 35, 36), List(1, 12, 45, 31, 38, 37), List(1, 12, 45, 31, 38), List(1, 12, 45, 31, 38, 39), List(1, 12, 45, 40), List(1, 12, 45, 42, 41), List(1, 12, 45, 42), List(1, 12, 45, 43), List(1, 12, 45, 44), List(1, 12, 45), List(1, 12, 45, 46), List(1, 12, 45, 49, 47), List(1, 12, 45, 49, 48), List(1, 12, 45, 49), List(1, 50))
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 3
Node = 16
Node = 6
Node = 14
Node = 13
Node = 8
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 11
Node = 0
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -674.1515034466086
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 6
Node = 13
Node = 10
Node = 4
Node = 12
Node = 3
Node = 16
Node = 14
Node = 8
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 11
Node = 0
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -686.1665198893386
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 3
Node = 16
Node = 6
Node = 14
Node = 13
Node = 0
Node = 11
Node = 8
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -694.81038461969
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 6
Node = 10
Node = 4
Node = 12
Node = 3
Node = 16
Node = 8
Node = 13
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 11
Node = 0
Node = 14
Node = 5
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -704.2933615675574
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 21
Node = 10
Node = 4
Node = 22
Node = 12
Node = 3
Node = 16
Node = 0
Node = 14
Node = 11
Node = 8
Node = 13
Node = 6
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -711.3876221436379
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 6
Node = 21
Node = 10
Node = 4
Node = 22
Node = 12
Node = 3
Node = 16
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 11
Node = 14
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -721.9083418849629
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 6
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 11
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -724.9876353066002
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 3
Node = 16
Node = 0
Node = 14
Node = 11
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 6
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -732.6683364225244
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 3
Node = 16
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 11
Node = 14
Node = 5
Node = 6
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -740.2468730780328
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 6
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -742.3211311599287
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 21
Node = 10
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 6
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -748.85882600813
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 6
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -754.3349106654119
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 14
Node = 6
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -759.2893032130672
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 21
Node = 10
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 6
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -762.5715703213087
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 6
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -767.6221663522334
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 14
Node = 5
Node = 6
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -772.4892394806791
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 21
Node = 10
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 6
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -774.5715703213087
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 6
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -779.8978698834494
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 6
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -786.2709578183676
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 6
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -791.6221663522334
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 14
Node = 5
Node = 6
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -796.4892394806791
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 21
Node = 10
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 6
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -798.5715703213087
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 6
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -803.6444993051207
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -808.4460590740181
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 0
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -812.5174565352678
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 5
Node = 6
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -815.7332921325332
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 6
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -817.3367202943333
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -820.4879235692299
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -822.8610583264145
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 6
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 5
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -824.4544626252532
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 6
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -826.5218037093159
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -829.4511070437886
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -831.6106191650346
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 5
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -834.0609945940264
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 6
Node = 0
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -835.2429742020362
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -837.3405509710228
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -839.2781631518448
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 5
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -841.5149159448979
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 5
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -842.6426595104732
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 5
Node = 6
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -843.1111679355876
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 5
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -844.0609945940264
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 6
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -845.1848934402408
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 6
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -847.4075342930528
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -849.4632465668275
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 5
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -851.4780994194566
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 5
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -852.5149159448979
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 5
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -853.6426595104732
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 5
Node = 6
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -854.1111679355876
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 21
Node = 4
Node = 22
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 5
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -855.0609945940264
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 6
Node = 8
Node = 13
Node = 17
Node = 5
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -856.1848934402408
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 6
Node = 0
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -858.4075342930528
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 8
Node = 13
Node = 5
Node = 17
Node = 23
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 0
Node = 22
Node = 2
Node = 1
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -860.4632465668275
getNodeById = Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
getNodeById2 = Map(2 -> 1, 5 -> away, 12 -> and, 15 -> contrary-41, 8 -> he, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 17 -> bush, 1 -> single, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and)
Node = 9
Node = 10
Node = 6
Node = 4
Node = 12
Node = 11
Node = 3
Node = 16
Node = 14
Node = 0
Node = 8
Node = 13
Node = 17
Node = 23
Node = 2
Node = 1
Node = 7
Node = 20
Node = 19
Node = 18
Node = 15
Node = 24
Node = 21
Node = 5
Node = 22
visited = Set(3, 19, 20, 4, 21, 5, 13, 22, 6, 14, 23, 7, 15, 16, 0, 17, 1, 24, 8, 2, 10, 9, 11, 18, 12)
Alg2 returning score = -861.9177680709709
Langrangian relaxation converged after 53 iterations. Delta = 0.0
Node.spans:
bush List()
baobab List()
- List()
elephant List()
little List()
and List()
eat-02 List()
take-05 List()
single List()
big List()
equal List()
herd List()
even-if List()
1 List()
i List()
tree List()
castle List()
little List()
baobab List()
point-02 List()
instead-of-91 List()
whole List()
prince List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(e4) / equal
clearUnalignedNodes():  removing unaligned node: Some(i2) / instead-of-91
WARNING: Adding a variable name to a span
OracleGraph nodes = List(bush, baobab, elephant, little, and, eat-02, take-05, single, big, herd, even-if, 1, i, tree, castle, little, baobab, point-02, whole, prince)
OracleGraph triples: (a / and, op, e / eat-02)
(a / and, op, t2 / tree)
(b / baobab, mod, s / single)
(b / baobab, quant, 1 / 1)
(b3 / bush, domain, b2 / baobab)
(b3 / bush, mod, l3 / little)
(b5 / big, compared-to, c / castle)
(e / eat-02, ARG0, h / herd)
(e / eat-02, ARG1, b / baobab)
(e / eat-02, concession, e3 / even-if)
(e2 / elephant, consist, h / herd)
(e3 / even-if, op, t / take-05)
(h / herd, mod, w / whole)
(p / prince, mod, l2 / little)
(p2 / point-02, ARG0, i / i)
(p2 / point-02, ARG1, a / and)
(p2 / point-02, beneficiary, p / prince)
(t / take-05, ARG0, p / prince)
(t / take-05, ARG1, h / herd)
(t2 / tree, domain, b2 / baobab)
(t2 / tree, mod, b5 / big)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 3), List(1, 3, 6, 4), List(1, 3, 6, 5), List(1, 3, 6), List(1, 12, 7), List(1, 12, 8), List(1, 12, 9), List(1, 12, 10), List(1, 12, 11), List(1, 12), List(1, 12, 13), List(1, 12, 14), List(1, 12, 15), List(1, 12, 16), List(1, 12, 16, 18, 17), List(1, 12, 16, 18), List(1, 12, 16, 18, 19), List(1, 12, 16, 18, 20), List(1, 12, 16, 18, 20, 21), List(1, 12, 16, 18, 20, 21, 22), List(1, 12, 16, 18, 20, 21, 22, 23), List(1, 12, 16, 18, 20, 21, 22, 23, 24), List(1, 12, 25), List(1, 12, 26), List(1, 12, 45, 27), List(1, 12, 45, 31, 28), List(1, 12, 45, 31, 29), List(1, 12, 45, 31, 30), List(1, 12, 45, 31), List(1, 12, 45, 31, 34, 32), List(1, 12, 45, 31, 34, 33), List(1, 12, 45, 31, 34), List(1, 12, 45, 31, 34, 35), List(1, 12, 45, 31, 34, 35, 36), List(1, 12, 45, 31, 38, 37), List(1, 12, 45, 31, 38), List(1, 12, 45, 31, 38, 39), List(1, 12, 45, 40), List(1, 12, 45, 42, 41), List(1, 12, 45, 42), List(1, 12, 45, 43), List(1, 12, 45, 44), List(1, 12, 45), List(1, 12, 45, 46), List(1, 12, 45, 49, 47), List(1, 12, 45, 49, 48), List(1, 12, 45, 49), List(1, 50))
Oracle Span 25-26:  ; => and
Oracle Span 49-50:  baobab => baobab
Oracle Span 8-9:  baobabs => baobab
Oracle Span 22-23:  big => big
Oracle Span 12-13:  bushes => bush
Oracle Span 24-25:  castles => castle
Oracle Span 45-46:  eat => eat-02
Oracle Span 36-37:  elephants => elephant
Oracle Span 28-29:  even => even-if
Oracle Span 34-35:  herd => herd
Oracle Span 0-1:  I => i
Oracle Span 5-6:  little => little
Oracle Span 11-12:  little => little
Oracle Span 47-48:  one => 1
Oracle Span 1-2:  pointed => point-02
Oracle Span 6-7:  prince => prince
Oracle Span 48-49:  single => single
Oracle Span 31-32:  took => take-05
Oracle Span 20-21:  trees => tree
Oracle Span 33-34:  whole => whole

Extra span: up => up
Incorrect span: eat => eat-01
Extra span: away => away
Incorrect span: took => take-01
Extra span: he => he
Extra span: if => cause-01
Incorrect span: even => even
Extra span: that => that
Extra span: and => and
Extra span: contrary => contrary-41
Extra span: but => contrast-01
Extra span: that => that
Incorrect span: pointed => pointed
Missing span: pointed => point-02
Missing span: eat => eat-02
Missing span: took => take-05
Missing span: herd => herd
Missing span: elephants => elephant
Missing span: trees => tree
Missing span: castles => castle
Missing span: even => even-if
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	pointed	_	VBD	VBD	_	0	root	_	_
3	out	_	RP	RP	_	2	prt	_	_
4	to	_	TO	TO	_	2	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	little	_	JJ	JJ	_	7	amod	_	_
7	prince	_	NN	NN	_	4	pobj	_	_
8	that	_	IN	IN	_	13	mark	_	_
9	baobabs	_	NNS	NNS	_	13	nsubj	_	_
10	were	_	VBD	VBD	_	13	cop	_	_
11	not	_	RB	RB	_	13	neg	_	_
12	little	_	RB	RB	_	13	advmod	_	_
13	bushes	_	JJ	JJ	_	2	ccomp	_	_
14	,	_	,	,	_	13	punct	_	_
15	but	_	CC	CC	_	13	cc	_	_
16	,	_	,	,	_	13	punct	_	_
17	on	_	IN	IN	_	13	conj	_	_
18	the	_	DT	DT	_	19	det	_	_
19	contrary	_	NN	NN	_	17	pobj	_	_
20	,	_	,	,	_	19	punct	_	_
21	trees	_	NNS	NNS	_	19	appos	_	_
22	as	_	IN	IN	_	21	prep	_	_
23	big	_	JJ	JJ	_	22	pobj	_	_
24	as	_	IN	IN	_	23	prep	_	_
25	castles	_	NNS	NNS	_	24	pobj	_	_
26	;	_	:	:	_	13	punct	_	_
27	and	_	CC	CC	_	13	cc	_	_
28	that	_	IN	IN	_	46	mark	_	_
29	even	_	RB	RB	_	32	advmod	_	_
30	if	_	IN	IN	_	32	mark	_	_
31	he	_	PRP	PRP	_	32	nsubj	_	_
32	took	_	VBD	VBD	_	46	advcl	_	_
33	a	_	DT	DT	_	35	det	_	_
34	whole	_	JJ	JJ	_	35	amod	_	_
35	herd	_	NN	NN	_	32	dobj	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	elephants	_	NNS	NNS	_	36	pobj	_	_
38	away	_	RB	RB	_	39	advmod	_	_
39	with	_	IN	IN	_	32	prep	_	_
40	him	_	PRP	PRP	_	39	pobj	_	_
41	,	_	,	,	_	46	punct	_	_
42	the	_	DT	DT	_	43	det	_	_
43	herd	_	NN	NN	_	46	nsubj	_	_
44	would	_	MD	MD	_	46	aux	_	_
45	not	_	RB	RB	_	46	neg	_	_
46	eat	_	VB	VB	_	13	conj	_	_
47	up	_	RP	RP	_	46	prt	_	_
48	one	_	CD	CD	_	50	num	_	_
49	single	_	JJ	JJ	_	50	amod	_	_
50	baobab	_	NN	NN	_	46	dobj	_	_
51	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, e / eat-02)
(a / and, op, t2 / tree)
(b / baobab, mod, s / single)
(b / baobab, quant, 1 / 1)
(b3 / bush, domain, b2 / baobab)
(b3 / bush, mod, l3 / little)
(b5 / big, compared-to, c / castle)
(e / eat-02, ARG0, h / herd)
(e / eat-02, ARG1, b / baobab)
(e / eat-02, concession, e3 / even-if)
(e2 / elephant, consist, h / herd)
(e3 / even-if, op, t / take-05)
(h / herd, mod, w / whole)
(p / prince, mod, l2 / little)
(p2 / point-02, ARG0, i / i)
(p2 / point-02, ARG1, a / and)
(p2 / point-02, beneficiary, p / prince)
(t / take-05, ARG0, p / prince)
(t / take-05, ARG1, h / herd)
(t2 / tree, domain, b2 / baobab)
(t2 / tree, mod, b5 / big)

Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),baobab,baobab,false), Span(48,49,List(1),single,single,false), Span(47,48,List(2),one,1,false), Span(46,47,List(3),up,up,false), Span(45,46,List(4),eat,eat-01,false), Span(37,38,List(5),away,away,false), Span(33,34,List(6),whole,whole,false), Span(31,32,List(7),took,take-01,false), Span(30,31,List(8),he,he,false), Span(29,30,List(9),if,cause-01,false), Span(28,29,List(10),even,even,false), Span(27,28,List(11),that,that,false), Span(26,27,List(12),and,and,false), Span(25,26,List(13),;,and,false), Span(22,23,List(14),big,big,false), Span(18,19,List(15),contrary,contrary-41,false), Span(14,15,List(16),but,contrast-01,false), Span(12,13,List(17),bushes,bush,false), Span(11,12,List(18),little,little,false), Span(8,9,List(19),baobabs,baobab,false), Span(7,8,List(20),that,that,false), Span(6,7,List(21),prince,prince,false), Span(5,6,List(22),little,little,false), Span(1,2,List(23),pointed,pointed,false), Span(0,1,List(24),I,i,false)),Map(2 -> 1, 5 -> away, 12 -> and, 8 -> he, 15 -> contrary-41, 21 -> prince, 18 -> little, 24 -> i, 7 -> take-01, 1 -> single, 17 -> bush, 23 -> pointed, 4 -> eat-01, 11 -> that, 14 -> big, 20 -> that, 6 -> whole, 9 -> cause-01, 0 -> baobab, 22 -> little, 16 -> contrast-01, 19 -> baobab, 10 -> even, 3 -> up, 13 -> and),Map(e -> eat-01, w -> whole, b3 -> bush, h -> he, t -> take-01, b -> baobab, b2 -> big, e2 -> even, p2 -> pointed, a3 -> and, s -> single, 1 -> 1, t3 -> that, p -> prince, a -> away, c3 -> contrast-01, b4 -> baobab, t2 -> that, l2 -> little, a2 -> and, i -> i, c -> cause-01, u -> up, l -> little, c2 -> contrary-41))),[Ljava.lang.String;@5d0bf09b,Annotation([Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb,[Ljava.lang.String;@563f38c4),Annotation([Ljava.lang.String;@543295b0,[Ljava.lang.String;@54422e18,[Ledu.cmu.lti.nlp.amr.Dependency;@117159c0),Annotation([Ljava.lang.String;@3e27ba32,[Ljava.lang.String;@7ef82753,[Ljava.lang.String;@3b0fe47a),Annotation([Ljava.lang.String;@202b0582,[Ljava.lang.String;@235ecd9f,[Ledu.cmu.lti.nlp.amr.Entity;@1ca3b418))
AMR:
(a2 / and, op, a3 / and)
(a2 / and, op, e / eat-01)
(b / baobab, mod, s / single)
(b / baobab, quant, 1 / 1)
(b3 / bush, degree, l / little)
(b3 / bush, domain, b4 / baobab)
(c / cause-01, ARG0, e / eat-01)
(c / cause-01, ARG2, w / whole)
(c / cause-01, manner, e2 / even)
(c2 / contrary-41, ARG0, b3 / bush)
(c2 / contrary-41, ARG1, a / away)
(c3 / contrast-01, ARG0, p2 / pointed)
(c3 / contrast-01, ARG1, b3 / bush)
(c3 / contrast-01, ARG2, e / eat-01)
(e / eat-01, ARG0, h / he)
(e / eat-01, ARG1, b / baobab)
(e / eat-01, ARG2, b2 / big)
(e / eat-01, direction, u / up)
(p / prince, mod, l2 / little)
(p2 / pointed, ARG0, i / i)
(t / take-01, ARG0, h / he)
(t / take-01, ARG2, p / prince)
(t2 / that, op, e / eat-01)
(t3 / that, mod, b3 / bush)

Decoded in 1,489,853 microseconds
Sentence: The idea of the herd of elephants made the little prince laugh .


--- Decoder1 ---

Sentence: The idea of the herd of elephants made the little prince laugh .
word = The
Finding date entities
Possible invoked concepts: List()
word = idea
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = herd
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = elephants
Finding date entities
Possible invoked concepts: List()
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = laugh
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(laugh),laugh-01,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(laugh),laugh-01,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(laugh),laugh-01,PhraseConceptFeatures(5.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.029773585223834276,PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false)),1)), None, None, None, None, None, Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),7)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),9)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),10)), Some((0.029773585223834276,PhraseConceptPair(List(laugh),laugh-01,PhraseConceptFeatures(5.0,0.0,false,false)),11)), None)
Adding concept: laugh-01
nodeIds = List(0)
concepts = List(laugh-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(laugh),laugh-01,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: prince
nodeIds = List(1)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.05948454967536383
Adding concept: little
nodeIds = List(2)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.08210336140699738
Adding concept: make-01
nodeIds = List(3)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.09418689945073865
Adding concept: idea
nodeIds = List(4)
concepts = List(idea)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(idea),idea,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.12396048467457292
Decoder1 Spans:
Span 1:  idea => idea
Span 2:  laugh => laugh-01
Span 3:  little => little
Span 4:  made => make-01
Span 5:  prince => prince
Decoder1 feats:
bias 5.0
c|p -2.462859059391874
len 5.0

Concepts:
id = 2 concept = little
id = 1 concept = prince
id = 4 concept = idea
id = 0 concept = laugh-01
id = 3 concept = make-01
Spans:
Span 1-2:  idea => idea
Span 11-12:  laugh => laugh-01
Span 9-10:  little => little
Span 7-8:  made => make-01
Span 10-11:  prince => prince

rootDependencyPaths = List(List(7, 1, 0), List(7, 1), List(7, 1, 2), List(7, 1, 2, 4, 3), List(7, 1, 2, 4), List(7, 1, 2, 4, 5), List(7, 1, 2, 4, 5, 6), List(7), List(7, 11, 8), List(7, 11, 9), List(7, 11, 10), List(7, 11), List(7, 12))
getNodeById = Map(2 -> little, 1 -> prince, 4 -> idea, 0 -> laugh-01, 3 -> make-01)
getNodeById2 = Map(2 -> little, 1 -> prince, 4 -> idea, 0 -> laugh-01, 3 -> make-01)
getNodeById = Map(2 -> little, 1 -> prince, 4 -> idea, 0 -> laugh-01, 3 -> make-01)
getNodeById2 = Map(2 -> little, 1 -> prince, 4 -> idea, 0 -> laugh-01, 3 -> make-01)
Node = 3
Node = 1
Node = 0
Node = 2
Node = 4
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -73.58657026393053
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
herd List()
elephant List()
laugh-01 List()
little List()
prince List()
idea List()
make-02 List()
OracleGraph nodes = List(herd, elephant, laugh-01, little, prince, idea, make-02)
OracleGraph triples: (e / elephant, consist, h / herd)
(i / idea, topic, h / herd)
(l / laugh-01, ARG0, p / prince)
(m / make-02, ARG0, i / idea)
(m / make-02, ARG1, l / laugh-01)
(p / prince, mod, l2 / little)
rootDependencyPaths = List(List(7, 1, 0), List(7, 1), List(7, 1, 2), List(7, 1, 2, 4, 3), List(7, 1, 2, 4), List(7, 1, 2, 4, 5), List(7, 1, 2, 4, 5, 6), List(7), List(7, 11, 8), List(7, 11, 9), List(7, 11, 10), List(7, 11), List(7, 12))
Oracle Span 6-7:  elephants => elephant
Oracle Span 4-5:  herd => herd
Oracle Span 1-2:  idea => idea
Oracle Span 11-12:  laugh => laugh-01
Oracle Span 9-10:  little => little
Oracle Span 7-8:  made => make-02
Oracle Span 10-11:  prince => prince

Incorrect span: made => make-01
Missing span: made => make-02
Missing span: herd => herd
Missing span: elephants => elephant
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	idea	_	NN	NN	_	8	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	herd	_	NN	NN	_	3	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	elephants	_	NNS	NNS	_	6	pobj	_	_
8	made	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	12	det	_	_
10	little	_	JJ	JJ	_	12	amod	_	_
11	prince	_	NN	NN	_	12	nn	_	_
12	laugh	_	NN	NN	_	8	dobj	_	_
13	.	_	.	.	_	8	punct	_	_

Oracle:
(e / elephant, consist, h / herd)
(i / idea, topic, h / herd)
(l / laugh-01, ARG0, p / prince)
(m / make-02, ARG0, i / idea)
(m / make-02, ARG1, l / laugh-01)
(p / prince, mod, l2 / little)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),laugh,laugh-01,false), Span(10,11,List(1),prince,prince,false), Span(9,10,List(2),little,little,false), Span(7,8,List(3),made,make-01,false), Span(1,2,List(4),idea,idea,false)),Map(2 -> little, 1 -> prince, 4 -> idea, 0 -> laugh-01, 3 -> make-01),Map(m -> make-01, p -> prince, i -> idea, l2 -> little, l -> laugh-01))),[Ljava.lang.String;@58cbafc2,Annotation([Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0,[Ljava.lang.String;@74d1dc36),Annotation([Ljava.lang.String;@7161d8d1,[Ljava.lang.String;@74e28667,[Ledu.cmu.lti.nlp.amr.Dependency;@1cf6d1be),Annotation([Ljava.lang.String;@663c9e7a,[Ljava.lang.String;@19e4653c,[Ljava.lang.String;@795509d9),Annotation([Ljava.lang.String;@53045c6c,[Ljava.lang.String;@5149d738,[Ledu.cmu.lti.nlp.amr.Entity;@6bbe85a8))
AMR:
(l / laugh-01, ARG0, i / idea)
(l / laugh-01, ARG1, p / prince)
(l / laugh-01, mod, l2 / little)
(m / make-01, ARG1, p / prince)

Decoded in 25,978 microseconds
Sentence: " We would have to put them one on top of the other , " he said .


--- Decoder1 ---

Sentence: " We would have to put them one on top of the other , " he said .
word = "
Finding date entities
Possible invoked concepts: List()
word = We
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false)))
concept = PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false))
score = 0
adding concept:PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = put
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(put),put-01,PhraseConceptFeatures(9.0,-1.7346010553881064,false,false)), PhraseConceptPair(List(put),put-03,PhraseConceptFeatures(1.0,-3.9318256327243257,false,false)), PhraseConceptPair(List(put),put-09,PhraseConceptFeatures(6.0,-2.1400661634962708,false,false)))
concept = PhraseConceptPair(List(put),put-01,PhraseConceptFeatures(9.0,-1.7346010553881064,false,false))
score = 0
adding concept:PhraseConceptPair(List(put),put-01,PhraseConceptFeatures(9.0,-1.7346010553881064,false,false))
concept = PhraseConceptPair(List(put),put-03,PhraseConceptFeatures(1.0,-3.9318256327243257,false,false))
score = 0
concept = PhraseConceptPair(List(put),put-09,PhraseConceptFeatures(6.0,-2.1400661634962708,false,false))
score = 0
word = them
Finding date entities
Possible invoked concepts: List()
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = top
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(top),top,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(top),top,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(top),top,PhraseConceptFeatures(1.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = other
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false)))
concept = PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false))
score = 0
adding concept:PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.02792972676891532,PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false)),1)), None, Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),3)), None, Some((0.012231178949280379,PhraseConceptPair(List(put),put-01,PhraseConceptFeatures(9.0,-1.7346010553881064,false,false)),5)), None, Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),7)), None, Some((0.029773585223834276,PhraseConceptPair(List(top),top,PhraseConceptFeatures(1.0,0.0,false,false)),9)), None, None, Some((0.02858241918751923,PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false)),12)), None, None, Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),15)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),16)), None)
Adding concept: say-01
nodeIds = List(0)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: he
nodeIds = List(1)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.055392385104254774
Adding concept: other
nodeIds = List(2)
concepts = List(other)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false))
feats:
bias 1.0
c|p -0.11778303565638351
len 1.0

score:
0.08397480429177401
Adding concept: top
nodeIds = List(3)
concepts = List(top)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(top),top,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11374838951560828
Adding concept: 1
nodeIds = List(4)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.12440596636191664
Adding concept: put-01
nodeIds = List(5)
concepts = List(put-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(put),put-01,PhraseConceptFeatures(9.0,-1.7346010553881064,false,false))
feats:
bias 1.0
c|p -1.7346010553881064
len 1.0

score:
0.13663714531119703
Adding concept: have-03
nodeIds = List(6)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.13680164965780167
Adding concept: we
nodeIds = List(7)
concepts = List(we)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false))
feats:
bias 1.0
c|p -0.1823215567939546
len 1.0

score:
0.16473137642671698
Decoder1 Spans:
Span 1:  have => have-03
Span 2:  he => he
Span 3:  one => 1
Span 4:  other => other
Span 5:  put => put-01
Span 6:  said => say-01
Span 7:  top => top
Span 8:  We => we
Decoder1 feats:
bias 8.0
c|p -7.263491531097087
len 8.0

Concepts:
id = 2 concept = other
id = 5 concept = put-01
id = 7 concept = we
id = 1 concept = he
id = 4 concept = 1
id = 6 concept = have-03
id = 0 concept = say-01
id = 3 concept = top
Spans:
Span 3-4:  have => have-03
Span 15-16:  he => he
Span 7-8:  one => 1
Span 12-13:  other => other
Span 5-6:  put => put-01
Span 16-17:  said => say-01
Span 9-10:  top => top
Span 1-2:  We => we

rootDependencyPaths = List(List(16, 0), List(16, 3, 1), List(16, 3, 2), List(16, 3), List(16, 3, 5, 4), List(16, 3, 5), List(16, 3, 5, 7, 6), List(16, 3, 5, 7), List(16, 3, 5, 7, 8), List(16, 3, 5, 7, 8, 9), List(16, 3, 5, 7, 8, 9, 10), List(16, 3, 5, 7, 8, 9, 10, 12, 11), List(16, 3, 5, 7, 8, 9, 10, 12), List(16, 13), List(16, 14), List(16, 15), List(16), List(16, 17))
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 157.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 3
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 153.86135352036464
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 150.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 3
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 146.86135352036464
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 143.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 3
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 139.86135352036464
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 136.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 3
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 132.86135352036464
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 129.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 3
Node = 1
Node = 5
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 126.04597583978457
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 3
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 122.86135352036463
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 119.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 3
Node = 1
Node = 5
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 116.75708072007328
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 5
Node = 3
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 112.12182857808072
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 107.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 3
Node = 1
Node = 5
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 104.75708072007328
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 5
Node = 3
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 100.12182857808072
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 95.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 3
Node = 1
Node = 5
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 92.75708072007328
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 5
Node = 3
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 88.12182857808072
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 83.33563068181365
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 6
Node = 3
Node = 2
Node = 1
Node = 5
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 81.54290179206001
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 5
Node = 3
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 77.8688723029622
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 75.08267440669516
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 3
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 74.31950212553484
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 5
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 71.34314946441123
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 70.08267440669516
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 3
Node = 1
Node = 5
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 69.50412444495478
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 5
Node = 3
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 66.8688723029622
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 64.08267440669516
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 3
Node = 1
Node = 5
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 63.50412444495478
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 5
Node = 3
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 60.8688723029622
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 58.08267440669516
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 3
Node = 1
Node = 5
Node = 7
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 57.50412444495478
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 5
Node = 7
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 54.91449248337592
getNodeById = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
getNodeById2 = Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 5
Node = 7
Node = 3
Node = 4
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 53.65401742565983
Langrangian relaxation converged after 36 iterations. Delta = 0.0
Node.spans:
they List()
obligate-01 List()
we List()
stack-01 List()
he List()
say-01 List()
clearUnalignedNodes():  removing unaligned node: Some(t) / they
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
clearUnalignedNodes():  removing unaligned node: Some(s2) / stack-01
OracleGraph nodes = List(we, he, say-01)
OracleGraph triples: (s / say-01, ARG0, h / he)
rootDependencyPaths = List(List(16, 0), List(16, 3, 1), List(16, 3, 2), List(16, 3), List(16, 3, 5, 4), List(16, 3, 5), List(16, 3, 5, 7, 6), List(16, 3, 5, 7), List(16, 3, 5, 7, 8), List(16, 3, 5, 7, 8, 9), List(16, 3, 5, 7, 8, 9, 10), List(16, 3, 5, 7, 8, 9, 10, 12, 11), List(16, 3, 5, 7, 8, 9, 10, 12), List(16, 13), List(16, 14), List(16, 15), List(16), List(16, 17))
Oracle Span 15-16:  he => he
Oracle Span 16-17:  said => say-01
Oracle Span 1-2:  We => we

Extra span: other => other
Extra span: top => top
Extra span: one => 1
Extra span: put => put-01
Extra span: have => have-03
Dependencies:
1	"	_	''	''	_	17	punct	_	_
2	We	_	PRP	PRP	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	have	_	VB	VB	_	17	ccomp	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	put	_	VB	VB	_	4	xcomp	_	_
7	them	_	PRP	PRP	_	8	nsubj	_	_
8	one	_	CD	CD	_	6	xcomp	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	top	_	NN	NN	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	other	_	JJ	JJ	_	11	pobj	_	_
14	,	_	,	,	_	17	punct	_	_
15	"	_	''	''	_	17	punct	_	_
16	he	_	PRP	PRP	_	17	nsubj	_	_
17	said	_	VBD	VBD	_	0	root	_	_
18	.	_	.	.	_	17	punct	_	_

Oracle:
(s / say-01, ARG0, h / he)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),said,say-01,false), Span(15,16,List(1),he,he,false), Span(12,13,List(2),other,other,false), Span(9,10,List(3),top,top,false), Span(7,8,List(4),one,1,false), Span(5,6,List(5),put,put-01,false), Span(3,4,List(6),have,have-03,false), Span(1,2,List(7),We,we,false)),Map(2 -> other, 5 -> put-01, 7 -> we, 1 -> he, 4 -> 1, 6 -> have-03, 0 -> say-01, 3 -> top),Map(w -> we, h -> he, h2 -> have-03, t -> top, s -> say-01, p -> put-01, 1 -> 1, o -> other))),[Ljava.lang.String;@3a7442c7,Annotation([Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a,[Ljava.lang.String;@4b013c76),Annotation([Ljava.lang.String;@53fb3dab,[Ljava.lang.String;@cb0755b,[Ledu.cmu.lti.nlp.amr.Dependency;@33065d67),Annotation([Ljava.lang.String;@712625fd,[Ljava.lang.String;@7bba5817,[Ljava.lang.String;@742ff096),Annotation([Ljava.lang.String;@75437611,[Ljava.lang.String;@350aac89,[Ledu.cmu.lti.nlp.amr.Entity;@1c5920df))
AMR:
(h2 / have-03, ARG0, w / we)
(h2 / have-03, ARG1, p / put-01)
(p / put-01, ARG0, w / we)
(p / put-01, ARG1, 1 / 1)
(p / put-01, ARG2, t / top)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, h2 / have-03)
(s / say-01, ARG2, o / other)

Decoded in 162,268 microseconds
Sentence: But he made a wise comment : " Before they grow so big , the baobabs start out by being little . "


--- Decoder1 ---

Sentence: But he made a wise comment : " Before they grow so big , the baobabs start out by being little . "
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = wise
Finding date entities
Possible invoked concepts: List()
word = comment
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = Before
Finding date entities
Possible invoked concepts: List()
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = grow
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = big
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = start
Finding date entities
Possible invoked concepts: List()
word = out
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(out),out,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)))
concept = PhraseConceptPair(List(out),out,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
word = by
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)))
concept = PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
score = 0
adding concept:PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
word = being
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(being),being,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(being),being,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(being),being,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = .
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),1)), Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),2)), None, None, None, None, None, None, Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),9)), Some((0.015753682017072397,PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),10)), Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false)),12)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),15)), None, None, Some((0.008432529785513981,PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)),18)), Some((0.015753682017072397,PhraseConceptPair(List(being),being,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),19)), Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),20)), None, None)
Adding concept: little
nodeIds = List(0)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.022618811731633548
Adding concept: being
nodeIds = List(1)
concepts = List(being)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(being),being,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.03837249374870594
Adding concept: by
nodeIds = List(2)
concepts = List(by)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
feats:
bias 1.0
c|p -2.1102132003465894
len 1.0

score:
0.04680502353421992
Adding concept: baobab
nodeIds = List(3)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0765786087580542
Adding concept: big
nodeIds = List(4)
concepts = List(big)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(big),big,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10635219398188847
Adding concept: so
nodeIds = List(5)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.1316574263116626
Adding concept: grow-02
nodeIds = List(6)
concepts = List(grow-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.147411108328735
Adding concept: they
nodeIds = List(7)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.16998917302871192
Adding concept: make-01
nodeIds = List(8)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.18207271107245318
Adding concept: he
nodeIds = List(9)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.2076915109528737
Adding concept: contrast-01
nodeIds = List(10)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.2283998521648686
Decoder1 Spans:
Span 1:  baobabs => baobab
Span 2:  being => being
Span 3:  big => big
Span 4:  But => contrast-01
Span 5:  by => by
Span 6:  grow => grow-02
Span 7:  he => he
Span 8:  little => little
Span 9:  made => make-01
Span 10:  so => so
Span 11:  they => they
Decoder1 feats:
bias 11.0
c|p -9.800000556660269
len 11.0

Concepts:
id = 2 concept = by
id = 5 concept = so
id = 8 concept = make-01
id = 7 concept = they
id = 1 concept = being
id = 4 concept = big
id = 6 concept = grow-02
id = 9 concept = he
id = 0 concept = little
id = 10 concept = contrast-01
id = 3 concept = baobab
Spans:
Span 15-16:  baobabs => baobab
Span 19-20:  being => being
Span 12-13:  big => big
Span 0-1:  But => contrast-01
Span 18-19:  by => by
Span 10-11:  grow => grow-02
Span 1-2:  he => he
Span 20-21:  little => little
Span 2-3:  made => make-01
Span 11-12:  so => so
Span 9-10:  they => they

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 5, 3), List(2, 5, 4), List(2, 5), List(2, 6), List(2, 7), List(2, 16, 10, 8), List(2, 16, 10, 9), List(2, 16, 10), List(2, 16, 10, 12, 11), List(2, 16, 10, 12), List(2, 16, 13), List(2, 16, 15, 14), List(2, 16, 15), List(2, 16), List(2, 16, 17), List(2, 16, 18), List(2, 16, 18, 20, 19), List(2, 16, 18, 20), List(2, 21), List(2, 22))
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 1
Node = 3
Node = 9
Node = 6
Node = 4
Node = 0
Node = 7
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -184.31569797131436
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 1
Node = 3
Node = 9
Node = 6
Node = 4
Node = 0
Node = 7
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -190.31569797131436
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 1
Node = 3
Node = 9
Node = 6
Node = 4
Node = 7
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -195.7417642396626
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 1
Node = 2
Node = 3
Node = 9
Node = 6
Node = 4
Node = 0
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -200.88211928286216
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 1
Node = 2
Node = 3
Node = 9
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -204.30818555121039
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 1
Node = 2
Node = 3
Node = 9
Node = 6
Node = 4
Node = 0
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -207.88211928286216
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 1
Node = 2
Node = 3
Node = 9
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -210.51999945511932
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 2
Node = 3
Node = 9
Node = 1
Node = 6
Node = 4
Node = 0
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -215.08516721050154
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 3
Node = 9
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -217.72304738275875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -221.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 3
Node = 9
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -222.51123347884976
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -224.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 3
Node = 9
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -225.51123347884976
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -227.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 3
Node = 9
Node = 6
Node = 4
Node = 7
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -227.94481216730202
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -231.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 3
Node = 9
Node = 6
Node = 4
Node = 7
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -231.94481216730202
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -235.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 3
Node = 9
Node = 6
Node = 4
Node = 2
Node = 7
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -235.61997298293335
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 9
Node = 3
Node = 6
Node = 4
Node = 7
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -238.625673522981
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -240.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 3
Node = 9
Node = 6
Node = 4
Node = 2
Node = 7
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -240.61997298293335
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 9
Node = 3
Node = 6
Node = 4
Node = 7
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -243.625673522981
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -245.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 3
Node = 9
Node = 6
Node = 4
Node = 2
Node = 7
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -245.61997298293335
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 9
Node = 3
Node = 6
Node = 4
Node = 7
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -248.625673522981
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -250.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 3
Node = 9
Node = 6
Node = 4
Node = 2
Node = 7
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -250.61997298293335
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 9
Node = 3
Node = 6
Node = 4
Node = 7
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -253.625673522981
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -255.19209483452875
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 3
Node = 9
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -255.53022221896697
getNodeById = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab)
getNodeById2 = Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 0 -> little, 9 -> he, 3 -> baobab, 10 -> contrast-01)
Node = 10
Node = 8
Node = 0
Node = 2
Node = 9
Node = 3
Node = 1
Node = 6
Node = 4
Node = 7
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -257.21108357464595
Langrangian relaxation converged after 32 iterations. Delta = 0.0
Node.spans:
he List()
so List()
before List()
wise List()
grow-02 List()
little List()
big List()
start-05 List()
comment-02 List()
contrast-01 List()
baobab List()
OracleGraph nodes = List(he, so, before, wise, grow-02, little, big, start-05, comment-02, contrast-01, baobab)
OracleGraph triples: (b4 / before, op, g / grow-02)
(b5 / big, degree, s2 / so)
(c / comment-02, ARG0, h / he)
(c / comment-02, ARG1, s / start-05)
(c / comment-02, manner, w / wise)
(c2 / contrast-01, ARG2, c / comment-02)
(g / grow-02, ARG1, b2 / baobab)
(g / grow-02, ARG2, b5 / big)
(s / start-05, ARG0, b2 / baobab)
(s / start-05, ARG2, l / little)
(s / start-05, time, b4 / before)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 5, 3), List(2, 5, 4), List(2, 5), List(2, 6), List(2, 7), List(2, 16, 10, 8), List(2, 16, 10, 9), List(2, 16, 10), List(2, 16, 10, 12, 11), List(2, 16, 10, 12), List(2, 16, 13), List(2, 16, 15, 14), List(2, 16, 15), List(2, 16), List(2, 16, 17), List(2, 16, 18), List(2, 16, 18, 20, 19), List(2, 16, 18, 20), List(2, 21), List(2, 22))
Oracle Span 15-16:  baobabs => baobab
Oracle Span 8-9:  Before => before
Oracle Span 12-13:  big => big
Oracle Span 0-1:  But => contrast-01
Oracle Span 5-6:  comment => comment-02
Oracle Span 10-11:  grow => grow-02
Oracle Span 1-2:  he => he
Oracle Span 20-21:  little => little
Oracle Span 11-12:  so => so
Oracle Span 16-17:  start => start-05
Oracle Span 4-5:  wise => wise

Extra span: being => being
Extra span: by => by
Extra span: they => they
Extra span: made => make-01
Missing span: comment => comment-02
Missing span: wise => wise
Missing span: start => start-05
Missing span: Before => before
Dependencies:
1	But	_	CC	CC	_	3	cc	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	made	_	VBD	VBD	_	0	root	_	_
4	a	_	DT	DT	_	6	det	_	_
5	wise	_	JJ	JJ	_	6	amod	_	_
6	comment	_	NN	NN	_	3	dobj	_	_
7	:	_	:	:	_	3	punct	_	_
8	"	_	''	''	_	3	punct	_	_
9	Before	_	IN	IN	_	11	mark	_	_
10	they	_	PRP	PRP	_	11	nsubj	_	_
11	grow	_	VBP	VBP	_	17	advcl	_	_
12	so	_	RB	RB	_	13	advmod	_	_
13	big	_	JJ	JJ	_	11	acomp	_	_
14	,	_	,	,	_	17	punct	_	_
15	the	_	DT	DT	_	16	det	_	_
16	baobabs	_	NNS	NNS	_	17	nsubj	_	_
17	start	_	VBP	VBP	_	3	ccomp	_	_
18	out	_	RP	RP	_	17	prt	_	_
19	by	_	IN	IN	_	17	prep	_	_
20	being	_	VBG	VBG	_	21	cop	_	_
21	little	_	JJ	JJ	_	19	pcomp	_	_
22	.	_	.	.	_	3	punct	_	_
23	"	_	''	''	_	3	punct	_	_

Oracle:
(b4 / before, op, g / grow-02)
(b5 / big, degree, s2 / so)
(c / comment-02, ARG0, h / he)
(c / comment-02, ARG1, s / start-05)
(c / comment-02, manner, w / wise)
(c2 / contrast-01, ARG2, c / comment-02)
(g / grow-02, ARG1, b2 / baobab)
(g / grow-02, ARG2, b5 / big)
(s / start-05, ARG0, b2 / baobab)
(s / start-05, ARG2, l / little)
(s / start-05, time, b4 / before)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),little,little,false), Span(19,20,List(1),being,being,false), Span(18,19,List(2),by,by,false), Span(15,16,List(3),baobabs,baobab,false), Span(12,13,List(4),big,big,false), Span(11,12,List(5),so,so,false), Span(10,11,List(6),grow,grow-02,false), Span(9,10,List(7),they,they,false), Span(2,3,List(8),made,make-01,false), Span(1,2,List(9),he,he,false), Span(0,1,List(10),But,contrast-01,false)),Map(2 -> by, 5 -> so, 8 -> make-01, 7 -> they, 1 -> being, 4 -> big, 6 -> grow-02, 9 -> he, 0 -> little, 10 -> contrast-01, 3 -> baobab),Map(b3 -> baobab, h -> he, t -> they, b -> being, b2 -> by, s -> so, m -> make-01, g -> grow-02, b4 -> big, c -> contrast-01, l -> little))),[Ljava.lang.String;@17f9d882,Annotation([Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3,[Ljava.lang.String;@4c60d6e9),Annotation([Ljava.lang.String;@15043a2f,[Ljava.lang.String;@4a83a74a,[Ledu.cmu.lti.nlp.amr.Dependency;@1349883),Annotation([Ljava.lang.String;@4b29d1d2,[Ljava.lang.String;@7f485fda,[Ljava.lang.String;@28261e8e),Annotation([Ljava.lang.String;@d737b89,[Ljava.lang.String;@8519cb4,[Ledu.cmu.lti.nlp.amr.Entity;@35dab4eb))
AMR:
(b2 / by, op, b / being)
(b4 / big, degree, s / so)
(c / contrast-01, ARG0, b2 / by)
(c / contrast-01, ARG1, l / little)
(c / contrast-01, ARG2, m / make-01)
(g / grow-02, ARG0, b3 / baobab)
(g / grow-02, ARG1, t / they)
(g / grow-02, duration, b4 / big)
(m / make-01, ARG0, b3 / baobab)
(m / make-01, ARG1, h / he)

Decoded in 239,003 microseconds
Sentence: " That is strictly correct , "


--- Decoder1 ---

Sentence: " That is strictly correct , "
word = "
Finding date entities
Possible invoked concepts: List()
word = That
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false)))
concept = PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
score = 0
adding concept:PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = strictly
Finding date entities
Possible invoked concepts: List()
word = correct
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.0293031179589661,PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false)),1)), None, None, None, None, None)
Adding concept: that
nodeIds = List(0)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
feats:
bias 1.0
c|p -0.04652001563489282
len 1.0

score:
0.029303117958966104
Decoder1 Spans:
Span 1:  That => that
Decoder1 feats:
bias 1.0
c|p -0.04652001563489282
len 1.0

Concepts:
id = 0 concept = that
Spans:
Span 1-2:  That => that

rootDependencyPaths = List(List(0), List(0, 4, 1), List(0, 4, 2), List(0, 4, 3), List(0, 4), List(0, 4, 5), List(0, 4, 6))
getNodeById = Map(0 -> that)
getNodeById2 = Map(0 -> that)
getNodeById = Map(0 -> that)
getNodeById2 = Map(0 -> that)
Node = 0
visited = Set(0)
Alg2 returning score = -10.850506005225908
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
that List()
strict List()
correct List()
OracleGraph nodes = List(that, strict, correct)
OracleGraph triples: (c / correct, domain, t / that)
(c / correct, mod, s / strict)
rootDependencyPaths = List(List(0), List(0, 4, 1), List(0, 4, 2), List(0, 4, 3), List(0, 4), List(0, 4, 5), List(0, 4, 6))
Oracle Span 4-5:  correct => correct
Oracle Span 3-4:  strictly => strict
Oracle Span 1-2:  That => that

Missing span: correct => correct
Missing span: strictly => strict
Dependencies:
1	"	_	VB	VB	_	0	root	_	_
2	That	_	DT	DT	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	strictly	_	RB	RB	_	5	advmod	_	_
5	correct	_	JJ	JJ	_	1	ccomp	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_

Oracle:
(c / correct, domain, t / that)
(c / correct, mod, s / strict)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),That,that,false)),Map(0 -> that),Map(t -> that))),[Ljava.lang.String;@2d901eb0,Annotation([Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845,[Ljava.lang.String;@5f049ea1),Annotation([Ljava.lang.String;@72cc7e6f,[Ljava.lang.String;@5afa3c9,[Ledu.cmu.lti.nlp.amr.Dependency;@72035809),Annotation([Ljava.lang.String;@909217e,[Ljava.lang.String;@18271936,[Ljava.lang.String;@606e4010),Annotation([Ljava.lang.String;@8458f04,[Ljava.lang.String;@48075da3,[Ledu.cmu.lti.nlp.amr.Entity;@68c9133c))
AMR:


Decoded in 5,760 microseconds
Sentence: I said .


--- Decoder1 ---

Sentence: I said .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),1)), None)
Adding concept: say-01
nodeIds = List(0)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: i
nodeIds = List(1)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.05582279164206354
Decoder1 Spans:
Span 1:  I => i
Span 2:  said => say-01
Decoder1 feats:
bias 2.0
c|p -0.36826825839956406
len 2.0

Concepts:
id = 1 concept = i
id = 0 concept = say-01
Spans:
Span 0-1:  I => i
Span 1-2:  said => say-01

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2))
getNodeById = Map(1 -> i, 0 -> say-01)
getNodeById2 = Map(1 -> i, 0 -> say-01)
getNodeById = Map(1 -> i, 0 -> say-01)
getNodeById2 = Map(1 -> i, 0 -> say-01)
Node = 0
Node = 1
visited = Set(0, 1)
Alg2 returning score = 228.9954958569056
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
i List()
say-01 List()
OracleGraph nodes = List(i, say-01)
OracleGraph triples: (s / say-01, ARG0, i / i)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2))
Oracle Span 0-1:  I => i
Oracle Span 1-2:  said => say-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	.	_	.	.	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),said,say-01,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> say-01),Map(s -> say-01, i -> i))),[Ljava.lang.String;@7a35b0f5,Annotation([Ljava.lang.String;@5e2c3d18,[Ljava.lang.String;@2cb4893b,[Ljava.lang.String;@cc43f62),Annotation([Ljava.lang.String;@5b218417,[Ljava.lang.String;@645aa696,[Ledu.cmu.lti.nlp.amr.Dependency;@6caf0677),Annotation([Ljava.lang.String;@413d1baf,[Ljava.lang.String;@16eb3ea3,[Ljava.lang.String;@273444fe),Annotation([Ljava.lang.String;@33bc72d1,[Ljava.lang.String;@1a75e76a,[Ledu.cmu.lti.nlp.amr.Entity;@5524cca1))
AMR:
(s / say-01, ARG0, i / i)

Decoded in 4,187 microseconds
Sentence: " But why do you want the sheep to eat the little baobabs ? "


--- Decoder1 ---

Sentence: " But why do you want the sheep to eat the little baobabs ? "
word = "
Finding date entities
Possible invoked concepts: List()
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = why
Finding date entities
Possible invoked concepts: List()
word = do
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false)), PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)))
concept = PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false))
score = 0
concept = PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
score = 0
adding concept:PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = want
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false)))
concept = PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = sheep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)))
concept = PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = eat
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),1)), None, Some((0.008412119642531832,PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)),3)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),4)), Some((0.029773585223834276,PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false)),5)), None, Some((0.029773585223834276,PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false)),7)), None, Some((0.029773585223834276,PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false)),9)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),12)), None, None)
Adding concept: baobab
nodeIds = List(0)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: little
nodeIds = List(1)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.052392396955467824
Adding concept: eat-01
nodeIds = List(2)
concepts = List(eat-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(eat),eat-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0821659821793021
Adding concept: sheep
nodeIds = List(3)
concepts = List(sheep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sheep),sheep,PhraseConceptFeatures(17.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11193956740313638
Adding concept: want-01
nodeIds = List(4)
concepts = List(want-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(want),want-01,PhraseConceptFeatures(13.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.14171315262697065
Adding concept: you
nodeIds = List(5)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.16885851572182609
Adding concept: do-02
nodeIds = List(6)
concepts = List(do-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
feats:
bias 1.0
c|p -2.1122313645028266
len 1.0

score:
0.17727063536435791
Adding concept: contrast-01
nodeIds = List(7)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.19797897657635283
Decoder1 Spans:
Span 1:  baobabs => baobab
Span 2:  But => contrast-01
Span 3:  do => do-02
Span 4:  eat => eat-01
Span 5:  little => little
Span 6:  sheep => sheep
Span 7:  want => want-01
Span 8:  you => you
Decoder1 feats:
bias 8.0
c|p -3.9759538121505633
len 8.0

Concepts:
id = 2 concept = eat-01
id = 5 concept = you
id = 7 concept = contrast-01
id = 1 concept = little
id = 4 concept = want-01
id = 6 concept = do-02
id = 0 concept = baobab
id = 3 concept = sheep
Spans:
Span 12-13:  baobabs => baobab
Span 1-2:  But => contrast-01
Span 3-4:  do => do-02
Span 9-10:  eat => eat-01
Span 11-12:  little => little
Span 7-8:  sheep => sheep
Span 5-6:  want => want-01
Span 4-5:  you => you

rootDependencyPaths = List(List(5, 0), List(5, 0, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 7, 6), List(5, 7), List(5, 7, 9, 8), List(5, 7, 9), List(5, 7, 9, 12, 10), List(5, 7, 9, 12, 11), List(5, 7, 9, 12), List(5, 13), List(5, 14))
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 2
Node = 3
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -40.35117296087033
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 2
Node = 3
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -42.35117296087033
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 3
Node = 5
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -43.37494568241436
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 2
Node = 3
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -45.35117296087033
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 3
Node = 5
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -46.37494568241436
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 2
Node = 3
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -48.35117296087033
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 3
Node = 5
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -49.37494568241436
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 2
Node = 3
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -51.35117296087033
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 3
Node = 5
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -52.37494568241436
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 2
Node = 3
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -54.35117296087033
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 6
Node = 3
Node = 5
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -55.37494568241436
getNodeById = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
getNodeById2 = Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep)
Node = 7
Node = 4
Node = 2
Node = 6
Node = 3
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -56.50821202756556
Langrangian relaxation converged after 12 iterations. Delta = 0.0
Node.spans:
amr-unknown List()
little List()
baobab List()
eat-01 List()
want-01 List()
cause-01 List()
contrast-01 List()
sheep List()
you List()
clearUnalignedNodes():  removing unaligned node: Some(a) / amr-unknown
clearUnalignedNodes():  removing unaligned node: Some(c2) / cause-01
OracleGraph nodes = List(little, baobab, eat-01, want-01, contrast-01, sheep, you)
OracleGraph triples: (b / baobab, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / baobab)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, e / eat-01)
rootDependencyPaths = List(List(5, 0), List(5, 0, 1), List(5, 2), List(5, 3), List(5, 4), List(5), List(5, 7, 6), List(5, 7), List(5, 7, 9, 8), List(5, 7, 9), List(5, 7, 9, 12, 10), List(5, 7, 9, 12, 11), List(5, 7, 9, 12), List(5, 13), List(5, 14))
Oracle Span 12-13:  baobabs => baobab
Oracle Span 1-2:  But => contrast-01
Oracle Span 9-10:  eat => eat-01
Oracle Span 11-12:  little => little
Oracle Span 7-8:  sheep => sheep
Oracle Span 5-6:  want => want-01
Oracle Span 4-5:  you => you

Extra span: do => do-02
Dependencies:
1	"	_	UH	UH	_	6	discourse	_	_
2	But	_	UH	UH	_	1	dep	_	_
3	why	_	WRB	WRB	_	6	advmod	_	_
4	do	_	VBP	VBP	_	6	aux	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	want	_	VB	VB	_	0	root	_	_
7	the	_	DT	DT	_	8	det	_	_
8	sheep	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	eat	_	VB	VB	_	8	vmod	_	_
11	the	_	DT	DT	_	13	det	_	_
12	little	_	JJ	JJ	_	13	amod	_	_
13	baobabs	_	NNS	NNS	_	10	dobj	_	_
14	?	_	.	.	_	6	punct	_	_
15	"	_	''	''	_	6	punct	_	_

Oracle:
(b / baobab, mod, l / little)
(e / eat-01, ARG0, s / sheep)
(e / eat-01, ARG1, b / baobab)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, e / eat-01)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),baobabs,baobab,false), Span(11,12,List(1),little,little,false), Span(9,10,List(2),eat,eat-01,false), Span(7,8,List(3),sheep,sheep,false), Span(5,6,List(4),want,want-01,false), Span(4,5,List(5),you,you,false), Span(3,4,List(6),do,do-02,false), Span(1,2,List(7),But,contrast-01,false)),Map(2 -> eat-01, 5 -> you, 7 -> contrast-01, 1 -> little, 4 -> want-01, 6 -> do-02, 0 -> baobab, 3 -> sheep),Map(w -> want-01, e -> eat-01, b -> baobab, s -> sheep, d -> do-02, y -> you, c -> contrast-01, l -> little))),[Ljava.lang.String;@5032714f,Annotation([Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6,[Ljava.lang.String;@4681c175),Annotation([Ljava.lang.String;@57a78e3,[Ljava.lang.String;@402c4085,[Ledu.cmu.lti.nlp.amr.Dependency;@6fa51cd4),Annotation([Ljava.lang.String;@2767e23c,[Ljava.lang.String;@710c2b53,[Ljava.lang.String;@5386659f),Annotation([Ljava.lang.String;@14028087,[Ljava.lang.String;@cecf639,[Ledu.cmu.lti.nlp.amr.Entity;@1caa0244))
AMR:
(b / baobab, mod, l / little)
(c / contrast-01, ARG2, w / want-01)
(d / do-02, ARG1, w / want-01)
(e / eat-01, ARG1, b / baobab)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, s / sheep)
(w / want-01, ARG2, e / eat-01)

Decoded in 68,158 microseconds
Sentence: He answered me at once , " Oh , come , come ! " , as if he were speaking of something that was self - evident .


--- Decoder1 ---

Sentence: He answered me at once , " Oh , come , come ! " , as if he were speaking of something that was self - evident .
word = He
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false)))
concept = PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
word = answered
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(answered),answer-01,PhraseConceptFeatures(15.0,0.0,false,false)))
concept = PhraseConceptPair(List(answered),answer-01,PhraseConceptFeatures(15.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(answered),answer-01,PhraseConceptFeatures(15.0,0.0,false,false))
word = me
Finding date entities
Possible invoked concepts: List()
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = once
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false)), PhraseConceptPair(List(once),once-more,PhraseConceptFeatures(1.0,-3.258096538021482,false,false)))
concept = PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
score = 0
adding concept:PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
concept = PhraseConceptPair(List(once),once-more,PhraseConceptFeatures(1.0,-3.258096538021482,false,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = Oh
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Oh),Oh,PhraseConceptFeatures(1.0,-3.332204510175204,false,false)), PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false)))
concept = PhraseConceptPair(List(Oh),Oh,PhraseConceptFeatures(1.0,-3.332204510175204,false,false))
score = 0
concept = PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
score = 0
adding concept:PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = come
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false)), PhraseConceptPair(List(come),come-03,PhraseConceptFeatures(2.0,-4.356708826689592,false,false)), PhraseConceptPair(List(come),come-04,PhraseConceptFeatures(2.0,-4.356708826689592,false,false)), PhraseConceptPair(List(come),come-09,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)), PhraseConceptPair(List(come),come-13,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)), PhraseConceptPair(List(come),come-21,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)))
concept = PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
score = 0
adding concept:PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
concept = PhraseConceptPair(List(come),come-03,PhraseConceptFeatures(2.0,-4.356708826689592,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-04,PhraseConceptFeatures(2.0,-4.356708826689592,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-09,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-13,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-21,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = come
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false)), PhraseConceptPair(List(come),come-03,PhraseConceptFeatures(2.0,-4.356708826689592,false,false)), PhraseConceptPair(List(come),come-04,PhraseConceptFeatures(2.0,-4.356708826689592,false,false)), PhraseConceptPair(List(come),come-09,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)), PhraseConceptPair(List(come),come-13,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)), PhraseConceptPair(List(come),come-21,PhraseConceptFeatures(1.0,-5.049856007249537,false,false)))
concept = PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
score = 0
adding concept:PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
concept = PhraseConceptPair(List(come),come-03,PhraseConceptFeatures(2.0,-4.356708826689592,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-04,PhraseConceptFeatures(2.0,-4.356708826689592,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-09,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-13,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
concept = PhraseConceptPair(List(come),come-21,PhraseConceptFeatures(1.0,-5.049856007249537,false,false))
score = 0
word = !
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = if
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)))
concept = PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
score = 0
adding concept:PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = were
Finding date entities
Possible invoked concepts: List()
word = speaking
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(speaking),speak-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(speaking),speak-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(speaking),speak-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = something
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)))
concept = PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
score = 0
adding concept:PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = self
Finding date entities
Possible invoked concepts: List()
word = -
Finding date entities
Possible invoked concepts: List()
word = evident
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(answered),answer-01,PhraseConceptFeatures(15.0,0.0,false,false)),1)), None, None, Some((0.013100333856746589,PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false)),4)), None, None, Some((0.019360815055007176,PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false)),7)), None, Some((0.008481034542355673,PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false)),9)), None, Some((0.008481034542355673,PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false)),11)), None, None, None, None, Some((0.003833681888436611,PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)),16)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),17)), None, Some((0.029773585223834276,PhraseConceptPair(List(speaking),speak-01,PhraseConceptFeatures(1.0,0.0,false,false)),19)), None, Some((0.027516884858905237,PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)),21)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),22)), None, None, None, None, None)
Adding concept: that
nodeIds = List(0)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.016617808389215782
Adding concept: something
nodeIds = List(1)
concepts = List(something)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
feats:
bias 1.0
c|p -0.2231435513142097
len 1.0

score:
0.044134693248121026
Adding concept: speak-01
nodeIds = List(2)
concepts = List(speak-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(speaking),speak-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0739082784719553
Adding concept: he
nodeIds = List(3)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.0995270783523758
Adding concept: cause-01
nodeIds = List(4)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
feats:
bias 1.0
c|p -2.5649493574615367
len 1.0

score:
0.10336076024081241
Adding concept: come-01
nodeIds = List(5)
concepts = List(come-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
feats:
bias 1.0
c|p -2.1054170280830964
len 1.0

score:
0.1118417947831681
Adding concept: come-01
nodeIds = List(6)
concepts = List(come-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(come),come-01,PhraseConceptFeatures(19.0,-2.1054170280830964,false,false))
feats:
bias 1.0
c|p -2.1054170280830964
len 1.0

score:
0.12032282932552378
Adding concept: oh
nodeIds = List(7)
concepts = List(oh)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
feats:
bias 1.0
c|p -1.0296194171811581
len 1.0

score:
0.13968364438053096
Adding concept: once
nodeIds = List(8)
concepts = List(once)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
feats:
bias 1.0
c|p -1.6486586255873816
len 1.0

score:
0.15278397823727755
Adding concept: answer-01
nodeIds = List(9)
concepts = List(answer-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(answered),answer-01,PhraseConceptFeatures(15.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.18255756346111182
Adding concept: he
nodeIds = List(10)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2123311486849461
Decoder1 Spans:
Span 1:  answered => answer-01
Span 2:  come => come-01
Span 3:  come => come-01
Span 4:  he => he
Span 5:  He => he
Span 6:  if => cause-01
Span 7:  Oh => oh
Span 8:  once => once
Span 9:  something => something
Span 10:  speaking => speak-01
Span 11:  that => that
Decoder1 feats:
bias 11.0
c|p -11.388881214123034
len 11.0

Concepts:
id = 2 concept = speak-01
id = 5 concept = come-01
id = 8 concept = once
id = 7 concept = oh
id = 1 concept = something
id = 4 concept = cause-01
id = 6 concept = come-01
id = 9 concept = answer-01
id = 0 concept = that
id = 10 concept = he
id = 3 concept = he
Spans:
Span 1-2:  answered => answer-01
Span 11-12:  come => come-01
Span 9-10:  come => come-01
Span 17-18:  he => he
Span 0-1:  He => he
Span 16-17:  if => cause-01
Span 7-8:  Oh => oh
Span 4-5:  once => once
Span 21-22:  something => something
Span 19-20:  speaking => speak-01
Span 22-23:  that => that

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of were in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of speaking in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of was in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of self in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of evident in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
rootDependencyPaths = List(List(11, 0), List(11, 0, 1), List(11, 0, 1, 2), List(11, 0, 1, 3), List(11, 0, 1, 3, 4), List(11, 0, 1, 5), List(11, 0, 1, 6), List(11, 0, 1, 9, 7), List(11, 0, 1, 9, 8), List(11, 0, 1, 9), List(11, 10), List(11), List(11, 12), List(11, 13), List(), List(), List(), List(), List(), List(), List(), List(), List(), List(), List(), List(), List(), List())
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 0
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -143.68036327738415
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 0
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -149.68036327738415
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 0
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -155.68036327738415
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 0
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -161.68036327738415
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 0
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -167.68036327738415
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 0
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -173.17922944642365
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -177.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -179.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -181.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -183.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -185.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -187.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -189.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -191.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -193.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -195.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -197.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -199.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -201.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -203.14163243061662
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -204.50086359669066
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -205.64276626157712
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -208.50086359669066
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -209.64276626157712
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -212.50086359669066
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -213.63017778582096
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -216.00199742765116
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -217.50086359669066
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -218.63017778582096
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -221.00199742765116
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -222.45061807296648
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -224.63017778582096
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -227.00199742765116
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -228.45061807296648
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -230.63017778582096
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -232.81675580067653
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -235.45061807296648
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -237.63017778582096
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -239.81675580067653
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -242.45061807296648
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -244.63017778582096
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -246.81675580067653
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -249.45061807296648
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -251.63017778582096
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -253.81675580067653
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -256.4506180729665
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -258.630177785821
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -260.81675580067656
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -263.4506180729665
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -265.630177785821
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -267.81675580067656
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -270.4506180729665
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 1
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -272.04793962062104
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -274.64276626157715
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -277.2653764459919
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -279.5008635966907
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 1
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -280.04793962062104
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -282.64276626157715
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -285.2653764459919
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -287.5008635966907
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 1
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -288.04793962062104
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -290.64276626157715
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -293.2653764459919
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -295.5008635966907
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 1
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -296.04793962062104
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -298.64276626157715
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -301.2653764459919
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -303.5008635966907
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 1
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -304.04793962062104
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -306.64276626157715
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -309.2653764459919
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -311.5008635966907
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 1
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -312.04793962062104
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -314.64276626157715
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 3
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -317.2653764459919
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 1
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -319.5008635966907
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 1
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -320.04793962062104
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 10
Node = 3
Node = 5
Node = 6
Node = 2
Node = 9
Node = 7
Node = 0
Node = 8
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -322.64276626157715
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 2
Node = 0
Node = 3
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 1
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -324.9886843317922
getNodeById = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he)
getNodeById2 = Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 0 -> that, 9 -> answer-01, 3 -> he, 10 -> he)
Node = 4
Node = 2
Node = 3
Node = 0
Node = 10
Node = 5
Node = 6
Node = 9
Node = 7
Node = 1
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -326.03892985551636
Langrangian relaxation converged after 80 iterations. Delta = 0.0
Node.spans:
self-evident List()
i List()
speak-01 List()
he List()
something List()
immediate List()
answer-01 List()
come-25 List()
clearUnalignedNodes():  removing unaligned node: Some(i2) / i
clearUnalignedNodes():  removing unaligned node: Some(i) / immediate
OracleGraph nodes = List(self-evident, speak-01, he, something, answer-01, come-25)
OracleGraph triples: (a / answer-01, ARG0, h / he)
(a / answer-01, ARG2, c / come-25)
(a / answer-01, conj-as-if, s / speak-01)
(s / speak-01, ARG0, h / he)
(s / speak-01, ARG1, s2 / something)
(s2 / something, mod, s3 / self-evident)
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of were in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of speaking in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of was in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of self in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of evident in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
rootDependencyPaths = List(List(11, 0), List(11, 0, 1), List(11, 0, 1, 2), List(11, 0, 1, 3), List(11, 0, 1, 3, 4), List(11, 0, 1, 5), List(11, 0, 1, 6), List(11, 0, 1, 9, 7), List(11, 0, 1, 9, 8), List(11, 0, 1, 9), List(11, 10), List(11), List(11, 12), List(11, 13), List(), List(), List(), List(), List(), List(), List(), List(), List(), List(), List(), List(), List(), List())
************* WARNING: Cannot find label = :conj-as-if in the labelset ***************
Oracle Span 1-2:  answered => answer-01
Oracle Span 9-10:  come => come-25
Oracle Span 0-1:  He => he
Oracle Span 24-25:  self => self-evident
Oracle Span 21-22:  something => something
Oracle Span 19-20:  speaking => speak-01

Extra span: that => that
Extra span: he => he
Extra span: if => cause-01
Extra span: come => come-01
Incorrect span: come => come-01
Extra span: Oh => oh
Extra span: once => once
Missing span: come => come-25
Missing span: self => self-evident
Dependencies:
1	He	_	PRP	PRP	_	12	nsubj	_	_
2	answered	_	VBN	VBN	_	1	vmod	_	_
3	me	_	PRP	PRP	_	2	dobj	_	_
4	at	_	IN	IN	_	2	prep	_	_
5	once	_	RB	RB	_	4	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	"	_	''	''	_	2	punct	_	_
8	Oh	_	UH	UH	_	10	discourse	_	_
9	,	_	,	,	_	10	punct	_	_
10	come	_	VB	VB	_	2	dep	_	_
11	,	_	,	,	_	12	punct	_	_
12	come	_	VB	VB	_	0	root	_	_
13	!	_	.	.	_	12	punct	_	_
14	"	_	''	''	_	12	punct	_	_
1	,	_	,	,	_	3	punct	_	_
2	as	_	RB	RB	_	3	advmod	_	_
3	if	_	IN	IN	_	6	nsubj	_	_
4	he	_	PRP	PRP	_	3	pobj	_	_
5	were	_	VBD	VBD	_	6	aux	_	_
6	speaking	_	VBG	VBG	_	0	root	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	something	_	NN	NN	_	7	pobj	_	_
9	that	_	WDT	WDT	_	11	nsubj	_	_
10	was	_	VBD	VBD	_	11	cop	_	_
11	self	_	JJ	JJ	_	8	rcmod	_	_
12	-	_	:	:	_	11	punct	_	_
13	evident	_	JJ	JJ	_	11	dep	_	_
14	.	_	.	.	_	6	punct	_	_

Oracle:
(a / answer-01, ARG0, h / he)
(a / answer-01, ARG2, c / come-25)
(a / answer-01, conj-as-if, s / speak-01)
(s / speak-01, ARG0, h / he)
(s / speak-01, ARG1, s2 / something)
(s2 / something, mod, s3 / self-evident)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),that,that,false), Span(21,22,List(1),something,something,false), Span(19,20,List(2),speaking,speak-01,false), Span(17,18,List(3),he,he,false), Span(16,17,List(4),if,cause-01,false), Span(11,12,List(5),come,come-01,false), Span(9,10,List(6),come,come-01,false), Span(7,8,List(7),Oh,oh,false), Span(4,5,List(8),once,once,false), Span(1,2,List(9),answered,answer-01,false), Span(0,1,List(10),He,he,false)),Map(2 -> speak-01, 5 -> come-01, 8 -> once, 7 -> oh, 1 -> something, 4 -> cause-01, 6 -> come-01, 9 -> answer-01, 0 -> that, 10 -> he, 3 -> he),Map(h -> he, h2 -> he, s2 -> speak-01, t -> that, s -> something, a -> answer-01, c3 -> come-01, o2 -> once, c -> cause-01, o -> oh, c2 -> come-01))),[Ljava.lang.String;@7ce026d3,Annotation([Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb,[Ljava.lang.String;@5b247367),Annotation([Ljava.lang.String;@268f106e,[Ljava.lang.String;@6e9a5ed8,[Ledu.cmu.lti.nlp.amr.Dependency;@7e057f43),Annotation([Ljava.lang.String;@6c284af,[Ljava.lang.String;@5890e879,[Ljava.lang.String;@6440112d),Annotation([Ljava.lang.String;@31ea9581,[Ljava.lang.String;@231f98ef,[Ledu.cmu.lti.nlp.amr.Entity;@7c137fd5))
AMR:
(a / answer-01, ARG0, h2 / he)
(a / answer-01, ARG1, o2 / once)
(a / answer-01, mod, s / something)
(c / cause-01, ARG0, h / he)
(c / cause-01, op, s2 / speak-01)
(c2 / come-01, ARG1, h2 / he)
(c3 / come-01, ARG0, o / oh)
(c3 / come-01, ARG1, h2 / he)
(s2 / speak-01, ARG0, h2 / he)
(s2 / speak-01, ARG1, t / that)

Decoded in 672,219 microseconds
Sentence: And I was obliged to make a great mental effort to solve this problem , without any assistance .


--- Decoder1 ---

Sentence: And I was obliged to make a great mental effort to solve this problem , without any assistance .
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = obliged
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(obliged),oblige-02,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(obliged),oblige-02,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(obliged),oblige-02,PhraseConceptFeatures(1.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = make
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false)), PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false)), PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)))
concept = PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = great
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
word = mental
Finding date entities
Possible invoked concepts: List()
word = effort
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(effort),effort,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(effort),effort,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(effort),effort,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = solve
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(solve),solve-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(solve),solve-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(solve),solve-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = problem
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(problem),problem,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(problem),problem,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(problem),problem,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = without
Finding date entities
Possible invoked concepts: List()
word = any
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false)), PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)))
concept = PhraseConceptPair(List(any),(person :quant any),PhraseConceptFeatures(1.0,-4.060443010546419,false,false))
score = 0
concept = PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
score = 0
adding concept:PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
word = assistance
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), None, Some((0.029773585223834276,PhraseConceptPair(List(obliged),oblige-02,PhraseConceptFeatures(1.0,0.0,false,false)),3)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false)),7)), None, Some((0.022763633620453336,PhraseConceptPair(List(effort),effort,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),9)), None, Some((0.029773585223834276,PhraseConceptPair(List(solve),solve-01,PhraseConceptFeatures(1.0,0.0,false,false)),11)), Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),12)), Some((0.029773585223834276,PhraseConceptPair(List(problem),problem,PhraseConceptFeatures(1.0,0.0,false,false)),13)), None, None, Some((0.017940394404303485,PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false)),16)), None, None)
Adding concept: any
nodeIds = List(0)
concepts = List(any)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(any),any,PhraseConceptFeatures(18.0,-1.1700712526502546,false,false))
feats:
bias 1.0
c|p -1.1700712526502546
len 1.0

score:
0.017940394404303478
Adding concept: problem
nodeIds = List(1)
concepts = List(problem)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(problem),problem,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.047713979628137754
Adding concept: this
nodeIds = List(2)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.07616657389529133
Adding concept: solve-01
nodeIds = List(3)
concepts = List(solve-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(solve),solve-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1059401591191256
Adding concept: effort
nodeIds = List(4)
concepts = List(effort)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(effort),effort,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.12870379273957894
Adding concept: great
nodeIds = List(5)
concepts = List(great)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(great),great,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1584773779634132
Adding concept: oblige-02
nodeIds = List(6)
concepts = List(oblige-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(obliged),oblige-02,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1882509631872475
Adding concept: i
nodeIds = List(7)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.21430016960547676
Adding concept: and
nodeIds = List(8)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.24316203673444522
Decoder1 Spans:
Span 1:  And => and
Span 2:  any => any
Span 3:  effort => effort
Span 4:  great => great
Span 5:  I => i
Span 6:  obliged => oblige-02
Span 7:  problem => problem
Span 8:  solve => solve-01
Span 9:  this => this
Decoder1 feats:
bias 9.0
c|p -2.4522579710211256
len 9.0

Concepts:
id = 2 concept = this
id = 5 concept = great
id = 8 concept = and
id = 7 concept = i
id = 1 concept = problem
id = 4 concept = effort
id = 6 concept = oblige-02
id = 0 concept = any
id = 3 concept = solve-01
Spans:
Span 0-1:  And => and
Span 16-17:  any => any
Span 9-10:  effort => effort
Span 7-8:  great => great
Span 1-2:  I => i
Span 3-4:  obliged => oblige-02
Span 13-14:  problem => problem
Span 11-12:  solve => solve-01
Span 12-13:  this => this

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 5, 9, 6), List(3, 5, 9, 7), List(3, 5, 9, 8), List(3, 5, 9), List(3, 5, 11, 10), List(3, 5, 11), List(3, 5, 11, 13, 12), List(3, 5, 11, 13), List(3, 5, 11, 14), List(3, 5, 11, 15), List(3, 5, 11, 15, 17, 16), List(3, 5, 11, 15, 17), List(3, 18))
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 4
Node = 7
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -157.6464486903798
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 4
Node = 7
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -161.6464486903798
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 4
Node = 7
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -165.6464486903798
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 4
Node = 7
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -169.6464486903798
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 4
Node = 7
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -173.6464486903798
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 4
Node = 7
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -177.6464486903798
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 4
Node = 7
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -181.6464486903798
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 4
Node = 7
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -185.6464486903798
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 7
Node = 4
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -189.0105893070716
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 7
Node = 4
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -191.0105893070716
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 7
Node = 4
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -193.0105893070716
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 7
Node = 4
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -195.0105893070716
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 7
Node = 4
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -197.0105893070716
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 7
Node = 4
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -199.0105893070716
getNodeById = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
getNodeById2 = Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01)
Node = 8
Node = 6
Node = 7
Node = 4
Node = 5
Node = 3
Node = 1
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -200.29700900920528
Langrangian relaxation converged after 15 iterations. Delta = 0.0
Node.spans:
try-01 List()
great List()
i List()
- List()
assist-01 List()
mental List()
problem List()
oblige-02 List()
this List()
and List()
solve-01 List()
clearUnalignedNodes():  removing unaligned node: Some(t2) / try-01
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(great, i, assist-01, mental, problem, oblige-02, this, and, solve-01)
OracleGraph triples: (a / and, op, o / oblige-02)
(a2 / assist-01, ARG1, i / i)
(a2 / assist-01, ARG2, s / solve-01)
(p / problem, mod, t / this)
(s / solve-01, ARG0, i / i)
(s / solve-01, ARG1, p / problem)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 5, 4), List(3, 5), List(3, 5, 9, 6), List(3, 5, 9, 7), List(3, 5, 9, 8), List(3, 5, 9), List(3, 5, 11, 10), List(3, 5, 11), List(3, 5, 11, 13, 12), List(3, 5, 11, 13), List(3, 5, 11, 14), List(3, 5, 11, 15), List(3, 5, 11, 15, 17, 16), List(3, 5, 11, 15, 17), List(3, 18))
Oracle Span 0-1:  And => and
Oracle Span 17-18:  assistance => assist-01
Oracle Span 7-8:  great => great
Oracle Span 1-2:  I => i
Oracle Span 8-9:  mental => mental
Oracle Span 3-4:  obliged => oblige-02
Oracle Span 13-14:  problem => problem
Oracle Span 11-12:  solve => solve-01
Oracle Span 12-13:  this => this

Extra span: any => any
Extra span: effort => effort
Missing span: mental => mental
Missing span: assistance => assist-01
Dependencies:
1	And	_	CC	CC	_	4	cc	_	_
2	I	_	PRP	PRP	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	obliged	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	a	_	DT	DT	_	10	det	_	_
8	great	_	JJ	JJ	_	10	amod	_	_
9	mental	_	JJ	JJ	_	10	amod	_	_
10	effort	_	NN	NN	_	6	dobj	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	solve	_	VB	VB	_	6	xcomp	_	_
13	this	_	DT	DT	_	14	det	_	_
14	problem	_	NN	NN	_	12	dobj	_	_
15	,	_	,	,	_	12	punct	_	_
16	without	_	IN	IN	_	12	prep	_	_
17	any	_	DT	DT	_	18	det	_	_
18	assistance	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, o / oblige-02)
(a2 / assist-01, ARG1, i / i)
(a2 / assist-01, ARG2, s / solve-01)
(p / problem, mod, t / this)
(s / solve-01, ARG0, i / i)
(s / solve-01, ARG1, p / problem)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),any,any,false), Span(13,14,List(1),problem,problem,false), Span(12,13,List(2),this,this,false), Span(11,12,List(3),solve,solve-01,false), Span(9,10,List(4),effort,effort,false), Span(7,8,List(5),great,great,false), Span(3,4,List(6),obliged,oblige-02,false), Span(1,2,List(7),I,i,false), Span(0,1,List(8),And,and,false)),Map(2 -> this, 5 -> great, 8 -> and, 7 -> i, 1 -> problem, 4 -> effort, 6 -> oblige-02, 0 -> any, 3 -> solve-01),Map(e -> effort, t -> this, s -> solve-01, g -> great, p -> problem, a -> any, a2 -> and, i -> i, o -> oblige-02))),[Ljava.lang.String;@183ec003,Annotation([Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4,[Ljava.lang.String;@451001e5),Annotation([Ljava.lang.String;@2b40ff9c,[Ljava.lang.String;@3e08ff24,[Ledu.cmu.lti.nlp.amr.Dependency;@4d1c005e),Annotation([Ljava.lang.String;@8462f31,[Ljava.lang.String;@24569dba,[Ljava.lang.String;@5ddeb7cb),Annotation([Ljava.lang.String;@70ed52de,[Ljava.lang.String;@496bc455,[Ledu.cmu.lti.nlp.amr.Entity;@59402b8f))
AMR:
(a2 / and, op, o / oblige-02)
(e / effort, mod, g / great)
(o / oblige-02, ARG0, e / effort)
(o / oblige-02, ARG1, i / i)
(p / problem, mod, t / this)
(s / solve-01, ARG0, a / any)
(s / solve-01, ARG1, p / problem)
(s / solve-01, ARG2, e / effort)

Decoded in 116,963 microseconds
Sentence: Indeed , as I learned , there were on the planet where the little prince lived -- as on all planets -- good plants and bad plants .


--- Decoder1 ---

Sentence: Indeed , as I learned , there were on the planet where the little prince lived -- as on all planets -- good plants and bad plants .
word = Indeed
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = learned
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = there
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)))
concept = PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
score = 0
adding concept:PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
word = were
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = where
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = lived
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = --
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = planets
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false))
word = --
Finding date entities
Possible invoked concepts: List()
word = good
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)), PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)))
concept = PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
score = 0
adding concept:PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
concept = PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
word = plants
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = bad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)), PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
score = 0
adding concept:PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
concept = PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
score = 0
word = plants
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false)),4)), None, Some((0.018974275428782817,PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)),6)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),10)), None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),13)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),14)), Some((0.029773585223834276,PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false)),15)), None, None, None, Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),19)), Some((0.029773585223834276,PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false)),20)), None, Some((0.01924113055266132,PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)),22)), None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),24)), Some((0.01985424083692039,PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)),25)), None, None)
Adding concept: bad
nodeIds = List(0)
concepts = List(bad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
feats:
bias 1.0
c|p -0.9808292530117262
len 1.0

score:
0.01985424083692039
Adding concept: and
nodeIds = List(1)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.038812182659328925
Adding concept: good
nodeIds = List(2)
concepts = List(good)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
feats:
bias 1.0
c|p -1.041453874828161
len 1.0

score:
0.05805331321199024
Adding concept: planet
nodeIds = List(3)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planets),planet,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08782689843582452
Adding concept: all
nodeIds = List(4)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.1070885634572972
Adding concept: live-01
nodeIds = List(5)
concepts = List(live-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(lived),live-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13686214868113147
Adding concept: prince
nodeIds = List(6)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.16657311313266104
Adding concept: little
nodeIds = List(7)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.1891919248642946
Adding concept: planet
nodeIds = List(8)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.21896551008812887
Adding concept: there
nodeIds = List(9)
concepts = List(there)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
feats:
bias 1.0
c|p -1.067840630001356
len 1.0

score:
0.2379397855169117
Adding concept: learn-01
nodeIds = List(10)
concepts = List(learn-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.26771337074074597
Adding concept: i
nodeIds = List(11)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.29376257715897525
Decoder1 Spans:
Span 1:  all => all
Span 2:  and => and
Span 3:  bad => bad
Span 4:  good => good
Span 5:  I => i
Span 6:  learned => learn-01
Span 7:  little => little
Span 8:  lived => live-01
Span 9:  planet => planet
Span 10:  planets => planet
Span 11:  prince => prince
Span 12:  there => there
Decoder1 feats:
bias 12.0
c|p -6.280930342477856
len 12.0

Concepts:
id = 2 concept = good
id = 5 concept = live-01
id = 8 concept = planet
id = 7 concept = little
id = 1 concept = and
id = 11 concept = i
id = 4 concept = all
id = 6 concept = prince
id = 9 concept = there
id = 0 concept = bad
id = 10 concept = learn-01
id = 3 concept = planet
Spans:
Span 19-20:  all => all
Span 24-25:  and => and
Span 25-26:  bad => bad
Span 22-23:  good => good
Span 3-4:  I => i
Span 4-5:  learned => learn-01
Span 13-14:  little => little
Span 15-16:  lived => live-01
Span 10-11:  planet => planet
Span 20-21:  planets => planet
Span 14-15:  prince => prince
Span 6-7:  there => there

rootDependencyPaths = List(List(7, 0), List(7, 1), List(7, 4, 2), List(7, 4, 3), List(7, 4), List(7, 5), List(7, 6), List(7), List(7, 8), List(7, 8, 10, 9), List(7, 8, 10), List(7, 8, 10, 15, 11), List(7, 8, 10, 15, 14, 12), List(7, 8, 10, 15, 14, 13), List(7, 8, 10, 15, 14), List(7, 8, 10, 15), List(7, 8, 10, 15, 23, 18, 16), List(7, 8, 10, 15, 23, 18, 17), List(7, 8, 10, 15, 23, 18), List(7, 8, 10, 15, 23, 18, 20, 19), List(7, 8, 10, 15, 23, 18, 20), List(7, 8, 10, 15, 23, 18, 21), List(7, 8, 10, 15, 23, 22), List(7, 8, 10, 15, 23), List(7, 8, 10, 24), List(7, 8, 10, 26, 25), List(7, 8, 10, 26), List(7, 27))
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -247.91752854535846
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -251.91752854535846
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -255.79222291673673
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -258.91752854535844
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -262.7922229167367
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -265.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -267.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -268.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -270.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -271.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -272.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -274.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -275.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -276.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -278.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -279.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -280.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -282.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -283.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -284.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 2
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -286.21996111901
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -287.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -288.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -289.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 2
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -291.21996111901
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -292.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -293.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -294.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 2
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -296.21996111901
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -297.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -298.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -299.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 2
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -301.21996111901
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -302.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -303.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -304.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 2
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -306.21996111901
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -307.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -308.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -309.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 2
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -311.21996111901
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -312.4700467684139
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -313.59535239703564
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 2
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -314.7768824263187
getNodeById = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet)
getNodeById2 = Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 4 -> all, 11 -> i, 6 -> prince, 0 -> bad, 9 -> there, 3 -> planet, 10 -> learn-01)
Node = 5
Node = 3
Node = 8
Node = 6
Node = 4
Node = 11
Node = 1
Node = 0
Node = 7
Node = 10
Node = 2
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -316.0442526605742
Langrangian relaxation converged after 45 iterations. Delta = 0.0
Node.spans:
plant List()
little List()
all List()
good List()
i List()
indeed List()
and List()
planet List()
live-01 List()
and List()
planet List()
plant List()
prince List()
be-located-at-91 List()
bad List()
learn-01 List()
clearUnalignedNodes():  removing unaligned node: Some(a) / and
clearUnalignedNodes():  removing unaligned node: Some(b2) / be-located-at-91
OracleGraph nodes = List(plant, little, all, good, i, indeed, planet, live-01, and, planet, plant, prince, bad, learn-01)
OracleGraph triples: (a3 / and, mod, i / indeed)
(a3 / and, op, p / plant)
(a3 / and, op, p2 / plant)
(l / live-01, ARG0, p4 / prince)
(l / live-01, location, p3 / planet)
(l3 / learn-01, ARG0, i2 / i)
(p / plant, mod, g / good)
(p2 / plant, mod, b / bad)
(p4 / prince, mod, l2 / little)
(p5 / planet, mod, a2 / all)
rootDependencyPaths = List(List(7, 0), List(7, 1), List(7, 4, 2), List(7, 4, 3), List(7, 4), List(7, 5), List(7, 6), List(7), List(7, 8), List(7, 8, 10, 9), List(7, 8, 10), List(7, 8, 10, 15, 11), List(7, 8, 10, 15, 14, 12), List(7, 8, 10, 15, 14, 13), List(7, 8, 10, 15, 14), List(7, 8, 10, 15), List(7, 8, 10, 15, 23, 18, 16), List(7, 8, 10, 15, 23, 18, 17), List(7, 8, 10, 15, 23, 18), List(7, 8, 10, 15, 23, 18, 20, 19), List(7, 8, 10, 15, 23, 18, 20), List(7, 8, 10, 15, 23, 18, 21), List(7, 8, 10, 15, 23, 22), List(7, 8, 10, 15, 23), List(7, 8, 10, 24), List(7, 8, 10, 26, 25), List(7, 8, 10, 26), List(7, 27))
Oracle Span 19-20:  all => all
Oracle Span 24-25:  and => and
Oracle Span 25-26:  bad => bad
Oracle Span 22-23:  good => good
Oracle Span 3-4:  I => i
Oracle Span 0-1:  Indeed => indeed
Oracle Span 4-5:  learned => learn-01
Oracle Span 13-14:  little => little
Oracle Span 15-16:  lived => live-01
Oracle Span 10-11:  planet => planet
Oracle Span 20-21:  planets => planet
Oracle Span 23-24:  plants => plant
Oracle Span 26-27:  plants => plant
Oracle Span 14-15:  prince => prince

Extra span: there => there
Missing span: Indeed => indeed
Missing span: plants => plant
Missing span: plants => plant
Dependencies:
1	Indeed	_	RB	RB	_	8	advmod	_	_
2	,	_	,	,	_	8	punct	_	_
3	as	_	IN	IN	_	5	mark	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	learned	_	VBD	VBD	_	8	advcl	_	_
6	,	_	,	,	_	8	punct	_	_
7	there	_	EX	EX	_	8	expl	_	_
8	were	_	VBD	VBD	_	0	root	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	planet	_	NN	NN	_	9	pobj	_	_
12	where	_	WRB	WRB	_	16	advmod	_	_
13	the	_	DT	DT	_	15	det	_	_
14	little	_	JJ	JJ	_	15	amod	_	_
15	prince	_	NN	NN	_	16	nsubj	_	_
16	lived	_	VBD	VBD	_	11	rcmod	_	_
17	--	_	:	:	_	19	punct	_	_
18	as	_	RB	RB	_	19	advmod	_	_
19	on	_	IN	IN	_	24	prep	_	_
20	all	_	DT	DT	_	21	det	_	_
21	planets	_	NNS	NNS	_	19	pobj	_	_
22	--	_	:	:	_	19	punct	_	_
23	good	_	JJ	JJ	_	24	amod	_	_
24	plants	_	NNS	NNS	_	16	dobj	_	_
25	and	_	CC	CC	_	11	cc	_	_
26	bad	_	JJ	JJ	_	27	amod	_	_
27	plants	_	NNS	NNS	_	11	conj	_	_
28	.	_	.	.	_	8	punct	_	_

Oracle:
(a3 / and, mod, i / indeed)
(a3 / and, op, p / plant)
(a3 / and, op, p2 / plant)
(l / live-01, ARG0, p4 / prince)
(l / live-01, location, p3 / planet)
(l3 / learn-01, ARG0, i2 / i)
(p / plant, mod, g / good)
(p2 / plant, mod, b / bad)
(p4 / prince, mod, l2 / little)
(p5 / planet, mod, a2 / all)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),bad,bad,false), Span(24,25,List(1),and,and,false), Span(22,23,List(2),good,good,false), Span(20,21,List(3),planets,planet,false), Span(19,20,List(4),all,all,false), Span(15,16,List(5),lived,live-01,false), Span(14,15,List(6),prince,prince,false), Span(13,14,List(7),little,little,false), Span(10,11,List(8),planet,planet,false), Span(6,7,List(9),there,there,false), Span(4,5,List(10),learned,learn-01,false), Span(3,4,List(11),I,i,false)),Map(2 -> good, 5 -> live-01, 8 -> planet, 7 -> little, 1 -> and, 11 -> i, 4 -> all, 6 -> prince, 9 -> there, 0 -> bad, 10 -> learn-01, 3 -> planet),Map(t -> there, b -> bad, p2 -> prince, l3 -> learn-01, p -> planet, g -> good, a -> and, i -> i, l2 -> little, a2 -> all, l -> live-01, p3 -> planet))),[Ljava.lang.String;@7188af83,Annotation([Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a,[Ljava.lang.String;@247310d0),Annotation([Ljava.lang.String;@1033576a,[Ljava.lang.String;@303cf2ba,[Ledu.cmu.lti.nlp.amr.Dependency;@76494737),Annotation([Ljava.lang.String;@4a003cbe,[Ljava.lang.String;@4082ba93,[Ljava.lang.String;@17fc391b),Annotation([Ljava.lang.String;@2b30a42c,[Ljava.lang.String;@609e8838,[Ledu.cmu.lti.nlp.amr.Entity;@359df09a))
AMR:
(a / and, op, p3 / planet)
(l / live-01, ARG0, p2 / prince)
(l / live-01, ARG1, p3 / planet)
(l / live-01, location, p / planet)
(l3 / learn-01, ARG0, i / i)
(l3 / learn-01, ARG1, t / there)
(l3 / learn-01, mod, g / good)
(p / planet, mod, a2 / all)
(p2 / prince, mod, l2 / little)
(p3 / planet, mod, b / bad)
(p3 / planet, poss, i / i)

Decoded in 446,826 microseconds
Sentence: In consequence , there were good seeds from good plants , and bad seeds from bad plants .


--- Decoder1 ---

Sentence: In consequence , there were good seeds from good plants , and bad seeds from bad plants .
word = In
Finding date entities
Possible invoked concepts: List()
word = consequence
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(consequence),consequence,PhraseConceptFeatures(12.0,-0.08004270767353637,false,false)))
concept = PhraseConceptPair(List(consequence),consequence,PhraseConceptFeatures(12.0,-0.08004270767353637,false,false))
score = 0
adding concept:PhraseConceptPair(List(consequence),consequence,PhraseConceptFeatures(12.0,-0.08004270767353637,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = there
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)))
concept = PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
score = 0
adding concept:PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
word = were
Finding date entities
Possible invoked concepts: List()
word = good
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)), PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)))
concept = PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
score = 0
adding concept:PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
concept = PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
word = seeds
Finding date entities
Possible invoked concepts: List()
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = good
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)), PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false)))
concept = PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
score = 0
adding concept:PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
concept = PhraseConceptPair(List(good),good-42,PhraseConceptFeatures(5.0,-1.916922612182061,false,false))
score = 0
word = plants
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = bad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)), PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
score = 0
adding concept:PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
concept = PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
score = 0
word = seeds
Finding date entities
Possible invoked concepts: List()
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = bad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)), PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
score = 0
adding concept:PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
concept = PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
score = 0
word = plants
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.028964095518427428,PhraseConceptPair(List(consequence),consequence,PhraseConceptFeatures(12.0,-0.08004270767353637,false,false)),1)), None, Some((0.018974275428782817,PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)),3)), None, Some((0.01924113055266132,PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)),5)), None, None, Some((0.01924113055266132,PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false)),8)), None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),11)), Some((0.01985424083692039,PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)),12)), None, None, Some((0.01985424083692039,PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)),15)), None, None)
Adding concept: bad
nodeIds = List(0)
concepts = List(bad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
feats:
bias 1.0
c|p -0.9808292530117262
len 1.0

score:
0.01985424083692039
Adding concept: bad
nodeIds = List(1)
concepts = List(bad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
feats:
bias 1.0
c|p -0.9808292530117262
len 1.0

score:
0.03970848167384078
Adding concept: and
nodeIds = List(2)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.058666423496249315
Adding concept: good
nodeIds = List(3)
concepts = List(good)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
feats:
bias 1.0
c|p -1.041453874828161
len 1.0

score:
0.07790755404891063
Adding concept: good
nodeIds = List(4)
concepts = List(good)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(good),good,PhraseConceptFeatures(12.0,-1.041453874828161,false,false))
feats:
bias 1.0
c|p -1.041453874828161
len 1.0

score:
0.09714868460157194
Adding concept: there
nodeIds = List(5)
concepts = List(there)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
feats:
bias 1.0
c|p -1.067840630001356
len 1.0

score:
0.11612296003035477
Adding concept: consequence
nodeIds = List(6)
concepts = List(consequence)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(consequence),consequence,PhraseConceptFeatures(12.0,-0.08004270767353637,false,false))
feats:
bias 1.0
c|p -0.08004270767353637
len 1.0

score:
0.1450870555487822
Decoder1 Spans:
Span 1:  and => and
Span 2:  bad => bad
Span 3:  bad => bad
Span 4:  consequence => consequence
Span 5:  good => good
Span 6:  good => good
Span 7:  there => there
Decoder1 feats:
bias 7.0
c|p -6.261905297731321
len 7.0

Concepts:
id = 2 concept = and
id = 5 concept = there
id = 1 concept = bad
id = 4 concept = good
id = 6 concept = consequence
id = 0 concept = bad
id = 3 concept = good
Spans:
Span 11-12:  and => and
Span 15-16:  bad => bad
Span 12-13:  bad => bad
Span 1-2:  consequence => consequence
Span 8-9:  good => good
Span 5-6:  good => good
Span 3-4:  there => there

rootDependencyPaths = List(List(4, 0), List(4, 0, 1), List(4, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 6, 7), List(4, 6, 7, 9, 8), List(4, 6, 7, 9), List(4, 6, 10), List(4, 6, 11), List(4, 6, 13, 12), List(4, 6, 13), List(4, 6, 13, 14), List(4, 6, 13, 14, 16, 15), List(4, 6, 13, 14, 16), List(4, 17))
getNodeById = Map(2 -> and, 5 -> there, 1 -> bad, 4 -> good, 6 -> consequence, 0 -> bad, 3 -> good)
getNodeById2 = Map(2 -> and, 5 -> there, 1 -> bad, 4 -> good, 6 -> consequence, 0 -> bad, 3 -> good)
getNodeById = Map(2 -> and, 5 -> there, 1 -> bad, 4 -> good, 6 -> consequence, 0 -> bad, 3 -> good)
getNodeById2 = Map(2 -> and, 5 -> there, 1 -> bad, 4 -> good, 6 -> consequence, 0 -> bad, 3 -> good)
Node = 2
Node = 3
Node = 6
Node = 1
Node = 5
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -545.7880234094687
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
good List()
bad List()
plant List()
seed List()
bad List()
plant List()
seed List()
and List()
good List()
cause-01 List()
clearUnalignedNodes():  removing unaligned node: Some(c2) / cause-01
OracleGraph nodes = List(good, bad, plant, seed, bad, plant, seed, and, good)
OracleGraph triples: (a / and, op, s / seed)
(a / and, op, s2 / seed)
(p / plant, mod, g2 / good)
(p2 / plant, mod, b2 / bad)
(s / seed, mod, g / good)
(s / seed, source, p / plant)
(s2 / seed, mod, b / bad)
(s2 / seed, source, p2 / plant)
rootDependencyPaths = List(List(4, 0), List(4, 0, 1), List(4, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 6, 7), List(4, 6, 7, 9, 8), List(4, 6, 7, 9), List(4, 6, 10), List(4, 6, 11), List(4, 6, 13, 12), List(4, 6, 13), List(4, 6, 13, 14), List(4, 6, 13, 14, 16, 15), List(4, 6, 13, 14, 16), List(4, 17))
Oracle Span 11-12:  and => and
Oracle Span 12-13:  bad => bad
Oracle Span 15-16:  bad => bad
Oracle Span 5-6:  good => good
Oracle Span 8-9:  good => good
Oracle Span 9-10:  plants => plant
Oracle Span 16-17:  plants => plant
Oracle Span 6-7:  seeds => seed
Oracle Span 13-14:  seeds => seed

Extra span: there => there
Extra span: consequence => consequence
Missing span: seeds => seed
Missing span: plants => plant
Missing span: seeds => seed
Missing span: plants => plant
Dependencies:
1	In	_	IN	IN	_	5	prep	_	_
2	consequence	_	NN	NN	_	1	pobj	_	_
3	,	_	,	,	_	5	punct	_	_
4	there	_	EX	EX	_	5	expl	_	_
5	were	_	VBD	VBD	_	0	root	_	_
6	good	_	JJ	JJ	_	7	amod	_	_
7	seeds	_	NNS	NNS	_	5	nsubj	_	_
8	from	_	IN	IN	_	7	prep	_	_
9	good	_	JJ	JJ	_	10	amod	_	_
10	plants	_	NNS	NNS	_	8	pobj	_	_
11	,	_	,	,	_	7	punct	_	_
12	and	_	CC	CC	_	7	cc	_	_
13	bad	_	JJ	JJ	_	14	amod	_	_
14	seeds	_	NNS	NNS	_	7	conj	_	_
15	from	_	IN	IN	_	14	prep	_	_
16	bad	_	JJ	JJ	_	17	amod	_	_
17	plants	_	NNS	NNS	_	15	pobj	_	_
18	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, s / seed)
(a / and, op, s2 / seed)
(p / plant, mod, g2 / good)
(p2 / plant, mod, b2 / bad)
(s / seed, mod, g / good)
(s / seed, source, p / plant)
(s2 / seed, mod, b / bad)
(s2 / seed, source, p2 / plant)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),bad,bad,false), Span(12,13,List(1),bad,bad,false), Span(11,12,List(2),and,and,false), Span(8,9,List(3),good,good,false), Span(5,6,List(4),good,good,false), Span(3,4,List(5),there,there,false), Span(1,2,List(6),consequence,consequence,false)),Map(2 -> and, 5 -> there, 1 -> bad, 4 -> good, 6 -> consequence, 0 -> bad, 3 -> good),Map(t -> there, b -> bad, b2 -> bad, g2 -> good, g -> good, a -> and, c -> consequence))),[Ljava.lang.String;@43df23d3,Annotation([Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c,[Ljava.lang.String;@23e84203),Annotation([Ljava.lang.String;@19932c16,[Ljava.lang.String;@73eb439a,[Ledu.cmu.lti.nlp.amr.Dependency;@514646ef),Annotation([Ljava.lang.String;@305ffe9e,[Ljava.lang.String;@302c971f,[Ljava.lang.String;@1972e513),Annotation([Ljava.lang.String;@7ae0a9ec,[Ljava.lang.String;@35841320,[Ledu.cmu.lti.nlp.amr.Entity;@61c4eee0))
AMR:
(a / and, op, b2 / bad)
(a / and, part, c / consequence)
(a / and, time, g / good)
(b2 / bad, ARG3, b / bad)
(g / good, poss, t / there)
(g2 / good, ARG3, g / good)

Decoded in 52,764 microseconds
Sentence: But seeds are invisible .


--- Decoder1 ---

Sentence: But seeds are invisible .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = seeds
Finding date entities
Possible invoked concepts: List()
word = are
Finding date entities
Possible invoked concepts: List()
word = invisible
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), None, None, None, None)
Adding concept: contrast-01
nodeIds = List(0)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.020708341211994913
Decoder1 Spans:
Span 1:  But => contrast-01
Decoder1 feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

Concepts:
id = 0 concept = contrast-01
Spans:
Span 0-1:  But => contrast-01

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4))
getNodeById = Map(0 -> contrast-01)
getNodeById2 = Map(0 -> contrast-01)
getNodeById = Map(0 -> contrast-01)
getNodeById2 = Map(0 -> contrast-01)
Node = 0
visited = Set(0)
Alg2 returning score = 13.198086086021092
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
- List()
seed List()
visible List()
contrast-01 List()
OracleGraph nodes = List(-, seed, visible, contrast-01)
OracleGraph triples: (c / contrast-01, ARG2, v / visible)
(v / visible, domain, s / seed)
(v / visible, polarity, -)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4))
Oracle Span 0-1:  But => contrast-01
Oracle Span 3-4:  invisible => (visible :polarity -)
Oracle Span 1-2:  seeds => seed

Missing span: invisible => (visible :polarity -)
Missing span: seeds => seed
Dependencies:
1	But	_	CC	CC	_	4	cc	_	_
2	seeds	_	NNS	NNS	_	4	nsubj	_	_
3	are	_	VBP	VBP	_	4	cop	_	_
4	invisible	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:
(c / contrast-01, ARG2, v / visible)
(v / visible, domain, s / seed)
(v / visible, polarity, -)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),But,contrast-01,false)),Map(0 -> contrast-01),Map(c -> contrast-01))),[Ljava.lang.String;@6f10d5b6,Annotation([Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a,[Ljava.lang.String;@433defed),Annotation([Ljava.lang.String;@2a693f59,[Ljava.lang.String;@3f4faf53,[Ledu.cmu.lti.nlp.amr.Dependency;@7fd50002),Annotation([Ljava.lang.String;@533bda92,[Ljava.lang.String;@304bb45b,[Ljava.lang.String;@723ca036),Annotation([Ljava.lang.String;@25be7b63,[Ljava.lang.String;@28dcca0c,[Ledu.cmu.lti.nlp.amr.Entity;@45d84a20))
AMR:


Decoded in 8,972 microseconds
Sentence: They sleep deep in the heart of the earth 's darkness , until some one among them is seized with the desire to awaken .


--- Decoder1 ---

Sentence: They sleep deep in the heart of the earth 's darkness , until some one among them is seized with the desire to awaken .
word = They
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false)))
concept = PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
word = sleep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sleep),sleep-01,PhraseConceptFeatures(6.0,0.0,false,false)))
concept = PhraseConceptPair(List(sleep),sleep-01,PhraseConceptFeatures(6.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sleep),sleep-01,PhraseConceptFeatures(6.0,0.0,false,false))
word = deep
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(deep),deep,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(deep),deep,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(deep),deep,PhraseConceptFeatures(1.0,0.0,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = heart
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(heart),heart,PhraseConceptFeatures(11.0,0.0,false,false)))
concept = PhraseConceptPair(List(heart),heart,PhraseConceptFeatures(11.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(heart),heart,PhraseConceptFeatures(11.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = earth
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(earth),earth,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(earth),earth,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(earth),earth,PhraseConceptFeatures(3.0,0.0,false,false))
word = 's
Finding date entities
Possible invoked concepts: List()
word = darkness
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(darkness),darkness,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(darkness),darkness,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(darkness),darkness,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = until
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false)))
concept = PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
score = 0
adding concept:PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
word = some
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)), PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false)))
concept = PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
score = 0
adding concept:PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
concept = PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false))
score = 0
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = among
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(among),among,PhraseConceptFeatures(2.0,-0.916290731874155,false,false)))
concept = PhraseConceptPair(List(among),among,PhraseConceptFeatures(2.0,-0.916290731874155,false,false))
score = 0
adding concept:PhraseConceptPair(List(among),among,PhraseConceptFeatures(2.0,-0.916290731874155,false,false))
word = them
Finding date entities
Possible invoked concepts: List()
word = is
Finding date entities
Possible invoked concepts: List()
word = seized
Finding date entities
Possible invoked concepts: List()
word = with
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = desire
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = awaken
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(sleep),sleep-01,PhraseConceptFeatures(6.0,0.0,false,false)),1)), Some((0.029773585223834276,PhraseConceptPair(List(deep),deep,PhraseConceptFeatures(1.0,0.0,false,false)),2)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(heart),heart,PhraseConceptFeatures(11.0,0.0,false,false)),5)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(earth),earth,PhraseConceptFeatures(3.0,0.0,false,false)),8)), None, Some((0.029773585223834276,PhraseConceptPair(List(darkness),darkness,PhraseConceptFeatures(1.0,0.0,false,false)),10)), None, Some((0.025673026403986283,PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false)),12)), Some((0.019706599931381283,PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)),13)), Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),14)), Some((0.020506933255524298,PhraseConceptPair(List(among),among,PhraseConceptFeatures(2.0,-0.916290731874155,false,false)),15)), None, None, None, None, None, None, None, None, None)
Adding concept: among
nodeIds = List(0)
concepts = List(among)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(among),among,PhraseConceptFeatures(2.0,-0.916290731874155,false,false))
feats:
bias 1.0
c|p -0.916290731874155
len 1.0

score:
0.0205069332555243
Adding concept: 1
nodeIds = List(1)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.03116451010183266
Adding concept: some
nodeIds = List(2)
concepts = List(some)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
feats:
bias 1.0
c|p -0.995428052432879
len 1.0

score:
0.05087111003321394
Adding concept: until
nodeIds = List(3)
concepts = List(until)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
feats:
bias 1.0
c|p -0.40546510810816444
len 1.0

score:
0.07654413643720022
Adding concept: darkness
nodeIds = List(4)
concepts = List(darkness)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(darkness),darkness,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1063177216610345
Adding concept: earth
nodeIds = List(5)
concepts = List(earth)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(earth),earth,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13609130688486876
Adding concept: heart
nodeIds = List(6)
concepts = List(heart)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(heart),heart,PhraseConceptFeatures(11.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.16586489210870303
Adding concept: deep
nodeIds = List(7)
concepts = List(deep)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(deep),deep,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1956384773325373
Adding concept: sleep-01
nodeIds = List(8)
concepts = List(sleep-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sleep),sleep-01,PhraseConceptFeatures(6.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.22541206255637158
Adding concept: they
nodeIds = List(9)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(They),they,PhraseConceptFeatures(22.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.25518564778020586
Decoder1 Spans:
Span 1:  among => among
Span 2:  darkness => darkness
Span 3:  deep => deep
Span 4:  earth => earth
Span 5:  heart => heart
Span 6:  one => 1
Span 7:  sleep => sleep-01
Span 8:  some => some
Span 9:  They => they
Span 10:  until => until
Decoder1 feats:
bias 10.0
c|p -4.2073834344565055
len 10.0

Concepts:
id = 2 concept = some
id = 5 concept = earth
id = 8 concept = sleep-01
id = 7 concept = deep
id = 1 concept = 1
id = 4 concept = darkness
id = 6 concept = heart
id = 9 concept = they
id = 0 concept = among
id = 3 concept = until
Spans:
Span 15-16:  among => among
Span 10-11:  darkness => darkness
Span 2-3:  deep => deep
Span 8-9:  earth => earth
Span 5-6:  heart => heart
Span 14-15:  one => 1
Span 1-2:  sleep => sleep-01
Span 13-14:  some => some
Span 0-1:  They => they
Span 12-13:  until => until

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 3), List(1, 2, 3, 5, 4), List(1, 2, 3, 5), List(1, 2, 3, 5, 6), List(1, 2, 3, 5, 6, 10, 8, 7), List(1, 2, 3, 5, 6, 10, 8), List(1, 2, 3, 5, 6, 10, 8, 9), List(1, 2, 3, 5, 6, 10), List(1, 11), List(1, 18, 12), List(1, 18, 14, 13), List(1, 18, 14), List(1, 18, 14, 15), List(1, 18, 14, 15, 16), List(1, 18, 17), List(1, 18), List(1, 18, 19), List(1, 18, 19, 21, 20), List(1, 18, 19, 21), List(1, 18, 22), List(1, 18, 22, 23), List(1, 24))
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 5
Node = 6
Node = 0
Node = 1
Node = 9
Node = 4
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -406.42123277705855
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 0
Node = 5
Node = 6
Node = 1
Node = 9
Node = 4
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -413.74139630545307
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 0
Node = 1
Node = 9
Node = 4
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -420.84988975809387
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 0
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -425.1700532864884
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 0
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -429.1700532864884
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 0
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -433.1700532864884
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -436.350393467727
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -438.350393467727
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -440.350393467727
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -442.350393467727
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -444.350393467727
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -446.350393467727
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -448.350393467727
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 9
Node = 1
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -449.6494253121238
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -451.350393467727
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 5
Node = 9
Node = 1
Node = 4
Node = 2
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -452.6494253121238
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 1
Node = 9
Node = 4
Node = 2
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -453.370392501423
getNodeById = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until)
getNodeById2 = Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 0 -> among, 9 -> they, 3 -> until)
Node = 7
Node = 8
Node = 3
Node = 6
Node = 9
Node = 1
Node = 4
Node = 2
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -454.66942434581983
Langrangian relaxation converged after 18 iterations. Delta = 0.0
Node.spans:
include-91 List()
earth List()
someone List()
seize-01 List()
darkness List()
heart List()
awaken-01 List()
desire-01 List()
deep List()
they List()
sleep-01 List()
until List()
OracleGraph nodes = List(include-91, earth, someone, seize-01, darkness, heart, awaken-01, desire-01, deep, they, sleep-01, until)
OracleGraph triples: (d2 / darkness, part, h / heart)
(d2 / darkness, poss, e / earth)
(d3 / desire-01, ARG1, a / awaken-01)
(h / heart, location, d / deep)
(i / include-91, ARG1, s3 / someone)
(i / include-91, ARG2, t / they)
(s / sleep-01, ARG0, t / they)
(s / sleep-01, location, h / heart)
(s / sleep-01, time, u / until)
(s2 / seize-01, ARG0, d3 / desire-01)
(s2 / seize-01, ARG1, s3 / someone)
(u / until, op, s2 / seize-01)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 3), List(1, 2, 3, 5, 4), List(1, 2, 3, 5), List(1, 2, 3, 5, 6), List(1, 2, 3, 5, 6, 10, 8, 7), List(1, 2, 3, 5, 6, 10, 8), List(1, 2, 3, 5, 6, 10, 8, 9), List(1, 2, 3, 5, 6, 10), List(1, 11), List(1, 18, 12), List(1, 18, 14, 13), List(1, 18, 14), List(1, 18, 14, 15), List(1, 18, 14, 15, 16), List(1, 18, 17), List(1, 18), List(1, 18, 19), List(1, 18, 19, 21, 20), List(1, 18, 19, 21), List(1, 18, 22), List(1, 18, 22, 23), List(1, 24))
Oracle Span 23-24:  awaken => awaken-01
Oracle Span 10-11:  darkness => darkness
Oracle Span 2-3:  deep => deep
Oracle Span 21-22:  desire => desire-01
Oracle Span 8-9:  earth => earth
Oracle Span 5-6:  heart => heart
Oracle Span 6-7:  of => include-91
Oracle Span 18-19:  seized => seize-01
Oracle Span 1-2:  sleep => sleep-01
Oracle Span 13-14:  some => someone
Oracle Span 0-1:  They => they
Oracle Span 12-13:  until => until

Extra span: among => among
Extra span: one => 1
Incorrect span: some => some
Missing span: seized => seize-01
Missing span: of => include-91
Missing span: desire => desire-01
Missing span: awaken => awaken-01
Missing span: some => someone
Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	sleep	_	VBP	VBP	_	0	root	_	_
3	deep	_	JJ	JJ	_	2	acomp	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	heart	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	earth	_	NN	NN	_	11	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	darkness	_	NNS	NNS	_	7	pobj	_	_
12	,	_	,	,	_	2	punct	_	_
13	until	_	IN	IN	_	19	mark	_	_
14	some	_	DT	DT	_	15	det	_	_
15	one	_	NN	NN	_	19	nsubjpass	_	_
16	among	_	IN	IN	_	15	prep	_	_
17	them	_	PRP	PRP	_	16	pobj	_	_
18	is	_	VBZ	VBZ	_	19	auxpass	_	_
19	seized	_	VBN	VBN	_	2	advcl	_	_
20	with	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	desire	_	NN	NN	_	20	pobj	_	_
23	to	_	TO	TO	_	19	prep	_	_
24	awaken	_	NN	NN	_	23	pobj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(d2 / darkness, part, h / heart)
(d2 / darkness, poss, e / earth)
(d3 / desire-01, ARG1, a / awaken-01)
(h / heart, location, d / deep)
(i / include-91, ARG1, s3 / someone)
(i / include-91, ARG2, t / they)
(s / sleep-01, ARG0, t / they)
(s / sleep-01, location, h / heart)
(s / sleep-01, time, u / until)
(s2 / seize-01, ARG0, d3 / desire-01)
(s2 / seize-01, ARG1, s3 / someone)
(u / until, op, s2 / seize-01)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),among,among,false), Span(14,15,List(1),one,1,false), Span(13,14,List(2),some,some,false), Span(12,13,List(3),until,until,false), Span(10,11,List(4),darkness,darkness,false), Span(8,9,List(5),earth,earth,false), Span(5,6,List(6),heart,heart,false), Span(2,3,List(7),deep,deep,false), Span(1,2,List(8),sleep,sleep-01,false), Span(0,1,List(9),They,they,false)),Map(2 -> some, 5 -> earth, 8 -> sleep-01, 7 -> deep, 1 -> 1, 4 -> darkness, 6 -> heart, 9 -> they, 0 -> among, 3 -> until),Map(e -> earth, h -> heart, t -> they, s2 -> sleep-01, s -> some, d -> darkness, 1 -> 1, a -> among, d2 -> deep, u -> until))),[Ljava.lang.String;@52f27fbd,Annotation([Ljava.lang.String;@4c163e3,[Ljava.lang.String;@4a8355dd,[Ljava.lang.String;@4d0d9fe7),Annotation([Ljava.lang.String;@c430e6c,[Ljava.lang.String;@312aa7c,[Ledu.cmu.lti.nlp.amr.Dependency;@536f2a7e),Annotation([Ljava.lang.String;@72bc6553,[Ljava.lang.String;@66982506,[Ljava.lang.String;@70cf32e3),Annotation([Ljava.lang.String;@5a59ca5e,[Ljava.lang.String;@4bdeaabb,[Ledu.cmu.lti.nlp.amr.Entity;@6c4906d3))
AMR:
(1 / 1, location, a / among)
(1 / 1, mod, s / some)
(d / darkness, part, h / heart)
(d / darkness, poss, e / earth)
(s2 / sleep-01, ARG0, 1 / 1)
(s2 / sleep-01, ARG1, t / they)
(s2 / sleep-01, ARG2, h / heart)
(s2 / sleep-01, manner, d2 / deep)
(u / until, domain, s2 / sleep-01)

Decoded in 155,981 microseconds
Sentence: Then this little seed will stretch itself and begin -- timidly at first -- to push a charming little sprig inoffensively upward toward the sun .


--- Decoder1 ---

Sentence: Then this little seed will stretch itself and begin -- timidly at first -- to push a charming little sprig inoffensively upward toward the sun .
word = Then
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false)))
concept = PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
score = 0
adding concept:PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = seed
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(seed),seed,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(seed),seed,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(seed),seed,PhraseConceptFeatures(2.0,0.0,false,false))
word = will
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(will),will,PhraseConceptFeatures(1.0,-4.290459441148391,false,false)))
concept = PhraseConceptPair(List(will),will,PhraseConceptFeatures(1.0,-4.290459441148391,false,false))
score = 0
word = stretch
Finding date entities
Possible invoked concepts: List()
word = itself
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = begin
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = --
Finding date entities
Possible invoked concepts: List()
word = timidly
Finding date entities
Possible invoked concepts: List()
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = first
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false)), PhraseConceptPair(List(first),first-of-all,PhraseConceptFeatures(1.0,-3.332204510175204,false,false)))
concept = PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
score = 0
adding concept:PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
concept = PhraseConceptPair(List(first),first-of-all,PhraseConceptFeatures(1.0,-3.332204510175204,false,false))
score = 0
word = --
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = push
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = charming
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = sprig
Finding date entities
Possible invoked concepts: List()
word = inoffensively
Finding date entities
Possible invoked concepts: List()
word = upward
Finding date entities
Possible invoked concepts: List()
word = toward
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false)))
concept = PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
score = 0
adding concept:PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = sun
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026433777593784454,PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false)),0)), Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),1)), Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(seed),seed,PhraseConceptFeatures(2.0,0.0,false,false)),3)), None, None, None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),7)), Some((0.029773585223834276,PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false)),8)), None, None, None, Some((0.003084211483316255,PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false)),12)), None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false)),17)), Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),18)), None, None, None, Some((0.02460749207537229,PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false)),22)), None, Some((0.029773585223834276,PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false)),24)), None)
Adding concept: sun
nodeIds = List(0)
concepts = List(sun)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: toward
nodeIds = List(1)
concepts = List(toward)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(toward),toward,PhraseConceptFeatures(3.0,-0.5108256237659907,false,false))
feats:
bias 1.0
c|p -0.5108256237659907
len 1.0

score:
0.05438107729920656
Adding concept: little
nodeIds = List(2)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.07699988903084011
Adding concept: charm-01
nodeIds = List(3)
concepts = List(charm-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(charming),charm-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10677347425467439
Adding concept: first
nodeIds = List(4)
concepts = List(first)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
feats:
bias 1.0
c|p -2.639057329615259
len 1.0

score:
0.10985768573799064
Adding concept: begin-01
nodeIds = List(5)
concepts = List(begin-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(begin),begin-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13963127096182493
Adding concept: and
nodeIds = List(6)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.15858921278423346
Adding concept: seed
nodeIds = List(7)
concepts = List(seed)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(seed),seed,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.18836279800806774
Adding concept: little
nodeIds = List(8)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.2109816097397013
Adding concept: this
nodeIds = List(9)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.23943420400685486
Adding concept: then
nodeIds = List(10)
concepts = List(then)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Then),then,PhraseConceptFeatures(23.0,-0.33024168687057687,false,false))
feats:
bias 1.0
c|p -0.33024168687057687
len 1.0

score:
0.2658679816006393
Decoder1 Spans:
Span 1:  and => and
Span 2:  begin => begin-01
Span 3:  charming => charm-01
Span 4:  first => first
Span 5:  little => little
Span 6:  little => little
Span 7:  seed => seed
Span 8:  sun => sun
Span 9:  Then => then
Span 10:  this => this
Span 11:  toward => toward
Decoder1 feats:
bias 11.0
c|p -6.095134995714933
len 11.0

Concepts:
id = 2 concept = little
id = 5 concept = begin-01
id = 8 concept = little
id = 7 concept = seed
id = 1 concept = toward
id = 4 concept = first
id = 6 concept = and
id = 9 concept = this
id = 0 concept = sun
id = 10 concept = then
id = 3 concept = charm-01
Spans:
Span 7-8:  and => and
Span 8-9:  begin => begin-01
Span 17-18:  charming => charm-01
Span 12-13:  first => first
Span 18-19:  little => little
Span 2-3:  little => little
Span 3-4:  seed => seed
Span 24-25:  sun => sun
Span 0-1:  Then => then
Span 1-2:  this => this
Span 22-23:  toward => toward

rootDependencyPaths = List(List(5, 0), List(5, 3, 1), List(5, 3, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 7), List(5, 8), List(5, 8, 11, 9), List(5, 8, 11, 10), List(5, 8, 11), List(5, 8, 11, 12), List(5, 8, 11, 13), List(5, 15, 14), List(5, 15), List(5, 15, 20, 16), List(5, 15, 20, 17), List(5, 15, 20, 18), List(5, 15, 20, 19), List(5, 15, 20), List(5, 15, 21), List(5, 15, 22), List(5, 15, 22, 24, 23), List(5, 15, 22, 24), List(5, 25))
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -413.42710469001133
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -417.42710469001133
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -420.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -421.7820255421657
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -423.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -424.7820255421657
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -426.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -427.7820255421657
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -429.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -430.7820255421657
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -432.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -433.7820255421657
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -435.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -436.7820255421657
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -438.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -439.7820255421657
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -441.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -442.7820255421657
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -444.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 7
Node = 2
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -445.23579714814565
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -446.38138999000006
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -449.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 7
Node = 2
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -450.23579714814565
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -451.38138999000006
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -454.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 7
Node = 2
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -455.23579714814565
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -456.38138999000006
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -459.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 7
Node = 2
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -460.23579714814565
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -461.38138999000006
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 2
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -464.13694639432003
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 7
Node = 2
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -465.23579714814565
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 2
Node = 4
Node = 7
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -466.38138999000006
getNodeById = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01)
getNodeById2 = Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 0 -> sun, 9 -> this, 3 -> charm-01, 10 -> then)
Node = 6
Node = 5
Node = 3
Node = 4
Node = 7
Node = 2
Node = 0
Node = 8
Node = 9
Node = 1
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -468.93294984248917
Langrangian relaxation converged after 34 iterations. Delta = 0.0
Node.spans:
- List()
seed List()
at-first List()
upward List()
little List()
timid List()
begin-01 List()
sprig List()
charm-01 List()
sun List()
stretch-01 List()
push-01 List()
little List()
and List()
offensive List()
this List()
then List()
clearUnalignedNodes():  removing unaligned node: Some(a2) / at-first
OracleGraph nodes = List(-, seed, upward, little, timid, begin-01, sprig, charm-01, sun, stretch-01, push-01, little, and, offensive, this, then)
OracleGraph triples: (a / and, op, b / begin-01)
(a / and, op, s / stretch-01)
(a / and, time, t / then)
(b / begin-01, ARG0, s2 / seed)
(b / begin-01, ARG1, p / push-01)
(b / begin-01, manner, t3 / timid)
(c / charm-01, ARG0, s3 / sprig)
(o / offensive, polarity, -)
(p / push-01, ARG0, s2 / seed)
(p / push-01, ARG1, s3 / sprig)
(p / push-01, ARG2, u / upward)
(p / push-01, manner, o / offensive)
(s / stretch-01, ARG0, s2 / seed)
(s / stretch-01, ARG1, s2 / seed)
(s2 / seed, mod, l / little)
(s2 / seed, mod, t2 / this)
(s3 / sprig, mod, l2 / little)
(u / upward, direction, s4 / sun)
rootDependencyPaths = List(List(5, 0), List(5, 3, 1), List(5, 3, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 7), List(5, 8), List(5, 8, 11, 9), List(5, 8, 11, 10), List(5, 8, 11), List(5, 8, 11, 12), List(5, 8, 11, 13), List(5, 15, 14), List(5, 15), List(5, 15, 20, 16), List(5, 15, 20, 17), List(5, 15, 20, 18), List(5, 15, 20, 19), List(5, 15, 20), List(5, 15, 21), List(5, 15, 22), List(5, 15, 22, 24, 23), List(5, 15, 22, 24), List(5, 25))
Oracle Span 7-8:  and => and
Oracle Span 8-9:  begin => begin-01
Oracle Span 17-18:  charming => charm-01
Oracle Span 20-21:  inoffensively => (offensive :polarity -)
Oracle Span 2-3:  little => little
Oracle Span 18-19:  little => little
Oracle Span 15-16:  push => push-01
Oracle Span 3-4:  seed => seed
Oracle Span 19-20:  sprig => sprig
Oracle Span 5-6:  stretch => stretch-01
Oracle Span 24-25:  sun => sun
Oracle Span 0-1:  Then => then
Oracle Span 1-2:  this => this
Oracle Span 10-11:  timidly => timid
Oracle Span 21-22:  upward => upward

Extra span: toward => toward
Extra span: first => first
Missing span: push => push-01
Missing span: upward => upward
Missing span: sprig => sprig
Missing span: stretch => stretch-01
Missing span: timidly => timid
Missing span: inoffensively => (offensive :polarity -)
Dependencies:
1	Then	_	RB	RB	_	6	advmod	_	_
2	this	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	seed	_	NN	NN	_	6	nsubj	_	_
5	will	_	MD	MD	_	6	aux	_	_
6	stretch	_	VB	VB	_	0	root	_	_
7	itself	_	PRP	PRP	_	6	dobj	_	_
8	and	_	CC	CC	_	6	cc	_	_
9	begin	_	VB	VB	_	6	conj	_	_
10	--	_	:	:	_	12	punct	_	_
11	timidly	_	RB	RB	_	12	advmod	_	_
12	at	_	IN	IN	_	9	dep	_	_
13	first	_	JJ	JJ	_	12	pobj	_	_
14	--	_	:	:	_	12	punct	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	push	_	VB	VB	_	6	xcomp	_	_
17	a	_	DT	DT	_	21	det	_	_
18	charming	_	JJ	JJ	_	21	amod	_	_
19	little	_	JJ	JJ	_	21	amod	_	_
20	sprig	_	NN	NN	_	21	nn	_	_
21	inoffensively	_	NN	NN	_	16	dobj	_	_
22	upward	_	RB	RB	_	16	advmod	_	_
23	toward	_	IN	IN	_	16	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	sun	_	NN	NN	_	23	pobj	_	_
26	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, b / begin-01)
(a / and, op, s / stretch-01)
(a / and, time, t / then)
(b / begin-01, ARG0, s2 / seed)
(b / begin-01, ARG1, p / push-01)
(b / begin-01, manner, t3 / timid)
(c / charm-01, ARG0, s3 / sprig)
(o / offensive, polarity, -)
(p / push-01, ARG0, s2 / seed)
(p / push-01, ARG1, s3 / sprig)
(p / push-01, ARG2, u / upward)
(p / push-01, manner, o / offensive)
(s / stretch-01, ARG0, s2 / seed)
(s / stretch-01, ARG1, s2 / seed)
(s2 / seed, mod, l / little)
(s2 / seed, mod, t2 / this)
(s3 / sprig, mod, l2 / little)
(u / upward, direction, s4 / sun)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),sun,sun,false), Span(22,23,List(1),toward,toward,false), Span(18,19,List(2),little,little,false), Span(17,18,List(3),charming,charm-01,false), Span(12,13,List(4),first,first,false), Span(8,9,List(5),begin,begin-01,false), Span(7,8,List(6),and,and,false), Span(3,4,List(7),seed,seed,false), Span(2,3,List(8),little,little,false), Span(1,2,List(9),this,this,false), Span(0,1,List(10),Then,then,false)),Map(2 -> little, 5 -> begin-01, 8 -> little, 7 -> seed, 1 -> toward, 4 -> first, 6 -> and, 9 -> this, 0 -> sun, 10 -> then, 3 -> charm-01),Map(s2 -> seed, b -> begin-01, t -> toward, s -> sun, t3 -> then, a -> and, t2 -> this, l2 -> little, c -> charm-01, l -> little, f -> first))),[Ljava.lang.String;@65987993,Annotation([Ljava.lang.String;@71075444,[Ljava.lang.String;@4f32a3ad,[Ljava.lang.String;@6b695b06),Annotation([Ljava.lang.String;@4d1bf319,[Ljava.lang.String;@6f53b8a,[Ledu.cmu.lti.nlp.amr.Dependency;@5c80cf32),Annotation([Ljava.lang.String;@7d900ecf,[Ljava.lang.String;@6f01b95f,[Ljava.lang.String;@4007f65e),Annotation([Ljava.lang.String;@1a245833,[Ljava.lang.String;@673fdbce,[Ledu.cmu.lti.nlp.amr.Entity;@5965d37))
AMR:
(a / and, op, b / begin-01)
(b / begin-01, ARG0, s2 / seed)
(b / begin-01, ARG1, f / first)
(c / charm-01, ARG0, a / and)
(c / charm-01, ARG1, s / sun)
(c / charm-01, ARG2, l / little)
(s2 / seed, mod, l2 / little)
(s2 / seed, mod, t2 / this)
(t / toward, op, s / sun)
(t2 / this, mod, t3 / then)

Decoded in 271,873 microseconds
Sentence: If it is only a sprout of radish or the sprig of a rose - bush , one would let it grow wherever it might wish .


--- Decoder1 ---

Sentence: If it is only a sprout of radish or the sprig of a rose - bush , one would let it grow wherever it might wish .
word = If
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)))
concept = PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
score = 0
adding concept:PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = only
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)))
concept = PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
score = 0
adding concept:PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = sprout
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sprout),sprout,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(sprout),sprout,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sprout),sprout,PhraseConceptFeatures(1.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = radish
Finding date entities
Possible invoked concepts: List()
word = or
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(or),or,PhraseConceptFeatures(17.0,-0.3448404862917295,false,false)))
concept = PhraseConceptPair(List(or),or,PhraseConceptFeatures(17.0,-0.3448404862917295,false,false))
score = 0
adding concept:PhraseConceptPair(List(or),or,PhraseConceptFeatures(17.0,-0.3448404862917295,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = sprig
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = rose
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(rose),rose,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false)))
concept = PhraseConceptPair(List(rose),rose,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
score = 0
adding concept:PhraseConceptPair(List(rose),rose,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
word = -
Finding date entities
Possible invoked concepts: List()
word = bush
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = would
Finding date entities
Possible invoked concepts: List()
word = let
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = grow
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(grow),grow-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = wherever
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = might
Finding date entities
Possible invoked concepts: List()
word = wish
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(wish),wish-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(wish),wish-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(wish),wish-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.0011206685260514437,PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)),0)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),1)), None, Some((0.02893032846730732,PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)),3)), None, Some((0.029773585223834276,PhraseConceptPair(List(sprout),sprout,PhraseConceptFeatures(1.0,0.0,false,false)),5)), None, None, Some((0.02628613668824535,PhraseConceptPair(List(or),or,PhraseConceptFeatures(17.0,-0.3448404862917295,false,false)),8)), None, None, None, None, Some((0.028214625113307072,PhraseConceptPair(List(rose),rose,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false)),13)), None, None, None, Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),17)), None, Some((0.029773585223834276,PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false)),19)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),20)), Some((0.015753682017072397,PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),21)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),23)), None, Some((0.029773585223834276,PhraseConceptPair(List(wish),wish-01,PhraseConceptFeatures(3.0,0.0,false,false)),25)), None)
Adding concept: wish-01
nodeIds = List(0)
concepts = List(wish-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(wish),wish-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.04869270464764677
Adding concept: grow-02
nodeIds = List(2)
concepts = List(grow-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(grow),grow-02,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.06444638666471916
Adding concept: it
nodeIds = List(3)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.08336550608853166
Adding concept: let-01
nodeIds = List(4)
concepts = List(let-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11313909131236594
Adding concept: 1
nodeIds = List(5)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.1237966681586743
Adding concept: rose
nodeIds = List(6)
concepts = List(rose)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(rose),rose,PhraseConceptFeatures(12.0,-0.15415067982725836,false,false))
feats:
bias 1.0
c|p -0.15415067982725836
len 1.0

score:
0.15201129327198137
Adding concept: or
nodeIds = List(7)
concepts = List(or)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(or),or,PhraseConceptFeatures(17.0,-0.3448404862917295,false,false))
feats:
bias 1.0
c|p -0.3448404862917295
len 1.0

score:
0.17829742996022674
Adding concept: sprout
nodeIds = List(8)
concepts = List(sprout)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sprout),sprout,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.20807101518406101
Adding concept: only
nodeIds = List(9)
concepts = List(only)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
feats:
bias 1.0
c|p -0.08338160893905101
len 1.0

score:
0.23700134365136832
Adding concept: it
nodeIds = List(10)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.2559204630751808
Adding concept: cause-01
nodeIds = List(11)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
feats:
bias 1.0
c|p -2.833213344056216
len 1.0

score:
0.2570411316012322
Decoder1 Spans:
Span 1:  grow => grow-02
Span 2:  If => cause-01
Span 3:  it => it
Span 4:  it => it
Span 5:  it => it
Span 6:  let => let-01
Span 7:  one => 1
Span 8:  only => only
Span 9:  or => or
Span 10:  rose => rose
Span 11:  sprout => sprout
Span 12:  wish => wish-01
Decoder1 feats:
bias 12.0
c|p -9.911963464326913
len 12.0

Concepts:
id = 2 concept = grow-02
id = 5 concept = 1
id = 8 concept = sprout
id = 7 concept = or
id = 1 concept = it
id = 11 concept = cause-01
id = 4 concept = let-01
id = 6 concept = rose
id = 9 concept = only
id = 0 concept = wish-01
id = 10 concept = it
id = 3 concept = it
Spans:
Span 21-22:  grow => grow-02
Span 0-1:  If => cause-01
Span 23-24:  it => it
Span 20-21:  it => it
Span 1-2:  it => it
Span 19-20:  let => let-01
Span 17-18:  one => 1
Span 3-4:  only => only
Span 8-9:  or => or
Span 13-14:  rose => rose
Span 5-6:  sprout => sprout
Span 25-26:  wish => wish-01

rootDependencyPaths = List(List(19, 5, 0), List(19, 5, 1), List(19, 5, 2), List(19, 5, 3), List(19, 5, 4), List(19, 5), List(19, 5, 6), List(19, 5, 6, 7), List(19, 5, 8), List(19, 5, 10, 9), List(19, 5, 10), List(19, 5, 10, 11), List(19, 5, 10, 11, 13, 12), List(19, 5, 10, 11, 13), List(19, 5, 10, 11, 13, 14), List(19, 5, 10, 11, 13, 15), List(19, 16), List(19, 17), List(19, 18), List(19), List(19, 21, 20), List(19, 21), List(19, 21, 25, 22), List(19, 21, 25, 23), List(19, 21, 25, 24), List(19, 21, 25), List(19, 26))
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 1
Node = 4
Node = 3
Node = 11
Node = 10
Node = 5
Node = 9
Node = 6
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -58.86864174175032
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 1
Node = 4
Node = 3
Node = 11
Node = 10
Node = 5
Node = 9
Node = 6
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -72.86864174175031
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 1
Node = 4
Node = 3
Node = 11
Node = 10
Node = 5
Node = 7
Node = 9
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -86.54380255738168
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 11
Node = 10
Node = 5
Node = 9
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -99.58669176587328
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 11
Node = 9
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -109.80851496867948
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 11
Node = 7
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -117.48367578431083
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 11
Node = 9
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -124.09046494455652
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 11
Node = 7
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -131.48367578431083
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -137.91208897922775
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -139.91208897922775
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -141.91208897922775
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 5
Node = 10
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -143.2607497313121
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -144.91208897922775
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 5
Node = 10
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -146.2607497313121
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -147.91208897922775
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 5
Node = 10
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -149.2607497313121
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -150.91208897922775
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 11
Node = 5
Node = 9
Node = 8
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -151.585229802245
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -154.91208897922775
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 11
Node = 5
Node = 9
Node = 8
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -155.585229802245
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 11
Node = 9
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -158.91208897922775
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 11
Node = 5
Node = 9
Node = 8
Node = 7
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -159.585229802245
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 10
Node = 5
Node = 8
Node = 7
Node = 9
Node = 11
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -162.4976348811519
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 11
Node = 5
Node = 8
Node = 7
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -163.1707757041691
getNodeById = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it)
getNodeById2 = Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 4 -> let-01, 11 -> cause-01, 6 -> rose, 0 -> wish-01, 9 -> only, 3 -> it, 10 -> it)
Node = 0
Node = 2
Node = 6
Node = 1
Node = 4
Node = 3
Node = 11
Node = 5
Node = 8
Node = 7
Node = 9
Node = 10
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -164.82211495208475
Langrangian relaxation converged after 25 iterations. Delta = 0.0
Node.spans:
grow-01 List()
sprout List()
bush List()
possible List()
it List()
one List()
wish-01 List()
rose List()
radish List()
only List()
allow-01 List()
or List()
sprig List()
clearUnalignedNodes():  removing unaligned node: Some(p) / possible
clearUnalignedNodes():  removing unaligned node: Some(a) / allow-01
OracleGraph nodes = List(grow-01, sprout, bush, it, one, wish-01, rose, radish, only, or, sprig)
OracleGraph triples: (b2 / bush, mod, r2 / rose)
(b2 / bush, part, s2 / sprig)
(g / grow-01, ARG1, i / it)
(g / grow-01, location, w2 / wish-01)
(o2 / or, domain, i / it)
(o2 / or, mod, o3 / only)
(o2 / or, op, s / sprout)
(o2 / or, op, s2 / sprig)
(r / radish, part, s / sprout)
(w2 / wish-01, ARG0, i / it)
rootDependencyPaths = List(List(19, 5, 0), List(19, 5, 1), List(19, 5, 2), List(19, 5, 3), List(19, 5, 4), List(19, 5), List(19, 5, 6), List(19, 5, 6, 7), List(19, 5, 8), List(19, 5, 10, 9), List(19, 5, 10), List(19, 5, 10, 11), List(19, 5, 10, 11, 13, 12), List(19, 5, 10, 11, 13), List(19, 5, 10, 11, 13, 14), List(19, 5, 10, 11, 13, 15), List(19, 16), List(19, 17), List(19, 18), List(19), List(19, 21, 20), List(19, 21), List(19, 21, 25, 22), List(19, 21, 25, 23), List(19, 21, 25, 24), List(19, 21, 25), List(19, 26))
Oracle Span 15-16:  bush => bush
Oracle Span 21-22:  grow => grow-01
Oracle Span 1-2:  it => it
Oracle Span 17-18:  one => one
Oracle Span 3-4:  only => only
Oracle Span 8-9:  or => or
Oracle Span 7-8:  radish => radish
Oracle Span 13-14:  rose => rose
Oracle Span 10-11:  sprig => sprig
Oracle Span 5-6:  sprout => sprout
Oracle Span 25-26:  wish => wish-01

Extra span: it => it
Incorrect span: grow => grow-02
Extra span: it => it
Extra span: let => let-01
Incorrect span: one => 1
Extra span: If => cause-01
Missing span: one => one
Missing span: grow => grow-01
Missing span: sprig => sprig
Missing span: bush => bush
Missing span: radish => radish
Dependencies:
1	If	_	IN	IN	_	6	mark	_	_
2	it	_	PRP	PRP	_	6	nsubj	_	_
3	is	_	VBZ	VBZ	_	6	cop	_	_
4	only	_	RB	RB	_	6	advmod	_	_
5	a	_	DT	DT	_	6	det	_	_
6	sprout	_	NN	NN	_	20	advcl	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	radish	_	NN	NN	_	7	pobj	_	_
9	or	_	CC	CC	_	6	cc	_	_
10	the	_	DT	DT	_	11	det	_	_
11	sprig	_	NN	NN	_	6	conj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	14	det	_	_
14	rose	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	14	punct	_	_
16	bush	_	NN	NN	_	14	dep	_	_
17	,	_	,	,	_	20	punct	_	_
18	one	_	PRP	PRP	_	20	nsubj	_	_
19	would	_	MD	MD	_	20	aux	_	_
20	let	_	VB	VB	_	0	root	_	_
21	it	_	PRP	PRP	_	22	nsubj	_	_
22	grow	_	VB	VB	_	20	ccomp	_	_
23	wherever	_	WRB	WRB	_	26	advmod	_	_
24	it	_	PRP	PRP	_	26	nsubj	_	_
25	might	_	MD	MD	_	26	aux	_	_
26	wish	_	VB	VB	_	22	advcl	_	_
27	.	_	.	.	_	20	punct	_	_

Oracle:
(b2 / bush, mod, r2 / rose)
(b2 / bush, part, s2 / sprig)
(g / grow-01, ARG1, i / it)
(g / grow-01, location, w2 / wish-01)
(o2 / or, domain, i / it)
(o2 / or, mod, o3 / only)
(o2 / or, op, s / sprout)
(o2 / or, op, s2 / sprig)
(r / radish, part, s / sprout)
(w2 / wish-01, ARG0, i / it)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),wish,wish-01,false), Span(23,24,List(1),it,it,false), Span(21,22,List(2),grow,grow-02,false), Span(20,21,List(3),it,it,false), Span(19,20,List(4),let,let-01,false), Span(17,18,List(5),one,1,false), Span(13,14,List(6),rose,rose,false), Span(8,9,List(7),or,or,false), Span(5,6,List(8),sprout,sprout,false), Span(3,4,List(9),only,only,false), Span(1,2,List(10),it,it,false), Span(0,1,List(11),If,cause-01,false)),Map(2 -> grow-02, 5 -> 1, 8 -> sprout, 7 -> or, 1 -> it, 11 -> cause-01, 4 -> let-01, 6 -> rose, 9 -> only, 0 -> wish-01, 10 -> it, 3 -> it),Map(w -> wish-01, s -> sprout, i3 -> it, 1 -> 1, g -> grow-02, o2 -> only, i2 -> it, r -> rose, i -> it, c -> cause-01, l -> let-01, o -> or))),[Ljava.lang.String;@7a5ceedd,Annotation([Ljava.lang.String;@4201c465,[Ljava.lang.String;@5b799640,[Ljava.lang.String;@6cb107fd),Annotation([Ljava.lang.String;@710636b0,[Ljava.lang.String;@3de8f619,[Ledu.cmu.lti.nlp.amr.Dependency;@2ab4bc72),Annotation([Ljava.lang.String;@4e5ed836,[Ljava.lang.String;@eadd4fb,[Ljava.lang.String;@740fb309),Annotation([Ljava.lang.String;@7bd7d6d6,[Ljava.lang.String;@43f02ef2,[Ledu.cmu.lti.nlp.amr.Entity;@239a307b))
AMR:
(c / cause-01, ARG0, s / sprout)
(c / cause-01, ARG1, l / let-01)
(g / grow-02, ARG1, i2 / it)
(g / grow-02, condition, w / wish-01)
(l / let-01, ARG0, 1 / 1)
(l / let-01, ARG1, g / grow-02)
(o / or, op, s / sprout)
(s / sprout, domain, i3 / it)
(s / sprout, mod, o2 / only)
(w / wish-01, ARG0, i / it)
(w / wish-01, ARG1, r / rose)

Decoded in 268,946 microseconds
Sentence: But when it is a bad plant , one must destroy it as soon as possible , the very first instant that one recognizes it .


--- Decoder1 ---

Sentence: But when it is a bad plant , one must destroy it as soon as possible , the very first instant that one recognizes it .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = when
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = bad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)), PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
score = 0
adding concept:PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
concept = PhraseConceptPair(List(bad),bad-42,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
score = 0
word = plant
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(plant),plant,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(plant),plant,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(plant),plant,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = must
Finding date entities
Possible invoked concepts: List()
word = destroy
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(destroy),destroy-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(destroy),destroy-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(destroy),destroy-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = as
Finding date entities
Possible invoked concepts: List()
word = soon
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(soon),soon,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(soon),soon,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(soon),soon,PhraseConceptFeatures(3.0,0.0,false,false))
word = as
Finding date entities
Possible invoked concepts: List()
word = possible
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = first
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false)), PhraseConceptPair(List(first),first-of-all,PhraseConceptFeatures(1.0,-3.332204510175204,false,false)))
concept = PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
score = 0
adding concept:PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
concept = PhraseConceptPair(List(first),first-of-all,PhraseConceptFeatures(1.0,-3.332204510175204,false,false))
score = 0
word = instant
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(instant),instant,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(instant),instant,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(instant),instant,PhraseConceptFeatures(3.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = recognizes
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),2)), None, None, Some((0.01985424083692039,PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)),5)), Some((0.029773585223834276,PhraseConceptPair(List(plant),plant,PhraseConceptFeatures(1.0,0.0,false,false)),6)), None, Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),8)), None, Some((0.029773585223834276,PhraseConceptPair(List(destroy),destroy-01,PhraseConceptFeatures(1.0,0.0,false,false)),10)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),11)), None, Some((0.029773585223834276,PhraseConceptPair(List(soon),soon,PhraseConceptFeatures(3.0,0.0,false,false)),13)), None, Some((0.029773585223834276,PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false)),15)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),18)), Some((0.003084211483316255,PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false)),19)), Some((0.029773585223834276,PhraseConceptPair(List(instant),instant,PhraseConceptFeatures(3.0,0.0,false,false)),20)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),21)), Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),22)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),24)), None)
Adding concept: it
nodeIds = List(0)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.018919119423812497
Adding concept: 1
nodeIds = List(1)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.029576696270120856
Adding concept: that
nodeIds = List(2)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.04619450465933664
Adding concept: instant
nodeIds = List(3)
concepts = List(instant)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(instant),instant,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07596808988317091
Adding concept: first
nodeIds = List(4)
concepts = List(first)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
feats:
bias 1.0
c|p -2.639057329615259
len 1.0

score:
0.07905230136648717
Adding concept: very
nodeIds = List(5)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10882588659032144
Adding concept: possible
nodeIds = List(6)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(possible),possible,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13859947181415572
Adding concept: soon
nodeIds = List(7)
concepts = List(soon)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(soon),soon,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.16837305703799
Adding concept: it
nodeIds = List(8)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.1872921764618025
Adding concept: destroy-01
nodeIds = List(9)
concepts = List(destroy-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(destroy),destroy-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.21706576168563677
Adding concept: 1
nodeIds = List(10)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.22772333853194512
Adding concept: plant
nodeIds = List(11)
concepts = List(plant)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(plant),plant,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.25749692375577937
Adding concept: bad
nodeIds = List(12)
concepts = List(bad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bad),bad,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
feats:
bias 1.0
c|p -0.9808292530117262
len 1.0

score:
0.27735116459269976
Adding concept: it
nodeIds = List(13)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.29627028401651223
Adding concept: contrast-01
nodeIds = List(14)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.31697862522850717
Decoder1 Spans:
Span 1:  bad => bad
Span 2:  But => contrast-01
Span 3:  destroy => destroy-01
Span 4:  first => first
Span 5:  instant => instant
Span 6:  it => it
Span 7:  it => it
Span 8:  it => it
Span 9:  one => 1
Span 10:  one => 1
Span 11:  plant => plant
Span 12:  possible => possible
Span 13:  soon => soon
Span 14:  that => that
Span 15:  very => very
Decoder1 feats:
bias 15.0
c|p -12.81739368609728
len 15.0

Concepts:
id = 2 concept = that
id = 5 concept = very
id = 12 concept = bad
id = 8 concept = it
id = 7 concept = soon
id = 1 concept = 1
id = 4 concept = first
id = 11 concept = plant
id = 14 concept = contrast-01
id = 6 concept = possible
id = 0 concept = it
id = 9 concept = destroy-01
id = 3 concept = instant
id = 10 concept = 1
id = 13 concept = it
Spans:
Span 5-6:  bad => bad
Span 0-1:  But => contrast-01
Span 10-11:  destroy => destroy-01
Span 19-20:  first => first
Span 20-21:  instant => instant
Span 24-25:  it => it
Span 11-12:  it => it
Span 2-3:  it => it
Span 22-23:  one => 1
Span 8-9:  one => 1
Span 6-7:  plant => plant
Span 15-16:  possible => possible
Span 13-14:  soon => soon
Span 21-22:  that => that
Span 18-19:  very => very

rootDependencyPaths = List(List(10, 0), List(10, 6, 1), List(10, 6, 2), List(10, 6, 3), List(10, 6, 4), List(10, 6, 5), List(10, 6), List(10, 7), List(10, 8), List(10, 9), List(10), List(10, 11), List(10, 13, 12), List(10, 13), List(10, 13, 20, 14), List(10, 13, 20, 15), List(10, 13, 20, 16), List(10, 13, 20, 17), List(10, 13, 20, 19, 18), List(10, 13, 20, 19), List(10, 13, 20), List(10, 23, 21), List(10, 23, 22), List(10, 23), List(10, 23, 24), List(10, 25))
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 2
Node = 6
Node = 0
Node = 3
Node = 11
Node = 7
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 12
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -518.3610020806951
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 2
Node = 6
Node = 11
Node = 7
Node = 8
Node = 0
Node = 3
Node = 1
Node = 13
Node = 10
Node = 12
Node = 4
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -547.0060472835394
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 2
Node = 6
Node = 7
Node = 11
Node = 8
Node = 3
Node = 1
Node = 13
Node = 10
Node = 12
Node = 4
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -570.3726095686334
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 2
Node = 6
Node = 7
Node = 3
Node = 11
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 12
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -584.9036251190994
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 6
Node = 2
Node = 7
Node = 11
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 12
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -598.3750780762234
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 6
Node = 2
Node = 7
Node = 11
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 12
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -610.3750780762234
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 6
Node = 2
Node = 7
Node = 11
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 12
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -622.3750780762234
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 6
Node = 2
Node = 7
Node = 11
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 12
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -634.3750780762234
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 6
Node = 2
Node = 7
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -645.6413520914319
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 6
Node = 2
Node = 7
Node = 3
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -654.6903592382523
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 2
Node = 6
Node = 7
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -664.1208919874874
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 6
Node = 2
Node = 7
Node = 0
Node = 3
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -671.864478193239
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 6
Node = 2
Node = 7
Node = 8
Node = 1
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -684.6413520914318
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 0
Node = 9
Node = 6
Node = 2
Node = 7
Node = 3
Node = 8
Node = 10
Node = 1
Node = 13
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -691.8956451355365
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 2
Node = 6
Node = 7
Node = 8
Node = 10
Node = 1
Node = 13
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -701.4695527395718
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 0
Node = 9
Node = 3
Node = 6
Node = 2
Node = 7
Node = 1
Node = 8
Node = 10
Node = 13
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -708.794466734713
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 0
Node = 9
Node = 3
Node = 6
Node = 2
Node = 7
Node = 1
Node = 8
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -714.4458059826285
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 3
Node = 2
Node = 6
Node = 7
Node = 1
Node = 8
Node = 10
Node = 13
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -718.4173814855686
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 6
Node = 2
Node = 7
Node = 0
Node = 3
Node = 1
Node = 8
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -721.3997618589758
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 0
Node = 9
Node = 6
Node = 2
Node = 3
Node = 7
Node = 1
Node = 8
Node = 10
Node = 13
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -728.4267411551558
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 0
Node = 9
Node = 2
Node = 6
Node = 3
Node = 7
Node = 1
Node = 8
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -733.557620299127
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 0
Node = 2
Node = 6
Node = 3
Node = 7
Node = 1
Node = 8
Node = 10
Node = 13
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -736.0496559060116
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 6
Node = 2
Node = 3
Node = 7
Node = 0
Node = 1
Node = 8
Node = 13
Node = 10
Node = 4
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -738.3160449307593
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 2
Node = 3
Node = 7
Node = 1
Node = 8
Node = 10
Node = 13
Node = 4
Node = 6
Node = 0
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -742.0110021023187
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 2
Node = 3
Node = 7
Node = 1
Node = 8
Node = 13
Node = 10
Node = 4
Node = 6
Node = 0
Node = 11
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -743.6623413502344
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 2
Node = 3
Node = 13
Node = 7
Node = 1
Node = 8
Node = 10
Node = 4
Node = 11
Node = 6
Node = 0
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -744.5102649657209
getNodeById = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it)
getNodeById2 = Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 10 -> 1, 3 -> instant, 13 -> it)
Node = 14
Node = 9
Node = 2
Node = 3
Node = 13
Node = 7
Node = 1
Node = 8
Node = 10
Node = 4
Node = 11
Node = 6
Node = 0
Node = 5
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -746.1616042136365
Langrangian relaxation converged after 27 iterations. Delta = 0.0
Node.spans:
possible List()
destroy-01 List()
very List()
one List()
ordinal-entity List()
1 List()
most List()
it List()
soon List()
recognize-01 List()
obligate-01 List()
plant List()
contrast-01 List()
bad List()
instant List()
clearUnalignedNodes():  removing unaligned node: Some(o3) / ordinal-entity
clearUnalignedNodes():  removing unaligned node: Some(m) / most
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
WARNING: Adding a variable name to a span
OracleGraph nodes = List(possible, destroy-01, very, one, 1, it, soon, recognize-01, plant, contrast-01, bad, instant)
OracleGraph triples: (d / destroy-01, ARG0, o2 / one)
(d / destroy-01, ARG1, i2 / it)
(d / destroy-01, time, i / instant)
(d / destroy-01, time, s / soon)
(p / plant, domain, i2 / it)
(p / plant, mod, b / bad)
(p2 / possible, domain, d / destroy-01)
(r / recognize-01, ARG0, o2 / one)
(r / recognize-01, ARG1, i2 / it)
(r / recognize-01, time, i / instant)
(s / soon, compared-to, p2 / possible)
rootDependencyPaths = List(List(10, 0), List(10, 6, 1), List(10, 6, 2), List(10, 6, 3), List(10, 6, 4), List(10, 6, 5), List(10, 6), List(10, 7), List(10, 8), List(10, 9), List(10), List(10, 11), List(10, 13, 12), List(10, 13), List(10, 13, 20, 14), List(10, 13, 20, 15), List(10, 13, 20, 16), List(10, 13, 20, 17), List(10, 13, 20, 19, 18), List(10, 13, 20, 19), List(10, 13, 20), List(10, 23, 21), List(10, 23, 22), List(10, 23), List(10, 23, 24), List(10, 25))
Oracle Span 5-6:  bad => bad
Oracle Span 0-1:  But => contrast-01
Oracle Span 10-11:  destroy => destroy-01
Oracle Span 20-21:  instant => instant
Oracle Span 2-3:  it => it
Oracle Span 8-9:  one => 1
Oracle Span 22-23:  one => one
Oracle Span 6-7:  plant => plant
Oracle Span 15-16:  possible => possible
Oracle Span 23-24:  recognizes => recognize-01
Oracle Span 13-14:  soon => soon
Oracle Span 18-19:  very => very

Extra span: it => it
Incorrect span: one => 1
Extra span: that => that
Extra span: first => first
Extra span: it => it
Missing span: recognizes => recognize-01
Missing span: one => one
Dependencies:
1	But	_	CC	CC	_	11	cc	_	_
2	when	_	WRB	WRB	_	7	advmod	_	_
3	it	_	PRP	PRP	_	7	nsubj	_	_
4	is	_	VBZ	VBZ	_	7	cop	_	_
5	a	_	DT	DT	_	7	det	_	_
6	bad	_	JJ	JJ	_	7	amod	_	_
7	plant	_	NN	NN	_	11	advcl	_	_
8	,	_	,	,	_	11	punct	_	_
9	one	_	PRP	PRP	_	11	nsubj	_	_
10	must	_	MD	MD	_	11	aux	_	_
11	destroy	_	VB	VB	_	0	root	_	_
12	it	_	PRP	PRP	_	11	dobj	_	_
13	as	_	RB	RB	_	14	advmod	_	_
14	soon	_	RB	RB	_	11	advmod	_	_
15	as	_	IN	IN	_	21	mark	_	_
16	possible	_	JJ	JJ	_	21	dep	_	_
17	,	_	,	,	_	21	punct	_	_
18	the	_	DT	DT	_	21	det	_	_
19	very	_	RB	RB	_	20	advmod	_	_
20	first	_	JJ	JJ	_	21	amod	_	_
21	instant	_	NN	NN	_	14	dep	_	_
22	that	_	IN	IN	_	24	mark	_	_
23	one	_	PRP	PRP	_	24	nsubj	_	_
24	recognizes	_	VBZ	VBZ	_	11	ccomp	_	_
25	it	_	PRP	PRP	_	24	dobj	_	_
26	.	_	.	.	_	11	punct	_	_

Oracle:
(d / destroy-01, ARG0, o2 / one)
(d / destroy-01, ARG1, i2 / it)
(d / destroy-01, time, i / instant)
(d / destroy-01, time, s / soon)
(p / plant, domain, i2 / it)
(p / plant, mod, b / bad)
(p2 / possible, domain, d / destroy-01)
(r / recognize-01, ARG0, o2 / one)
(r / recognize-01, ARG1, i2 / it)
(r / recognize-01, time, i / instant)
(s / soon, compared-to, p2 / possible)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),it,it,false), Span(22,23,List(1),one,1,false), Span(21,22,List(2),that,that,false), Span(20,21,List(3),instant,instant,false), Span(19,20,List(4),first,first,false), Span(18,19,List(5),very,very,false), Span(15,16,List(6),possible,possible,false), Span(13,14,List(7),soon,soon,false), Span(11,12,List(8),it,it,false), Span(10,11,List(9),destroy,destroy-01,false), Span(8,9,List(10),one,1,false), Span(6,7,List(11),plant,plant,false), Span(5,6,List(12),bad,bad,false), Span(2,3,List(13),it,it,false), Span(0,1,List(14),But,contrast-01,false)),Map(2 -> that, 5 -> very, 12 -> bad, 8 -> it, 7 -> soon, 1 -> 1, 4 -> first, 11 -> plant, 14 -> contrast-01, 6 -> possible, 0 -> it, 9 -> destroy-01, 3 -> instant, 10 -> 1, 13 -> it),Map(i4 -> it, t -> that, 12 -> 1, b -> bad, p2 -> plant, s -> soon, v -> very, d -> destroy-01, 1 -> 1, i3 -> it, p -> possible, i2 -> instant, i -> it, c -> contrast-01, f -> first))),[Ljava.lang.String;@2a8448fa,Annotation([Ljava.lang.String;@6f204a1a,[Ljava.lang.String;@2de56eb2,[Ljava.lang.String;@5f8e8a9d),Annotation([Ljava.lang.String;@5745ca0e,[Ljava.lang.String;@3ad83a66,[Ledu.cmu.lti.nlp.amr.Dependency;@3cce5371),Annotation([Ljava.lang.String;@17bffc17,[Ljava.lang.String;@6e535154,[Ljava.lang.String;@15a34df2),Annotation([Ljava.lang.String;@5b38c1ec,[Ljava.lang.String;@338fc1d8,[Ledu.cmu.lti.nlp.amr.Entity;@4722ef0c))
AMR:
(c / contrast-01, ARG1, t / that)
(c / contrast-01, ARG2, d / destroy-01)
(d / destroy-01, ARG0, 12 / 1)
(d / destroy-01, ARG1, i3 / it)
(d / destroy-01, ARG2, 1 / 1)
(d / destroy-01, mod, i4 / it)
(d / destroy-01, mod, s / soon)
(d / destroy-01, time, i2 / instant)
(f / first, degree, v / very)
(i / it, mod, 1 / 1)
(i2 / instant, mod, f / first)
(p / possible, mod, s / soon)
(p2 / plant, domain, i4 / it)
(p2 / plant, mod, b / bad)

Decoded in 329,004 microseconds
Sentence: Now there were some terrible seeds on the planet that was the home of the little prince ; and these were the seeds of the baobab .


--- Decoder1 ---

Sentence: Now there were some terrible seeds on the planet that was the home of the little prince ; and these were the seeds of the baobab .
word = Now
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Now),now,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(Now),now,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Now),now,PhraseConceptFeatures(5.0,0.0,false,false))
word = there
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)))
concept = PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
score = 0
adding concept:PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
word = were
Finding date entities
Possible invoked concepts: List()
word = some
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)), PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false)))
concept = PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
score = 0
adding concept:PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
concept = PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false))
score = 0
word = terrible
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(terrible),terrible-41,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(terrible),terrible-41,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(terrible),terrible-41,PhraseConceptFeatures(2.0,0.0,false,false))
word = seeds
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = home
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = ;
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false)))
concept = PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
score = 0
adding concept:PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = these
Finding date entities
Possible invoked concepts: List()
word = were
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = seeds
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = baobab
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(Now),now,PhraseConceptFeatures(5.0,0.0,false,false)),0)), Some((0.018974275428782817,PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)),1)), None, Some((0.019706599931381283,PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(terrible),terrible-41,PhraseConceptFeatures(2.0,0.0,false,false)),4)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),8)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),9)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false)),12)), None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),15)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),16)), Some((0.023341689372509314,PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false)),17)), Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),18)), None, None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false)),25)), None)
Adding concept: baobab
nodeIds = List(0)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: and
nodeIds = List(1)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.04873152704624281
Adding concept: and
nodeIds = List(2)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
feats:
bias 1.0
c|p -0.6359887667199967
len 1.0

score:
0.07207321641875213
Adding concept: prince
nodeIds = List(3)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.10178418087028168
Adding concept: little
nodeIds = List(4)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.12440299260191523
Adding concept: home
nodeIds = List(5)
concepts = List(home)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1541765778257495
Adding concept: that
nodeIds = List(6)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.1707943862149653
Adding concept: planet
nodeIds = List(7)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.20056797143879956
Adding concept: terrible-41
nodeIds = List(8)
concepts = List(terrible-41)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(terrible),terrible-41,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.23034155666263384
Adding concept: some
nodeIds = List(9)
concepts = List(some)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
feats:
bias 1.0
c|p -0.995428052432879
len 1.0

score:
0.25004815659401514
Adding concept: there
nodeIds = List(10)
concepts = List(there)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
feats:
bias 1.0
c|p -1.067840630001356
len 1.0

score:
0.26902243202279796
Adding concept: now
nodeIds = List(11)
concepts = List(now)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Now),now,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.29879601724663224
Decoder1 Spans:
Span 1:  ; => and
Span 2:  and => and
Span 3:  baobab => baobab
Span 4:  home => home
Span 5:  little => little
Span 6:  Now => now
Span 7:  planet => planet
Span 8:  prince => prince
Span 9:  some => some
Span 10:  terrible => terrible-41
Span 11:  that => that
Span 12:  there => there
Decoder1 feats:
bias 12.0
c|p -5.783221513276508
len 12.0

Concepts:
id = 2 concept = and
id = 5 concept = home
id = 8 concept = terrible-41
id = 7 concept = planet
id = 1 concept = and
id = 11 concept = now
id = 4 concept = little
id = 6 concept = that
id = 9 concept = some
id = 0 concept = baobab
id = 10 concept = there
id = 3 concept = prince
Spans:
Span 17-18:  ; => and
Span 18-19:  and => and
Span 25-26:  baobab => baobab
Span 12-13:  home => home
Span 15-16:  little => little
Span 0-1:  Now => now
Span 8-9:  planet => planet
Span 16-17:  prince => prince
Span 3-4:  some => some
Span 4-5:  terrible => terrible-41
Span 9-10:  that => that
Span 1-2:  there => there

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 5, 3), List(2, 5, 4), List(2, 5), List(2, 5, 6), List(2, 5, 6, 8, 7), List(2, 5, 6, 8), List(2, 5, 6, 8, 12, 9), List(2, 5, 6, 8, 12, 10), List(2, 5, 6, 8, 12, 11), List(2, 5, 6, 8, 12), List(2, 5, 6, 8, 12, 13), List(2, 5, 6, 8, 12, 13, 16, 14), List(2, 5, 6, 8, 12, 13, 16, 15), List(2, 5, 6, 8, 12, 13, 16), List(2, 17), List(2, 18), List(2, 22, 19), List(2, 22, 20), List(2, 22, 21), List(2, 22), List(2, 22, 23), List(2, 22, 23, 25, 24), List(2, 22, 23, 25), List(2, 26))
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 7
Node = 6
Node = 11
Node = 9
Node = 0
Node = 10
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -657.465907685323
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 7
Node = 11
Node = 9
Node = 10
Node = 6
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -674.8027465035019
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 7
Node = 9
Node = 10
Node = 6
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -685.4641882995126
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 7
Node = 9
Node = 10
Node = 6
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -693.4641882995126
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 7
Node = 6
Node = 9
Node = 0
Node = 10
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -700.1273494813337
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 7
Node = 9
Node = 10
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -707.2800883340394
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 7
Node = 9
Node = 10
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -711.2800883340393
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 7
Node = 9
Node = 10
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -715.2800883340393
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 7
Node = 9
Node = 10
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -719.2800883340393
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 9
Node = 0
Node = 7
Node = 10
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -722.7842385585197
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 8
Node = 4
Node = 11
Node = 9
Node = 7
Node = 10
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -723.8796620590549
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 4
Node = 11
Node = 10
Node = 8
Node = 9
Node = 0
Node = 7
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -725.397136924079
getNodeById = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince)
getNodeById2 = Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 4 -> little, 11 -> now, 6 -> that, 0 -> baobab, 9 -> some, 3 -> prince, 10 -> there)
Node = 2
Node = 3
Node = 1
Node = 4
Node = 11
Node = 10
Node = 8
Node = 9
Node = 7
Node = 0
Node = 6
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -726.4925604246142
Langrangian relaxation converged after 13 iterations. Delta = 0.0
Node.spans:
terrible List()
planet List()
baobab List()
prince List()
home List()
some List()
seed List()
little List()
be-located-at-91 List()
now List()
clearUnalignedNodes():  removing unaligned node: Some(b2) / be-located-at-91
OracleGraph nodes = List(terrible, planet, baobab, prince, home, some, seed, little, now)
OracleGraph triples: (h / home, location, p / planet)
(h / home, poss, p2 / prince)
(p2 / prince, mod, l / little)
(s / seed, mod, t / terrible)
(s / seed, poss, b / baobab)
(s / seed, quant, s2 / some)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 5, 3), List(2, 5, 4), List(2, 5), List(2, 5, 6), List(2, 5, 6, 8, 7), List(2, 5, 6, 8), List(2, 5, 6, 8, 12, 9), List(2, 5, 6, 8, 12, 10), List(2, 5, 6, 8, 12, 11), List(2, 5, 6, 8, 12), List(2, 5, 6, 8, 12, 13), List(2, 5, 6, 8, 12, 13, 16, 14), List(2, 5, 6, 8, 12, 13, 16, 15), List(2, 5, 6, 8, 12, 13, 16), List(2, 17), List(2, 18), List(2, 22, 19), List(2, 22, 20), List(2, 22, 21), List(2, 22), List(2, 22, 23), List(2, 22, 23, 25, 24), List(2, 22, 23, 25), List(2, 26))
Oracle Span 25-26:  baobab => baobab
Oracle Span 12-13:  home => home
Oracle Span 15-16:  little => little
Oracle Span 0-1:  Now => now
Oracle Span 8-9:  planet => planet
Oracle Span 16-17:  prince => prince
Oracle Span 5-6:  seeds => seed
Oracle Span 3-4:  some => some
Oracle Span 4-5:  terrible => terrible

Extra span: and => and
Extra span: ; => and
Extra span: that => that
Incorrect span: terrible => terrible-41
Extra span: there => there
Missing span: seeds => seed
Missing span: terrible => terrible
Dependencies:
1	Now	_	RB	RB	_	3	advmod	_	_
2	there	_	EX	EX	_	3	expl	_	_
3	were	_	VBD	VBD	_	0	root	_	_
4	some	_	DT	DT	_	6	det	_	_
5	terrible	_	JJ	JJ	_	6	amod	_	_
6	seeds	_	NNS	NNS	_	3	nsubj	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	planet	_	NN	NN	_	7	pobj	_	_
10	that	_	WDT	WDT	_	13	nsubj	_	_
11	was	_	VBD	VBD	_	13	cop	_	_
12	the	_	DT	DT	_	13	det	_	_
13	home	_	NN	NN	_	9	rcmod	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	little	_	JJ	JJ	_	17	amod	_	_
17	prince	_	NN	NN	_	14	pobj	_	_
18	;	_	:	:	_	3	punct	_	_
19	and	_	CC	CC	_	3	cc	_	_
20	these	_	DT	DT	_	23	nsubj	_	_
21	were	_	VBD	VBD	_	23	cop	_	_
22	the	_	DT	DT	_	23	det	_	_
23	seeds	_	NNS	NNS	_	3	conj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	baobab	_	NN	NN	_	24	pobj	_	_
27	.	_	.	.	_	3	punct	_	_

Oracle:
(h / home, location, p / planet)
(h / home, poss, p2 / prince)
(p2 / prince, mod, l / little)
(s / seed, mod, t / terrible)
(s / seed, poss, b / baobab)
(s / seed, quant, s2 / some)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),baobab,baobab,false), Span(18,19,List(1),and,and,false), Span(17,18,List(2),;,and,false), Span(16,17,List(3),prince,prince,false), Span(15,16,List(4),little,little,false), Span(12,13,List(5),home,home,false), Span(9,10,List(6),that,that,false), Span(8,9,List(7),planet,planet,false), Span(4,5,List(8),terrible,terrible-41,false), Span(3,4,List(9),some,some,false), Span(1,2,List(10),there,there,false), Span(0,1,List(11),Now,now,false)),Map(2 -> and, 5 -> home, 8 -> terrible-41, 7 -> planet, 1 -> and, 11 -> now, 4 -> little, 6 -> that, 9 -> some, 0 -> baobab, 10 -> there, 3 -> prince),Map(n -> now, h -> home, t -> that, b -> baobab, p2 -> planet, s -> some, t3 -> there, p -> prince, a -> and, t2 -> terrible-41, a2 -> and, l -> little))),[Ljava.lang.String;@48e1f6c7,Annotation([Ljava.lang.String;@55cb6996,[Ljava.lang.String;@1807e3f6,[Ljava.lang.String;@480d3575),Annotation([Ljava.lang.String;@f1da57d,[Ljava.lang.String;@194fad1,[Ledu.cmu.lti.nlp.amr.Dependency;@26abb146),Annotation([Ljava.lang.String;@72c8e7b,[Ljava.lang.String;@65f8f5ae,[Ljava.lang.String;@431cd9b2),Annotation([Ljava.lang.String;@38467116,[Ljava.lang.String;@5b7a7f33,[Ledu.cmu.lti.nlp.amr.Entity;@790da477))
AMR:
(a / and, time, n / now)
(a2 / and, op, a / and)
(a2 / and, op, p / prince)
(h / home, domain, p2 / planet)
(p / prince, mod, l / little)
(t / that, mod, p2 / planet)
(t2 / terrible-41, ARG0, b / baobab)
(t2 / terrible-41, ARG1, t3 / there)
(t2 / terrible-41, ARG2, p2 / planet)
(t2 / terrible-41, polarity, s / some)
(t3 / there, mod, n / now)

Decoded in 157,363 microseconds
Sentence: The soil of that planet was infested with them .


--- Decoder1 ---

Sentence: The soil of that planet was infested with them .
word = The
Finding date entities
Possible invoked concepts: List()
word = soil
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = infested
Finding date entities
Possible invoked concepts: List()
word = with
Finding date entities
Possible invoked concepts: List()
word = them
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),4)), None, None, None, None, None)
Adding concept: planet
nodeIds = List(0)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: that
nodeIds = List(1)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.04639139361305006
Decoder1 Spans:
Span 1:  planet => planet
Span 2:  that => that
Decoder1 feats:
bias 2.0
c|p -1.300849155163006
len 2.0

Concepts:
id = 1 concept = that
id = 0 concept = planet
Spans:
Span 4-5:  planet => planet
Span 3-4:  that => that

rootDependencyPaths = List(List(6, 1, 0), List(6, 1), List(6, 1, 2), List(6, 1, 2, 4, 3), List(6, 1, 2, 4), List(6, 5), List(6), List(6, 7), List(6, 7, 8), List(6, 9))
getNodeById = Map(1 -> that, 0 -> planet)
getNodeById2 = Map(1 -> that, 0 -> planet)
getNodeById = Map(1 -> that, 0 -> planet)
getNodeById2 = Map(1 -> that, 0 -> planet)
Node = 0
Node = 1
visited = Set(0, 1)
Alg2 returning score = -29.936501333299177
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
planet List()
that List()
they List()
soil List()
infest-01 List()
clearUnalignedNodes():  removing unaligned node: Some(t) / they
OracleGraph nodes = List(planet, that, soil, infest-01)
OracleGraph triples: (i / infest-01, ARG1, s / soil)
(p / planet, mod, t2 / that)
(s / soil, poss, p / planet)
rootDependencyPaths = List(List(6, 1, 0), List(6, 1), List(6, 1, 2), List(6, 1, 2, 4, 3), List(6, 1, 2, 4), List(6, 5), List(6), List(6, 7), List(6, 7, 8), List(6, 9))
Oracle Span 6-7:  infested => infest-01
Oracle Span 4-5:  planet => planet
Oracle Span 1-2:  soil => soil
Oracle Span 3-4:  that => that

Missing span: infested => infest-01
Missing span: soil => soil
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	soil	_	NN	NN	_	7	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	5	det	_	_
5	planet	_	NN	NN	_	3	pobj	_	_
6	was	_	VBD	VBD	_	7	cop	_	_
7	infested	_	JJ	JJ	_	0	root	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	them	_	PRP	PRP	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(i / infest-01, ARG1, s / soil)
(p / planet, mod, t2 / that)
(s / soil, poss, p / planet)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),planet,planet,false), Span(3,4,List(1),that,that,false)),Map(1 -> that, 0 -> planet),Map(t -> that, p -> planet))),[Ljava.lang.String;@5c7933ad,Annotation([Ljava.lang.String;@57bc27f5,[Ljava.lang.String;@5fb759d6,[Ljava.lang.String;@4b8d604b),Annotation([Ljava.lang.String;@5e7cd6cc,[Ljava.lang.String;@68c9d179,[Ledu.cmu.lti.nlp.amr.Dependency;@d554c5f),Annotation([Ljava.lang.String;@2dfaea86,[Ljava.lang.String;@15888343,[Ljava.lang.String;@33ecda92),Annotation([Ljava.lang.String;@14fc5f04,[Ljava.lang.String;@6e2829c7,[Ledu.cmu.lti.nlp.amr.Entity;@3feb2dda))
AMR:
(p / planet, mod, t / that)

Decoded in 11,804 microseconds
Sentence: A baobab is something you will never , never be able to get rid of if you attend to it too late .


--- Decoder1 ---

Sentence: A baobab is something you will never , never be able to get rid of if you attend to it too late .
word = A
Finding date entities
Possible invoked concepts: List()
word = baobab
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = something
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)))
concept = PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
score = 0
adding concept:PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = will
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(will),will,PhraseConceptFeatures(1.0,-4.290459441148391,false,false)))
concept = PhraseConceptPair(List(will),will,PhraseConceptFeatures(1.0,-4.290459441148391,false,false))
score = 0
word = never
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = never
Finding date entities
Possible invoked concepts: List()
word = be
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false)))
concept = PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false))
score = 0
word = able
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = get
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false)), PhraseConceptPair(List(get),get-05,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false)))
concept = PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
score = 0
adding concept:PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
concept = PhraseConceptPair(List(get),get-05,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false))
score = 0
word = rid
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = if
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)))
concept = PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
score = 0
adding concept:PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = attend
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = too
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)))
concept = PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
score = 0
adding concept:PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
word = late
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.029773585223834276,PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false)),1)), None, Some((0.027516884858905237,PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)),3)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),4)), None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false)),10)), None, Some((0.011653123197224401,PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false)),12)), None, None, Some((0.003833681888436611,PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)),15)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),16)), None, None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),19)), Some((0.029024114818713923,PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)),20)), None, None)
Adding concept: too
nodeIds = List(0)
concepts = List(too)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
feats:
bias 1.0
c|p -0.07410797215372185
len 1.0

score:
0.02902411481871392
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.04794323424252642
Adding concept: you
nodeIds = List(2)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.07508859733738184
Adding concept: cause-01
nodeIds = List(3)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
feats:
bias 1.0
c|p -2.5649493574615367
len 1.0

score:
0.07892227922581845
Adding concept: get-01
nodeIds = List(4)
concepts = List(get-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
feats:
bias 1.0
c|p -1.791759469228055
len 1.0

score:
0.09057540242304284
Adding concept: possible
nodeIds = List(5)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(able),possible,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.12034898764687711
Adding concept: you
nodeIds = List(6)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.14749435074173253
Adding concept: something
nodeIds = List(7)
concepts = List(something)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(something),something,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
feats:
bias 1.0
c|p -0.2231435513142097
len 1.0

score:
0.17501123560063778
Adding concept: baobab
nodeIds = List(8)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobab),baobab,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.20478482082447205
Decoder1 Spans:
Span 1:  able => possible
Span 2:  baobab => baobab
Span 3:  get => get-01
Span 4:  if => cause-01
Span 5:  it => it
Span 6:  something => something
Span 7:  too => too
Span 8:  you => you
Span 9:  you => you
Decoder1 feats:
bias 9.0
c|p -6.2470144131210015
len 9.0

Concepts:
id = 2 concept = you
id = 5 concept = possible
id = 8 concept = baobab
id = 7 concept = something
id = 1 concept = it
id = 4 concept = get-01
id = 6 concept = you
id = 0 concept = too
id = 3 concept = cause-01
Spans:
Span 10-11:  able => possible
Span 1-2:  baobab => baobab
Span 12-13:  get => get-01
Span 15-16:  if => cause-01
Span 19-20:  it => it
Span 3-4:  something => something
Span 20-21:  too => too
Span 16-17:  you => you
Span 4-5:  you => you

rootDependencyPaths = List(List(3, 1, 0), List(3, 1), List(3, 2), List(3), List(3, 10, 4), List(3, 10, 5), List(3, 10, 6), List(3, 10, 6, 7), List(3, 10, 6, 8), List(3, 10, 9), List(3, 10), List(3, 10, 13, 11), List(3, 10, 13, 12), List(3, 10, 13), List(3, 10, 13, 14), List(3, 10, 13, 14, 17, 15), List(3, 10, 13, 14, 17, 16), List(3, 10, 13, 14, 17), List(3, 10, 13, 14, 17, 18), List(3, 10, 13, 14, 17, 18, 19), List(3, 10, 13, 21, 20), List(3, 10, 13, 21), List(3, 22))
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 0
Node = 7
Node = 1
Node = 4
Node = 8
Node = 5
Node = 2
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -519.2998480281648
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 4
Node = 7
Node = 1
Node = 5
Node = 0
Node = 2
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -525.9080936063486
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 2
Node = 4
Node = 7
Node = 1
Node = 5
Node = 0
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -531.8002317404313
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 2
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -535.6538053502976
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 2
Node = 4
Node = 8
Node = 0
Node = 5
Node = 1
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -535.7694030978251
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 8
Node = 0
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -538.4186576211865
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 2
Node = 4
Node = 7
Node = 1
Node = 0
Node = 5
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -541.6538053502976
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 2
Node = 4
Node = 8
Node = 0
Node = 5
Node = 1
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -541.7694030978251
getNodeById = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
getNodeById2 = Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01)
Node = 3
Node = 2
Node = 4
Node = 1
Node = 0
Node = 5
Node = 6
Node = 7
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -544.7642235770915
Langrangian relaxation converged after 9 iterations. Delta = 0.0
Node.spans:
late List()
baobab List()
eliminate-01 List()
too List()
you List()
- List()
possible List()
attend-01 List()
ever List()
clearUnalignedNodes():  removing unaligned node: Some(e) / eliminate-01
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(e2) / ever
OracleGraph nodes = List(late, baobab, too, you, possible, attend-01)
OracleGraph triples: (a / attend-01, ARG0, y / you)
(a / attend-01, ARG1, b / baobab)
(a / attend-01, time, l / late)
(l / late, degree, t / too)
(p / possible, condition, a / attend-01)
rootDependencyPaths = List(List(3, 1, 0), List(3, 1), List(3, 2), List(3), List(3, 10, 4), List(3, 10, 5), List(3, 10, 6), List(3, 10, 6, 7), List(3, 10, 6, 8), List(3, 10, 9), List(3, 10), List(3, 10, 13, 11), List(3, 10, 13, 12), List(3, 10, 13), List(3, 10, 13, 14), List(3, 10, 13, 14, 17, 15), List(3, 10, 13, 14, 17, 16), List(3, 10, 13, 14, 17), List(3, 10, 13, 14, 17, 18), List(3, 10, 13, 14, 17, 18, 19), List(3, 10, 13, 21, 20), List(3, 10, 13, 21), List(3, 22))
Oracle Span 10-11:  able => possible
Oracle Span 17-18:  attend => attend-01
Oracle Span 1-2:  baobab => baobab
Oracle Span 21-22:  late => late
Oracle Span 20-21:  too => too
Oracle Span 4-5:  you => you

Extra span: it => it
Extra span: you => you
Extra span: if => cause-01
Extra span: get => get-01
Extra span: something => something
Missing span: attend => attend-01
Missing span: late => late
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	baobab	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	something	_	NN	NN	_	0	root	_	_
5	you	_	PRP	PRP	_	11	nsubj	_	_
6	will	_	MD	MD	_	11	aux	_	_
7	never	_	RB	RB	_	11	advmod	_	_
8	,	_	,	,	_	7	punct	_	_
9	never	_	RB	RB	_	7	advmod	_	_
10	be	_	VB	VB	_	11	cop	_	_
11	able	_	JJ	JJ	_	4	rcmod	_	_
12	to	_	TO	TO	_	14	aux	_	_
13	get	_	VB	VB	_	14	dep	_	_
14	rid	_	JJ	JJ	_	11	xcomp	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	if	_	IN	IN	_	18	mark	_	_
17	you	_	PRP	PRP	_	18	nsubj	_	_
18	attend	_	VBP	VBP	_	15	pcomp	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	it	_	PRP	PRP	_	19	pobj	_	_
21	too	_	RB	RB	_	22	advmod	_	_
22	late	_	RB	RB	_	14	advmod	_	_
23	.	_	.	.	_	4	punct	_	_

Oracle:
(a / attend-01, ARG0, y / you)
(a / attend-01, ARG1, b / baobab)
(a / attend-01, time, l / late)
(l / late, degree, t / too)
(p / possible, condition, a / attend-01)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),too,too,false), Span(19,20,List(1),it,it,false), Span(16,17,List(2),you,you,false), Span(15,16,List(3),if,cause-01,false), Span(12,13,List(4),get,get-01,false), Span(10,11,List(5),able,possible,false), Span(4,5,List(6),you,you,false), Span(3,4,List(7),something,something,false), Span(1,2,List(8),baobab,baobab,false)),Map(2 -> you, 5 -> possible, 8 -> baobab, 7 -> something, 1 -> it, 4 -> get-01, 6 -> you, 0 -> too, 3 -> cause-01),Map(b -> baobab, t -> too, s -> something, p -> possible, g -> get-01, y -> you, i -> it, c -> cause-01, y2 -> you))),[Ljava.lang.String;@6a8658ff,Annotation([Ljava.lang.String;@1c742ed4,[Ljava.lang.String;@333d4a8c,[Ljava.lang.String;@55de24cc),Annotation([Ljava.lang.String;@dc7df28,[Ljava.lang.String;@30f842ca,[Ledu.cmu.lti.nlp.amr.Dependency;@69c81773),Annotation([Ljava.lang.String;@4d14b6c2,[Ljava.lang.String;@7e990ed7,[Ljava.lang.String;@c05fddc),Annotation([Ljava.lang.String;@25df00a0,[Ljava.lang.String;@4d15107f,[Ledu.cmu.lti.nlp.amr.Entity;@7b4c50bc))
AMR:
(c / cause-01, ARG0, t / too)
(c / cause-01, ARG1, i / it)
(c / cause-01, ARG2, y / you)
(g / get-01, ARG0, y2 / you)
(g / get-01, ARG1, c / cause-01)
(g / get-01, ARG2, p / possible)
(s / something, domain, y2 / you)
(s / something, mod, b / baobab)

Decoded in 81,970 microseconds
Sentence: It spreads over the entire planet .


--- Decoder1 ---

Sentence: It spreads over the entire planet .
word = It
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)))
concept = PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
score = 0
adding concept:PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
word = spreads
Finding date entities
Possible invoked concepts: List()
word = over
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(over),over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)), PhraseConceptPair(List(over),over-and-over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)))
concept = PhraseConceptPair(List(over),over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
concept = PhraseConceptPair(List(over),over-and-over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = entire
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(entire),entire,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(entire),entire,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(entire),entire,PhraseConceptFeatures(1.0,0.0,false,false))
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.023495028556213052,PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)),0)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(entire),entire,PhraseConceptFeatures(1.0,0.0,false,false)),4)), Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),5)), None)
Adding concept: planet
nodeIds = List(0)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: entire
nodeIds = List(1)
concepts = List(entire)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(entire),entire,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: it
nodeIds = List(2)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
feats:
bias 1.0
c|p -0.6208265189803193
len 1.0

score:
0.0830421990038816
Decoder1 Spans:
Span 1:  entire => entire
Span 2:  It => it
Span 3:  planet => planet
Decoder1 feats:
bias 3.0
c|p -0.6208265189803193
len 3.0

Concepts:
id = 2 concept = it
id = 1 concept = entire
id = 0 concept = planet
Spans:
Span 4-5:  entire => entire
Span 0-1:  It => it
Span 5-6:  planet => planet

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 5, 3), List(1, 2, 5, 4), List(1, 2, 5), List(1, 6))
getNodeById = Map(2 -> it, 1 -> entire, 0 -> planet)
getNodeById2 = Map(2 -> it, 1 -> entire, 0 -> planet)
getNodeById = Map(2 -> it, 1 -> entire, 0 -> planet)
getNodeById2 = Map(2 -> it, 1 -> entire, 0 -> planet)
Node = 1
Node = 0
Node = 2
visited = Set(0, 1, 2)
Alg2 returning score = -126.08336700220093
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
planet List()
entire List()
it List()
spread-01 List()
OracleGraph nodes = List(planet, entire, it, spread-01)
OracleGraph triples: (p / planet, mod, e / entire)
(s / spread-01, ARG1, i / it)
(s / spread-01, ARG2, p / planet)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 5, 3), List(1, 2, 5, 4), List(1, 2, 5), List(1, 6))
Oracle Span 4-5:  entire => entire
Oracle Span 0-1:  It => it
Oracle Span 5-6:  planet => planet
Oracle Span 1-2:  spreads => spread-01

Missing span: spreads => spread-01
Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	spreads	_	VBZ	VBZ	_	0	root	_	_
3	over	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	entire	_	JJ	JJ	_	6	amod	_	_
6	planet	_	NN	NN	_	3	pobj	_	_
7	.	_	.	.	_	2	punct	_	_

Oracle:
(p / planet, mod, e / entire)
(s / spread-01, ARG1, i / it)
(s / spread-01, ARG2, p / planet)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),planet,planet,false), Span(4,5,List(1),entire,entire,false), Span(0,1,List(2),It,it,false)),Map(2 -> it, 1 -> entire, 0 -> planet),Map(e -> entire, p -> planet, i -> it))),[Ljava.lang.String;@5884a914,Annotation([Ljava.lang.String;@50378a4,[Ljava.lang.String;@60f00693,[Ljava.lang.String;@79207381),Annotation([Ljava.lang.String;@491b9b8,[Ljava.lang.String;@1a4927d6,[Ledu.cmu.lti.nlp.amr.Dependency;@7a6d7e92),Annotation([Ljava.lang.String;@aba625,[Ljava.lang.String;@97e93f1,[Ljava.lang.String;@5a5a729f),Annotation([Ljava.lang.String;@4b520ea8,[Ljava.lang.String;@16150369,[Ledu.cmu.lti.nlp.amr.Entity;@6b09fb41))
AMR:
(p / planet, domain, i / it)
(p / planet, extent, e / entire)

Decoded in 9,740 microseconds
Sentence: It bores clear through it with its roots .


--- Decoder1 ---

Sentence: It bores clear through it with its roots .
word = It
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)))
concept = PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
score = 0
adding concept:PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
word = bores
Finding date entities
Possible invoked concepts: List()
word = clear
Finding date entities
Possible invoked concepts: List()
word = through
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = with
Finding date entities
Possible invoked concepts: List()
word = its
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
word = roots
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(roots),root,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(roots),root,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(roots),root,PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.023495028556213052,PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)),0)), None, None, Some((0.01866307480060534,PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)),3)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),4)), None, Some((0.01866307480060534,PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false)),6)), Some((0.029773585223834276,PhraseConceptPair(List(roots),root,PhraseConceptFeatures(1.0,0.0,false,false)),7)), None)
Adding concept: root
nodeIds = List(0)
concepts = List(root)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(roots),root,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(its),it,PhraseConceptFeatures(2.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.04843666002443961
Adding concept: it
nodeIds = List(2)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.0673557794482521
Adding concept: through
nodeIds = List(3)
concepts = List(through)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.08601885424885744
Adding concept: it
nodeIds = List(4)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
feats:
bias 1.0
c|p -0.6208265189803193
len 1.0

score:
0.10951388280507049
Decoder1 Spans:
Span 1:  it => it
Span 2:  It => it
Span 3:  its => it
Span 4:  roots => root
Span 5:  through => through
Decoder1 feats:
bias 5.0
c|p -3.891345577000359
len 5.0

Concepts:
id = 2 concept = it
id = 1 concept = it
id = 4 concept = it
id = 0 concept = root
id = 3 concept = through
Spans:
Span 4-5:  it => it
Span 0-1:  It => it
Span 6-7:  its => it
Span 7-8:  roots => root
Span 3-4:  through => through

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 3), List(1, 2, 3, 4), List(1, 5), List(1, 5, 7, 6), List(1, 5, 7), List(1, 8))
getNodeById = Map(2 -> it, 1 -> it, 4 -> it, 0 -> root, 3 -> through)
getNodeById2 = Map(2 -> it, 1 -> it, 4 -> it, 0 -> root, 3 -> through)
getNodeById = Map(2 -> it, 1 -> it, 4 -> it, 0 -> root, 3 -> through)
getNodeById2 = Map(2 -> it, 1 -> it, 4 -> it, 0 -> root, 3 -> through)
Node = 3
Node = 1
Node = 2
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -283.4271561894501
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
clear List()
through List()
it List()
it List()
bore-01 List()
root List()
OracleGraph nodes = List(clear, through, it, it, bore-01, root)
OracleGraph triples: (b / bore-01, ARG0, i / it)
(b / bore-01, ARG2, t2 / through)
(b / bore-01, ARG3, r / root)
(r / root, poss, i / it)
(t2 / through, mod, c2 / clear)
(t2 / through, op, i2 / it)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 3), List(1, 2, 3, 4), List(1, 5), List(1, 5, 7, 6), List(1, 5, 7), List(1, 8))
Oracle Span 1-2:  bores => bore-01
Oracle Span 2-3:  clear => clear
Oracle Span 0-1:  It => it
Oracle Span 4-5:  it => it
Oracle Span 7-8:  roots => root
Oracle Span 3-4:  through => through

Extra span: its => it
Missing span: bores => bore-01
Missing span: clear => clear
Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	bores	_	VBZ	VBZ	_	0	root	_	_
3	clear	_	JJ	JJ	_	2	acomp	_	_
4	through	_	IN	IN	_	3	prep	_	_
5	it	_	PRP	PRP	_	4	pobj	_	_
6	with	_	IN	IN	_	2	prep	_	_
7	its	_	PRP$	PRP$	_	8	poss	_	_
8	roots	_	NNS	NNS	_	6	pobj	_	_
9	.	_	.	.	_	2	punct	_	_

Oracle:
(b / bore-01, ARG0, i / it)
(b / bore-01, ARG2, t2 / through)
(b / bore-01, ARG3, r / root)
(r / root, poss, i / it)
(t2 / through, mod, c2 / clear)
(t2 / through, op, i2 / it)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),roots,root,false), Span(6,7,List(1),its,it,false), Span(4,5,List(2),it,it,false), Span(3,4,List(3),through,through,false), Span(0,1,List(4),It,it,false)),Map(2 -> it, 1 -> it, 4 -> it, 0 -> root, 3 -> through),Map(t -> through, i3 -> it, i2 -> it, i -> it, r -> root))),[Ljava.lang.String;@624ea235,Annotation([Ljava.lang.String;@3932c79a,[Ljava.lang.String;@782859e,[Ljava.lang.String;@23f5b5dc),Annotation([Ljava.lang.String;@34bde49d,[Ljava.lang.String;@1b1cfb87,[Ledu.cmu.lti.nlp.amr.Dependency;@821330f),Annotation([Ljava.lang.String;@6f43c82,[Ljava.lang.String;@5db6b9cd,[Ljava.lang.String;@210ab13f),Annotation([Ljava.lang.String;@20b2475a,[Ljava.lang.String;@7857fe2,[Ledu.cmu.lti.nlp.amr.Entity;@6f15d60e))
AMR:
(i / it, mod, t / through)
(i3 / it, poss, i / it)
(r / root, poss, i / it)
(t / through, ARG2, i2 / it)

Decoded in 16,120 microseconds
Sentence: And if the planet is too small , and the baobabs are too many , they split it in pieces ...


--- Decoder1 ---

Sentence: And if the planet is too small , and the baobabs are too many , they split it in pieces ...
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = if
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)))
concept = PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
score = 0
adding concept:PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = too
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)))
concept = PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
score = 0
adding concept:PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
word = small
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = are
Finding date entities
Possible invoked concepts: List()
word = too
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)))
concept = PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
score = 0
adding concept:PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
word = many
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = split
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = pieces
Finding date entities
Possible invoked concepts: List()
word = ...
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), Some((0.003833681888436611,PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)),1)), None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),3)), None, Some((0.029024114818713923,PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)),5)), Some((0.029773585223834276,PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false)),6)), None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),8)), None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),10)), None, Some((0.029024114818713923,PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)),12)), Some((0.029773585223834276,PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false)),13)), None, Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),15)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),17)), None, None, None)
Adding concept: it
nodeIds = List(0)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.018919119423812497
Adding concept: they
nodeIds = List(1)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.041497184123789416
Adding concept: many
nodeIds = List(2)
concepts = List(many)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(many),many,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07127076934762369
Adding concept: too
nodeIds = List(3)
concepts = List(too)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
feats:
bias 1.0
c|p -0.07410797215372185
len 1.0

score:
0.10029488416633761
Adding concept: baobab
nodeIds = List(4)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1300684693901719
Adding concept: and
nodeIds = List(5)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.14902641121258042
Adding concept: small
nodeIds = List(6)
concepts = List(small)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(small),small,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1787999964364147
Adding concept: too
nodeIds = List(7)
concepts = List(too)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
feats:
bias 1.0
c|p -0.07410797215372185
len 1.0

score:
0.20782411125512862
Adding concept: planet
nodeIds = List(8)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2375976964789629
Adding concept: cause-01
nodeIds = List(9)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
feats:
bias 1.0
c|p -2.5649493574615367
len 1.0

score:
0.2414313783673995
Adding concept: and
nodeIds = List(10)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.27029324549636796
Decoder1 Spans:
Span 1:  and => and
Span 2:  And => and
Span 3:  baobabs => baobab
Span 4:  if => cause-01
Span 5:  it => it
Span 6:  many => many
Span 7:  planet => planet
Span 8:  small => small
Span 9:  they => they
Span 10:  too => too
Span 11:  too => too
Decoder1 feats:
bias 11.0
c|p -5.657562903051893
len 11.0

Concepts:
id = 2 concept = many
id = 5 concept = and
id = 8 concept = planet
id = 7 concept = too
id = 1 concept = they
id = 4 concept = baobab
id = 6 concept = small
id = 9 concept = cause-01
id = 0 concept = it
id = 10 concept = and
id = 3 concept = too
Spans:
Span 8-9:  and => and
Span 0-1:  And => and
Span 10-11:  baobabs => baobab
Span 1-2:  if => cause-01
Span 17-18:  it => it
Span 13-14:  many => many
Span 3-4:  planet => planet
Span 6-7:  small => small
Span 15-16:  they => they
Span 12-13:  too => too
Span 5-6:  too => too

rootDependencyPaths = List(List(16, 0), List(16, 6, 1), List(16, 6, 3, 2), List(16, 6, 3), List(16, 6, 4), List(16, 6, 5), List(16, 6), List(16, 6, 7), List(16, 6, 8), List(16, 6, 13, 10, 9), List(16, 6, 13, 10), List(16, 6, 13, 11), List(16, 6, 13, 12), List(16, 6, 13), List(16, 14), List(16, 15), List(16), List(16, 17), List(16, 18), List(16, 18, 19), List(16, 20))
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -307.96200848994465
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -313.96200848994465
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -319.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -323.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -327.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -331.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -335.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -339.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -343.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -347.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -351.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -355.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -359.56649592906587
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 0
Node = 1
Node = 6
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -363.5664959290659
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -366.7969899473485
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -368.7969899473485
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -370.11715347574295
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -371.79698994734844
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -373.11715347574295
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -374.79698994734844
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -376.11715347574295
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -377.79698994734844
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -379.11715347574295
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -380.63581493076543
getNodeById = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too)
getNodeById2 = Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 0 -> it, 9 -> cause-01, 3 -> too, 10 -> and)
Node = 10
Node = 9
Node = 1
Node = 6
Node = 0
Node = 5
Node = 8
Node = 7
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -381.95597845915995
Langrangian relaxation converged after 25 iterations. Delta = 0.0
Node.spans:
piece List()
too List()
baobab List()
too List()
and List()
split-01 List()
and List()
many List()
planet List()
small List()
OracleGraph nodes = List(piece, too, baobab, too, and, split-01, and, many, planet, small)
OracleGraph triples: (a / and, op, s / split-01)
(a2 / and, op, b / baobab)
(a2 / and, op, s2 / small)
(b / baobab, quant, m / many)
(m / many, degree, t3 / too)
(s / split-01, ARG0, b / baobab)
(s / split-01, ARG1, p2 / planet)
(s / split-01, ARG2, p / piece)
(s / split-01, condition, a2 / and)
(s2 / small, degree, t2 / too)
(s2 / small, domain, p2 / planet)
rootDependencyPaths = List(List(16, 0), List(16, 6, 1), List(16, 6, 3, 2), List(16, 6, 3), List(16, 6, 4), List(16, 6, 5), List(16, 6), List(16, 6, 7), List(16, 6, 8), List(16, 6, 13, 10, 9), List(16, 6, 13, 10), List(16, 6, 13, 11), List(16, 6, 13, 12), List(16, 6, 13), List(16, 14), List(16, 15), List(16), List(16, 17), List(16, 18), List(16, 18, 19), List(16, 20))
Oracle Span 0-1:  And => and
Oracle Span 8-9:  and => and
Oracle Span 10-11:  baobabs => baobab
Oracle Span 13-14:  many => many
Oracle Span 19-20:  pieces => piece
Oracle Span 3-4:  planet => planet
Oracle Span 6-7:  small => small
Oracle Span 16-17:  split => split-01
Oracle Span 5-6:  too => too
Oracle Span 12-13:  too => too

Extra span: it => it
Extra span: they => they
Extra span: if => cause-01
Missing span: split => split-01
Missing span: pieces => piece
Dependencies:
1	And	_	CC	CC	_	17	cc	_	_
2	if	_	IN	IN	_	7	mark	_	_
3	the	_	DT	DT	_	4	det	_	_
4	planet	_	NN	NN	_	7	nsubj	_	_
5	is	_	VBZ	VBZ	_	7	cop	_	_
6	too	_	RB	RB	_	7	advmod	_	_
7	small	_	JJ	JJ	_	17	advcl	_	_
8	,	_	,	,	_	7	punct	_	_
9	and	_	CC	CC	_	7	cc	_	_
10	the	_	DT	DT	_	11	det	_	_
11	baobabs	_	NNS	NNS	_	14	nsubj	_	_
12	are	_	VBP	VBP	_	14	cop	_	_
13	too	_	RB	RB	_	14	advmod	_	_
14	many	_	JJ	JJ	_	7	conj	_	_
15	,	_	,	,	_	17	punct	_	_
16	they	_	PRP	PRP	_	17	nsubj	_	_
17	split	_	VBD	VBD	_	0	root	_	_
18	it	_	PRP	PRP	_	17	dobj	_	_
19	in	_	IN	IN	_	17	prep	_	_
20	pieces	_	NNS	NNS	_	19	pobj	_	_
21	...	_	:	:	_	17	punct	_	_

Oracle:
(a / and, op, s / split-01)
(a2 / and, op, b / baobab)
(a2 / and, op, s2 / small)
(b / baobab, quant, m / many)
(m / many, degree, t3 / too)
(s / split-01, ARG0, b / baobab)
(s / split-01, ARG1, p2 / planet)
(s / split-01, ARG2, p / piece)
(s / split-01, condition, a2 / and)
(s2 / small, degree, t2 / too)
(s2 / small, domain, p2 / planet)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),it,it,false), Span(15,16,List(1),they,they,false), Span(13,14,List(2),many,many,false), Span(12,13,List(3),too,too,false), Span(10,11,List(4),baobabs,baobab,false), Span(8,9,List(5),and,and,false), Span(6,7,List(6),small,small,false), Span(5,6,List(7),too,too,false), Span(3,4,List(8),planet,planet,false), Span(1,2,List(9),if,cause-01,false), Span(0,1,List(10),And,and,false)),Map(2 -> many, 5 -> and, 8 -> planet, 7 -> too, 1 -> they, 4 -> baobab, 6 -> small, 9 -> cause-01, 0 -> it, 10 -> and, 3 -> too),Map(b -> baobab, t -> they, s -> small, m -> many, p -> planet, t3 -> too, a -> and, t2 -> too, a2 -> and, i -> it, c -> cause-01))),[Ljava.lang.String;@1be2019a,Annotation([Ljava.lang.String;@29d80d2b,[Ljava.lang.String;@58e1d9d,[Ljava.lang.String;@446a1e84),Annotation([Ljava.lang.String;@4f0f2942,[Ljava.lang.String;@2657d4dd,[Ledu.cmu.lti.nlp.amr.Dependency;@5340477f),Annotation([Ljava.lang.String;@47caedad,[Ljava.lang.String;@7139992f,[Ljava.lang.String;@69504ae9),Annotation([Ljava.lang.String;@387a8303,[Ljava.lang.String;@28cda624,[Ledu.cmu.lti.nlp.amr.Entity;@1500b2f3))
AMR:
(a / and, op, m / many)
(a / and, op, s / small)
(c / cause-01, ARG0, s / small)
(c / cause-01, ARG1, t / they)
(c / cause-01, ARG2, a2 / and)
(i / it, mod, t / they)
(m / many, degree, t2 / too)
(m / many, domain, b / baobab)
(s / small, degree, t3 / too)
(s / small, domain, p / planet)

Decoded in 187,738 microseconds
Sentence: " It is a question of discipline , " the little prince said to me later on .


--- Decoder1 ---

Sentence: " It is a question of discipline , " the little prince said to me later on .
word = "
Finding date entities
Possible invoked concepts: List()
word = It
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)))
concept = PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
score = 0
adding concept:PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = question
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(question),(thing :ARG1-of question-01),PhraseConceptFeatures(3.0,-2.4849066497880004,false,false)), PhraseConceptPair(List(question),question,PhraseConceptFeatures(3.0,-2.4849066497880004,false,false)), PhraseConceptPair(List(question),question-01,PhraseConceptFeatures(3.0,-2.4849066497880004,false,false)))
concept = PhraseConceptPair(List(question),(thing :ARG1-of question-01),PhraseConceptFeatures(3.0,-2.4849066497880004,false,false))
score = 0
adding concept:PhraseConceptPair(List(question),(thing :ARG1-of question-01),PhraseConceptFeatures(3.0,-2.4849066497880004,false,false))
concept = PhraseConceptPair(List(question),question,PhraseConceptFeatures(3.0,-2.4849066497880004,false,false))
score = 0
adding concept:PhraseConceptPair(List(question),question,PhraseConceptFeatures(3.0,-2.4849066497880004,false,false))
concept = PhraseConceptPair(List(question),question-01,PhraseConceptFeatures(3.0,-2.4849066497880004,false,false))
score = 0
adding concept:PhraseConceptPair(List(question),question-01,PhraseConceptFeatures(3.0,-2.4849066497880004,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = discipline
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = later
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false))
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.023495028556213052,PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)),1)), None, None, Some((0.0046431715938434585,PhraseConceptPair(List(question),question-01,PhraseConceptFeatures(3.0,-2.4849066497880004,false,false)),4)), None, None, None, None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),10)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),12)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false)),15)), None, None)
Adding concept: late
nodeIds = List(0)
concepts = List(late)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: say-01
nodeIds = List(1)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: prince
nodeIds = List(2)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.08925813489919811
Adding concept: little
nodeIds = List(3)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.11187694663083166
Adding concept: question-01
nodeIds = List(4)
concepts = List(question-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(question),question-01,PhraseConceptFeatures(3.0,-2.4849066497880004,false,false))
feats:
bias 1.0
c|p -2.4849066497880004
len 1.0

score:
0.1165201182246751
Adding concept: it
nodeIds = List(5)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
feats:
bias 1.0
c|p -0.6208265189803193
len 1.0

score:
0.14001514678088817
Decoder1 Spans:
Span 1:  It => it
Span 2:  later => late
Span 3:  little => little
Span 4:  prince => prince
Span 5:  question => question-01
Span 6:  said => say-01
Decoder1 feats:
bias 6.0
c|p -3.8193923733509347
len 6.0

Concepts:
id = 2 concept = prince
id = 5 concept = it
id = 1 concept = say-01
id = 4 concept = question-01
id = 0 concept = late
id = 3 concept = little
Spans:
Span 1-2:  It => it
Span 15-16:  later => late
Span 10-11:  little => little
Span 11-12:  prince => prince
Span 4-5:  question => question-01
Span 12-13:  said => say-01

rootDependencyPaths = List(List(12, 0), List(12, 4, 1), List(12, 4, 2), List(12, 4, 3), List(12, 4), List(12, 4, 5), List(12, 4, 5, 6), List(12, 7), List(12, 8), List(12, 11, 9), List(12, 11, 10), List(12, 11), List(12), List(12, 13), List(12, 13, 14), List(12, 16, 15), List(12, 16), List(12, 17))
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 73.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 71.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 69.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 67.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 65.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 63.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 61.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 59.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 57.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 55.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 53.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 51.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 0
Node = 4
Node = 2
Node = 5
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 49.27941830865558
getNodeById = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
getNodeById2 = Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little)
Node = 1
Node = 4
Node = 2
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 47.829591281788055
Langrangian relaxation converged after 14 iterations. Delta = 0.0
Node.spans:
little List()
it List()
question List()
discipline List()
prince List()
late List()
say-01 List()
more List()
i List()
clearUnalignedNodes():  removing unaligned node: Some(m) / more
clearUnalignedNodes():  removing unaligned node: Some(i2) / i
OracleGraph nodes = List(little, it, question, discipline, prince, late, say-01)
OracleGraph triples: (p / prince, mod, l / little)
(q / question, domain, i / it)
(q / question, topic, d / discipline)
(s / say-01, ARG0, p / prince)
(s / say-01, ARG1, q / question)
(s / say-01, time, l2 / late)
rootDependencyPaths = List(List(12, 0), List(12, 4, 1), List(12, 4, 2), List(12, 4, 3), List(12, 4), List(12, 4, 5), List(12, 4, 5, 6), List(12, 7), List(12, 8), List(12, 11, 9), List(12, 11, 10), List(12, 11), List(12), List(12, 13), List(12, 13, 14), List(12, 16, 15), List(12, 16), List(12, 17))
Oracle Span 6-7:  discipline => discipline
Oracle Span 1-2:  It => it
Oracle Span 15-16:  later => late
Oracle Span 10-11:  little => little
Oracle Span 11-12:  prince => prince
Oracle Span 4-5:  question => question
Oracle Span 12-13:  said => say-01

Incorrect span: question => question-01
Missing span: question => question
Missing span: discipline => discipline
Dependencies:
1	"	_	''	''	_	13	punct	_	_
2	It	_	PRP	PRP	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	a	_	DT	DT	_	5	det	_	_
5	question	_	NN	NN	_	13	ccomp	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	discipline	_	NN	NN	_	6	pobj	_	_
8	,	_	,	,	_	13	punct	_	_
9	"	_	''	''	_	13	punct	_	_
10	the	_	DT	DT	_	12	det	_	_
11	little	_	JJ	JJ	_	12	amod	_	_
12	prince	_	NN	NN	_	13	nsubj	_	_
13	said	_	VBD	VBD	_	0	root	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	me	_	PRP	PRP	_	14	pobj	_	_
16	later	_	RB	RB	_	17	advmod	_	_
17	on	_	RB	RB	_	13	advmod	_	_
18	.	_	.	.	_	13	punct	_	_

Oracle:
(p / prince, mod, l / little)
(q / question, domain, i / it)
(q / question, topic, d / discipline)
(s / say-01, ARG0, p / prince)
(s / say-01, ARG1, q / question)
(s / say-01, time, l2 / late)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),later,late,false), Span(12,13,List(1),said,say-01,false), Span(11,12,List(2),prince,prince,false), Span(10,11,List(3),little,little,false), Span(4,5,List(4),question,question-01,false), Span(1,2,List(5),It,it,false)),Map(2 -> prince, 5 -> it, 1 -> say-01, 4 -> question-01, 0 -> late, 3 -> little),Map(q -> question-01, s -> say-01, p -> prince, i -> it, l2 -> little, l -> late))),[Ljava.lang.String;@7eecb5b8,Annotation([Ljava.lang.String;@126253fd,[Ljava.lang.String;@57db2b13,[Ljava.lang.String;@475c9c31),Annotation([Ljava.lang.String;@5c86a017,[Ljava.lang.String;@5c7bfdc1,[Ledu.cmu.lti.nlp.amr.Dependency;@5276d6ee),Annotation([Ljava.lang.String;@71687585,[Ljava.lang.String;@1807f5a7,[Ljava.lang.String;@1b919693),Annotation([Ljava.lang.String;@7fb4f2a9,[Ljava.lang.String;@4dc27487,[Ledu.cmu.lti.nlp.amr.Entity;@6a4f1a55))
AMR:
(p / prince, mod, l2 / little)
(q / question-01, ARG0, l / late)
(q / question-01, domain, i / it)
(s / say-01, ARG0, p / prince)
(s / say-01, ARG1, q / question-01)

Decoded in 55,119 microseconds
Sentence: " When you 've finished your own toilet in the morning , then it is time to attend to the toilet of your planet , just so , with the greatest care .


--- Decoder1 ---

Sentence: " When you 've finished your own toilet in the morning , then it is time to attend to the toilet of your planet , just so , with the greatest care .
word = "
Finding date entities
Possible invoked concepts: List()
word = When
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = 've
Finding date entities
Possible invoked concepts: List()
word = finished
Finding date entities
Possible invoked concepts: List()
word = your
Finding date entities
Possible invoked concepts: List()
word = own
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(own),own-01,PhraseConceptFeatures(9.0,-0.3677247801253174,false,false)))
concept = PhraseConceptPair(List(own),own-01,PhraseConceptFeatures(9.0,-0.3677247801253174,false,false))
score = 0
adding concept:PhraseConceptPair(List(own),own-01,PhraseConceptFeatures(9.0,-0.3677247801253174,false,false))
word = toilet
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = morning
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false)))
concept = PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false))
score = 0
adding concept:PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = then
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false)))
concept = PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
score = 0
adding concept:PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = time
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)), PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false)))
concept = PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
score = 0
adding concept:PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
concept = PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = attend
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = toilet
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = your
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = just
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(just),just,PhraseConceptFeatures(23.0,-0.16034265007517937,false,false)))
concept = PhraseConceptPair(List(just),just,PhraseConceptFeatures(23.0,-0.16034265007517937,false,false))
score = 0
adding concept:PhraseConceptPair(List(just),just,PhraseConceptFeatures(23.0,-0.16034265007517937,false,false))
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = with
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = greatest
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(greatest),(great :degree most),PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(greatest),(great :degree most),PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(greatest),(great :degree most),PhraseConceptFeatures(1.0,0.0,false,false))
word = care
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(care),care-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(care),care-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(care),care-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),2)), None, None, None, Some((0.026054702734894478,PhraseConceptPair(List(own),own-01,PhraseConceptFeatures(9.0,-0.3677247801253174,false,false)),6)), None, None, None, Some((0.029050904827532417,PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false)),10)), None, Some((0.023573123325860184,PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false)),12)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),13)), None, Some((0.017491641887458505,PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)),15)), None, None, None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),23)), None, Some((0.028152004341002356,PhraseConceptPair(List(just),just,PhraseConceptFeatures(23.0,-0.16034265007517937,false,false)),25)), Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),26)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(greatest),(great :degree most),PhraseConceptFeatures(1.0,0.0,false,false)),30)), Some((0.029773585223834276,PhraseConceptPair(List(care),care-01,PhraseConceptFeatures(2.0,0.0,false,false)),31)), None)
Adding concept: care-01
nodeIds = List(0)
concepts = List(care-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(care),care-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: (great :degree most)
nodeIds = List(1, 2)
concepts = List(great, most)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(greatest),(great :degree most),PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: so
nodeIds = List(3)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.08485240277744267
Adding concept: just
nodeIds = List(4)
concepts = List(just)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(just),just,PhraseConceptFeatures(23.0,-0.16034265007517937,false,false))
feats:
bias 1.0
c|p -0.16034265007517937
len 1.0

score:
0.11300440711844503
Adding concept: planet
nodeIds = List(5)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1427779923422793
Adding concept: time
nodeIds = List(6)
concepts = List(time)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
feats:
bias 1.0
c|p -1.2144441041932315
len 1.0

score:
0.1602696342297378
Adding concept: it
nodeIds = List(7)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.1791887536535503
Adding concept: then
nodeIds = List(8)
concepts = List(then)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
feats:
bias 1.0
c|p -0.6131044728864089
len 1.0

score:
0.2027618769794105
Adding concept: morning
nodeIds = List(9)
concepts = List(morning)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false))
feats:
bias 1.0
c|p -0.07145896398214498
len 1.0

score:
0.23181278180694292
Adding concept: own-01
nodeIds = List(10)
concepts = List(own-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(own),own-01,PhraseConceptFeatures(9.0,-0.3677247801253174,false,false))
feats:
bias 1.0
c|p -0.3677247801253174
len 1.0

score:
0.2578674845418374
Adding concept: you
nodeIds = List(11)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.2850128476366928
Decoder1 Spans:
Span 1:  care => care-01
Span 2:  greatest => (great :degree most)
Span 3:  it => it
Span 4:  just => just
Span 5:  morning => morning
Span 6:  own => own-01
Span 7:  planet => planet
Span 8:  so => so
Span 9:  then => then
Span 10:  time => time
Span 11:  you => you
Decoder1 feats:
bias 11.0
c|p -4.202081995364971
len 11.0

Concepts:
id = 2 concept = most
id = 5 concept = planet
id = 8 concept = then
id = 7 concept = it
id = 1 concept = great
id = 11 concept = you
id = 4 concept = just
id = 6 concept = time
id = 9 concept = morning
id = 0 concept = care-01
id = 10 concept = own-01
id = 3 concept = so
Spans:
Span 31-32:  care => care-01
Span 30-31:  greatest => (great :degree most)
Span 13-14:  it => it
Span 25-26:  just => just
Span 10-11:  morning => morning
Span 6-7:  own => own-01
Span 23-24:  planet => planet
Span 26-27:  so => so
Span 12-13:  then => then
Span 15-16:  time => time
Span 2-3:  you => you

rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 7, 5), List(4, 7, 6), List(4, 7), List(4, 8), List(4, 8, 10, 9), List(4, 8, 10), List(4, 11), List(4, 15, 12), List(4, 15, 13), List(4, 15, 14), List(4, 15), List(4, 15, 17, 16), List(4, 15, 17), List(4, 15, 17, 18), List(4, 15, 17, 18, 20, 19), List(4, 15, 17, 18, 20), List(4, 15, 17, 18, 20, 21), List(4, 15, 17, 18, 20, 21, 23, 22), List(4, 15, 17, 18, 20, 21, 23), List(4, 15, 17, 24), List(4, 15, 17, 26, 25), List(4, 15, 17, 26), List(4, 15, 17, 27), List(4, 15, 17, 28), List(4, 15, 17, 28, 31, 29), List(4, 15, 17, 28, 31, 30), List(4, 15, 17, 28, 31), List(4, 32))
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 8
Node = 2
Node = 11
Node = 3
Node = 9
Node = 6
Node = 4
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -681.7148379068999
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 5
Node = 11
Node = 8
Node = 9
Node = 10
Node = 4
Node = 2
Node = 6
Node = 3
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -689.0351184534051
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 11
Node = 4
Node = 6
Node = 2
Node = 9
Node = 3
Node = 8
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -695.9115080584963
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 2
Node = 9
Node = 11
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -705.6020369167506
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 5
Node = 11
Node = 10
Node = 4
Node = 2
Node = 9
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -708.6630825771753
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 5
Node = 11
Node = 4
Node = 2
Node = 10
Node = 3
Node = 9
Node = 8
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -709.6697436112663
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 2
Node = 9
Node = 11
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -714.6020369167506
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 5
Node = 11
Node = 4
Node = 2
Node = 10
Node = 3
Node = 9
Node = 8
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -716.7137871978714
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 5
Node = 11
Node = 4
Node = 2
Node = 10
Node = 3
Node = 9
Node = 8
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -719.6697436112663
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 2
Node = 9
Node = 11
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -723.6020369167506
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 5
Node = 11
Node = 10
Node = 4
Node = 2
Node = 9
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -724.6630825771753
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 5
Node = 11
Node = 4
Node = 2
Node = 10
Node = 3
Node = 9
Node = 8
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -727.6697436112663
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 5
Node = 2
Node = 10
Node = 9
Node = 11
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -731.6527415374468
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 11
Node = 2
Node = 9
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -734.3448648719291
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 2
Node = 9
Node = 11
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -737.307778186162
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 11
Node = 4
Node = 2
Node = 9
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -737.3688238465865
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 11
Node = 4
Node = 2
Node = 9
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -738.3247802599814
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 2
Node = 9
Node = 11
Node = 4
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -739.6288460970981
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 2
Node = 9
Node = 11
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -741.307778186162
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 11
Node = 2
Node = 9
Node = 4
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -741.6659327828652
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 2
Node = 9
Node = 11
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -745.307778186162
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 11
Node = 4
Node = 2
Node = 9
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -745.3688238465865
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 4
Node = 2
Node = 11
Node = 9
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -746.1149536680389
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 11
Node = 10
Node = 5
Node = 2
Node = 9
Node = 4
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -748.0943437368061
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 2
Node = 9
Node = 11
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -750.4478336029429
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 11
Node = 4
Node = 2
Node = 9
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -750.5088792633674
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 5
Node = 4
Node = 2
Node = 11
Node = 9
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -751.2550090848198
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 11
Node = 5
Node = 2
Node = 9
Node = 4
Node = 8
Node = 3
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -753.234399153587
getNodeById = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so)
getNodeById2 = Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 4 -> just, 11 -> you, 6 -> time, 0 -> care-01, 9 -> morning, 3 -> so, 10 -> own-01)
Node = 0
Node = 1
Node = 10
Node = 11
Node = 5
Node = 2
Node = 9
Node = 3
Node = 8
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -754.9133312426509
Langrangian relaxation converged after 29 iterations. Delta = 0.0
Node.spans:
great List()
resemble-01 List()
toilet List()
morning List()
most List()
planet List()
you List()
toilet List()
finish-01 List()
attend-01 List()
you List()
care-01 List()
clearUnalignedNodes():  removing unaligned node: Some(r) / resemble-01
clearUnalignedNodes():  removing unaligned node: Some(y2) / you
OracleGraph nodes = List(great, toilet, morning, most, planet, toilet, finish-01, attend-01, you, care-01)
OracleGraph triples: (a / attend-01, ARG1, t2 / toilet)
(a / attend-01, manner, c / care-01)
(a / attend-01, time, f / finish-01)
(c / care-01, extent, g / great)
(f / finish-01, ARG0, y / you)
(f / finish-01, ARG1, t / toilet)
(f / finish-01, time, m / morning)
(g / great, degree, m2 / most)
(p / planet, poss, y / you)
(t / toilet, poss, y / you)
(t2 / toilet, poss, p / planet)
rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 7, 5), List(4, 7, 6), List(4, 7), List(4, 8), List(4, 8, 10, 9), List(4, 8, 10), List(4, 11), List(4, 15, 12), List(4, 15, 13), List(4, 15, 14), List(4, 15), List(4, 15, 17, 16), List(4, 15, 17), List(4, 15, 17, 18), List(4, 15, 17, 18, 20, 19), List(4, 15, 17, 18, 20), List(4, 15, 17, 18, 20, 21), List(4, 15, 17, 18, 20, 21, 23, 22), List(4, 15, 17, 18, 20, 21, 23), List(4, 15, 17, 24), List(4, 15, 17, 26, 25), List(4, 15, 17, 26), List(4, 15, 17, 27), List(4, 15, 17, 28), List(4, 15, 17, 28, 31, 29), List(4, 15, 17, 28, 31, 30), List(4, 15, 17, 28, 31), List(4, 32))
Oracle Span 17-18:  attend => attend-01
Oracle Span 31-32:  care => care-01
Oracle Span 4-5:  finished => finish-01
Oracle Span 30-31:  greatest => (great :degree most)
Oracle Span 10-11:  morning => morning
Oracle Span 23-24:  planet => planet
Oracle Span 7-8:  toilet => toilet
Oracle Span 20-21:  toilet => toilet
Oracle Span 2-3:  you => you

Extra span: so => so
Extra span: just => just
Extra span: time => time
Extra span: it => it
Extra span: then => then
Extra span: own => own-01
Missing span: attend => attend-01
Missing span: finished => finish-01
Missing span: toilet => toilet
Missing span: toilet => toilet
Dependencies:
1	"	_	''	''	_	5	punct	_	_
2	When	_	WRB	WRB	_	4	advmod	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	've	_	VBP	VBP	_	5	advcl	_	_
5	finished	_	VBD	VBD	_	0	root	_	_
6	your	_	PRP$	PRP$	_	8	poss	_	_
7	own	_	JJ	JJ	_	8	amod	_	_
8	toilet	_	NN	NN	_	5	dobj	_	_
9	in	_	IN	IN	_	5	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	morning	_	NN	NN	_	9	pobj	_	_
12	,	_	,	,	_	5	punct	_	_
13	then	_	RB	RB	_	16	advmod	_	_
14	it	_	PRP	PRP	_	16	nsubj	_	_
15	is	_	VBZ	VBZ	_	16	cop	_	_
16	time	_	NN	NN	_	5	ccomp	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	attend	_	VB	VB	_	16	vmod	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	toilet	_	NN	NN	_	19	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	your	_	PRP$	PRP$	_	24	poss	_	_
24	planet	_	NN	NN	_	22	pobj	_	_
25	,	_	,	,	_	18	punct	_	_
26	just	_	RB	RB	_	27	advmod	_	_
27	so	_	RB	RB	_	18	advmod	_	_
28	,	_	,	,	_	18	punct	_	_
29	with	_	IN	IN	_	18	prep	_	_
30	the	_	DT	DT	_	32	det	_	_
31	greatest	_	JJS	JJS	_	32	amod	_	_
32	care	_	NN	NN	_	29	pobj	_	_
33	.	_	.	.	_	5	punct	_	_

Oracle:
(a / attend-01, ARG1, t2 / toilet)
(a / attend-01, manner, c / care-01)
(a / attend-01, time, f / finish-01)
(c / care-01, extent, g / great)
(f / finish-01, ARG0, y / you)
(f / finish-01, ARG1, t / toilet)
(f / finish-01, time, m / morning)
(g / great, degree, m2 / most)
(p / planet, poss, y / you)
(t / toilet, poss, y / you)
(t2 / toilet, poss, p / planet)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),care,care-01,false), Span(30,31,List(2, 1),greatest,(great :degree most),false), Span(26,27,List(3),so,so,false), Span(25,26,List(4),just,just,false), Span(23,24,List(5),planet,planet,false), Span(15,16,List(6),time,time,false), Span(13,14,List(7),it,it,false), Span(12,13,List(8),then,then,false), Span(10,11,List(9),morning,morning,false), Span(6,7,List(10),own,own-01,false), Span(2,3,List(11),you,you,false)),Map(2 -> most, 5 -> planet, 8 -> then, 7 -> it, 1 -> great, 11 -> you, 4 -> just, 6 -> time, 9 -> morning, 0 -> care-01, 10 -> own-01, 3 -> so),Map(t -> time, m2 -> morning, j -> just, s -> so, m -> most, y -> you, p -> planet, g -> great, t2 -> then, i -> it, c -> care-01, o -> own-01))),[Ljava.lang.String;@7dfd3c81,Annotation([Ljava.lang.String;@2584b82d,[Ljava.lang.String;@7bbc8656,[Ljava.lang.String;@6933b6c6),Annotation([Ljava.lang.String;@7d3e8655,[Ljava.lang.String;@7dfb0c0f,[Ledu.cmu.lti.nlp.amr.Dependency;@626abbd0),Annotation([Ljava.lang.String;@169bb4dd,[Ljava.lang.String;@1f9e9475,[Ljava.lang.String;@3aa078fd),Annotation([Ljava.lang.String;@d23e042,[Ljava.lang.String;@46d59067,[Ledu.cmu.lti.nlp.amr.Entity;@2d0399f4))
AMR:
(c / care-01, ARG1, p / planet)
(c / care-01, ARG2, y / you)
(c / care-01, degree, g / great)
(g / great, degree, m / most)
(o / own-01, ARG0, t2 / then)
(o / own-01, ARG1, s / so)
(o / own-01, ARG2, m2 / morning)
(o / own-01, condition, c / care-01)
(s / so, mod, j / just)
(t / time, domain, i / it)
(t / time, time, t2 / then)

Decoded in 285,573 microseconds
Sentence: You must see to it that you pull up regularly all the baobabs , at the very first moment when they can be distinguished from the rosebushes which they resemble so closely in their earliest youth .


--- Decoder1 ---

Sentence: You must see to it that you pull up regularly all the baobabs , at the very first moment when they can be distinguished from the rosebushes which they resemble so closely in their earliest youth .
word = You
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)))
concept = PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
score = 0
adding concept:PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
word = must
Finding date entities
Possible invoked concepts: List()
word = see
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = pull
Finding date entities
Possible invoked concepts: List()
word = up
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false)))
concept = PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
score = 0
adding concept:PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
word = regularly
Finding date entities
Possible invoked concepts: List()
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = first
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false)), PhraseConceptPair(List(first),first-of-all,PhraseConceptFeatures(1.0,-3.332204510175204,false,false)))
concept = PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
score = 0
adding concept:PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
concept = PhraseConceptPair(List(first),first-of-all,PhraseConceptFeatures(1.0,-3.332204510175204,false,false))
score = 0
word = moment
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(moment),moment,PhraseConceptFeatures(8.0,0.0,false,false)))
concept = PhraseConceptPair(List(moment),moment,PhraseConceptFeatures(8.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(moment),moment,PhraseConceptFeatures(8.0,0.0,false,false))
word = when
Finding date entities
Possible invoked concepts: List()
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = can
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(can),can,PhraseConceptFeatures(1.0,-4.127134385045092,false,false)), PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false)))
concept = PhraseConceptPair(List(can),can,PhraseConceptFeatures(1.0,-4.127134385045092,false,false))
score = 0
concept = PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
score = 0
adding concept:PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
word = be
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false)))
concept = PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false))
score = 0
word = distinguished
Finding date entities
Possible invoked concepts: List()
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = rosebushes
Finding date entities
Possible invoked concepts: List()
word = which
Finding date entities
Possible invoked concepts: List()
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = resemble
Finding date entities
Possible invoked concepts: List()
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = closely
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(closely),close,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(closely),close,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(closely),close,PhraseConceptFeatures(1.0,0.0,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = their
Finding date entities
Possible invoked concepts: List()
word = earliest
Finding date entities
Possible invoked concepts: List()
word = youth
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.02918429879609327,PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)),0)), None, Some((0.02932403466221358,PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),2)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),4)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),5)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),6)), None, Some((0.019093489647122215,PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false)),8)), None, Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),10)), None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),12)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),16)), Some((0.003084211483316255,PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false)),17)), Some((0.029773585223834276,PhraseConceptPair(List(moment),moment,PhraseConceptFeatures(8.0,0.0,false,false)),18)), None, Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),20)), Some((0.022432022849293715,PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false)),21)), None, None, None, None, None, None, Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),28)), None, Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),30)), Some((0.029773585223834276,PhraseConceptPair(List(closely),close,PhraseConceptFeatures(1.0,0.0,false,false)),31)), None, None, None, None, None)
Adding concept: close
nodeIds = List(0)
concepts = List(close)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(closely),close,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: so
nodeIds = List(1)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.0550788175536084
Adding concept: they
nodeIds = List(2)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.07765688225358532
Adding concept: possible
nodeIds = List(3)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
feats:
bias 1.0
c|p -0.7259370033829361
len 1.0

score:
0.10008890510287903
Adding concept: they
nodeIds = List(4)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.12266696980285595
Adding concept: moment
nodeIds = List(5)
concepts = List(moment)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(moment),moment,PhraseConceptFeatures(8.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.15244055502669024
Adding concept: first
nodeIds = List(6)
concepts = List(first)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
feats:
bias 1.0
c|p -2.639057329615259
len 1.0

score:
0.1555247665100065
Adding concept: very
nodeIds = List(7)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.18529835173384077
Adding concept: baobab
nodeIds = List(8)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.21507193695767504
Adding concept: all
nodeIds = List(9)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.2343336019791477
Adding concept: up
nodeIds = List(10)
concepts = List(up)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(up),up,PhraseConceptFeatures(8.0,-1.0560526742493137,false,false))
feats:
bias 1.0
c|p -1.0560526742493137
len 1.0

score:
0.2534270916262699
Adding concept: you
nodeIds = List(11)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.28057245472112535
Adding concept: that
nodeIds = List(12)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.29719026311034114
Adding concept: it
nodeIds = List(13)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.31610938253415366
Adding concept: see-01
nodeIds = List(14)
concepts = List(see-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.3454334171963672
Adding concept: you
nodeIds = List(15)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
feats:
bias 1.0
c|p -0.05826890812397576
len 1.0

score:
0.3746177159924605
Decoder1 Spans:
Span 1:  all => all
Span 2:  baobabs => baobab
Span 3:  can => possible
Span 4:  closely => close
Span 5:  first => first
Span 6:  it => it
Span 7:  moment => moment
Span 8:  see => see-01
Span 9:  so => so
Span 10:  that => that
Span 11:  they => they
Span 12:  they => they
Span 13:  up => up
Span 14:  very => very
Span 15:  you => you
Span 16:  You => you
Decoder1 feats:
bias 16.0
c|p -10.062039912942074
len 16.0

Concepts:
id = 2 concept = they
id = 5 concept = moment
id = 12 concept = that
id = 15 concept = you
id = 8 concept = baobab
id = 7 concept = very
id = 1 concept = so
id = 4 concept = they
id = 11 concept = you
id = 14 concept = see-01
id = 6 concept = first
id = 0 concept = close
id = 9 concept = all
id = 3 concept = possible
id = 10 concept = up
id = 13 concept = it
Spans:
Span 10-11:  all => all
Span 12-13:  baobabs => baobab
Span 21-22:  can => possible
Span 31-32:  closely => close
Span 17-18:  first => first
Span 4-5:  it => it
Span 18-19:  moment => moment
Span 2-3:  see => see-01
Span 30-31:  so => so
Span 5-6:  that => that
Span 28-29:  they => they
Span 20-21:  they => they
Span 8-9:  up => up
Span 16-17:  very => very
Span 6-7:  you => you
Span 0-1:  You => you

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 3, 4), List(2, 7, 5), List(2, 7, 6), List(2, 7), List(2, 7, 9, 8), List(2, 7, 9), List(2, 7, 12, 10), List(2, 7, 12, 11), List(2, 7, 12), List(2, 7, 13), List(2, 7, 14), List(2, 7, 14, 18, 15), List(2, 7, 14, 18, 17, 16), List(2, 7, 14, 18, 17), List(2, 7, 14, 18), List(2, 7, 14, 18, 23, 19), List(2, 7, 14, 18, 23, 20), List(2, 7, 14, 18, 23, 21), List(2, 7, 14, 18, 23, 22), List(2, 7, 14, 18, 23), List(2, 7, 14, 18, 23, 24), List(2, 7, 14, 18, 23, 24, 26, 25), List(2, 7, 14, 18, 23, 24, 26), List(2, 7, 14, 18, 23, 24, 26, 29, 27), List(2, 7, 14, 18, 23, 24, 26, 29, 28), List(2, 7, 14, 18, 23, 24, 26, 29), List(2, 7, 14, 18, 23, 24, 26, 29, 31, 30), List(2, 7, 14, 18, 23, 24, 26, 29, 31), List(2, 7, 14, 18, 23, 24, 26, 29, 32), List(2, 7, 14, 18, 23, 24, 26, 29, 32, 35, 33), List(2, 7, 14, 18, 23, 24, 26, 29, 32, 35, 34), List(2, 7, 14, 18, 23, 24, 26, 29, 32, 35), List(2, 36))
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 7
Node = 9
Node = 0
Node = 1
Node = 2
Node = 10
Node = 12
Node = 4
Node = 11
Node = 13
Node = 15
Node = 6
Node = 8
Node = 5
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -793.4109731126632
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 12
Node = 7
Node = 0
Node = 1
Node = 2
Node = 10
Node = 4
Node = 11
Node = 13
Node = 15
Node = 6
Node = 8
Node = 5
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -851.1889663592549
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 12
Node = 11
Node = 7
Node = 1
Node = 2
Node = 10
Node = 13
Node = 15
Node = 8
Node = 6
Node = 0
Node = 9
Node = 5
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -882.125392283767
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 12
Node = 11
Node = 1
Node = 2
Node = 10
Node = 4
Node = 13
Node = 15
Node = 8
Node = 0
Node = 5
Node = 9
Node = 6
Node = 7
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -899.5058867326657
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 7
Node = 13
Node = 15
Node = 0
Node = 8
Node = 6
Node = 9
Node = 5
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -912.9084593855305
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 5
Node = 14
Node = 4
Node = 6
Node = 12
Node = 10
Node = 11
Node = 1
Node = 2
Node = 13
Node = 15
Node = 7
Node = 8
Node = 0
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -924.2650035252507
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 5
Node = 14
Node = 4
Node = 6
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 7
Node = 0
Node = 8
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -930.7787756164172
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 5
Node = 14
Node = 4
Node = 6
Node = 12
Node = 10
Node = 11
Node = 1
Node = 2
Node = 13
Node = 15
Node = 7
Node = 8
Node = 0
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -936.2650035252507
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -942.4332380352254
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 11
Node = 1
Node = 2
Node = 13
Node = 15
Node = 4
Node = 6
Node = 8
Node = 0
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -947.9194659440589
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 11
Node = 1
Node = 2
Node = 13
Node = 15
Node = 4
Node = 6
Node = 8
Node = 0
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -951.9194659440589
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -954.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -956.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -958.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -960.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -962.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -964.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -966.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -968.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -970.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -972.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -974.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -976.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -978.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -980.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -982.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -984.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -986.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -988.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -990.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -992.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -994.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 13
Node = 15
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -996.0996921065004
getNodeById = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it)
getNodeById2 = Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 10 -> up, 3 -> possible, 13 -> it)
Node = 3
Node = 14
Node = 5
Node = 12
Node = 10
Node = 1
Node = 2
Node = 11
Node = 15
Node = 13
Node = 4
Node = 6
Node = 0
Node = 8
Node = 7
Node = 9
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -998.0450177459705
Langrangian relaxation converged after 34 iterations. Delta = 0.0
Node.spans:
most List()
you List()
ordinal-entity List()
early List()
regular List()
so List()
very List()
distinguish-01 List()
youth List()
pull-01 List()
1 List()
resemble-01 List()
baobab List()
possible List()
obligate-01 List()
rosebush List()
all List()
moment List()
close List()
clearUnalignedNodes():  removing unaligned node: Some(m2) / most
clearUnalignedNodes():  removing unaligned node: Some(o) / ordinal-entity
clearUnalignedNodes():  removing unaligned node: None / 1
clearUnalignedNodes():  removing unaligned node: Some(o2) / obligate-01
OracleGraph nodes = List(you, early, regular, so, very, distinguish-01, youth, pull-01, resemble-01, baobab, possible, rosebush, all, moment, close)
OracleGraph triples: (b / baobab, quant, a / all)
(c / close, degree, s / so)
(d / distinguish-01, ARG1, b / baobab)
(d / distinguish-01, ARG2, r2 / rosebush)
(p / pull-01, ARG0, y / you)
(p / pull-01, ARG1, b / baobab)
(p / pull-01, manner, r / regular)
(p / pull-01, time, m / moment)
(p2 / possible, domain, d / distinguish-01)
(p2 / possible, time, m / moment)
(r3 / resemble-01, ARG1, b / baobab)
(r3 / resemble-01, ARG2, r2 / rosebush)
(r3 / resemble-01, manner, c / close)
(r3 / resemble-01, time, y2 / youth)
(y2 / youth, poss, b / baobab)
(y2 / youth, time, e / early)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3), List(2, 3, 4), List(2, 7, 5), List(2, 7, 6), List(2, 7), List(2, 7, 9, 8), List(2, 7, 9), List(2, 7, 12, 10), List(2, 7, 12, 11), List(2, 7, 12), List(2, 7, 13), List(2, 7, 14), List(2, 7, 14, 18, 15), List(2, 7, 14, 18, 17, 16), List(2, 7, 14, 18, 17), List(2, 7, 14, 18), List(2, 7, 14, 18, 23, 19), List(2, 7, 14, 18, 23, 20), List(2, 7, 14, 18, 23, 21), List(2, 7, 14, 18, 23, 22), List(2, 7, 14, 18, 23), List(2, 7, 14, 18, 23, 24), List(2, 7, 14, 18, 23, 24, 26, 25), List(2, 7, 14, 18, 23, 24, 26), List(2, 7, 14, 18, 23, 24, 26, 29, 27), List(2, 7, 14, 18, 23, 24, 26, 29, 28), List(2, 7, 14, 18, 23, 24, 26, 29), List(2, 7, 14, 18, 23, 24, 26, 29, 31, 30), List(2, 7, 14, 18, 23, 24, 26, 29, 31), List(2, 7, 14, 18, 23, 24, 26, 29, 32), List(2, 7, 14, 18, 23, 24, 26, 29, 32, 35, 33), List(2, 7, 14, 18, 23, 24, 26, 29, 32, 35, 34), List(2, 7, 14, 18, 23, 24, 26, 29, 32, 35), List(2, 36))
Oracle Span 10-11:  all => all
Oracle Span 12-13:  baobabs => baobab
Oracle Span 21-22:  can => possible
Oracle Span 31-32:  closely => close
Oracle Span 23-24:  distinguished => distinguish-01
Oracle Span 34-35:  earliest => early
Oracle Span 18-19:  moment => moment
Oracle Span 7-8:  pull => pull-01
Oracle Span 9-10:  regularly => regular
Oracle Span 29-30:  resemble => resemble-01
Oracle Span 26-27:  rosebushes => rosebush
Oracle Span 30-31:  so => so
Oracle Span 16-17:  very => very
Oracle Span 0-1:  You => you
Oracle Span 35-36:  youth => youth

Extra span: they => they
Extra span: they => they
Extra span: first => first
Extra span: up => up
Extra span: you => you
Extra span: that => that
Extra span: it => it
Extra span: see => see-01
Missing span: pull => pull-01
Missing span: distinguished => distinguish-01
Missing span: rosebushes => rosebush
Missing span: resemble => resemble-01
Missing span: youth => youth
Missing span: earliest => early
Missing span: regularly => regular
Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	must	_	MD	MD	_	3	aux	_	_
3	see	_	VB	VB	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	it	_	PRP	PRP	_	4	pobj	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	you	_	PRP	PRP	_	8	nsubj	_	_
8	pull	_	VBP	VBP	_	3	ccomp	_	_
9	up	_	RB	RB	_	10	advmod	_	_
10	regularly	_	RB	RB	_	8	advmod	_	_
11	all	_	PDT	PDT	_	13	predet	_	_
12	the	_	DT	DT	_	13	det	_	_
13	baobabs	_	NNS	NNS	_	8	dobj	_	_
14	,	_	,	,	_	8	punct	_	_
15	at	_	IN	IN	_	8	prep	_	_
16	the	_	DT	DT	_	19	det	_	_
17	very	_	RB	RB	_	18	advmod	_	_
18	first	_	JJ	JJ	_	19	amod	_	_
19	moment	_	NN	NN	_	15	pobj	_	_
20	when	_	WRB	WRB	_	24	advmod	_	_
21	they	_	PRP	PRP	_	24	nsubj	_	_
22	can	_	MD	MD	_	24	aux	_	_
23	be	_	VB	VB	_	24	cop	_	_
24	distinguished	_	JJ	JJ	_	19	rcmod	_	_
25	from	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	rosebushes	_	NNS	NNS	_	25	pobj	_	_
28	which	_	WDT	WDT	_	30	dobj	_	_
29	they	_	PRP	PRP	_	30	nsubj	_	_
30	resemble	_	VBP	VBP	_	27	rcmod	_	_
31	so	_	RB	RB	_	32	advmod	_	_
32	closely	_	RB	RB	_	30	advmod	_	_
33	in	_	IN	IN	_	30	prep	_	_
34	their	_	PRP$	PRP$	_	36	poss	_	_
35	earliest	_	JJS	JJS	_	36	amod	_	_
36	youth	_	NN	NN	_	33	pobj	_	_
37	.	_	.	.	_	3	punct	_	_

Oracle:
(b / baobab, quant, a / all)
(c / close, degree, s / so)
(d / distinguish-01, ARG1, b / baobab)
(d / distinguish-01, ARG2, r2 / rosebush)
(p / pull-01, ARG0, y / you)
(p / pull-01, ARG1, b / baobab)
(p / pull-01, manner, r / regular)
(p / pull-01, time, m / moment)
(p2 / possible, domain, d / distinguish-01)
(p2 / possible, time, m / moment)
(r3 / resemble-01, ARG1, b / baobab)
(r3 / resemble-01, ARG2, r2 / rosebush)
(r3 / resemble-01, manner, c / close)
(r3 / resemble-01, time, y2 / youth)
(y2 / youth, poss, b / baobab)
(y2 / youth, time, e / early)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),closely,close,false), Span(30,31,List(1),so,so,false), Span(28,29,List(2),they,they,false), Span(21,22,List(3),can,possible,false), Span(20,21,List(4),they,they,false), Span(18,19,List(5),moment,moment,false), Span(17,18,List(6),first,first,false), Span(16,17,List(7),very,very,false), Span(12,13,List(8),baobabs,baobab,false), Span(10,11,List(9),all,all,false), Span(8,9,List(10),up,up,false), Span(6,7,List(11),you,you,false), Span(5,6,List(12),that,that,false), Span(4,5,List(13),it,it,false), Span(2,3,List(14),see,see-01,false), Span(0,1,List(15),You,you,false)),Map(2 -> they, 5 -> moment, 12 -> that, 15 -> you, 8 -> baobab, 7 -> very, 1 -> so, 4 -> they, 11 -> you, 14 -> see-01, 6 -> first, 0 -> close, 9 -> all, 3 -> possible, 10 -> up, 13 -> it),Map(s2 -> see-01, t -> they, b -> baobab, s -> so, v -> very, m -> moment, t3 -> that, p -> possible, y -> you, a -> all, t2 -> they, i -> it, c -> close, u -> up, f -> first, y2 -> you))),[Ljava.lang.String;@14dd7b39,Annotation([Ljava.lang.String;@66ea810,[Ljava.lang.String;@6cd24612,[Ljava.lang.String;@5dafbe45),Annotation([Ljava.lang.String;@2254127a,[Ljava.lang.String;@51891008,[Ledu.cmu.lti.nlp.amr.Dependency;@2f953efd),Annotation([Ljava.lang.String;@f68f0dc,[Ljava.lang.String;@d2de489,[Ljava.lang.String;@14bdbc74),Annotation([Ljava.lang.String;@12591ac8,[Ljava.lang.String;@5a7fe64f,[Ledu.cmu.lti.nlp.amr.Entity;@38145825))
AMR:
(b / baobab, mod, a / all)
(b / baobab, poss, y / you)
(c / close, degree, s / so)
(f / first, degree, v / very)
(m / moment, mod, f / first)
(m / moment, mod, t2 / they)
(p / possible, domain, m / moment)
(s2 / see-01, ARG0, i / it)
(s2 / see-01, ARG1, y2 / you)
(s2 / see-01, ARG2, y / you)
(s2 / see-01, condition, s / so)
(s2 / see-01, condition, t / they)
(s2 / see-01, manner, u / up)
(s2 / see-01, source, p / possible)
(t3 / that, op, s2 / see-01)

Decoded in 480,624 microseconds
Sentence: It is very tedious work , " the little prince added , " but very easy . "


--- Decoder1 ---

Sentence: It is very tedious work , " the little prince added , " but very easy . "
word = It
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)))
concept = PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
score = 0
adding concept:PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = tedious
Finding date entities
Possible invoked concepts: List()
word = work
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = added
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false)))
concept = PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = but
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false)))
concept = PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
score = 0
adding concept:PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = easy
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.023495028556213052,PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false)),0)), None, Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),2)), None, Some((0.029773585223834276,PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false)),4)), None, None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),8)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),9)), Some((0.029773585223834276,PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false)),10)), None, None, Some((0.025497139841755487,PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false)),13)), Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),14)), None, None, None)
Adding concept: very
nodeIds = List(0)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: contrast-01
nodeIds = List(1)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(but),contrast-01,PhraseConceptFeatures(19.0,-0.4228568508200336,false,false))
feats:
bias 1.0
c|p -0.4228568508200336
len 1.0

score:
0.05527072506558976
Adding concept: add-01
nodeIds = List(2)
concepts = List(add-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08504431028942404
Adding concept: prince
nodeIds = List(3)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.1147552747409536
Adding concept: little
nodeIds = List(4)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.13737408647258714
Adding concept: work-01
nodeIds = List(5)
concepts = List(work-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.16714767169642142
Adding concept: very
nodeIds = List(6)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1969212569202557
Adding concept: it
nodeIds = List(7)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(It),it,PhraseConceptFeatures(43.0,-0.6208265189803193,false,false))
feats:
bias 1.0
c|p -0.6208265189803193
len 1.0

score:
0.22041628547646874
Decoder1 Spans:
Span 1:  added => add-01
Span 2:  but => contrast-01
Span 3:  It => it
Span 4:  little => little
Span 5:  prince => prince
Span 6:  very => very
Span 7:  very => very
Span 8:  work => work-01
Decoder1 feats:
bias 8.0
c|p -1.7573425743829678
len 8.0

Concepts:
id = 2 concept = add-01
id = 5 concept = work-01
id = 7 concept = it
id = 1 concept = contrast-01
id = 4 concept = little
id = 6 concept = very
id = 0 concept = very
id = 3 concept = prince
Spans:
Span 10-11:  added => add-01
Span 13-14:  but => contrast-01
Span 0-1:  It => it
Span 8-9:  little => little
Span 9-10:  prince => prince
Span 14-15:  very => very
Span 2-3:  very => very
Span 4-5:  work => work-01

rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 5), List(4, 6), List(4, 10, 9, 7), List(4, 10, 9, 8), List(4, 10, 9), List(4, 10), List(4, 10, 11), List(4, 10, 12), List(4, 10, 13), List(4, 10, 14), List(4, 10, 14, 15), List(4, 16), List(4, 17))
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 7
Node = 3
Node = 4
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -153.7669689604402
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 7
Node = 3
Node = 4
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -155.7669689604402
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 7
Node = 3
Node = 4
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -157.7669689604402
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 7
Node = 3
Node = 4
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -159.7669689604402
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 7
Node = 3
Node = 4
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -161.29798451090625
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 7
Node = 3
Node = 4
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -162.7669689604402
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 7
Node = 3
Node = 4
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -164.29798451090625
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 7
Node = 3
Node = 4
Node = 5
Node = 6
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -165.7669689604402
getNodeById = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
getNodeById2 = Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince)
Node = 1
Node = 2
Node = 0
Node = 3
Node = 4
Node = 5
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -167.286268583353
Langrangian relaxation converged after 9 iterations. Delta = 0.0
Node.spans:
little List()
very List()
work-01 List()
easy List()
contrast-01 List()
very List()
tedious List()
prince List()
add-01 List()
OracleGraph nodes = List(little, very, work-01, easy, contrast-01, very, tedious, prince, add-01)
OracleGraph triples: (a / add-01, ARG0, p / prince)
(a / add-01, ARG1, c / contrast-01)
(c / contrast-01, ARG1, t / tedious)
(c / contrast-01, ARG2, e / easy)
(e / easy, degree, v2 / very)
(e / easy, domain, w / work-01)
(p / prince, mod, l / little)
(t / tedious, degree, v / very)
(t / tedious, domain, w / work-01)
rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 5), List(4, 6), List(4, 10, 9, 7), List(4, 10, 9, 8), List(4, 10, 9), List(4, 10), List(4, 10, 11), List(4, 10, 12), List(4, 10, 13), List(4, 10, 14), List(4, 10, 14, 15), List(4, 16), List(4, 17))
Oracle Span 10-11:  added => add-01
Oracle Span 13-14:  but => contrast-01
Oracle Span 15-16:  easy => easy
Oracle Span 8-9:  little => little
Oracle Span 9-10:  prince => prince
Oracle Span 3-4:  tedious => tedious
Oracle Span 2-3:  very => very
Oracle Span 14-15:  very => very
Oracle Span 4-5:  work => work-01

Extra span: It => it
Missing span: easy => easy
Missing span: tedious => tedious
Dependencies:
1	It	_	PRP	PRP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	very	_	RB	RB	_	4	advmod	_	_
4	tedious	_	JJ	JJ	_	5	amod	_	_
5	work	_	NN	NN	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_
8	the	_	DT	DT	_	10	det	_	_
9	little	_	JJ	JJ	_	10	amod	_	_
10	prince	_	NN	NN	_	11	nsubj	_	_
11	added	_	VBD	VBD	_	5	dep	_	_
12	,	_	,	,	_	11	punct	_	_
13	"	_	''	''	_	11	punct	_	_
14	but	_	CC	CC	_	11	cc	_	_
15	very	_	JJ	JJ	_	11	conj	_	_
16	easy	_	RB	RB	_	15	advmod	_	_
17	.	_	.	.	_	5	punct	_	_
18	"	_	''	''	_	5	punct	_	_

Oracle:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, c / contrast-01)
(c / contrast-01, ARG1, t / tedious)
(c / contrast-01, ARG2, e / easy)
(e / easy, degree, v2 / very)
(e / easy, domain, w / work-01)
(p / prince, mod, l / little)
(t / tedious, degree, v / very)
(t / tedious, domain, w / work-01)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),very,very,false), Span(13,14,List(1),but,contrast-01,false), Span(10,11,List(2),added,add-01,false), Span(9,10,List(3),prince,prince,false), Span(8,9,List(4),little,little,false), Span(4,5,List(5),work,work-01,false), Span(2,3,List(6),very,very,false), Span(0,1,List(7),It,it,false)),Map(2 -> add-01, 5 -> work-01, 7 -> it, 1 -> contrast-01, 4 -> little, 6 -> very, 0 -> very, 3 -> prince),Map(v2 -> very, w -> work-01, v -> very, p -> prince, a -> add-01, i -> it, l -> little, c -> contrast-01))),[Ljava.lang.String;@41330d4f,Annotation([Ljava.lang.String;@1b66c0fb,[Ljava.lang.String;@3e0e1046,[Ljava.lang.String;@24c1b2d2),Annotation([Ljava.lang.String;@7dc19a70,[Ljava.lang.String;@508dec2b,[Ledu.cmu.lti.nlp.amr.Dependency;@1e4f4a5c),Annotation([Ljava.lang.String;@37313c65,[Ljava.lang.String;@465232e9,[Ljava.lang.String;@798162bc),Annotation([Ljava.lang.String;@1df8da7a,[Ljava.lang.String;@23941fb4,[Ledu.cmu.lti.nlp.amr.Entity;@7486b455))
AMR:
(a / add-01, ARG0, p / prince)
(a / add-01, ARG1, c / contrast-01)
(c / contrast-01, ARG1, v / very)
(p / prince, mod, l / little)
(v2 / very, op, w / work-01)
(w / work-01, ARG1, p / prince)
(w / work-01, ARG2, i / it)

Decoded in 63,479 microseconds
Sentence: And one day he said to me : " You ought to make a beautiful drawing , so that the children where you live can see exactly how all this is .


--- Decoder1 ---

Sentence: And one day he said to me : " You ought to make a beautiful drawing , so that the children where you live can see exactly how all this is .
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = You
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)))
concept = PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
score = 0
adding concept:PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
word = ought
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = make
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false)), PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false)), PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)), PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false)))
concept = PhraseConceptPair(List(make),(thing :ARG0-of make-02),PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-01,PhraseConceptFeatures(3.0,-3.5553480614894135,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-02,PhraseConceptFeatures(5.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-06,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
concept = PhraseConceptPair(List(make),make-07,PhraseConceptFeatures(1.0,-4.653960350157523,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = beautiful
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false)))
concept = PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false))
word = drawing
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = children
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(children),child,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(children),child,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(children),child,PhraseConceptFeatures(3.0,0.0,false,false))
word = where
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = live
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(live),live-01,PhraseConceptFeatures(8.0,0.0,false,false)))
concept = PhraseConceptPair(List(live),live-01,PhraseConceptFeatures(8.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(live),live-01,PhraseConceptFeatures(8.0,0.0,false,false))
word = can
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(can),can,PhraseConceptFeatures(1.0,-4.127134385045092,false,false)), PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false)))
concept = PhraseConceptPair(List(can),can,PhraseConceptFeatures(1.0,-4.127134385045092,false,false))
score = 0
concept = PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
score = 0
adding concept:PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
word = see
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = exactly
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(exactly),exact,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(exactly),exact,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(exactly),exact,PhraseConceptFeatures(2.0,0.0,false,false))
word = how
Finding date entities
Possible invoked concepts: List()
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),1)), Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),2)), Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),4)), None, None, None, None, Some((0.02918429879609327,PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)),9)), None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false)),14)), None, None, Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),17)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),18)), None, Some((0.029773585223834276,PhraseConceptPair(List(children),child,PhraseConceptFeatures(3.0,0.0,false,false)),20)), None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),22)), Some((0.029773585223834276,PhraseConceptPair(List(live),live-01,PhraseConceptFeatures(8.0,0.0,false,false)),23)), Some((0.022432022849293715,PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false)),24)), Some((0.02932403466221358,PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),25)), Some((0.029773585223834276,PhraseConceptPair(List(exactly),exact,PhraseConceptFeatures(2.0,0.0,false,false)),26)), None, Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),28)), Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),29)), None, None)
Adding concept: this
nodeIds = List(0)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.028452594267153575
Adding concept: all
nodeIds = List(1)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.04771425928862626
Adding concept: exact
nodeIds = List(2)
concepts = List(exact)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(exactly),exact,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07748784451246053
Adding concept: see-01
nodeIds = List(3)
concepts = List(see-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.10681187917467411
Adding concept: possible
nodeIds = List(4)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
feats:
bias 1.0
c|p -0.7259370033829361
len 1.0

score:
0.12924390202396782
Adding concept: live-01
nodeIds = List(5)
concepts = List(live-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(live),live-01,PhraseConceptFeatures(8.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1590174872478021
Adding concept: you
nodeIds = List(6)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.1861628503426575
Adding concept: child
nodeIds = List(7)
concepts = List(child)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(children),child,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.21593643556649178
Adding concept: that
nodeIds = List(8)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.23255424395570756
Adding concept: so
nodeIds = List(9)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.25785947628548167
Adding concept: beautiful
nodeIds = List(10)
concepts = List(beautiful)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(beautiful),beautiful,PhraseConceptFeatures(11.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.28763306150931595
Adding concept: you
nodeIds = List(11)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
feats:
bias 1.0
c|p -0.05826890812397576
len 1.0

score:
0.3168173603054092
Adding concept: say-01
nodeIds = List(12)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.34659094552924347
Adding concept: he
nodeIds = List(13)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.37220974540966395
Adding concept: day
nodeIds = List(14)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.3917527856184069
Adding concept: 1
nodeIds = List(15)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.40241036246471523
Adding concept: and
nodeIds = List(16)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.4312722295936837
Decoder1 Spans:
Span 1:  all => all
Span 2:  And => and
Span 3:  beautiful => beautiful
Span 4:  can => possible
Span 5:  children => child
Span 6:  day => day
Span 7:  exactly => exact
Span 8:  he => he
Span 9:  live => live-01
Span 10:  one => 1
Span 11:  said => say-01
Span 12:  see => see-01
Span 13:  so => so
Span 14:  that => that
Span 15:  this => this
Span 16:  you => you
Span 17:  You => you
Decoder1 feats:
bias 17.0
c|p -7.404041574318098
len 17.0

Concepts:
id = 2 concept = exact
id = 5 concept = live-01
id = 12 concept = say-01
id = 15 concept = 1
id = 8 concept = that
id = 7 concept = child
id = 1 concept = all
id = 4 concept = possible
id = 11 concept = you
id = 14 concept = day
id = 6 concept = you
id = 0 concept = this
id = 9 concept = so
id = 16 concept = and
id = 3 concept = see-01
id = 10 concept = beautiful
id = 13 concept = he
Spans:
Span 28-29:  all => all
Span 0-1:  And => and
Span 14-15:  beautiful => beautiful
Span 24-25:  can => possible
Span 20-21:  children => child
Span 2-3:  day => day
Span 26-27:  exactly => exact
Span 3-4:  he => he
Span 23-24:  live => live-01
Span 1-2:  one => 1
Span 4-5:  said => say-01
Span 25-26:  see => see-01
Span 17-18:  so => so
Span 18-19:  that => that
Span 29-30:  this => this
Span 22-23:  you => you
Span 9-10:  You => you

rootDependencyPaths = List(List(4, 0), List(4, 2, 1), List(4, 2), List(4, 3), List(4), List(4, 5), List(4, 5, 6), List(4, 7), List(4, 8), List(4, 10, 9), List(4, 10), List(4, 10, 12, 11), List(4, 10, 12), List(4, 10, 12, 15, 13), List(4, 10, 12, 15, 14), List(4, 10, 12, 15), List(4, 10, 16), List(4, 10, 25, 17), List(4, 10, 25, 18), List(4, 10, 25, 20, 19), List(4, 10, 25, 20), List(4, 10, 25, 20, 23, 21), List(4, 10, 25, 20, 23, 22), List(4, 10, 25, 20, 23), List(4, 10, 25, 24), List(4, 10, 25), List(4, 10, 25, 30, 27, 26), List(4, 10, 25, 30, 27), List(4, 10, 25, 30, 29, 28), List(4, 10, 25, 30, 29), List(4, 10, 25, 30), List(4, 31))
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 2
Node = 4
Node = 10
Node = 11
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -240.32054365963356
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -249.03374510560732
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -255.03374510560732
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -260.49121790216657
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -266.0337451056073
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 10
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -270.88177446894133
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 9
Node = 7
Node = 0
Node = 8
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -276.02779855466616
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -281.0337451056073
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 3
Node = 10
Node = 1
Node = 9
Node = 7
Node = 0
Node = 8
Node = 5
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -285.66889892309194
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -289.03519447079873
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 10
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -295.88177446894133
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 9
Node = 7
Node = 0
Node = 8
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -299.0292479198576
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -306.03519447079873
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 3
Node = 10
Node = 1
Node = 9
Node = 7
Node = 0
Node = 8
Node = 5
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -312.66889892309194
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -316.03519447079873
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 10
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -322.88177446894133
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 9
Node = 7
Node = 0
Node = 8
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -326.0292479198576
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -333.03519447079873
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 3
Node = 10
Node = 1
Node = 9
Node = 7
Node = 0
Node = 8
Node = 5
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -339.66889892309194
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 2
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -343.03519447079873
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 3
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 10
Node = 2
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -349.88177446894133
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 2
Node = 1
Node = 9
Node = 7
Node = 0
Node = 8
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -352.5359387774676
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 10
Node = 13
Node = 15
Node = 3
Node = 2
Node = 1
Node = 8
Node = 7
Node = 0
Node = 9
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -357.54188532840874
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 9
Node = 3
Node = 8
Node = 2
Node = 10
Node = 1
Node = 7
Node = 0
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -362.2027841677582
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 9
Node = 3
Node = 8
Node = 2
Node = 1
Node = 7
Node = 0
Node = 5
Node = 10
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -363.40971316266643
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 10
Node = 4
Node = 13
Node = 15
Node = 9
Node = 3
Node = 8
Node = 2
Node = 1
Node = 7
Node = 0
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -363.66568510892876
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 9
Node = 3
Node = 8
Node = 10
Node = 2
Node = 1
Node = 7
Node = 0
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -366.7908781597614
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 10
Node = 11
Node = 4
Node = 13
Node = 15
Node = 9
Node = 3
Node = 8
Node = 2
Node = 1
Node = 7
Node = 0
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -367.9265095386339
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 10
Node = 13
Node = 15
Node = 9
Node = 3
Node = 8
Node = 2
Node = 1
Node = 7
Node = 0
Node = 5
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -369.0191565958917
getNodeById = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he)
getNodeById2 = Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 10 -> beautiful, 3 -> see-01, 13 -> he)
Node = 12
Node = 14
Node = 16
Node = 11
Node = 4
Node = 13
Node = 15
Node = 9
Node = 3
Node = 8
Node = 2
Node = 1
Node = 7
Node = 0
Node = 5
Node = 10
Node = 6
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -370.11071184373895
Langrangian relaxation converged after 30 iterations. Delta = 0.0
Node.spans:
he List()
one List()
exact List()
beautiful List()
picture List()
all List()
i List()
live-01 List()
this List()
say-01 List()
recommend-01 List()
and List()
child List()
draw-01 List()
possible List()
see-01 List()
day List()
clearUnalignedNodes():  removing unaligned node: Some(p2) / picture
clearUnalignedNodes():  removing unaligned node: Some(i) / i
clearUnalignedNodes():  removing unaligned node: Some(r) / recommend-01
OracleGraph nodes = List(he, one, exact, beautiful, all, live-01, this, say-01, and, child, draw-01, possible, see-01, day)
OracleGraph triples: (a / and, op, s / say-01)
(c / child, location, l / live-01)
(d / day, mod, o / one)
(d3 / draw-01, purpose, p / possible)
(p / possible, domain, s2 / see-01)
(s / say-01, ARG0, h / he)
(s / say-01, time, d / day)
(s2 / see-01, ARG0, c / child)
(s2 / see-01, ARG1, t / this)
(s2 / see-01, manner, e / exact)
(t / this, mod, a2 / all)
rootDependencyPaths = List(List(4, 0), List(4, 2, 1), List(4, 2), List(4, 3), List(4), List(4, 5), List(4, 5, 6), List(4, 7), List(4, 8), List(4, 10, 9), List(4, 10), List(4, 10, 12, 11), List(4, 10, 12), List(4, 10, 12, 15, 13), List(4, 10, 12, 15, 14), List(4, 10, 12, 15), List(4, 10, 16), List(4, 10, 25, 17), List(4, 10, 25, 18), List(4, 10, 25, 20, 19), List(4, 10, 25, 20), List(4, 10, 25, 20, 23, 21), List(4, 10, 25, 20, 23, 22), List(4, 10, 25, 20, 23), List(4, 10, 25, 24), List(4, 10, 25), List(4, 10, 25, 30, 27, 26), List(4, 10, 25, 30, 27), List(4, 10, 25, 30, 29, 28), List(4, 10, 25, 30, 29), List(4, 10, 25, 30), List(4, 31))
Oracle Span 28-29:  all => all
Oracle Span 0-1:  And => and
Oracle Span 14-15:  beautiful => beautiful
Oracle Span 24-25:  can => possible
Oracle Span 20-21:  children => child
Oracle Span 2-3:  day => day
Oracle Span 15-16:  drawing => draw-01
Oracle Span 26-27:  exactly => exact
Oracle Span 3-4:  he => he
Oracle Span 23-24:  live => live-01
Oracle Span 1-2:  one => one
Oracle Span 4-5:  said => say-01
Oracle Span 25-26:  see => see-01
Oracle Span 29-30:  this => this

Extra span: you => you
Extra span: that => that
Extra span: so => so
Extra span: You => you
Incorrect span: one => 1
Missing span: one => one
Missing span: drawing => draw-01
Dependencies:
1	And	_	CC	CC	_	5	cc	_	_
2	one	_	CD	CD	_	3	num	_	_
3	day	_	NN	NN	_	5	tmod	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	said	_	VBD	VBD	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	me	_	PRP	PRP	_	6	pobj	_	_
8	:	_	:	:	_	5	punct	_	_
9	"	_	''	''	_	5	punct	_	_
10	You	_	PRP	PRP	_	11	nsubj	_	_
11	ought	_	MD	MD	_	5	ccomp	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	make	_	VB	VB	_	11	xcomp	_	_
14	a	_	DT	DT	_	16	det	_	_
15	beautiful	_	JJ	JJ	_	16	amod	_	_
16	drawing	_	NN	NN	_	13	dobj	_	_
17	,	_	,	,	_	11	punct	_	_
18	so	_	RB	RB	_	26	advmod	_	_
19	that	_	IN	IN	_	26	mark	_	_
20	the	_	DT	DT	_	21	det	_	_
21	children	_	NNS	NNS	_	26	nsubj	_	_
22	where	_	WRB	WRB	_	24	advmod	_	_
23	you	_	PRP	PRP	_	24	nsubj	_	_
24	live	_	VBP	VBP	_	21	rcmod	_	_
25	can	_	MD	MD	_	26	aux	_	_
26	see	_	VB	VB	_	11	advcl	_	_
27	exactly	_	RB	RB	_	28	advmod	_	_
28	how	_	WRB	WRB	_	31	advmod	_	_
29	all	_	PDT	PDT	_	30	predet	_	_
30	this	_	DT	DT	_	31	nsubj	_	_
31	is	_	VBZ	VBZ	_	26	ccomp	_	_
32	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, s / say-01)
(c / child, location, l / live-01)
(d / day, mod, o / one)
(d3 / draw-01, purpose, p / possible)
(p / possible, domain, s2 / see-01)
(s / say-01, ARG0, h / he)
(s / say-01, time, d / day)
(s2 / see-01, ARG0, c / child)
(s2 / see-01, ARG1, t / this)
(s2 / see-01, manner, e / exact)
(t / this, mod, a2 / all)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),this,this,false), Span(28,29,List(1),all,all,false), Span(26,27,List(2),exactly,exact,false), Span(25,26,List(3),see,see-01,false), Span(24,25,List(4),can,possible,false), Span(23,24,List(5),live,live-01,false), Span(22,23,List(6),you,you,false), Span(20,21,List(7),children,child,false), Span(18,19,List(8),that,that,false), Span(17,18,List(9),so,so,false), Span(14,15,List(10),beautiful,beautiful,false), Span(9,10,List(11),You,you,false), Span(4,5,List(12),said,say-01,false), Span(3,4,List(13),he,he,false), Span(2,3,List(14),day,day,false), Span(1,2,List(15),one,1,false), Span(0,1,List(16),And,and,false)),Map(2 -> exact, 5 -> live-01, 12 -> say-01, 15 -> 1, 8 -> that, 7 -> child, 1 -> all, 4 -> possible, 11 -> you, 14 -> day, 6 -> you, 0 -> this, 9 -> so, 16 -> and, 3 -> see-01, 10 -> beautiful, 13 -> he),Map(e -> exact, h -> he, s2 -> so, t -> this, b -> beautiful, s -> see-01, d -> day, 1 -> 1, p -> possible, y -> you, a -> all, t2 -> that, a2 -> and, c -> child, s3 -> say-01, l -> live-01, y2 -> you))),[Ljava.lang.String;@660acfb,Annotation([Ljava.lang.String;@5d908d47,[Ljava.lang.String;@5efa40fe,[Ljava.lang.String;@1f9f6368),Annotation([Ljava.lang.String;@1c9b0314,[Ljava.lang.String;@45385f75,[Ledu.cmu.lti.nlp.amr.Dependency;@49c90a9c),Annotation([Ljava.lang.String;@2d29b4ee,[Ljava.lang.String;@69ee81fc,[Ljava.lang.String;@6e2aa843),Annotation([Ljava.lang.String;@6f36c2f0,[Ljava.lang.String;@f58853c,[Ledu.cmu.lti.nlp.amr.Entity;@1224144a))
AMR:
(a2 / and, op, s3 / say-01)
(d / day, quant, 1 / 1)
(l / live-01, ARG0, y / you)
(l / live-01, ARG1, c / child)
(l / live-01, ARG2, b / beautiful)
(p / possible, domain, s / see-01)
(p / possible, mod, s2 / so)
(s / see-01, ARG0, c / child)
(s / see-01, ARG1, a / all)
(s / see-01, ARG2, e / exact)
(s2 / so, domain, t2 / that)
(s3 / say-01, ARG0, h / he)
(s3 / say-01, ARG1, p / possible)
(s3 / say-01, ARG2, y2 / you)
(s3 / say-01, time, d / day)
(t / this, quant, a / all)

Decoded in 494,170 microseconds
Sentence: That would be very useful to them if they were to travel some day .


--- Decoder1 ---

Sentence: That would be very useful to them if they were to travel some day .
word = That
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false)))
concept = PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
score = 0
adding concept:PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
word = would
Finding date entities
Possible invoked concepts: List()
word = be
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false)))
concept = PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false))
score = 0
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = useful
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(useful),useful,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(useful),useful,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(useful),useful,PhraseConceptFeatures(1.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = them
Finding date entities
Possible invoked concepts: List()
word = if
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)))
concept = PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
score = 0
adding concept:PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
word = they
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)))
concept = PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
score = 0
adding concept:PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
word = were
Finding date entities
Possible invoked concepts: List()
word = to
Finding date entities
Possible invoked concepts: List()
word = travel
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(travel),travel-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(travel),travel-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(travel),travel-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = some
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)), PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false)))
concept = PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
score = 0
adding concept:PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
concept = PhraseConceptPair(List(some),someone,PhraseConceptFeatures(3.0,-2.7300291078209855,false,false))
score = 0
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.0293031179589661,PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false)),0)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(useful),useful,PhraseConceptFeatures(1.0,0.0,false,false)),4)), None, None, Some((0.003833681888436611,PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false)),7)), Some((0.022578064699976915,PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false)),8)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(travel),travel-01,PhraseConceptFeatures(2.0,0.0,false,false)),11)), Some((0.019706599931381283,PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false)),12)), Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),13)), None)
Adding concept: day
nodeIds = List(0)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.01954304020874291
Adding concept: some
nodeIds = List(1)
concepts = List(some)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(some),some,PhraseConceptFeatures(17.0,-0.995428052432879,false,false))
feats:
bias 1.0
c|p -0.995428052432879
len 1.0

score:
0.03924964014012419
Adding concept: travel-01
nodeIds = List(2)
concepts = List(travel-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(travel),travel-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.06902322536395847
Adding concept: they
nodeIds = List(3)
concepts = List(they)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(they),they,PhraseConceptFeatures(27.0,-0.7114963192281418,false,false))
feats:
bias 1.0
c|p -0.7114963192281418
len 1.0

score:
0.09160129006393539
Adding concept: cause-01
nodeIds = List(4)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(if),cause-01,PhraseConceptFeatures(3.0,-2.5649493574615367,false,false))
feats:
bias 1.0
c|p -2.5649493574615367
len 1.0

score:
0.095434971952372
Adding concept: useful
nodeIds = List(5)
concepts = List(useful)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(useful),useful,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.12520855717620627
Adding concept: very
nodeIds = List(6)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.15498214240004055
Adding concept: that
nodeIds = List(7)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(That),that,PhraseConceptFeatures(21.0,-0.04652001563489282,false,false))
feats:
bias 1.0
c|p -0.04652001563489282
len 1.0

score:
0.18428526035900666
Decoder1 Spans:
Span 1:  day => day
Span 2:  if => cause-01
Span 3:  some => some
Span 4:  That => that
Span 5:  they => they
Span 6:  travel => travel-01
Span 7:  useful => useful
Span 8:  very => very
Decoder1 feats:
bias 8.0
c|p -5.32999465643593
len 8.0

Concepts:
id = 2 concept = travel-01
id = 5 concept = useful
id = 7 concept = that
id = 1 concept = some
id = 4 concept = cause-01
id = 6 concept = very
id = 0 concept = day
id = 3 concept = they
Spans:
Span 13-14:  day => day
Span 7-8:  if => cause-01
Span 12-13:  some => some
Span 0-1:  That => that
Span 8-9:  they => they
Span 11-12:  travel => travel-01
Span 4-5:  useful => useful
Span 3-4:  very => very

rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 5), List(4, 5, 6), List(4, 9, 7), List(4, 9, 8), List(4, 9), List(4, 9, 11, 10), List(4, 9, 11), List(4, 9, 11, 13, 12), List(4, 9, 11, 13), List(4, 14))
getNodeById = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
getNodeById2 = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
getNodeById = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
getNodeById2 = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
Node = 4
Node = 5
Node = 7
Node = 6
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -225.7762424915402
getNodeById = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
getNodeById2 = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
Node = 4
Node = 5
Node = 7
Node = 6
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -227.7762424915402
getNodeById = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
getNodeById2 = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
Node = 4
Node = 5
Node = 7
Node = 6
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -229.7762424915402
getNodeById = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
getNodeById2 = Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they)
Node = 4
Node = 5
Node = 7
Node = 6
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -231.21932118423143
Langrangian relaxation converged after 4 iterations. Delta = 0.0
Node.spans:
some List()
they List()
very List()
travel-01 List()
useful List()
day List()
that List()
OracleGraph nodes = List(some, they, very, travel-01, useful, day, that)
OracleGraph triples: (d / day, mod, s / some)
(t3 / travel-01, ARG0, t2 / they)
(t3 / travel-01, time, d / day)
(u / useful, beneficiary, t2 / they)
(u / useful, condition, t3 / travel-01)
(u / useful, degree, v / very)
(u / useful, domain, t / that)
rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 5), List(4, 5, 6), List(4, 9, 7), List(4, 9, 8), List(4, 9), List(4, 9, 11, 10), List(4, 9, 11), List(4, 9, 11, 13, 12), List(4, 9, 11, 13), List(4, 14))
Oracle Span 13-14:  day => day
Oracle Span 12-13:  some => some
Oracle Span 0-1:  That => that
Oracle Span 8-9:  they => they
Oracle Span 11-12:  travel => travel-01
Oracle Span 4-5:  useful => useful
Oracle Span 3-4:  very => very

Extra span: if => cause-01
Dependencies:
1	That	_	DT	DT	_	5	nsubj	_	_
2	would	_	MD	MD	_	5	aux	_	_
3	be	_	VB	VB	_	5	cop	_	_
4	very	_	RB	RB	_	5	advmod	_	_
5	useful	_	JJ	JJ	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	them	_	PRP	PRP	_	6	pobj	_	_
8	if	_	IN	IN	_	10	mark	_	_
9	they	_	PRP	PRP	_	10	nsubj	_	_
10	were	_	VBD	VBD	_	5	advcl	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	travel	_	VB	VB	_	10	xcomp	_	_
13	some	_	DT	DT	_	14	det	_	_
14	day	_	NN	NN	_	12	tmod	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(d / day, mod, s / some)
(t3 / travel-01, ARG0, t2 / they)
(t3 / travel-01, time, d / day)
(u / useful, beneficiary, t2 / they)
(u / useful, condition, t3 / travel-01)
(u / useful, degree, v / very)
(u / useful, domain, t / that)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),day,day,false), Span(12,13,List(1),some,some,false), Span(11,12,List(2),travel,travel-01,false), Span(8,9,List(3),they,they,false), Span(7,8,List(4),if,cause-01,false), Span(4,5,List(5),useful,useful,false), Span(3,4,List(6),very,very,false), Span(0,1,List(7),That,that,false)),Map(2 -> travel-01, 5 -> useful, 7 -> that, 1 -> some, 4 -> cause-01, 6 -> very, 0 -> day, 3 -> they),Map(t -> travel-01, s -> some, v -> very, d -> day, t3 -> that, t2 -> they, u -> useful, c -> cause-01))),[Ljava.lang.String;@29f7cefd,Annotation([Ljava.lang.String;@700fb871,[Ljava.lang.String;@3b35a229,[Ljava.lang.String;@9816741),Annotation([Ljava.lang.String;@1e16c0aa,[Ljava.lang.String;@13d73f29,[Ledu.cmu.lti.nlp.amr.Dependency;@565f390),Annotation([Ljava.lang.String;@7dc3712,[Ljava.lang.String;@2f67a4d3,[Ljava.lang.String;@5e3f861),Annotation([Ljava.lang.String;@2fb0623e,[Ljava.lang.String;@49b2a47d,[Ledu.cmu.lti.nlp.amr.Entity;@5be1d0a4))
AMR:
(c / cause-01, ARG1, u / useful)
(d / day, mod, s / some)
(t / travel-01, ARG0, t2 / they)
(t / travel-01, ARG1, u / useful)
(t / travel-01, time, d / day)
(u / useful, degree, v / very)
(u / useful, domain, t3 / that)

Decoded in 44,112 microseconds
Sentence: Sometimes , " he added , " there is no harm in putting off a piece of work until another day .


--- Decoder1 ---

Sentence: Sometimes , " he added , " there is no harm in putting off a piece of work until another day .
word = Sometimes
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = he
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)))
concept = PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
score = 0
adding concept:PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
word = added
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false)))
concept = PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = there
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)))
concept = PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
score = 0
adding concept:PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = no
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)), PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false)))
concept = PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
score = 0
adding concept:PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
concept = PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false))
score = 0
word = harm
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(harm),harm-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(harm),harm-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(harm),harm-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = in
Finding date entities
Possible invoked concepts: List()
word = putting
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(putting),put-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(putting),put-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(putting),put-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = off
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = piece
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = work
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false))
word = until
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false)))
concept = PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
score = 0
adding concept:PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
word = another
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, Some((0.025618799880420498,PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false)),4)), None, None, Some((0.018974275428782817,PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)),7)), None, Some((0.012421585574902895,PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)),9)), Some((0.029773585223834276,PhraseConceptPair(List(harm),harm-01,PhraseConceptFeatures(1.0,0.0,false,false)),10)), None, Some((0.029773585223834276,PhraseConceptPair(List(putting),put-01,PhraseConceptFeatures(1.0,0.0,false,false)),12)), None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false)),17)), Some((0.025673026403986283,PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false)),18)), Some((0.029773585223834276,PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false)),19)), Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),20)), None)
Adding concept: day
nodeIds = List(0)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.01954304020874291
Adding concept: another
nodeIds = List(1)
concepts = List(another)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(another),another,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.049316625432577185
Adding concept: until
nodeIds = List(2)
concepts = List(until)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
feats:
bias 1.0
c|p -0.40546510810816444
len 1.0

score:
0.07498965183656346
Adding concept: work-01
nodeIds = List(3)
concepts = List(work-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(work),work-01,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10476323706039774
Adding concept: put-01
nodeIds = List(4)
concepts = List(put-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(putting),put-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13453682228423203
Adding concept: harm-01
nodeIds = List(5)
concepts = List(harm-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(harm),harm-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1643104075080663
Adding concept: -
nodeIds = List(6)
concepts = List(-)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
feats:
bias 1.0
c|p -1.7157735622501329
len 1.0

score:
0.1767319930829692
Adding concept: there
nodeIds = List(7)
concepts = List(there)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
feats:
bias 1.0
c|p -1.067840630001356
len 1.0

score:
0.19570626851175202
Adding concept: add-01
nodeIds = List(8)
concepts = List(add-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2254798537355863
Adding concept: he
nodeIds = List(9)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(he),he,PhraseConceptFeatures(124.0,-0.41082705124954977,false,false))
feats:
bias 1.0
c|p -0.41082705124954977
len 1.0

score:
0.2510986536160068
Decoder1 Spans:
Span 1:  added => add-01
Span 2:  another => another
Span 3:  day => day
Span 4:  harm => harm-01
Span 5:  he => he
Span 6:  no => -
Span 7:  putting => put-01
Span 8:  there => there
Span 9:  until => until
Span 10:  work => work-01
Decoder1 feats:
bias 10.0
c|p -4.611507263287683
len 10.0

Concepts:
id = 2 concept = until
id = 5 concept = harm-01
id = 8 concept = add-01
id = 7 concept = there
id = 1 concept = another
id = 4 concept = put-01
id = 6 concept = -
id = 9 concept = he
id = 0 concept = day
id = 3 concept = work-01
Spans:
Span 4-5:  added => add-01
Span 19-20:  another => another
Span 20-21:  day => day
Span 10-11:  harm => harm-01
Span 3-4:  he => he
Span 9-10:  no => -
Span 12-13:  putting => put-01
Span 7-8:  there => there
Span 18-19:  until => until
Span 17-18:  work => work-01

WARNING: Adding a variable name to a span
rootDependencyPaths = List(List(8, 0), List(8, 1), List(8, 2), List(8, 4, 3), List(8, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 10, 9), List(8, 10), List(8, 10, 11), List(8, 10, 11, 12), List(8, 10, 11, 12, 13), List(8, 10, 11, 12, 15, 14), List(8, 10, 11, 12, 15), List(8, 10, 11, 12, 15, 16), List(8, 10, 11, 12, 15, 16, 17), List(8, 10, 11, 12, 18), List(8, 10, 11, 12, 18, 20, 19), List(8, 10, 11, 12, 18, 20), List(8, 21))
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -129.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -131.11974473370492
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -133.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -135.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -137.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -139.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -141.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -143.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -145.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -147.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -149.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -151.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -153.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -155.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -157.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -159.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -161.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -163.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -165.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -167.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -168.69067627745105
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 5
Node = 9
Node = 6
Node = 7
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -169.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -172.69067627745105
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 5
Node = 9
Node = 6
Node = 7
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -173.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -176.69067627745105
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 5
Node = 9
Node = 6
Node = 7
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -177.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -180.69067627745105
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 5
Node = 9
Node = 6
Node = 7
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -181.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -184.69067627745105
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 5
Node = 9
Node = 6
Node = 7
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -185.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -188.69067627745105
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 5
Node = 9
Node = 6
Node = 7
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -189.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 7
Node = 5
Node = 9
Node = 6
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -192.69067627745105
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 5
Node = 9
Node = 6
Node = 7
Node = 4
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -193.1197447337049
getNodeById = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01)
getNodeById2 = Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 0 -> day, 9 -> he, 3 -> work-01)
Node = 8
Node = 5
Node = 9
Node = 6
Node = 4
Node = 7
Node = 2
Node = 0
Node = 3
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 9, 6, 7)
Alg2 returning score = -195.9645709730431
Langrangian relaxation converged after 35 iterations. Delta = 0.0
Node.spans:
thing List()
put-06 List()
harm-01 List()
another List()
piece List()
- List()
he List()
day List()
add-01 List()
work-01 List()
sometimes List()
WARNING: Adding a variable name to a span
OracleGraph nodes = List(thing, put-06, harm-01, another, piece, -, he, day, add-01, work-01, sometimes)
OracleGraph triples: (a / add-01, ARG0, h / he)
(a / add-01, ARG1, h2 / harm-01)
(d / day, mod, a2 / another)
(h2 / harm-01, ARG0, p / put-06)
(h2 / harm-01, polarity, - / -)
(h2 / harm-01, time, s / sometimes)
(p / put-06, ARG1, t / thing)
(p / put-06, ARG2, d / day)
(t / thing, quant, p3 / piece)
(w / work-01, ARG1, t / thing)
rootDependencyPaths = List(List(8, 0), List(8, 1), List(8, 2), List(8, 4, 3), List(8, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 10, 9), List(8, 10), List(8, 10, 11), List(8, 10, 11, 12), List(8, 10, 11, 12, 13), List(8, 10, 11, 12, 15, 14), List(8, 10, 11, 12, 15), List(8, 10, 11, 12, 15, 16), List(8, 10, 11, 12, 15, 16, 17), List(8, 10, 11, 12, 18), List(8, 10, 11, 12, 18, 20, 19), List(8, 10, 11, 12, 18, 20), List(8, 21))
Oracle Span 4-5:  added => add-01
Oracle Span 19-20:  another => another
Oracle Span 20-21:  day => day
Oracle Span 10-11:  harm => harm-01
Oracle Span 3-4:  he => he
Oracle Span 9-10:  no => -
Oracle Span 15-16:  piece => piece
Oracle Span 12-13:  putting => put-06
Oracle Span 0-1:  Sometimes => sometimes
Oracle Span 17-18:  work => (thing :ARG1-of work-01)

Extra span: until => until
Incorrect span: work => work-01
Incorrect span: putting => put-01
Extra span: there => there
Missing span: Sometimes => sometimes
Missing span: putting => put-06
Missing span: work => (thing :ARG1-of work-01)
Missing span: piece => piece
Dependencies:
1	Sometimes	_	RB	RB	_	9	advmod	_	_
2	,	_	,	,	_	9	punct	_	_
3	"	_	''	''	_	9	punct	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	added	_	VBD	VBD	_	9	ccomp	_	_
6	,	_	,	,	_	9	punct	_	_
7	"	_	''	''	_	9	punct	_	_
8	there	_	EX	EX	_	9	expl	_	_
9	is	_	VBZ	VBZ	_	0	root	_	_
10	no	_	DT	DT	_	11	det	_	_
11	harm	_	NN	NN	_	9	nsubj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	putting	_	VBG	VBG	_	12	pcomp	_	_
14	off	_	RP	RP	_	13	prt	_	_
15	a	_	DT	DT	_	16	det	_	_
16	piece	_	NN	NN	_	13	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	work	_	NN	NN	_	17	pobj	_	_
19	until	_	IN	IN	_	13	prep	_	_
20	another	_	DT	DT	_	21	det	_	_
21	day	_	NN	NN	_	19	pobj	_	_
22	.	_	.	.	_	9	punct	_	_

Oracle:
(a / add-01, ARG0, h / he)
(a / add-01, ARG1, h2 / harm-01)
(d / day, mod, a2 / another)
(h2 / harm-01, ARG0, p / put-06)
(h2 / harm-01, polarity, - / -)
(h2 / harm-01, time, s / sometimes)
(p / put-06, ARG1, t / thing)
(p / put-06, ARG2, d / day)
(t / thing, quant, p3 / piece)
(w / work-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),day,day,false), Span(19,20,List(1),another,another,false), Span(18,19,List(2),until,until,false), Span(17,18,List(3),work,work-01,false), Span(12,13,List(4),putting,put-01,false), Span(10,11,List(5),harm,harm-01,false), Span(9,10,List(6),no,-,false), Span(7,8,List(7),there,there,false), Span(4,5,List(8),added,add-01,false), Span(3,4,List(9),he,he,false)),Map(2 -> until, 5 -> harm-01, 8 -> add-01, 7 -> there, 1 -> another, 4 -> put-01, 6 -> -, 9 -> he, 0 -> day, 3 -> work-01),Map(w -> work-01, h -> harm-01, h2 -> he, t -> there, d -> day, p -> put-01, a -> another, a2 -> add-01, - -> -, u -> until))),[Ljava.lang.String;@415b0b49,Annotation([Ljava.lang.String;@6d5620ce,[Ljava.lang.String;@311bf055,[Ljava.lang.String;@642a7222),Annotation([Ljava.lang.String;@7d322cad,[Ljava.lang.String;@21be3395,[Ledu.cmu.lti.nlp.amr.Dependency;@4f49f6af),Annotation([Ljava.lang.String;@78452606,[Ljava.lang.String;@147e2ae7,[Ljava.lang.String;@448c8166),Annotation([Ljava.lang.String;@4470fbd6,[Ljava.lang.String;@15d49048,[Ledu.cmu.lti.nlp.amr.Entity;@7098b907))
AMR:
(a2 / add-01, ARG0, h2 / he)
(a2 / add-01, ARG1, h / harm-01)
(d / day, mod, a / another)
(h / harm-01, ARG0, t / there)
(h / harm-01, ARG1, p / put-01)
(h / harm-01, polarity, - / -)
(p / put-01, ARG1, u / until)
(u / until, op, d / day)
(w / work-01, ARG1, u / until)

Decoded in 223,013 microseconds
Sentence: But when it is a matter of baobabs , that always means a catastrophe .


--- Decoder1 ---

Sentence: But when it is a matter of baobabs , that always means a catastrophe .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = when
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = matter
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)), PhraseConceptPair(List(matter),matter-01,PhraseConceptFeatures(1.0,-2.3025850929940455,false,false)))
concept = PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
score = 0
adding concept:PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
concept = PhraseConceptPair(List(matter),matter-01,PhraseConceptFeatures(1.0,-2.3025850929940455,false,false))
score = 0
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = always
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false)))
concept = PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
word = means
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = catastrophe
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),2)), None, None, Some((0.013496981652143358,PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)),5)), None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),7)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),9)), Some((0.029773585223834276,PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false)),10)), Some((0.029773585223834276,PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false)),11)), None, None, None)
Adding concept: mean-01
nodeIds = List(0)
concepts = List(mean-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: always
nodeIds = List(1)
concepts = List(always)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: that
nodeIds = List(2)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.07616497883688433
Adding concept: baobab
nodeIds = List(3)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10593856406071861
Adding concept: matter
nodeIds = List(4)
concepts = List(matter)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(matter),matter,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
feats:
bias 1.0
c|p -1.6094379124341003
len 1.0

score:
0.11943554571286197
Adding concept: it
nodeIds = List(5)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.13835466513667447
Adding concept: contrast-01
nodeIds = List(6)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.15906300634866938
Decoder1 Spans:
Span 1:  always => always
Span 2:  baobabs => baobab
Span 3:  But => contrast-01
Span 4:  it => it
Span 5:  matter => matter
Span 6:  means => mean-01
Span 7:  that => that
Decoder1 feats:
bias 7.0
c|p -4.879956970454139
len 7.0

Concepts:
id = 2 concept = that
id = 5 concept = it
id = 1 concept = always
id = 4 concept = matter
id = 6 concept = contrast-01
id = 0 concept = mean-01
id = 3 concept = baobab
Spans:
Span 10-11:  always => always
Span 7-8:  baobabs => baobab
Span 0-1:  But => contrast-01
Span 2-3:  it => it
Span 5-6:  matter => matter
Span 11-12:  means => mean-01
Span 9-10:  that => that

rootDependencyPaths = List(List(11, 0), List(11, 5, 1), List(11, 5, 2), List(11, 5, 3), List(11, 5, 4), List(11, 5), List(11, 5, 6), List(11, 5, 6, 7), List(11, 8), List(11, 9), List(11, 10), List(11), List(11, 13, 12), List(11, 13), List(11, 14))
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -159.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -161.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -163.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -165.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -167.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -169.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -171.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -173.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -175.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -177.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -179.56144241130627
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -181.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -183.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -185.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -187.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -189.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -191.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -193.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -195.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -197.5614424113063
getNodeById = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
getNodeById2 = Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab)
Node = 6
Node = 0
Node = 1
Node = 5
Node = 2
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -199.2798170472147
Langrangian relaxation converged after 21 iterations. Delta = 0.0
Node.spans:
that List()
always List()
catastrophe List()
mean-01 List()
contrast-01 List()
baobab List()
OracleGraph nodes = List(that, always, catastrophe, mean-01, contrast-01, baobab)
OracleGraph triples: (c2 / contrast-01, ARG2, m3 / mean-01)
(m3 / mean-01, ARG0, t / that)
(m3 / mean-01, ARG1, c / catastrophe)
(m3 / mean-01, condition, b / baobab)
(m3 / mean-01, time, a / always)
rootDependencyPaths = List(List(11, 0), List(11, 5, 1), List(11, 5, 2), List(11, 5, 3), List(11, 5, 4), List(11, 5), List(11, 5, 6), List(11, 5, 6, 7), List(11, 8), List(11, 9), List(11, 10), List(11), List(11, 13, 12), List(11, 13), List(11, 14))
Oracle Span 10-11:  always => always
Oracle Span 7-8:  baobabs => baobab
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  catastrophe => catastrophe
Oracle Span 11-12:  means => mean-01
Oracle Span 9-10:  that => that

Extra span: matter => matter
Extra span: it => it
Missing span: catastrophe => catastrophe
Dependencies:
1	But	_	CC	CC	_	12	cc	_	_
2	when	_	WRB	WRB	_	6	advmod	_	_
3	it	_	PRP	PRP	_	6	nsubj	_	_
4	is	_	VBZ	VBZ	_	6	cop	_	_
5	a	_	DT	DT	_	6	det	_	_
6	matter	_	NN	NN	_	12	advcl	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	baobabs	_	NNS	NNS	_	7	pobj	_	_
9	,	_	,	,	_	12	punct	_	_
10	that	_	DT	DT	_	12	nsubj	_	_
11	always	_	RB	RB	_	12	advmod	_	_
12	means	_	VBZ	VBZ	_	0	root	_	_
13	a	_	DT	DT	_	14	det	_	_
14	catastrophe	_	NN	NN	_	12	dobj	_	_
15	.	_	.	.	_	12	punct	_	_

Oracle:
(c2 / contrast-01, ARG2, m3 / mean-01)
(m3 / mean-01, ARG0, t / that)
(m3 / mean-01, ARG1, c / catastrophe)
(m3 / mean-01, condition, b / baobab)
(m3 / mean-01, time, a / always)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),means,mean-01,false), Span(10,11,List(1),always,always,false), Span(9,10,List(2),that,that,false), Span(7,8,List(3),baobabs,baobab,false), Span(5,6,List(4),matter,matter,false), Span(2,3,List(5),it,it,false), Span(0,1,List(6),But,contrast-01,false)),Map(2 -> that, 5 -> it, 1 -> always, 4 -> matter, 6 -> contrast-01, 0 -> mean-01, 3 -> baobab),Map(b -> baobab, t -> that, m2 -> matter, m -> mean-01, a -> always, i -> it, c -> contrast-01))),[Ljava.lang.String;@503f91c3,Annotation([Ljava.lang.String;@13526e59,[Ljava.lang.String;@2235eaab,[Ljava.lang.String;@17503f6b),Annotation([Ljava.lang.String;@3bcd05cb,[Ljava.lang.String;@3b6d844d,[Ledu.cmu.lti.nlp.amr.Dependency;@36804139),Annotation([Ljava.lang.String;@20bd8be5,[Ljava.lang.String;@730d2164,[Ljava.lang.String;@24959ca4),Annotation([Ljava.lang.String;@10289886,[Ljava.lang.String;@5c86dbc5,[Ledu.cmu.lti.nlp.amr.Entity;@461ad730))
AMR:
(b / baobab, mod, m2 / matter)
(c / contrast-01, ARG2, m / mean-01)
(m / mean-01, ARG0, t / that)
(m / mean-01, ARG1, i / it)
(m / mean-01, time, a / always)
(m2 / matter, domain, i / it)

Decoded in 87,384 microseconds
Sentence: I knew a planet that was inhabited by a lazy man .


--- Decoder1 ---

Sentence: I knew a planet that was inhabited by a lazy man .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = knew
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)))
concept = PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
score = 0
adding concept:PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = inhabited
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(inhabited),inhabit-01,PhraseConceptFeatures(6.0,0.0,false,false)))
concept = PhraseConceptPair(List(inhabited),inhabit-01,PhraseConceptFeatures(6.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(inhabited),inhabit-01,PhraseConceptFeatures(6.0,0.0,false,false))
word = by
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)))
concept = PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
score = 0
adding concept:PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = lazy
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(lazy),lazy,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(lazy),lazy,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(lazy),lazy,PhraseConceptFeatures(2.0,0.0,false,false))
word = man
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(man),man,PhraseConceptFeatures(28.0,-0.06899287148695143,false,false)))
concept = PhraseConceptPair(List(man),man,PhraseConceptFeatures(28.0,-0.06899287148695143,false,false))
score = 0
adding concept:PhraseConceptPair(List(man),man,PhraseConceptFeatures(28.0,-0.06899287148695143,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.027516884858905237,PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false)),1)), None, Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),3)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),4)), None, Some((0.029773585223834276,PhraseConceptPair(List(inhabited),inhabit-01,PhraseConceptFeatures(6.0,0.0,false,false)),6)), Some((0.008432529785513981,PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)),7)), None, Some((0.029773585223834276,PhraseConceptPair(List(lazy),lazy,PhraseConceptFeatures(2.0,0.0,false,false)),9)), Some((0.02907584496943244,PhraseConceptPair(List(man),man,PhraseConceptFeatures(28.0,-0.06899287148695143,false,false)),10)), None)
Adding concept: man
nodeIds = List(0)
concepts = List(man)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(man),man,PhraseConceptFeatures(28.0,-0.06899287148695143,false,false))
feats:
bias 1.0
c|p -0.06899287148695143
len 1.0

score:
0.02907584496943244
Adding concept: lazy
nodeIds = List(1)
concepts = List(lazy)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(lazy),lazy,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.058849430193266716
Adding concept: by
nodeIds = List(2)
concepts = List(by)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
feats:
bias 1.0
c|p -2.1102132003465894
len 1.0

score:
0.0672819599787807
Adding concept: inhabit-01
nodeIds = List(3)
concepts = List(inhabit-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(inhabited),inhabit-01,PhraseConceptFeatures(6.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.09705554520261497
Adding concept: that
nodeIds = List(4)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.11367335359183076
Adding concept: planet
nodeIds = List(5)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.14344693881566503
Adding concept: know-01
nodeIds = List(6)
concepts = List(know-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(knew),know-01,PhraseConceptFeatures(4.0,-0.2231435513142097,false,false))
feats:
bias 1.0
c|p -0.2231435513142097
len 1.0

score:
0.17096382367457028
Adding concept: i
nodeIds = List(7)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.19701303009279952
Decoder1 Spans:
Span 1:  by => by
Span 2:  I => i
Span 3:  inhabited => inhabit-01
Span 4:  knew => know-01
Span 5:  lazy => lazy
Span 6:  man => man
Span 7:  planet => planet
Span 8:  that => that
Decoder1 feats:
bias 8.0
c|p -4.07146703671032
len 8.0

Concepts:
id = 2 concept = by
id = 5 concept = planet
id = 7 concept = i
id = 1 concept = lazy
id = 4 concept = that
id = 6 concept = know-01
id = 0 concept = man
id = 3 concept = inhabit-01
Spans:
Span 7-8:  by => by
Span 0-1:  I => i
Span 6-7:  inhabited => inhabit-01
Span 1-2:  knew => know-01
Span 9-10:  lazy => lazy
Span 10-11:  man => man
Span 3-4:  planet => planet
Span 4-5:  that => that

rootDependencyPaths = List(List(1, 0), List(1), List(1, 3, 2), List(1, 3), List(1, 3, 6, 4), List(1, 3, 6, 5), List(1, 3, 6), List(1, 3, 6, 7), List(1, 3, 6, 7, 10, 8), List(1, 3, 6, 7, 10, 9), List(1, 3, 6, 7, 10), List(1, 11))
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 30.48364018624967
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 28.48364018624967
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 26.48364018624967
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 24.48364018624967
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 22.48364018624967
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 20.48364018624967
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 18.48364018624967
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 17.194745066538378
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 4
Node = 5
Node = 7
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 15.545336310010374
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 14.48364018624967
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 13.194745066538378
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 4
Node = 5
Node = 7
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 11.545336310010374
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 10.483640186249676
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 9.194745066538385
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 4
Node = 5
Node = 7
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 7.54533631001038
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 6.48364018624969
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 5.194745066538398
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 4
Node = 5
Node = 7
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 3.545336310010394
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 2.4836401862496897
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 1.1947450665383839
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 4
Node = 5
Node = 7
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -0.45466368998962015
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -1.5163598137503245
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -2.805254933461616
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 4
Node = 5
Node = 7
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -4.45466368998962
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -5.5163598137503245
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -6.805254933461616
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 4
Node = 5
Node = 7
Node = 3
Node = 2
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -8.45466368998962
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -9.516359813750324
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -10.805254933461615
getNodeById = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
getNodeById2 = Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01)
Node = 6
Node = 5
Node = 7
Node = 3
Node = 2
Node = 4
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -11.883892404132478
Langrangian relaxation converged after 30 iterations. Delta = 0.0
Node.spans:
planet List()
man List()
inhabit-01 List()
i List()
lazy List()
know-01 List()
OracleGraph nodes = List(planet, man, inhabit-01, i, lazy, know-01)
OracleGraph triples: (i2 / inhabit-01, ARG0, m / man)
(i2 / inhabit-01, ARG1, p / planet)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, p / planet)
(m / man, mod, l / lazy)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 3, 2), List(1, 3), List(1, 3, 6, 4), List(1, 3, 6, 5), List(1, 3, 6), List(1, 3, 6, 7), List(1, 3, 6, 7, 10, 8), List(1, 3, 6, 7, 10, 9), List(1, 3, 6, 7, 10), List(1, 11))
Oracle Span 0-1:  I => i
Oracle Span 6-7:  inhabited => inhabit-01
Oracle Span 1-2:  knew => know-01
Oracle Span 9-10:  lazy => lazy
Oracle Span 10-11:  man => man
Oracle Span 3-4:  planet => planet

Extra span: by => by
Extra span: that => that
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	knew	_	VBD	VBD	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	planet	_	NN	NN	_	2	dobj	_	_
5	that	_	WDT	WDT	_	7	nsubjpass	_	_
6	was	_	VBD	VBD	_	7	auxpass	_	_
7	inhabited	_	VBN	VBN	_	4	rcmod	_	_
8	by	_	IN	IN	_	7	prep	_	_
9	a	_	DT	DT	_	11	det	_	_
10	lazy	_	JJ	JJ	_	11	amod	_	_
11	man	_	NN	NN	_	8	pobj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(i2 / inhabit-01, ARG0, m / man)
(i2 / inhabit-01, ARG1, p / planet)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, p / planet)
(m / man, mod, l / lazy)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),man,man,false), Span(9,10,List(1),lazy,lazy,false), Span(7,8,List(2),by,by,false), Span(6,7,List(3),inhabited,inhabit-01,false), Span(4,5,List(4),that,that,false), Span(3,4,List(5),planet,planet,false), Span(1,2,List(6),knew,know-01,false), Span(0,1,List(7),I,i,false)),Map(2 -> by, 5 -> planet, 7 -> i, 1 -> lazy, 4 -> that, 6 -> know-01, 0 -> man, 3 -> inhabit-01),Map(k -> know-01, t -> that, b -> by, m -> man, p -> planet, i2 -> i, i -> inhabit-01, l -> lazy))),[Ljava.lang.String;@4ee203eb,Annotation([Ljava.lang.String;@1a5a4e19,[Ljava.lang.String;@7068e664,[Ljava.lang.String;@60db1c0e),Annotation([Ljava.lang.String;@3e78b6a5,[Ljava.lang.String;@769a1df5,[Ledu.cmu.lti.nlp.amr.Dependency;@41f69e84),Annotation([Ljava.lang.String;@7975d1d8,[Ljava.lang.String;@2438dcd,[Ljava.lang.String;@24105dc5),Annotation([Ljava.lang.String;@5167f57d,[Ljava.lang.String;@64b0598,[Ledu.cmu.lti.nlp.amr.Entity;@18f8cd79))
AMR:
(i / inhabit-01, ARG0, m / man)
(i / inhabit-01, ARG1, p / planet)
(i / inhabit-01, ARG2, t / that)
(i / inhabit-01, time, b / by)
(k / know-01, ARG0, i2 / i)
(k / know-01, ARG1, p / planet)
(m / man, mod, l / lazy)

Decoded in 125,753 microseconds
Sentence: He neglected three little bushes ... "


--- Decoder1 ---

Sentence: He neglected three little bushes ... "
word = He
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false)))
concept = PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
word = neglected
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(neglected),neglect-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(neglected),neglect-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(neglected),neglect-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = three
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(three),3,PhraseConceptFeatures(11.0,-0.3101549283038396,false,false)))
concept = PhraseConceptPair(List(three),3,PhraseConceptFeatures(11.0,-0.3101549283038396,false,false))
score = 0
adding concept:PhraseConceptPair(List(three),3,PhraseConceptFeatures(11.0,-0.3101549283038396,false,false))
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = bushes
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
word = ...
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(neglected),neglect-01,PhraseConceptFeatures(2.0,0.0,false,false)),1)), Some((0.026636919450767668,PhraseConceptPair(List(three),3,PhraseConceptFeatures(11.0,-0.3101549283038396,false,false)),2)), Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false)),4)), None, None)
Adding concept: bush
nodeIds = List(0)
concepts = List(bush)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bushes),bush,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: little
nodeIds = List(1)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.052392396955467824
Adding concept: 3
nodeIds = List(2)
concepts = List(3)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(three),3,PhraseConceptFeatures(11.0,-0.3101549283038396,false,false))
feats:
bias 1.0
c|p -0.3101549283038396
len 1.0

score:
0.07902931640623549
Adding concept: neglect-01
nodeIds = List(3)
concepts = List(neglect-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(neglected),neglect-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10880290163006977
Adding concept: he
nodeIds = List(4)
concepts = List(he)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(He),he,PhraseConceptFeatures(63.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13857648685390406
Decoder1 Spans:
Span 1:  bushes => bush
Span 2:  He => he
Span 3:  little => little
Span 4:  neglected => neglect-01
Span 5:  three => 3
Decoder1 feats:
bias 5.0
c|p -1.0176221626385336
len 5.0

Concepts:
id = 2 concept = 3
id = 1 concept = little
id = 4 concept = he
id = 0 concept = bush
id = 3 concept = neglect-01
Spans:
Span 4-5:  bushes => bush
Span 0-1:  He => he
Span 3-4:  little => little
Span 1-2:  neglected => neglect-01
Span 2-3:  three => 3

rootDependencyPaths = List(List(1, 0), List(1), List(1, 4, 2), List(1, 4, 3), List(1, 4), List(1, 5), List(1, 6))
getNodeById = Map(2 -> 3, 1 -> little, 4 -> he, 0 -> bush, 3 -> neglect-01)
getNodeById2 = Map(2 -> 3, 1 -> little, 4 -> he, 0 -> bush, 3 -> neglect-01)
getNodeById = Map(2 -> 3, 1 -> little, 4 -> he, 0 -> bush, 3 -> neglect-01)
getNodeById2 = Map(2 -> 3, 1 -> little, 4 -> he, 0 -> bush, 3 -> neglect-01)
Node = 3
Node = 4
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -19.80121647583067
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
3 List()
bush List()
little List()
he List()
neglect-01 List()
WARNING: Adding a variable name to a span
OracleGraph nodes = List(3, bush, little, he, neglect-01)
OracleGraph triples: (b / bush, mod, l / little)
(b / bush, quant, 3 / 3)
(n / neglect-01, ARG0, h / he)
(n / neglect-01, ARG1, b / bush)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 4, 2), List(1, 4, 3), List(1, 4), List(1, 5), List(1, 6))
Oracle Span 4-5:  bushes => bush
Oracle Span 0-1:  He => he
Oracle Span 3-4:  little => little
Oracle Span 1-2:  neglected => neglect-01
Oracle Span 2-3:  three => 3

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	neglected	_	VBD	VBD	_	0	root	_	_
3	three	_	CD	CD	_	5	num	_	_
4	little	_	JJ	JJ	_	5	amod	_	_
5	bushes	_	NNS	NNS	_	2	dobj	_	_
6	...	_	.	.	_	2	punct	_	_
7	"	_	''	''	_	2	punct	_	_

Oracle:
(b / bush, mod, l / little)
(b / bush, quant, 3 / 3)
(n / neglect-01, ARG0, h / he)
(n / neglect-01, ARG1, b / bush)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),bushes,bush,false), Span(3,4,List(1),little,little,false), Span(2,3,List(2),three,3,false), Span(1,2,List(3),neglected,neglect-01,false), Span(0,1,List(4),He,he,false)),Map(2 -> 3, 1 -> little, 4 -> he, 0 -> bush, 3 -> neglect-01),Map(n -> neglect-01, h -> he, b -> bush, l -> little, 3 -> 3))),[Ljava.lang.String;@3e2055d6,Annotation([Ljava.lang.String;@50029372,[Ljava.lang.String;@e3b3b2f,[Ljava.lang.String;@50f6ac94),Annotation([Ljava.lang.String;@6cc4cdb9,[Ljava.lang.String;@28194a50,[Ledu.cmu.lti.nlp.amr.Dependency;@7f2cfe3f),Annotation([Ljava.lang.String;@1a5b6f42,[Ljava.lang.String;@5038d0b5,[Ljava.lang.String;@32115b28),Annotation([Ljava.lang.String;@2ad48653,[Ljava.lang.String;@6bb4dd34,[Ledu.cmu.lti.nlp.amr.Entity;@7d9f158f))
AMR:
(b / bush, mod, l / little)
(b / bush, poss, h / he)
(b / bush, quant, 3 / 3)
(n / neglect-01, ARG0, h / he)

Decoded in 13,015 microseconds
Sentence: So , as the little prince described it to me , I have made a drawing of that planet .


--- Decoder1 ---

Sentence: So , as the little prince described it to me , I have made a drawing of that planet .
word = So
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = described
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = drawing
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),4)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),5)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),7)), None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),11)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),12)), Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),13)), None, None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),17)), Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),18)), None)
Adding concept: planet
nodeIds = List(0)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: that
nodeIds = List(1)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.04639139361305006
Adding concept: make-01
nodeIds = List(2)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.058474931656791324
Adding concept: have-03
nodeIds = List(3)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.05863943600339597
Adding concept: i
nodeIds = List(4)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.08468864242162523
Adding concept: it
nodeIds = List(5)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.10360776184543773
Adding concept: prince
nodeIds = List(6)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.13331872629696728
Adding concept: little
nodeIds = List(7)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.15593753802860083
Decoder1 Spans:
Span 1:  have => have-03
Span 2:  I => i
Span 3:  it => it
Span 4:  little => little
Span 5:  made => make-01
Span 6:  planet => planet
Span 7:  prince => prince
Span 8:  that => that
Decoder1 feats:
bias 8.0
c|p -8.133030243606049
len 8.0

Concepts:
id = 2 concept = make-01
id = 5 concept = it
id = 7 concept = little
id = 1 concept = that
id = 4 concept = i
id = 6 concept = prince
id = 0 concept = planet
id = 3 concept = have-03
Spans:
Span 12-13:  have => have-03
Span 11-12:  I => i
Span 7-8:  it => it
Span 4-5:  little => little
Span 13-14:  made => make-01
Span 18-19:  planet => planet
Span 5-6:  prince => prince
Span 17-18:  that => that

rootDependencyPaths = List(List(13, 0), List(13, 1), List(13, 6, 2), List(13, 6, 5, 3), List(13, 6, 5, 4), List(13, 6, 5), List(13, 6), List(13, 6, 7), List(13, 6, 8), List(13, 6, 8, 9), List(13, 10), List(13, 11), List(13, 12), List(13), List(13, 15, 14), List(13, 15), List(13, 15, 16), List(13, 15, 16, 18, 17), List(13, 15, 16, 18), List(13, 19))
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -147.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -151.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -155.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -159.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -163.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -167.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -171.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -175.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -179.71821808465262
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -183.7182180846526
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -187.7182180846526
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 5
Node = 6
Node = 3
Node = 4
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -191.7182180846526
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -195.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -197.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -199.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -201.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -203.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -205.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -207.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -208.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -210.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -211.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -213.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -214.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -216.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -217.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -219.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -220.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -222.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -223.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -225.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -226.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -228.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -229.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -231.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -232.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -234.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -235.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -237.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -238.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -240.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -241.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -243.13369670414218
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 6
Node = 3
Node = 4
Node = 7
Node = 5
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -244.2577558815224
getNodeById = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
getNodeById2 = Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03)
Node = 2
Node = 3
Node = 6
Node = 4
Node = 5
Node = 7
Node = 0
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -245.37493901304154
Langrangian relaxation converged after 45 iterations. Delta = 0.0
Node.spans:
prince List()
planet List()
little List()
that List()
i List()
cause-01 List()
draw-01 List()
describe-01 List()
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
OracleGraph nodes = List(prince, planet, little, that, i, draw-01, describe-01)
OracleGraph triples: (d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, p / planet)
(d / draw-01, manner, d2 / describe-01)
(d2 / describe-01, ARG0, p2 / prince)
(d2 / describe-01, ARG1, p / planet)
(d2 / describe-01, beneficiary, i / i)
(p / planet, mod, t / that)
(p2 / prince, mod, l / little)
rootDependencyPaths = List(List(13, 0), List(13, 1), List(13, 6, 2), List(13, 6, 5, 3), List(13, 6, 5, 4), List(13, 6, 5), List(13, 6), List(13, 6, 7), List(13, 6, 8), List(13, 6, 8, 9), List(13, 10), List(13, 11), List(13, 12), List(13), List(13, 15, 14), List(13, 15), List(13, 15, 16), List(13, 15, 16, 18, 17), List(13, 15, 16, 18), List(13, 19))
Oracle Span 6-7:  described => describe-01
Oracle Span 15-16:  drawing => draw-01
Oracle Span 11-12:  I => i
Oracle Span 4-5:  little => little
Oracle Span 18-19:  planet => planet
Oracle Span 5-6:  prince => prince
Oracle Span 17-18:  that => that

Extra span: made => make-01
Extra span: have => have-03
Extra span: it => it
Missing span: drawing => draw-01
Missing span: described => describe-01
Dependencies:
1	So	_	IN	IN	_	14	dep	_	_
2	,	_	,	,	_	14	punct	_	_
3	as	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	little	_	JJ	JJ	_	6	amod	_	_
6	prince	_	NN	NN	_	7	nsubj	_	_
7	described	_	VBD	VBD	_	14	advcl	_	_
8	it	_	PRP	PRP	_	7	dobj	_	_
9	to	_	TO	TO	_	7	prep	_	_
10	me	_	PRP	PRP	_	9	pobj	_	_
11	,	_	,	,	_	14	punct	_	_
12	I	_	PRP	PRP	_	14	nsubj	_	_
13	have	_	VBP	VBP	_	14	aux	_	_
14	made	_	VBN	VBN	_	0	root	_	_
15	a	_	DT	DT	_	16	det	_	_
16	drawing	_	NN	NN	_	14	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	that	_	DT	DT	_	19	det	_	_
19	planet	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	14	punct	_	_

Oracle:
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, p / planet)
(d / draw-01, manner, d2 / describe-01)
(d2 / describe-01, ARG0, p2 / prince)
(d2 / describe-01, ARG1, p / planet)
(d2 / describe-01, beneficiary, i / i)
(p / planet, mod, t / that)
(p2 / prince, mod, l / little)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),planet,planet,false), Span(17,18,List(1),that,that,false), Span(13,14,List(2),made,make-01,false), Span(12,13,List(3),have,have-03,false), Span(11,12,List(4),I,i,false), Span(7,8,List(5),it,it,false), Span(5,6,List(6),prince,prince,false), Span(4,5,List(7),little,little,false)),Map(2 -> make-01, 5 -> it, 7 -> little, 1 -> that, 4 -> i, 6 -> prince, 0 -> planet, 3 -> have-03),Map(h -> have-03, t -> that, p2 -> prince, m -> make-01, p -> planet, i2 -> it, i -> i, l -> little))),[Ljava.lang.String;@45efd90f,Annotation([Ljava.lang.String;@4b8729ff,[Ljava.lang.String;@61710c6,[Ljava.lang.String;@3214ee6),Annotation([Ljava.lang.String;@383dc82c,[Ljava.lang.String;@4a07d605,[Ledu.cmu.lti.nlp.amr.Dependency;@74287ea3),Annotation([Ljava.lang.String;@7d7758be,[Ljava.lang.String;@2bdd8394,[Ljava.lang.String;@5f9edf14),Annotation([Ljava.lang.String;@68746f22,[Ljava.lang.String;@2f01783a,[Ledu.cmu.lti.nlp.amr.Entity;@68878f6d))
AMR:
(h / have-03, ARG0, i2 / it)
(m / make-01, ARG0, i / i)
(m / make-01, ARG1, p2 / prince)
(m / make-01, manner, h / have-03)
(p / planet, mod, t / that)
(p / planet, poss, i / i)
(p2 / prince, mod, l / little)

Decoded in 205,774 microseconds
Sentence: I do not much like to take the tone of a moralist .


--- Decoder1 ---

Sentence: I do not much like to take the tone of a moralist .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = do
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false)), PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)))
concept = PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false))
score = 0
concept = PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
score = 0
adding concept:PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
word = not
Finding date entities
Possible invoked concepts: List()
word = much
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = take
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(take),take-01,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(take),take-03,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false)), PhraseConceptPair(List(take),take-10,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)))
concept = PhraseConceptPair(List(take),take-01,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(take),take-03,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false))
score = 0
adding concept:PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false))
concept = PhraseConceptPair(List(take),take-10,PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = tone
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = moralist
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.008412119642531832,PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)),1)), None, Some((0.02932403466221358,PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),3)), None, None, Some((0.001733778810310515,PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false)),6)), None, None, None, None, None, None)
Adding concept: take-05
nodeIds = List(0)
concepts = List(take-05)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(take),take-05,PhraseConceptFeatures(2.0,-2.772588722239781,false,false))
feats:
bias 1.0
c|p -2.772588722239781
len 1.0

score:
0.0017337788103105045
Adding concept: much
nodeIds = List(1)
concepts = List(much)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.03105781347252408
Adding concept: do-02
nodeIds = List(2)
concepts = List(do-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
feats:
bias 1.0
c|p -2.1122313645028266
len 1.0

score:
0.03946993311505591
Adding concept: i
nodeIds = List(3)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.06551913953328517
Decoder1 Spans:
Span 1:  do => do-02
Span 2:  I => i
Span 3:  much => much
Span 4:  take => take-05
Decoder1 feats:
bias 4.0
c|p -5.297540107713005
len 4.0

Concepts:
id = 2 concept = do-02
id = 1 concept = much
id = 0 concept = take-05
id = 3 concept = i
Spans:
Span 1-2:  do => do-02
Span 0-1:  I => i
Span 3-4:  much => much
Span 6-7:  take => take-05

rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 6, 8, 7), List(4, 6, 8), List(4, 6, 8, 9), List(4, 6, 8, 9, 11, 10), List(4, 6, 8, 9, 11), List(4, 12))
getNodeById = Map(2 -> do-02, 1 -> much, 0 -> take-05, 3 -> i)
getNodeById2 = Map(2 -> do-02, 1 -> much, 0 -> take-05, 3 -> i)
getNodeById = Map(2 -> do-02, 1 -> much, 0 -> take-05, 3 -> i)
getNodeById2 = Map(2 -> do-02, 1 -> much, 0 -> take-05, 3 -> i)
Node = 2
Node = 3
Node = 0
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = -86.94162419228607
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
tone List()
i List()
moralist List()
- List()
much List()
like-02 List()
take-01 List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(tone, i, moralist, much, like-02, take-01)
OracleGraph triples: (l / like-02, ARG0, i / i)
(l / like-02, ARG1, t / take-01)
(l / like-02, degree, m / much)
(t / take-01, ARG0, i / i)
(t / take-01, ARG1, t2 / tone)
(t2 / tone, poss, m2 / moralist)
rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 6, 8, 7), List(4, 6, 8), List(4, 6, 8, 9), List(4, 6, 8, 9, 11, 10), List(4, 6, 8, 9, 11), List(4, 12))
Oracle Span 0-1:  I => i
Oracle Span 4-5:  like => like-02
Oracle Span 11-12:  moralist => moralist
Oracle Span 3-4:  much => much
Oracle Span 6-7:  take => take-01
Oracle Span 8-9:  tone => tone

Incorrect span: take => take-05
Extra span: do => do-02
Missing span: like => like-02
Missing span: take => take-01
Missing span: tone => tone
Missing span: moralist => moralist
Dependencies:
1	I	_	PRP	PRP	_	5	nsubj	_	_
2	do	_	VBP	VBP	_	5	aux	_	_
3	not	_	RB	RB	_	5	neg	_	_
4	much	_	RB	RB	_	5	advmod	_	_
5	like	_	VB	VB	_	0	root	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	take	_	VB	VB	_	5	xcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	tone	_	NN	NN	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	moralist	_	NN	NN	_	10	pobj	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, t / take-01)
(l / like-02, degree, m / much)
(t / take-01, ARG0, i / i)
(t / take-01, ARG1, t2 / tone)
(t2 / tone, poss, m2 / moralist)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),take,take-05,false), Span(3,4,List(1),much,much,false), Span(1,2,List(2),do,do-02,false), Span(0,1,List(3),I,i,false)),Map(2 -> do-02, 1 -> much, 0 -> take-05, 3 -> i),Map(t -> take-05, d -> do-02, m -> much, i -> i))),[Ljava.lang.String;@41488b16,Annotation([Ljava.lang.String;@a8ef162,[Ljava.lang.String;@2eea88a1,[Ljava.lang.String;@7ac296f6),Annotation([Ljava.lang.String;@7fd7a283,[Ljava.lang.String;@22f59fa,[Ledu.cmu.lti.nlp.amr.Dependency;@78fa769e),Annotation([Ljava.lang.String;@16612a51,[Ljava.lang.String;@54e041a4,[Ljava.lang.String;@2c78324b),Annotation([Ljava.lang.String;@79defdc,[Ljava.lang.String;@18317edc,[Ledu.cmu.lti.nlp.amr.Entity;@4e0ae11f))
AMR:
(d / do-02, ARG1, i / i)
(t / take-05, ARG0, i / i)
(t / take-05, ARG1, m / much)

Decoded in 23,155 microseconds
Sentence: But the danger of the baobabs is so little understood , and such considerable risks would be run by anyone who might get lost on an asteroid , that for once I am breaking through my reserve .


--- Decoder1 ---

Sentence: But the danger of the baobabs is so little understood , and such considerable risks would be run by anyone who might get lost on an asteroid , that for once I am breaking through my reserve .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = danger
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = understood
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(understood),understand-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(understood),understand-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(understood),understand-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = such
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false))
word = considerable
Finding date entities
Possible invoked concepts: List()
word = risks
Finding date entities
Possible invoked concepts: List()
word = would
Finding date entities
Possible invoked concepts: List()
word = be
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false)))
concept = PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false))
score = 0
word = run
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(run),run-02,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(run),run-02,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(run),run-02,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = by
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)))
concept = PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
score = 0
adding concept:PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
word = anyone
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(anyone),anyone,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(anyone),anyone,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(anyone),anyone,PhraseConceptFeatures(3.0,0.0,false,false))
word = who
Finding date entities
Possible invoked concepts: List()
word = might
Finding date entities
Possible invoked concepts: List()
word = get
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false)), PhraseConceptPair(List(get),get-05,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false)))
concept = PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
score = 0
adding concept:PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
concept = PhraseConceptPair(List(get),get-05,PhraseConceptFeatures(1.0,-2.4849066497880004,false,false))
score = 0
word = lost
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(lost),lose-02,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(lost),lose-02,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(lost),lose-02,PhraseConceptFeatures(2.0,0.0,false,false))
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = an
Finding date entities
Possible invoked concepts: List()
word = asteroid
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = for
Finding date entities
Possible invoked concepts: List()
word = once
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false)), PhraseConceptPair(List(once),once-more,PhraseConceptFeatures(1.0,-3.258096538021482,false,false)))
concept = PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
score = 0
adding concept:PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
concept = PhraseConceptPair(List(once),once-more,PhraseConceptFeatures(1.0,-3.258096538021482,false,false))
score = 0
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = am
Finding date entities
Possible invoked concepts: List()
word = breaking
Finding date entities
Possible invoked concepts: List()
word = through
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
word = my
Finding date entities
Possible invoked concepts: List()
word = reserve
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), None, Some((0.015753682017072397,PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),2)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),5)), None, Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),7)), Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),8)), Some((0.029773585223834276,PhraseConceptPair(List(understood),understand-01,PhraseConceptFeatures(1.0,0.0,false,false)),9)), None, Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false)),12)), None, None, None, None, Some((0.022763633620453336,PhraseConceptPair(List(run),run-02,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),17)), Some((0.008432529785513981,PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)),18)), Some((0.029773585223834276,PhraseConceptPair(List(anyone),anyone,PhraseConceptFeatures(3.0,0.0,false,false)),19)), None, None, Some((0.011653123197224401,PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false)),22)), Some((0.029773585223834276,PhraseConceptPair(List(lost),lose-02,PhraseConceptFeatures(2.0,0.0,false,false)),23)), None, None, None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),28)), None, Some((0.013100333856746589,PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false)),30)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),31)), None, None, Some((0.01866307480060534,PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false)),34)), None, None, None)
Adding concept: through
nodeIds = List(0)
concepts = List(through)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(through),through,PhraseConceptFeatures(1.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.018663074800605334
Adding concept: i
nodeIds = List(1)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.044712281218834596
Adding concept: once
nodeIds = List(2)
concepts = List(once)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(once),once,PhraseConceptFeatures(5.0,-1.6486586255873816,false,false))
feats:
bias 1.0
c|p -1.6486586255873816
len 1.0

score:
0.05781261507558118
Adding concept: that
nodeIds = List(3)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.07443042346479696
Adding concept: lose-02
nodeIds = List(4)
concepts = List(lose-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(lost),lose-02,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10420400868863124
Adding concept: get-01
nodeIds = List(5)
concepts = List(get-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(get),get-01,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
feats:
bias 1.0
c|p -1.791759469228055
len 1.0

score:
0.11585713188585563
Adding concept: anyone
nodeIds = List(6)
concepts = List(anyone)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(anyone),anyone,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1456307171096899
Adding concept: by
nodeIds = List(7)
concepts = List(by)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
feats:
bias 1.0
c|p -2.1102132003465894
len 1.0

score:
0.15406324689520387
Adding concept: run-02
nodeIds = List(8)
concepts = List(run-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(run),run-02,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.1768268805156572
Adding concept: such
nodeIds = List(9)
concepts = List(such)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(such),such,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.20660046573949148
Adding concept: and
nodeIds = List(10)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.22555840756190002
Adding concept: understand-01
nodeIds = List(11)
concepts = List(understand-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(understood),understand-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.25533199278573426
Adding concept: little
nodeIds = List(12)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.2779508045173678
Adding concept: so
nodeIds = List(13)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.3032560368471419
Adding concept: baobab
nodeIds = List(14)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.3330296220709762
Adding concept: danger
nodeIds = List(15)
concepts = List(danger)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.3487833040880486
Adding concept: contrast-01
nodeIds = List(16)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.3694916453000435
Decoder1 Spans:
Span 1:  and => and
Span 2:  anyone => anyone
Span 3:  baobabs => baobab
Span 4:  But => contrast-01
Span 5:  by => by
Span 6:  danger => danger
Span 7:  get => get-01
Span 8:  I => i
Span 9:  little => little
Span 10:  lost => lose-02
Span 11:  once => once
Span 12:  run => run-02
Span 13:  so => so
Span 14:  such => such
Span 15:  that => that
Span 16:  through => through
Span 17:  understood => understand-01
Decoder1 feats:
bias 17.0
c|p -13.512933652236143
len 17.0

Concepts:
id = 2 concept = once
id = 5 concept = get-01
id = 12 concept = little
id = 15 concept = danger
id = 8 concept = run-02
id = 7 concept = by
id = 1 concept = i
id = 4 concept = lose-02
id = 11 concept = understand-01
id = 14 concept = baobab
id = 6 concept = anyone
id = 0 concept = through
id = 9 concept = such
id = 16 concept = contrast-01
id = 3 concept = that
id = 10 concept = and
id = 13 concept = so
Spans:
Span 11-12:  and => and
Span 19-20:  anyone => anyone
Span 5-6:  baobabs => baobab
Span 0-1:  But => contrast-01
Span 18-19:  by => by
Span 2-3:  danger => danger
Span 22-23:  get => get-01
Span 31-32:  I => i
Span 8-9:  little => little
Span 23-24:  lost => lose-02
Span 30-31:  once => once
Span 17-18:  run => run-02
Span 7-8:  so => so
Span 12-13:  such => such
Span 28-29:  that => that
Span 34-35:  through => through
Span 9-10:  understood => understand-01

rootDependencyPaths = List(List(9, 0), List(9, 2, 1), List(9, 2), List(9, 2, 3), List(9, 2, 3, 5, 4), List(9, 2, 3, 5), List(9, 6), List(9, 8, 7), List(9, 8), List(9), List(9, 10), List(9, 11), List(9, 17, 14, 12), List(9, 17, 14, 13), List(9, 17, 14), List(9, 17, 15), List(9, 17, 16), List(9, 17), List(9, 17, 18), List(9, 17, 18, 19), List(9, 17, 18, 19, 23, 20), List(9, 17, 18, 19, 23, 21), List(9, 17, 18, 19, 23, 22), List(9, 17, 18, 19, 23), List(9, 17, 18, 19, 23, 24), List(9, 17, 18, 19, 23, 24, 26, 25), List(9, 17, 18, 19, 23, 24, 26), List(9, 17, 18, 19, 23, 27), List(9, 17, 18, 19, 23, 33, 28), List(9, 17, 18, 19, 23, 33, 29), List(9, 17, 18, 19, 23, 33, 29, 30), List(9, 17, 18, 19, 23, 33, 31), List(9, 17, 18, 19, 23, 33, 32), List(9, 17, 18, 19, 23, 33), List(9, 17, 18, 19, 23, 33, 34), List(9, 17, 18, 19, 23, 33, 34, 36, 35), List(9, 17, 18, 19, 23, 33, 34, 36), List(9, 37))
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 12
Node = 0
Node = 2
Node = 14
Node = 15
Node = 6
Node = 4
Node = 5
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -411.1158752553069
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 12
Node = 14
Node = 15
Node = 6
Node = 4
Node = 5
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -419.9841748766635
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 12
Node = 14
Node = 15
Node = 2
Node = 6
Node = 4
Node = 5
Node = 0
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -424.8256570041259
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 12
Node = 14
Node = 15
Node = 2
Node = 6
Node = 4
Node = 5
Node = 1
Node = 3
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -428.06866753111274
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 12
Node = 14
Node = 15
Node = 2
Node = 6
Node = 4
Node = 5
Node = 0
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -431.8256570041259
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 12
Node = 14
Node = 15
Node = 2
Node = 6
Node = 4
Node = 5
Node = 1
Node = 3
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -435.06866753111274
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 15
Node = 12
Node = 14
Node = 2
Node = 6
Node = 4
Node = 5
Node = 0
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -437.6992853261871
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 12
Node = 14
Node = 15
Node = 0
Node = 2
Node = 6
Node = 4
Node = 5
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -440.54500986926433
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 15
Node = 12
Node = 14
Node = 2
Node = 6
Node = 4
Node = 5
Node = 0
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -443.2787999235316
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 9
Node = 12
Node = 14
Node = 15
Node = 2
Node = 6
Node = 4
Node = 5
Node = 1
Node = 3
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -445.1304286002428
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 15
Node = 9
Node = 12
Node = 14
Node = 2
Node = 6
Node = 4
Node = 5
Node = 0
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -447.7610463953172
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 15
Node = 9
Node = 12
Node = 14
Node = 0
Node = 2
Node = 6
Node = 4
Node = 5
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -449.0599138578001
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 15
Node = 9
Node = 12
Node = 14
Node = 2
Node = 6
Node = 4
Node = 5
Node = 0
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -450.34056099266166
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 0
Node = 13
Node = 8
Node = 11
Node = 7
Node = 15
Node = 9
Node = 12
Node = 14
Node = 2
Node = 6
Node = 4
Node = 5
Node = 1
Node = 3
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -451.3583724053491
getNodeById = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so)
getNodeById2 = Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 10 -> and, 3 -> that, 13 -> so)
Node = 16
Node = 10
Node = 13
Node = 8
Node = 11
Node = 7
Node = 15
Node = 9
Node = 12
Node = 14
Node = 2
Node = 6
Node = 4
Node = 5
Node = 1
Node = 3
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -452.52549075785316
Langrangian relaxation converged after 15 iterations. Delta = 0.0
Node.spans:
and List()
for-once List()
understand-01 List()
so List()
considerable List()
such List()
possible List()
baobab List()
reserve List()
anyone List()
little List()
asteroid List()
cause-01 List()
break-14 List()
lose-02 List()
contrast-01 List()
i List()
risk-01 List()
danger List()
clearUnalignedNodes():  removing unaligned node: Some(f) / for-once
clearUnalignedNodes():  removing unaligned node: Some(p) / possible
clearUnalignedNodes():  removing unaligned node: Some(c3) / cause-01
OracleGraph nodes = List(and, understand-01, so, considerable, such, baobab, reserve, anyone, little, asteroid, break-14, lose-02, contrast-01, i, risk-01, danger)
OracleGraph triples: (a / and, op, r / risk-01)
(a / and, op, u / understand-01)
(b3 / break-14, ARG0, i / i)
(b3 / break-14, ARG1, r3 / reserve)
(c / considerable, mod, s2 / such)
(d / danger, poss, b2 / baobab)
(l / little, degree, s / so)
(l2 / lose-02, ARG1, a2 / anyone)
(l2 / lose-02, location, a3 / asteroid)
(r / risk-01, ARG0, a2 / anyone)
(r / risk-01, degree, c / considerable)
(r3 / reserve, poss, i / i)
(u / understand-01, ARG1, d / danger)
(u / understand-01, degree, l / little)
rootDependencyPaths = List(List(9, 0), List(9, 2, 1), List(9, 2), List(9, 2, 3), List(9, 2, 3, 5, 4), List(9, 2, 3, 5), List(9, 6), List(9, 8, 7), List(9, 8), List(9), List(9, 10), List(9, 11), List(9, 17, 14, 12), List(9, 17, 14, 13), List(9, 17, 14), List(9, 17, 15), List(9, 17, 16), List(9, 17), List(9, 17, 18), List(9, 17, 18, 19), List(9, 17, 18, 19, 23, 20), List(9, 17, 18, 19, 23, 21), List(9, 17, 18, 19, 23, 22), List(9, 17, 18, 19, 23), List(9, 17, 18, 19, 23, 24), List(9, 17, 18, 19, 23, 24, 26, 25), List(9, 17, 18, 19, 23, 24, 26), List(9, 17, 18, 19, 23, 27), List(9, 17, 18, 19, 23, 33, 28), List(9, 17, 18, 19, 23, 33, 29), List(9, 17, 18, 19, 23, 33, 29, 30), List(9, 17, 18, 19, 23, 33, 31), List(9, 17, 18, 19, 23, 33, 32), List(9, 17, 18, 19, 23, 33), List(9, 17, 18, 19, 23, 33, 34), List(9, 17, 18, 19, 23, 33, 34, 36, 35), List(9, 17, 18, 19, 23, 33, 34, 36), List(9, 37))
Oracle Span 11-12:  and => and
Oracle Span 19-20:  anyone => anyone
Oracle Span 26-27:  asteroid => asteroid
Oracle Span 5-6:  baobabs => baobab
Oracle Span 33-34:  breaking => break-14
Oracle Span 0-1:  But => contrast-01
Oracle Span 13-14:  considerable => considerable
Oracle Span 2-3:  danger => danger
Oracle Span 31-32:  I => i
Oracle Span 8-9:  little => little
Oracle Span 23-24:  lost => lose-02
Oracle Span 36-37:  reserve => reserve
Oracle Span 14-15:  risks => risk-01
Oracle Span 7-8:  so => so
Oracle Span 12-13:  such => such
Oracle Span 9-10:  understood => understand-01

Extra span: through => through
Extra span: once => once
Extra span: that => that
Extra span: get => get-01
Extra span: by => by
Extra span: run => run-02
Missing span: risks => risk-01
Missing span: considerable => considerable
Missing span: asteroid => asteroid
Missing span: breaking => break-14
Missing span: reserve => reserve
Dependencies:
1	But	_	CC	CC	_	10	cc	_	_
2	the	_	DT	DT	_	3	det	_	_
3	danger	_	NN	NN	_	10	nsubjpass	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	baobabs	_	NNS	NNS	_	4	pobj	_	_
7	is	_	VBZ	VBZ	_	10	auxpass	_	_
8	so	_	RB	RB	_	9	advmod	_	_
9	little	_	RB	RB	_	10	advmod	_	_
10	understood	_	VBN	VBN	_	0	root	_	_
11	,	_	,	,	_	10	punct	_	_
12	and	_	CC	CC	_	10	cc	_	_
13	such	_	JJ	JJ	_	15	amod	_	_
14	considerable	_	JJ	JJ	_	15	amod	_	_
15	risks	_	NNS	NNS	_	18	nsubjpass	_	_
16	would	_	MD	MD	_	18	aux	_	_
17	be	_	VB	VB	_	18	auxpass	_	_
18	run	_	VBN	VBN	_	10	conj	_	_
19	by	_	IN	IN	_	18	prep	_	_
20	anyone	_	NN	NN	_	19	pobj	_	_
21	who	_	WP	WP	_	24	nsubjpass	_	_
22	might	_	MD	MD	_	24	aux	_	_
23	get	_	VB	VB	_	24	auxpass	_	_
24	lost	_	VBN	VBN	_	20	rcmod	_	_
25	on	_	IN	IN	_	24	prep	_	_
26	an	_	DT	DT	_	27	det	_	_
27	asteroid	_	NN	NN	_	25	pobj	_	_
28	,	_	,	,	_	24	punct	_	_
29	that	_	IN	IN	_	34	mark	_	_
30	for	_	IN	IN	_	34	prep	_	_
31	once	_	RB	RB	_	30	pobj	_	_
32	I	_	PRP	PRP	_	34	nsubj	_	_
33	am	_	VBP	VBP	_	34	aux	_	_
34	breaking	_	VBG	VBG	_	24	ccomp	_	_
35	through	_	IN	IN	_	34	prep	_	_
36	my	_	PRP$	PRP$	_	37	poss	_	_
37	reserve	_	NN	NN	_	35	pobj	_	_
38	.	_	.	.	_	10	punct	_	_

Oracle:
(a / and, op, r / risk-01)
(a / and, op, u / understand-01)
(b3 / break-14, ARG0, i / i)
(b3 / break-14, ARG1, r3 / reserve)
(c / considerable, mod, s2 / such)
(d / danger, poss, b2 / baobab)
(l / little, degree, s / so)
(l2 / lose-02, ARG1, a2 / anyone)
(l2 / lose-02, location, a3 / asteroid)
(r / risk-01, ARG0, a2 / anyone)
(r / risk-01, degree, c / considerable)
(r3 / reserve, poss, i / i)
(u / understand-01, ARG1, d / danger)
(u / understand-01, degree, l / little)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),through,through,false), Span(31,32,List(1),I,i,false), Span(30,31,List(2),once,once,false), Span(28,29,List(3),that,that,false), Span(23,24,List(4),lost,lose-02,false), Span(22,23,List(5),get,get-01,false), Span(19,20,List(6),anyone,anyone,false), Span(18,19,List(7),by,by,false), Span(17,18,List(8),run,run-02,false), Span(12,13,List(9),such,such,false), Span(11,12,List(10),and,and,false), Span(9,10,List(11),understood,understand-01,false), Span(8,9,List(12),little,little,false), Span(7,8,List(13),so,so,false), Span(5,6,List(14),baobabs,baobab,false), Span(2,3,List(15),danger,danger,false), Span(0,1,List(16),But,contrast-01,false)),Map(2 -> once, 5 -> get-01, 12 -> little, 15 -> danger, 8 -> run-02, 7 -> by, 1 -> i, 4 -> lose-02, 11 -> understand-01, 14 -> baobab, 6 -> anyone, 0 -> through, 9 -> such, 16 -> contrast-01, 3 -> that, 10 -> and, 13 -> so),Map(s2 -> so, t -> through, b -> by, b2 -> baobab, s -> such, d -> danger, g -> get-01, a -> anyone, t2 -> that, l2 -> little, i -> i, r -> run-02, a2 -> and, c -> contrast-01, l -> lose-02, u -> understand-01, o -> once))),[Ljava.lang.String;@238d68ff,Annotation([Ljava.lang.String;@4b86805d,[Ljava.lang.String;@5852c06f,[Ljava.lang.String;@4149c063),Annotation([Ljava.lang.String;@9cb8225,[Ljava.lang.String;@76b07f29,[Ledu.cmu.lti.nlp.amr.Dependency;@38af9828),Annotation([Ljava.lang.String;@376a0d86,[Ljava.lang.String;@62656be4,[Ljava.lang.String;@17d919b6),Annotation([Ljava.lang.String;@53f3bdbd,[Ljava.lang.String;@34129c78,[Ledu.cmu.lti.nlp.amr.Entity;@7d61eb55))
AMR:
(a2 / and, op, r / run-02)
(a2 / and, op, u / understand-01)
(b / by, op, a / anyone)
(c / contrast-01, ARG1, s2 / so)
(c / contrast-01, ARG2, a2 / and)
(g / get-01, ARG0, t / through)
(g / get-01, ARG1, l / lose-02)
(g / get-01, time, t2 / that)
(l / lose-02, ARG0, i / i)
(l / lose-02, ARG1, a / anyone)
(r / run-02, ARG0, s / such)
(r / run-02, ARG1, d / danger)
(r / run-02, time, b / by)
(u / understand-01, ARG0, o / once)
(u / understand-01, ARG1, b2 / baobab)
(u / understand-01, mod, l2 / little)

Decoded in 327,110 microseconds
Sentence: " Children , "


--- Decoder1 ---

Sentence: " Children , "
word = "
Finding date entities
Possible invoked concepts: List()
word = Children
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, None)
Decoder1 Spans:
Span 1:   => amr-empty
Decoder1 feats:

Concepts:
id = 0 concept = amr-empty
Spans:
Span 0-1:   => amr-empty

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 3))
getNodeById = Map(0 -> amr-empty)
getNodeById2 = Map(0 -> amr-empty)
getNodeById = Map(0 -> amr-empty)
getNodeById2 = Map(0 -> amr-empty)
Node = 0
visited = Set(0)
Alg2 returning score = -7.062461301086108
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
child List()
OracleGraph nodes = List(child)
OracleGraph triples: 
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 3))
Oracle Span 1-2:  Children => child

Extra span:  => amr-empty
Missing span: Children => child
Dependencies:
1	"	_	JJ	JJ	_	2	amod	_	_
2	Children	_	NN	NN	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	"	_	''	''	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@222a59e6,Annotation([Ljava.lang.String;@6c7a164b,[Ljava.lang.String;@4c2bb6e0,[Ljava.lang.String;@3e62d773),Annotation([Ljava.lang.String;@4ef74c30,[Ljava.lang.String;@7283d3eb,[Ledu.cmu.lti.nlp.amr.Dependency;@638ef7ed),Annotation([Ljava.lang.String;@4bff7da0,[Ljava.lang.String;@3f1d2e23,[Ljava.lang.String;@536dbea0),Annotation([Ljava.lang.String;@47c81abf,[Ljava.lang.String;@776a6d9b,[Ledu.cmu.lti.nlp.amr.Entity;@21d03963))
AMR:


Decoded in 3,328 microseconds
Sentence: I say plainly , " watch out for the baobabs ! "


--- Decoder1 ---

Sentence: I say plainly , " watch out for the baobabs ! "
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = say
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)))
concept = PhraseConceptPair(List(say),(thing :ARG1-of say-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
score = 0
adding concept:PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
word = plainly
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = watch
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(watch),watch-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(watch),watch-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(watch),watch-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = out
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(out),out,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)))
concept = PhraseConceptPair(List(out),out,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
word = for
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = !
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.020663730542327237,PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false)),1)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(watch),watch-01,PhraseConceptFeatures(2.0,0.0,false,false)),5)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),9)), None, None)
Adding concept: baobab
nodeIds = List(0)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: watch-01
nodeIds = List(1)
concepts = List(watch-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(watch),watch-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: say-01
nodeIds = List(2)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(say),say-01,PhraseConceptFeatures(13.0,-0.9007865453381898,false,false))
feats:
bias 1.0
c|p -0.9007865453381898
len 1.0

score:
0.08021090098999578
Adding concept: i
nodeIds = List(3)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.10626010740822504
Decoder1 Spans:
Span 1:  baobabs => baobab
Span 2:  I => i
Span 3:  say => say-01
Span 4:  watch => watch-01
Decoder1 feats:
bias 4.0
c|p -1.2690548037377538
len 4.0

Concepts:
id = 2 concept = say-01
id = 1 concept = watch-01
id = 0 concept = baobab
id = 3 concept = i
Spans:
Span 9-10:  baobabs => baobab
Span 0-1:  I => i
Span 1-2:  say => say-01
Span 5-6:  watch => watch-01

rootDependencyPaths = List(List(5, 1, 0), List(5, 1), List(5, 1, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 7), List(5, 7, 9, 8), List(5, 7, 9), List(5, 10), List(5, 11))
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 133.83234437770776
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 131.83234437770776
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 129.83234437770776
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 127.83234437770774
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 125.83234437770774
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 1, 2)
Alg2 returning score = 123.90842250046752
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 122.83234437770774
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 1, 2)
Alg2 returning score = 120.90842250046752
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 119.83234437770774
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 1, 2)
Alg2 returning score = 117.90842250046752
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 116.83234437770774
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 1, 2)
Alg2 returning score = 114.90842250046752
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 113.83234437770774
getNodeById = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
getNodeById2 = Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i)
Node = 2
Node = 1
Node = 3
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = 112.36316853243264
Langrangian relaxation converged after 14 iterations. Delta = 0.0
Node.spans:
you List()
watch-02 List()
imperative List()
i List()
say-01 List()
plain List()
baobab List()
clearUnalignedNodes():  removing unaligned node: Some(y) / you
clearUnalignedNodes():  removing unaligned node: None / imperative
OracleGraph nodes = List(watch-02, i, say-01, plain, baobab)
OracleGraph triples: (s / say-01, ARG0, i / i)
(s / say-01, ARG1, w / watch-02)
(s / say-01, manner, p / plain)
(w / watch-02, ARG1, b / baobab)
rootDependencyPaths = List(List(5, 1, 0), List(5, 1), List(5, 1, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 7), List(5, 7, 9, 8), List(5, 7, 9), List(5, 10), List(5, 11))
Oracle Span 9-10:  baobabs => baobab
Oracle Span 0-1:  I => i
Oracle Span 2-3:  plainly => plain
Oracle Span 1-2:  say => say-01
Oracle Span 5-6:  watch => watch-02

Incorrect span: watch => watch-01
Missing span: watch => watch-02
Missing span: plainly => plain
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	say	_	VBP	VBP	_	6	ccomp	_	_
3	plainly	_	RB	RB	_	2	advmod	_	_
4	,	_	,	,	_	6	punct	_	_
5	"	_	''	''	_	6	punct	_	_
6	watch	_	VBP	VBP	_	0	root	_	_
7	out	_	RP	RP	_	6	prt	_	_
8	for	_	IN	IN	_	6	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	baobabs	_	NNS	NNS	_	8	pobj	_	_
11	!	_	.	.	_	6	punct	_	_
12	"	_	''	''	_	6	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, w / watch-02)
(s / say-01, manner, p / plain)
(w / watch-02, ARG1, b / baobab)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),baobabs,baobab,false), Span(5,6,List(1),watch,watch-01,false), Span(1,2,List(2),say,say-01,false), Span(0,1,List(3),I,i,false)),Map(2 -> say-01, 1 -> watch-01, 0 -> baobab, 3 -> i),Map(w -> watch-01, b -> baobab, s -> say-01, i -> i))),[Ljava.lang.String;@1f760b47,Annotation([Ljava.lang.String;@18ece7f4,[Ljava.lang.String;@3cce57c7,[Ljava.lang.String;@1cf56a1c),Annotation([Ljava.lang.String;@33f676f6,[Ljava.lang.String;@4c5ae43b,[Ledu.cmu.lti.nlp.amr.Dependency;@264f218),Annotation([Ljava.lang.String;@3576ddc2,[Ljava.lang.String;@35b74c5c,[Ljava.lang.String;@2e570ded),Annotation([Ljava.lang.String;@b86de0d,[Ljava.lang.String;@81d9a72,[Ledu.cmu.lti.nlp.amr.Entity;@747f281))
AMR:
(s / say-01, ARG0, i / i)
(w / watch-01, ARG0, b / baobab)
(w / watch-01, ARG1, s / say-01)

Decoded in 32,797 microseconds
Sentence: My friends , like myself , have been skirting this danger for a long time , without ever knowing it ; and so it is for them that I have worked so hard over this drawing .


--- Decoder1 ---

Sentence: My friends , like myself , have been skirting this danger for a long time , without ever knowing it ; and so it is for them that I have worked so hard over this drawing .
word = My
Finding date entities
Possible invoked concepts: List()
word = friends
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(friends),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(4.0,-1.0986122886681098,false,false)), PhraseConceptPair(List(friends),friend,PhraseConceptFeatures(2.0,-1.791759469228055,false,false)))
concept = PhraseConceptPair(List(friends),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(friends),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
concept = PhraseConceptPair(List(friends),friend,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = myself
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = been
Finding date entities
Possible invoked concepts: List()
word = skirting
Finding date entities
Possible invoked concepts: List()
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = danger
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = for
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = long
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)))
concept = PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
score = 0
adding concept:PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
word = time
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)), PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false)))
concept = PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
score = 0
adding concept:PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
concept = PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false))
score = 0
word = ,
Finding date entities
Possible invoked concepts: List()
word = without
Finding date entities
Possible invoked concepts: List()
word = ever
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(ever),ever,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)))
concept = PhraseConceptPair(List(ever),ever,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
score = 0
adding concept:PhraseConceptPair(List(ever),ever,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
word = knowing
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = ;
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false)))
concept = PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
score = 0
adding concept:PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = for
Finding date entities
Possible invoked concepts: List()
word = them
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = worked
Finding date entities
Possible invoked concepts: List()
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = hard
Finding date entities
Possible invoked concepts: List()
word = over
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(over),over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)), PhraseConceptPair(List(over),over-and-over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)))
concept = PhraseConceptPair(List(over),over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
concept = PhraseConceptPair(List(over),over-and-over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = drawing
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.01866307480060534,PhraseConceptPair(List(friends),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(4.0,-1.0986122886681098,false,false)),1)), None, None, None, None, Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),6)), None, None, Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),9)), Some((0.015753682017072397,PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),10)), None, None, Some((0.02880969217705289,PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)),13)), Some((0.017491641887458505,PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)),14)), None, None, Some((0.02880969217705289,PhraseConceptPair(List(ever),ever,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)),17)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),19)), Some((0.023341689372509314,PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false)),20)), Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),21)), Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),22)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),23)), None, None, None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),27)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),28)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),29)), None, Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),31)), None, None, Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),34)), None, None)
Adding concept: this
nodeIds = List(0)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.028452594267153575
Adding concept: so
nodeIds = List(1)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.053757826596927696
Adding concept: have-03
nodeIds = List(2)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.05392233094353234
Adding concept: i
nodeIds = List(3)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.0799715373617616
Adding concept: that
nodeIds = List(4)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.09658934575097738
Adding concept: it
nodeIds = List(5)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.11550846517478988
Adding concept: so
nodeIds = List(6)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.14081369750456402
Adding concept: and
nodeIds = List(7)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.15977163932697255
Adding concept: and
nodeIds = List(8)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(;),and,PhraseConceptFeatures(18.0,-0.6359887667199967,false,false))
feats:
bias 1.0
c|p -0.6359887667199967
len 1.0

score:
0.18311332869948188
Adding concept: it
nodeIds = List(9)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.20203244812329438
Adding concept: ever
nodeIds = List(10)
concepts = List(ever)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(ever),ever,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
feats:
bias 1.0
c|p -0.0953101798043249
len 1.0

score:
0.23084214030034728
Adding concept: time
nodeIds = List(11)
concepts = List(time)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
feats:
bias 1.0
c|p -1.2144441041932315
len 1.0

score:
0.24833378218780577
Adding concept: long
nodeIds = List(12)
concepts = List(long)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
feats:
bias 1.0
c|p -0.0953101798043249
len 1.0

score:
0.27714347436485864
Adding concept: danger
nodeIds = List(13)
concepts = List(danger)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(danger),danger,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.29289715638193103
Adding concept: this
nodeIds = List(14)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.3213497506490846
Adding concept: have-03
nodeIds = List(15)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.32151425499568925
Adding concept: (have-rel-role-91 :ARG2 friend)
nodeIds = List(16, 17)
concepts = List(have-rel-role-91, friend)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(friends),(have-rel-role-91 :ARG2 friend),PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.34017732979629456
Decoder1 Spans:
Span 1:  ; => and
Span 2:  and => and
Span 3:  danger => danger
Span 4:  ever => ever
Span 5:  friends => (have-rel-role-91 :ARG2 friend)
Span 6:  have => have-03
Span 7:  have => have-03
Span 8:  I => i
Span 9:  it => it
Span 10:  it => it
Span 11:  long => long
Span 12:  so => so
Span 13:  so => so
Span 14:  that => that
Span 15:  this => this
Span 16:  this => this
Span 17:  time => time
Decoder1 feats:
bias 17.0
c|p -16.41154640894452
len 17.0

Concepts:
id = 2 concept = have-03
id = 5 concept = it
id = 12 concept = long
id = 15 concept = have-03
id = 8 concept = and
id = 7 concept = and
id = 17 concept = friend
id = 1 concept = so
id = 4 concept = that
id = 11 concept = time
id = 14 concept = this
id = 6 concept = so
id = 0 concept = this
id = 9 concept = it
id = 16 concept = have-rel-role-91
id = 3 concept = i
id = 10 concept = ever
id = 13 concept = danger
Spans:
Span 20-21:  ; => and
Span 21-22:  and => and
Span 10-11:  danger => danger
Span 17-18:  ever => ever
Span 1-2:  friends => (have-rel-role-91 :ARG2 friend)
Span 29-30:  have => have-03
Span 6-7:  have => have-03
Span 28-29:  I => i
Span 23-24:  it => it
Span 19-20:  it => it
Span 13-14:  long => long
Span 31-32:  so => so
Span 22-23:  so => so
Span 27-28:  that => that
Span 34-35:  this => this
Span 9-10:  this => this
Span 14-15:  time => time

rootDependencyPaths = List(List(8, 1, 0), List(8, 1), List(8, 2), List(8, 3), List(8, 3, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 10, 9), List(8, 10), List(8, 10, 11), List(8, 10, 11, 14, 12), List(8, 10, 11, 14, 13), List(8, 10, 11, 14), List(8, 15), List(8, 16), List(8, 16, 18, 17), List(8, 16, 18), List(8, 16, 18, 19), List(8, 20), List(8, 21), List(8, 24, 22), List(8, 24, 23), List(8, 24), List(8, 24, 25), List(8, 24, 25, 26), List(8, 24, 30, 27), List(8, 24, 30, 28), List(8, 24, 30, 29), List(8, 24, 30), List(8, 24, 30, 32, 31), List(8, 24, 30, 32), List(8, 24, 30, 33), List(8, 24, 30, 33, 35, 34), List(8, 24, 30, 33, 35), List(8, 36))
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 0
Node = 11
Node = 13
Node = 9
Node = 16
Node = 12
Node = 14
Node = 17
Node = 6
Node = 3
Node = 5
Node = 2
Node = 10
Node = 1
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -876.8953962408176
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 10
Node = 1
Node = 4
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -900.5751599491035
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 10
Node = 11
Node = 5
Node = 2
Node = 12
Node = 1
Node = 0
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -918.8498022180014
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 1
Node = 10
Node = 0
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -934.0419574067042
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 10
Node = 11
Node = 5
Node = 2
Node = 12
Node = 1
Node = 4
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -949.56090709829
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 12
Node = 6
Node = 3
Node = 5
Node = 11
Node = 2
Node = 1
Node = 10
Node = 0
Node = 4
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -963.7600074308272
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 10
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -978.0501318241107
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 10
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -988.2422870128136
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 10
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -998.0643846749241
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 10
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1007.2422870128136
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 10
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1017.0643846749241
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 5
Node = 2
Node = 4
Node = 1
Node = 10
Node = 11
Node = 0
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1025.5043355058863
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 10
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1035.0643846749242
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 10
Node = 6
Node = 17
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1044.5056300650417
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 10
Node = 17
Node = 6
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 11
Node = 0
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1050.8141185150528
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 10
Node = 6
Node = 17
Node = 3
Node = 5
Node = 2
Node = 4
Node = 1
Node = 11
Node = 0
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1059.4237164225628
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 9
Node = 0
Node = 10
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1065.0692093290104
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 9
Node = 16
Node = 14
Node = 10
Node = 6
Node = 17
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 11
Node = 0
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1072.009311668543
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 16
Node = 14
Node = 17
Node = 6
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 4
Node = 1
Node = 9
Node = 0
Node = 10
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1079.0692093290104
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 0
Node = 13
Node = 9
Node = 16
Node = 14
Node = 10
Node = 17
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 11
Node = 6
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1085.4101665908227
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 0
Node = 13
Node = 16
Node = 14
Node = 17
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 6
Node = 4
Node = 1
Node = 9
Node = 10
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1091.0092195403317
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 0
Node = 13
Node = 16
Node = 14
Node = 17
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 11
Node = 9
Node = 6
Node = 12
Node = 10
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1093.2480006151654
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 0
Node = 13
Node = 9
Node = 16
Node = 14
Node = 10
Node = 17
Node = 3
Node = 5
Node = 2
Node = 6
Node = 4
Node = 1
Node = 11
Node = 12
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1097.8245713448428
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 0
Node = 13
Node = 16
Node = 14
Node = 17
Node = 3
Node = 11
Node = 5
Node = 2
Node = 12
Node = 6
Node = 4
Node = 1
Node = 9
Node = 10
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1101.4003568761127
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 13
Node = 16
Node = 14
Node = 17
Node = 3
Node = 2
Node = 4
Node = 1
Node = 5
Node = 11
Node = 9
Node = 0
Node = 6
Node = 12
Node = 10
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1103.0875614824852
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 9
Node = 0
Node = 13
Node = 16
Node = 10
Node = 14
Node = 11
Node = 17
Node = 3
Node = 5
Node = 12
Node = 2
Node = 6
Node = 4
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1107.3010586596351
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 9
Node = 0
Node = 13
Node = 16
Node = 10
Node = 14
Node = 11
Node = 17
Node = 3
Node = 5
Node = 12
Node = 2
Node = 6
Node = 4
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1108.909921323854
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 9
Node = 0
Node = 13
Node = 16
Node = 10
Node = 14
Node = 11
Node = 17
Node = 3
Node = 5
Node = 12
Node = 2
Node = 6
Node = 4
Node = 1
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 0, 16, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1110.3010586596351
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 15
Node = 9
Node = 13
Node = 16
Node = 10
Node = 14
Node = 11
Node = 17
Node = 3
Node = 5
Node = 12
Node = 2
Node = 6
Node = 4
Node = 1
Node = 0
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1111.1406195269547
getNodeById = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger)
getNodeById2 = Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 9 -> it, 0 -> this, 16 -> have-rel-role-91, 10 -> ever, 3 -> i, 13 -> danger)
Node = 8
Node = 7
Node = 16
Node = 11
Node = 17
Node = 3
Node = 15
Node = 5
Node = 12
Node = 2
Node = 9
Node = 13
Node = 6
Node = 4
Node = 1
Node = 0
Node = 10
Node = 14
visited = Set(3, 4, 5, 13, 6, 14, 7, 15, 16, 0, 17, 1, 8, 2, 10, 9, 11, 12)
Alg2 returning score = -1111.8838295890348
Langrangian relaxation converged after 30 iterations. Delta = 0.0
Node.spans:
and List()
- List()
so List()
this List()
person List()
friend List()
hard List()
work-01 List()
time List()
draw-01 List()
i List()
long List()
picture List()
skirt-02 List()
danger List()
ever List()
cause-01 List()
this List()
know-01 List()
have-rel-role-91 List()
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(p) / picture
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
OracleGraph nodes = List(and, so, this, person, friend, hard, work-01, time, draw-01, i, long, skirt-02, danger, ever, this, know-01, have-rel-role-91)
OracleGraph triples: (a / and, op, i / i)
(a / and, op, p2 / person)
(d / danger, mod, t / this)
(h / hard, degree, s2 / so)
(h2 / have-rel-role-91, ARG0, p2 / person)
(h2 / have-rel-role-91, ARG1, i / i)
(h2 / have-rel-role-91, ARG2, f / friend)
(k / know-01, ARG0, p2 / person)
(k / know-01, ARG1, s / skirt-02)
(k / know-01, time, e / ever)
(s / skirt-02, ARG0, a / and)
(s / skirt-02, ARG1, d / danger)
(s / skirt-02, duration, t2 / time)
(t2 / time, mod, l / long)
(w / work-01, ARG0, i / i)
(w / work-01, beneficiary, p2 / person)
(w / work-01, manner, h / hard)
rootDependencyPaths = List(List(8, 1, 0), List(8, 1), List(8, 2), List(8, 3), List(8, 3, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 10, 9), List(8, 10), List(8, 10, 11), List(8, 10, 11, 14, 12), List(8, 10, 11, 14, 13), List(8, 10, 11, 14), List(8, 15), List(8, 16), List(8, 16, 18, 17), List(8, 16, 18), List(8, 16, 18, 19), List(8, 20), List(8, 21), List(8, 24, 22), List(8, 24, 23), List(8, 24), List(8, 24, 25), List(8, 24, 25, 26), List(8, 24, 30, 27), List(8, 24, 30, 28), List(8, 24, 30, 29), List(8, 24, 30), List(8, 24, 30, 32, 31), List(8, 24, 30, 32), List(8, 24, 30, 33), List(8, 24, 30, 33, 35, 34), List(8, 24, 30, 33, 35), List(8, 36))
Oracle Span 20-21:  ; => and
Oracle Span 10-11:  danger => danger
Oracle Span 35-36:  drawing => draw-01
Oracle Span 17-18:  ever => ever
Oracle Span 1-2:  friends => friend
Oracle Span 32-33:  hard => hard
Oracle Span 6-7:  have => (person :ARG0-of have-rel-role-91)
Oracle Span 28-29:  I => i
Oracle Span 18-19:  knowing => know-01
Oracle Span 13-14:  long => long
Oracle Span 8-9:  skirting => skirt-02
Oracle Span 22-23:  so => so
Oracle Span 9-10:  this => this
Oracle Span 34-35:  this => this
Oracle Span 14-15:  time => time
Oracle Span 30-31:  worked => work-01

Extra span: so => so
Extra span: have => have-03
Extra span: that => that
Extra span: it => it
Extra span: and => and
Extra span: it => it
Incorrect span: have => have-03
Incorrect span: friends => (have-rel-role-91 :ARG2 friend)
Missing span: skirting => skirt-02
Missing span: knowing => know-01
Missing span: friends => friend
Missing span: worked => work-01
Missing span: hard => hard
Missing span: drawing => draw-01
Missing span: have => (person :ARG0-of have-rel-role-91)
Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	friends	_	NNS	NNS	_	9	nsubj	_	_
3	,	_	,	,	_	9	punct	_	_
4	like	_	IN	IN	_	9	prep	_	_
5	myself	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	have	_	VBP	VBP	_	9	aux	_	_
8	been	_	VBN	VBN	_	9	aux	_	_
9	skirting	_	VBG	VBG	_	0	root	_	_
10	this	_	DT	DT	_	11	det	_	_
11	danger	_	NN	NN	_	9	dobj	_	_
12	for	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	long	_	JJ	JJ	_	15	amod	_	_
15	time	_	NN	NN	_	12	pobj	_	_
16	,	_	,	,	_	9	punct	_	_
17	without	_	IN	IN	_	9	prep	_	_
18	ever	_	RB	RB	_	19	advmod	_	_
19	knowing	_	VBG	VBG	_	17	pcomp	_	_
20	it	_	PRP	PRP	_	19	dobj	_	_
21	;	_	:	:	_	9	punct	_	_
22	and	_	CC	CC	_	9	cc	_	_
23	so	_	IN	IN	_	25	dep	_	_
24	it	_	PRP	PRP	_	25	nsubj	_	_
25	is	_	VBZ	VBZ	_	9	conj	_	_
26	for	_	IN	IN	_	25	prep	_	_
27	them	_	PRP	PRP	_	26	pobj	_	_
28	that	_	IN	IN	_	31	mark	_	_
29	I	_	PRP	PRP	_	31	nsubj	_	_
30	have	_	VBP	VBP	_	31	aux	_	_
31	worked	_	VBN	VBN	_	25	ccomp	_	_
32	so	_	RB	RB	_	33	advmod	_	_
33	hard	_	JJ	JJ	_	31	acomp	_	_
34	over	_	IN	IN	_	31	prep	_	_
35	this	_	DT	DT	_	36	det	_	_
36	drawing	_	NN	NN	_	34	pobj	_	_
37	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, i / i)
(a / and, op, p2 / person)
(d / danger, mod, t / this)
(h / hard, degree, s2 / so)
(h2 / have-rel-role-91, ARG0, p2 / person)
(h2 / have-rel-role-91, ARG1, i / i)
(h2 / have-rel-role-91, ARG2, f / friend)
(k / know-01, ARG0, p2 / person)
(k / know-01, ARG1, s / skirt-02)
(k / know-01, time, e / ever)
(s / skirt-02, ARG0, a / and)
(s / skirt-02, ARG1, d / danger)
(s / skirt-02, duration, t2 / time)
(t2 / time, mod, l / long)
(w / work-01, ARG0, i / i)
(w / work-01, beneficiary, p2 / person)
(w / work-01, manner, h / hard)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),this,this,false), Span(31,32,List(1),so,so,false), Span(29,30,List(2),have,have-03,false), Span(28,29,List(3),I,i,false), Span(27,28,List(4),that,that,false), Span(23,24,List(5),it,it,false), Span(22,23,List(6),so,so,false), Span(21,22,List(7),and,and,false), Span(20,21,List(8),;,and,false), Span(19,20,List(9),it,it,false), Span(17,18,List(10),ever,ever,false), Span(14,15,List(11),time,time,false), Span(13,14,List(12),long,long,false), Span(10,11,List(13),danger,danger,false), Span(9,10,List(14),this,this,false), Span(6,7,List(15),have,have-03,false), Span(1,2,List(17, 16),friends,(have-rel-role-91 :ARG2 friend),false)),Map(2 -> have-03, 5 -> it, 12 -> long, 15 -> have-03, 8 -> and, 7 -> and, 17 -> friend, 1 -> so, 4 -> that, 11 -> time, 14 -> this, 6 -> so, 0 -> this, 9 -> it, 16 -> have-rel-role-91, 3 -> i, 10 -> ever, 13 -> danger),Map(e -> ever, t4 -> this, h -> have-03, h2 -> have-03, s2 -> so, t -> this, s -> so, d -> danger, i3 -> it, t3 -> time, a -> and, t2 -> that, i2 -> it, i -> i, a2 -> and, h3 -> have-rel-role-91, l -> long, f -> friend))),[Ljava.lang.String;@1169afe1,Annotation([Ljava.lang.String;@2ca26d77,[Ljava.lang.String;@4808bc9b,[Ljava.lang.String;@70e38ce1),Annotation([Ljava.lang.String;@2ca923bb,[Ljava.lang.String;@13df2a8c,[Ledu.cmu.lti.nlp.amr.Dependency;@1ebea008),Annotation([Ljava.lang.String;@72d6b3ba,[Ljava.lang.String;@1787f2a0,[Ljava.lang.String;@7de62196),Annotation([Ljava.lang.String;@163370c2,[Ljava.lang.String;@51bf5add,[Ledu.cmu.lti.nlp.amr.Entity;@7905a0b8))
AMR:
(a2 / and, op, a / and)
(d / danger, mod, t4 / this)
(e / ever, mod, i3 / it)
(h / have-03, ARG0, t / this)
(h / have-03, ARG1, i / i)
(h / have-03, ARG2, s / so)
(h2 / have-03, ARG0, h3 / have-rel-role-91)
(h2 / have-03, ARG2, d / danger)
(h2 / have-03, location, i3 / it)
(h3 / have-rel-role-91, ARG0, i2 / it)
(h3 / have-rel-role-91, ARG1, i / i)
(h3 / have-rel-role-91, ARG2, f / friend)
(h3 / have-rel-role-91, location, t3 / time)
(h3 / have-rel-role-91, mod, a2 / and)
(i2 / it, mod, s2 / so)
(t2 / that, op, h / have-03)
(t3 / time, mod, l / long)

Decoded in 544,360 microseconds
Sentence: The lesson which I pass on by this means is worth all the trouble it has cost me .


--- Decoder1 ---

Sentence: The lesson which I pass on by this means is worth all the trouble it has cost me .
word = The
Finding date entities
Possible invoked concepts: List()
word = lesson
Finding date entities
Possible invoked concepts: List()
word = which
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = pass
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = by
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)))
concept = PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
score = 0
adding concept:PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = means
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = worth
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(worth),worth,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)))
concept = PhraseConceptPair(List(worth),worth,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
score = 0
adding concept:PhraseConceptPair(List(worth),worth,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = trouble
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(trouble),trouble,PhraseConceptFeatures(2.0,-1.791759469228055,false,false)), PhraseConceptPair(List(trouble),trouble-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false)))
concept = PhraseConceptPair(List(trouble),trouble,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
score = 0
adding concept:PhraseConceptPair(List(trouble),trouble,PhraseConceptFeatures(2.0,-1.791759469228055,false,false))
concept = PhraseConceptPair(List(trouble),trouble-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
score = 0
adding concept:PhraseConceptPair(List(trouble),trouble-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = has
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)))
concept = PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
score = 0
adding concept:PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
word = cost
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),3)), None, None, Some((0.008432529785513981,PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)),6)), Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),7)), Some((0.029773585223834276,PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false)),8)), None, Some((0.022763633620453336,PhraseConceptPair(List(worth),worth,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false)),10)), Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),11)), None, Some((0.01866307480060534,PhraseConceptPair(List(trouble),trouble-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false)),13)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),14)), Some((0.014562515980757347,PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false)),15)), None, None, None)
Adding concept: have-03
nodeIds = List(0)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(has),have-03,PhraseConceptFeatures(6.0,-1.5040773967762742,false,false))
feats:
bias 1.0
c|p -1.5040773967762742
len 1.0

score:
0.014562515980757335
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.03348163540456983
Adding concept: trouble-01
nodeIds = List(2)
concepts = List(trouble-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(trouble),trouble-01,PhraseConceptFeatures(4.0,-1.0986122886681098,false,false))
feats:
bias 1.0
c|p -1.0986122886681098
len 1.0

score:
0.052144710205175165
Adding concept: all
nodeIds = List(3)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.07140637522664785
Adding concept: worth
nodeIds = List(4)
concepts = List(worth)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(worth),worth,PhraseConceptFeatures(1.0,-0.6931471805599453,false,false))
feats:
bias 1.0
c|p -0.6931471805599453
len 1.0

score:
0.09417000884710118
Adding concept: mean-01
nodeIds = List(5)
concepts = List(mean-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(means),mean-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.12394359407093546
Adding concept: this
nodeIds = List(6)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.15239618833808904
Adding concept: by
nodeIds = List(7)
concepts = List(by)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
feats:
bias 1.0
c|p -2.1102132003465894
len 1.0

score:
0.16082871812360303
Adding concept: i
nodeIds = List(8)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.18687792454183227
Decoder1 Spans:
Span 1:  all => all
Span 2:  by => by
Span 3:  has => have-03
Span 4:  I => i
Span 5:  it => it
Span 6:  means => mean-01
Span 7:  this => this
Span 8:  trouble => trouble-01
Span 9:  worth => worth
Decoder1 feats:
bias 9.0
c|p -8.017656405129147
len 9.0

Concepts:
id = 2 concept = trouble-01
id = 5 concept = mean-01
id = 8 concept = i
id = 7 concept = by
id = 1 concept = it
id = 4 concept = worth
id = 6 concept = this
id = 0 concept = have-03
id = 3 concept = all
Spans:
Span 11-12:  all => all
Span 6-7:  by => by
Span 15-16:  has => have-03
Span 3-4:  I => i
Span 14-15:  it => it
Span 8-9:  means => mean-01
Span 7-8:  this => this
Span 13-14:  trouble => trouble-01
Span 10-11:  worth => worth

rootDependencyPaths = List(List(10, 1, 0), List(10, 1), List(10, 1, 4, 2), List(10, 1, 4, 3), List(10, 1, 4), List(10, 1, 4, 5), List(10, 1, 4, 6), List(10, 1, 4, 6, 8, 7), List(10, 1, 4, 6, 8), List(10, 9), List(10), List(10, 13, 11), List(10, 13, 12), List(10, 13), List(10, 13, 16, 14), List(10, 13, 16, 15), List(10, 13, 16), List(10, 13, 16, 17), List(10, 18))
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -277.87914876917046
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -281.87914876917046
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -285.87914876917046
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -289.87914876917046
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -293.87914876917046
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -297.87914876917046
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -301.87914876917046
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -305.63851177030483
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -307.63851177030483
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -309.63851177030483
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 1
Node = 2
Node = 3
Node = 4
Node = 5
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -311.63851177030483
getNodeById = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
getNodeById2 = Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all)
Node = 0
Node = 2
Node = 1
Node = 3
Node = 4
Node = 5
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -313.4493662366705
Langrangian relaxation converged after 12 iterations. Delta = 0.0
Node.spans:
cost-01 List()
this List()
lesson List()
i List()
pass-09 List()
all List()
trouble List()
worth List()
OracleGraph nodes = List(cost-01, this, lesson, i, pass-09, all, trouble, worth)
OracleGraph triples: (c / cost-01, ARG1, l / lesson)
(c / cost-01, ARG2, t / trouble)
(c / cost-01, ARG3, i / i)
(p / pass-09, ARG0, i / i)
(p / pass-09, ARG1, l / lesson)
(p / pass-09, manner, t2 / this)
(t / trouble, mod, a / all)
(w / worth, domain, l / lesson)
(w / worth, extent, t / trouble)
rootDependencyPaths = List(List(10, 1, 0), List(10, 1), List(10, 1, 4, 2), List(10, 1, 4, 3), List(10, 1, 4), List(10, 1, 4, 5), List(10, 1, 4, 6), List(10, 1, 4, 6, 8, 7), List(10, 1, 4, 6, 8), List(10, 9), List(10), List(10, 13, 11), List(10, 13, 12), List(10, 13), List(10, 13, 16, 14), List(10, 13, 16, 15), List(10, 13, 16), List(10, 13, 16, 17), List(10, 18))
Oracle Span 11-12:  all => all
Oracle Span 16-17:  cost => cost-01
Oracle Span 3-4:  I => i
Oracle Span 1-2:  lesson => lesson
Oracle Span 4-5:  pass => pass-09
Oracle Span 7-8:  this => this
Oracle Span 13-14:  trouble => trouble
Oracle Span 10-11:  worth => worth

Extra span: has => have-03
Extra span: it => it
Incorrect span: trouble => trouble-01
Extra span: means => mean-01
Extra span: by => by
Missing span: lesson => lesson
Missing span: pass => pass-09
Missing span: trouble => trouble
Missing span: cost => cost-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	lesson	_	NN	NN	_	11	nsubj	_	_
3	which	_	WDT	WDT	_	5	dobj	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	pass	_	VBP	VBP	_	2	rcmod	_	_
6	on	_	RP	RP	_	5	prt	_	_
7	by	_	IN	IN	_	5	prep	_	_
8	this	_	DT	DT	_	9	det	_	_
9	means	_	NNS	NNS	_	7	pobj	_	_
10	is	_	VBZ	VBZ	_	11	cop	_	_
11	worth	_	JJ	JJ	_	0	root	_	_
12	all	_	PDT	PDT	_	14	predet	_	_
13	the	_	DT	DT	_	14	det	_	_
14	trouble	_	NN	NN	_	11	dep	_	_
15	it	_	PRP	PRP	_	17	nsubj	_	_
16	has	_	VBZ	VBZ	_	17	aux	_	_
17	cost	_	VBN	VBN	_	14	rcmod	_	_
18	me	_	PRP	PRP	_	17	dobj	_	_
19	.	_	.	.	_	11	punct	_	_

Oracle:
(c / cost-01, ARG1, l / lesson)
(c / cost-01, ARG2, t / trouble)
(c / cost-01, ARG3, i / i)
(p / pass-09, ARG0, i / i)
(p / pass-09, ARG1, l / lesson)
(p / pass-09, manner, t2 / this)
(t / trouble, mod, a / all)
(w / worth, domain, l / lesson)
(w / worth, extent, t / trouble)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),has,have-03,false), Span(14,15,List(1),it,it,false), Span(13,14,List(2),trouble,trouble-01,false), Span(11,12,List(3),all,all,false), Span(10,11,List(4),worth,worth,false), Span(8,9,List(5),means,mean-01,false), Span(7,8,List(6),this,this,false), Span(6,7,List(7),by,by,false), Span(3,4,List(8),I,i,false)),Map(2 -> trouble-01, 5 -> mean-01, 8 -> i, 7 -> by, 1 -> it, 4 -> worth, 6 -> this, 0 -> have-03, 3 -> all),Map(w -> worth, h -> have-03, b -> by, t -> trouble-01, m -> mean-01, a -> all, i2 -> i, t2 -> this, i -> it))),[Ljava.lang.String;@35a3d49f,Annotation([Ljava.lang.String;@389b0789,[Ljava.lang.String;@13d9cbf5,[Ljava.lang.String;@478db956),Annotation([Ljava.lang.String;@6ca18a14,[Ljava.lang.String;@c667f46,[Ledu.cmu.lti.nlp.amr.Dependency;@51bd8b5c),Annotation([Ljava.lang.String;@7b50df34,[Ljava.lang.String;@1b410b60,[Ljava.lang.String;@2462cb01),Annotation([Ljava.lang.String;@19b843ba,[Ljava.lang.String;@64ec96c6,[Ledu.cmu.lti.nlp.amr.Entity;@77659b30))
AMR:
(b / by, op, m / mean-01)
(h / have-03, ARG1, i / it)
(h / have-03, time, t / trouble-01)
(m / mean-01, ARG0, i2 / i)
(m / mean-01, ARG1, a / all)
(m / mean-01, mod, t2 / this)
(t / trouble-01, ARG1, w / worth)
(t / trouble-01, mod, a / all)

Decoded in 86,554 microseconds
Sentence: Perhaps you will ask me , " Why are there no other drawing in this book as magnificent and impressive as this drawing of the baobabs ? "


--- Decoder1 ---

Sentence: Perhaps you will ask me , " Why are there no other drawing in this book as magnificent and impressive as this drawing of the baobabs ? "
word = Perhaps
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = will
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(will),will,PhraseConceptFeatures(1.0,-4.290459441148391,false,false)))
concept = PhraseConceptPair(List(will),will,PhraseConceptFeatures(1.0,-4.290459441148391,false,false))
score = 0
word = ask
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(ask),ask-01,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(ask),ask-01,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(ask),ask-01,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
word = me
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = Why
Finding date entities
Possible invoked concepts: List()
word = are
Finding date entities
Possible invoked concepts: List()
word = there
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)))
concept = PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
score = 0
adding concept:PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
word = no
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)), PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false)))
concept = PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
score = 0
adding concept:PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
concept = PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false))
score = 0
word = other
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false)))
concept = PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false))
score = 0
adding concept:PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false))
word = drawing
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = book
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false))
word = as
Finding date entities
Possible invoked concepts: List()
word = magnificent
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(magnificent),magnificence,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false)), PhraseConceptPair(List(magnificent),magnificent,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)))
concept = PhraseConceptPair(List(magnificent),magnificence,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
score = 0
adding concept:PhraseConceptPair(List(magnificent),magnificence,PhraseConceptFeatures(2.0,-1.6094379124341003,false,false))
concept = PhraseConceptPair(List(magnificent),magnificent,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
score = 0
adding concept:PhraseConceptPair(List(magnificent),magnificent,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = impressive
Finding date entities
Possible invoked concepts: List()
word = as
Finding date entities
Possible invoked concepts: List()
word = this
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)))
concept = PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
score = 0
adding concept:PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
word = drawing
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),1)), None, Some((0.015753682017072397,PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false)),3)), None, None, None, None, None, Some((0.018974275428782817,PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false)),9)), Some((0.012421585574902895,PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)),10)), Some((0.02858241918751923,PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false)),11)), None, None, Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),14)), Some((0.029773585223834276,PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false)),15)), None, Some((0.01759754047199135,PhraseConceptPair(List(magnificent),magnificent,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)),17)), Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),18)), None, None, Some((0.028452594267153578,PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false)),21)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),25)), None, None)
Adding concept: baobab
nodeIds = List(0)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: this
nodeIds = List(1)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.05822617949098785
Adding concept: and
nodeIds = List(2)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.07718412131339639
Adding concept: magnificent
nodeIds = List(3)
concepts = List(magnificent)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(magnificent),magnificent,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
feats:
bias 1.0
c|p -1.2039728043259361
len 1.0

score:
0.09478166178538774
Adding concept: book
nodeIds = List(4)
concepts = List(book)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(book),book,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.12455524700922202
Adding concept: this
nodeIds = List(5)
concepts = List(this)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(this),this,PhraseConceptFeatures(43.0,-0.13062018241706422,false,false))
feats:
bias 1.0
c|p -0.13062018241706422
len 1.0

score:
0.1530078412763756
Adding concept: other
nodeIds = List(6)
concepts = List(other)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(other),other,PhraseConceptFeatures(16.0,-0.11778303565638351,false,false))
feats:
bias 1.0
c|p -0.11778303565638351
len 1.0

score:
0.18159026046389481
Adding concept: -
nodeIds = List(7)
concepts = List(-)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
feats:
bias 1.0
c|p -1.7157735622501329
len 1.0

score:
0.1940118460387977
Adding concept: there
nodeIds = List(8)
concepts = List(there)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(there),there,PhraseConceptFeatures(11.0,-1.067840630001356,false,false))
feats:
bias 1.0
c|p -1.067840630001356
len 1.0

score:
0.21298612146758053
Adding concept: ask-02
nodeIds = List(9)
concepts = List(ask-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(ask),ask-02,PhraseConceptFeatures(2.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.22873980348465292
Adding concept: you
nodeIds = List(10)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.2558851665795083
Decoder1 Spans:
Span 1:  and => and
Span 2:  ask => ask-02
Span 3:  baobabs => baobab
Span 4:  book => book
Span 5:  magnificent => magnificent
Span 6:  no => -
Span 7:  other => other
Span 8:  there => there
Span 9:  this => this
Span 10:  this => this
Span 11:  you => you
Decoder1 feats:
bias 11.0
c|p -7.0822402537043105
len 11.0

Concepts:
id = 2 concept = and
id = 5 concept = this
id = 8 concept = there
id = 7 concept = -
id = 1 concept = this
id = 4 concept = book
id = 6 concept = other
id = 9 concept = ask-02
id = 0 concept = baobab
id = 10 concept = you
id = 3 concept = magnificent
Spans:
Span 18-19:  and => and
Span 3-4:  ask => ask-02
Span 25-26:  baobabs => baobab
Span 15-16:  book => book
Span 17-18:  magnificent => magnificent
Span 10-11:  no => -
Span 11-12:  other => other
Span 9-10:  there => there
Span 21-22:  this => this
Span 14-15:  this => this
Span 1-2:  you => you

WARNING: Adding a variable name to a span
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 6), List(3, 12, 7), List(3, 12, 8), List(3, 12, 9), List(3, 12, 10), List(3, 12, 11), List(3, 12), List(3, 12, 13), List(3, 12, 13, 15, 14), List(3, 12, 13, 15), List(3, 12, 13, 15, 16), List(3, 12, 13, 15, 16, 17), List(3, 18), List(3, 19), List(3, 19, 20), List(3, 19, 20, 22, 21), List(3, 19, 20, 22), List(3, 19, 20, 22, 23), List(3, 19, 20, 22, 23, 25, 24), List(3, 19, 20, 22, 23, 25), List(3, 26), List(3, 27))
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 8
Node = 1
Node = 10
Node = 5
Node = 3
Node = 7
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -437.08161611229366
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 1
Node = 7
Node = 10
Node = 5
Node = 3
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -444.1628192145257
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 8
Node = 1
Node = 10
Node = 5
Node = 3
Node = 7
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -452.08161611229366
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 1
Node = 7
Node = 10
Node = 5
Node = 3
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -459.1628192145257
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 8
Node = 1
Node = 10
Node = 5
Node = 3
Node = 7
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -467.08161611229355
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 1
Node = 7
Node = 10
Node = 5
Node = 3
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -474.1628192145257
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 8
Node = 1
Node = 10
Node = 5
Node = 3
Node = 7
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -482.08161611229355
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 1
Node = 7
Node = 10
Node = 5
Node = 3
Node = 8
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -489.1628192145257
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 4
Node = 0
Node = 8
Node = 1
Node = 10
Node = 5
Node = 3
Node = 7
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -497.08161611229355
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 0
Node = 1
Node = 7
Node = 10
Node = 8
Node = 6
Node = 5
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -500.95556455021983
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 0
Node = 8
Node = 1
Node = 10
Node = 7
Node = 6
Node = 5
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -505.87436144798767
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 0
Node = 8
Node = 1
Node = 10
Node = 7
Node = 6
Node = 5
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -507.87436144798767
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 0
Node = 8
Node = 1
Node = 10
Node = 7
Node = 6
Node = 5
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -509.87436144798767
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 0
Node = 1
Node = 8
Node = 10
Node = 7
Node = 6
Node = 5
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -510.9850389190508
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 0
Node = 8
Node = 1
Node = 10
Node = 7
Node = 6
Node = 5
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -512.8743614479877
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 0
Node = 1
Node = 8
Node = 10
Node = 7
Node = 6
Node = 5
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -513.9850389190508
getNodeById = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent)
getNodeById2 = Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 0 -> baobab, 9 -> ask-02, 3 -> magnificent, 10 -> you)
Node = 2
Node = 9
Node = 1
Node = 0
Node = 8
Node = 10
Node = 7
Node = 6
Node = 5
Node = 4
Node = 3
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -515.44305196966
Langrangian relaxation converged after 17 iterations. Delta = 0.0
Node.spans:
picture List()
equal List()
you List()
book List()
- List()
picture List()
i List()
this List()
equal List()
draw-01 List()
other List()
impress-01 List()
this List()
ask-01 List()
thing List()
possible List()
cause-01 List()
draw-01 List()
baobab List()
magnificent List()
clearUnalignedNodes():  removing unaligned node: Some(p3) / picture
clearUnalignedNodes():  removing unaligned node: Some(e2) / equal
clearUnalignedNodes():  removing unaligned node: Some(p2) / picture
clearUnalignedNodes():  removing unaligned node: Some(i2) / i
clearUnalignedNodes():  removing unaligned node: Some(e) / equal
clearUnalignedNodes():  removing unaligned node: Some(t3) / thing
clearUnalignedNodes():  removing unaligned node: Some(p) / possible
clearUnalignedNodes():  removing unaligned node: Some(c) / cause-01
WARNING: Adding a variable name to a span
OracleGraph nodes = List(you, book, -, this, draw-01, other, impress-01, this, ask-01, draw-01, baobab, magnificent)
OracleGraph triples: (a / ask-01, ARG0, y / you)
(b / book, mod, t / this)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 5), List(3, 6), List(3, 12, 7), List(3, 12, 8), List(3, 12, 9), List(3, 12, 10), List(3, 12, 11), List(3, 12), List(3, 12, 13), List(3, 12, 13, 15, 14), List(3, 12, 13, 15), List(3, 12, 13, 15, 16), List(3, 12, 13, 15, 16, 17), List(3, 18), List(3, 19), List(3, 19, 20), List(3, 19, 20, 22, 21), List(3, 19, 20, 22), List(3, 19, 20, 22, 23), List(3, 19, 20, 22, 23, 25, 24), List(3, 19, 20, 22, 23, 25), List(3, 26), List(3, 27))
Oracle Span 3-4:  ask => ask-01
Oracle Span 25-26:  baobabs => baobab
Oracle Span 15-16:  book => book
Oracle Span 12-13:  drawing => draw-01
Oracle Span 22-23:  drawing => draw-01
Oracle Span 19-20:  impressive => impress-01
Oracle Span 17-18:  magnificent => magnificent
Oracle Span 10-11:  no => -
Oracle Span 11-12:  other => other
Oracle Span 14-15:  this => this
Oracle Span 21-22:  this => this
Oracle Span 1-2:  you => you

Extra span: and => and
Extra span: there => there
Incorrect span: ask => ask-02
Missing span: ask => ask-01
Missing span: drawing => draw-01
Missing span: drawing => draw-01
Missing span: impressive => impress-01
Dependencies:
1	Perhaps	_	RB	RB	_	4	advmod	_	_
2	you	_	PRP	PRP	_	4	nsubj	_	_
3	will	_	MD	MD	_	4	aux	_	_
4	ask	_	VB	VB	_	0	root	_	_
5	me	_	PRP	PRP	_	4	dobj	_	_
6	,	_	,	,	_	4	punct	_	_
7	"	_	''	''	_	4	punct	_	_
8	Why	_	WRB	WRB	_	13	advmod	_	_
9	are	_	VBP	VBP	_	13	cop	_	_
10	there	_	RB	RB	_	13	advmod	_	_
11	no	_	DT	DT	_	13	det	_	_
12	other	_	JJ	JJ	_	13	amod	_	_
13	drawing	_	NN	NN	_	4	advcl	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	this	_	DT	DT	_	16	det	_	_
16	book	_	NN	NN	_	14	pobj	_	_
17	as	_	IN	IN	_	16	prep	_	_
18	magnificent	_	NNP	NNP	_	17	pobj	_	_
19	and	_	CC	CC	_	4	cc	_	_
20	impressive	_	JJ	JJ	_	4	conj	_	_
21	as	_	IN	IN	_	20	prep	_	_
22	this	_	DT	DT	_	23	det	_	_
23	drawing	_	NN	NN	_	21	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	baobabs	_	NNS	NNS	_	24	pobj	_	_
27	?	_	.	.	_	4	punct	_	_
28	"	_	''	''	_	4	punct	_	_

Oracle:
(a / ask-01, ARG0, y / you)
(b / book, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),baobabs,baobab,false), Span(21,22,List(1),this,this,false), Span(18,19,List(2),and,and,false), Span(17,18,List(3),magnificent,magnificent,false), Span(15,16,List(4),book,book,false), Span(14,15,List(5),this,this,false), Span(11,12,List(6),other,other,false), Span(10,11,List(7),no,-,false), Span(9,10,List(8),there,there,false), Span(3,4,List(9),ask,ask-02,false), Span(1,2,List(10),you,you,false)),Map(2 -> and, 5 -> this, 8 -> there, 7 -> -, 1 -> this, 4 -> book, 6 -> other, 9 -> ask-02, 0 -> baobab, 10 -> you, 3 -> magnificent),Map(t -> this, b -> baobab, b2 -> book, m -> magnificent, y -> you, t3 -> there, a -> and, t2 -> this, a2 -> ask-02, - -> -, o -> other))),[Ljava.lang.String;@456d6c1e,Annotation([Ljava.lang.String;@1e13529a,[Ljava.lang.String;@1ec9bd38,[Ljava.lang.String;@452e19ca),Annotation([Ljava.lang.String;@6b0d80ed,[Ljava.lang.String;@6f8e8894,[Ledu.cmu.lti.nlp.amr.Dependency;@3cfdd820),Annotation([Ljava.lang.String;@928763c,[Ljava.lang.String;@e25951c,[Ljava.lang.String;@15f47664),Annotation([Ljava.lang.String;@471a9022,[Ljava.lang.String;@dc9876b,[Ledu.cmu.lti.nlp.amr.Entity;@2f666ebb))
AMR:
(- / -, mod, t3 / there)
(a / and, op, a2 / ask-02)
(a2 / ask-02, ARG0, y / you)
(a2 / ask-02, ARG1, t3 / there)
(a2 / ask-02, ARG2, b / baobab)
(a2 / ask-02, mod, t / this)
(b2 / book, mod, t2 / this)
(m / magnificent, consist, b2 / book)
(o / other, compared-to, t2 / this)
(o / other, mod, t3 / there)

Decoded in 168,288 microseconds
Sentence: The reply is simple .


--- Decoder1 ---

Sentence: The reply is simple .
word = The
Finding date entities
Possible invoked concepts: List()
word = reply
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = simple
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(simple),simple,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(simple),simple,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(simple),simple,PhraseConceptFeatures(3.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.029773585223834276,PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false)),1)), None, Some((0.029773585223834276,PhraseConceptPair(List(simple),simple,PhraseConceptFeatures(3.0,0.0,false,false)),3)), None)
Adding concept: simple
nodeIds = List(0)
concepts = List(simple)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(simple),simple,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: reply-01
nodeIds = List(1)
concepts = List(reply-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Decoder1 Spans:
Span 1:  reply => reply-01
Span 2:  simple => simple
Decoder1 feats:
bias 2.0
len 2.0

Concepts:
id = 1 concept = reply-01
id = 0 concept = simple
Spans:
Span 1-2:  reply => reply-01
Span 3-4:  simple => simple

rootDependencyPaths = List(List(3, 1, 0), List(3, 1), List(3, 2), List(3), List(3, 4))
getNodeById = Map(1 -> reply-01, 0 -> simple)
getNodeById2 = Map(1 -> reply-01, 0 -> simple)
getNodeById = Map(1 -> reply-01, 0 -> simple)
getNodeById2 = Map(1 -> reply-01, 0 -> simple)
Node = 0
Node = 1
visited = Set(0, 1)
Alg2 returning score = -32.56364127221838
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
reply-01 List()
thing List()
simple List()
OracleGraph nodes = List(reply-01, thing, simple)
OracleGraph triples: (r / reply-01, ARG2, t / thing)
(s / simple, domain, t / thing)
rootDependencyPaths = List(List(3, 1, 0), List(3, 1), List(3, 2), List(3), List(3, 4))
Oracle Span 1-2:  reply => (thing :ARG2-of reply-01)
Oracle Span 3-4:  simple => simple

Incorrect span: reply => reply-01
Missing span: reply => (thing :ARG2-of reply-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	reply	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	simple	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:
(r / reply-01, ARG2, t / thing)
(s / simple, domain, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),simple,simple,false), Span(1,2,List(1),reply,reply-01,false)),Map(1 -> reply-01, 0 -> simple),Map(s -> simple, r -> reply-01))),[Ljava.lang.String;@19976a65,Annotation([Ljava.lang.String;@a1f72f5,[Ljava.lang.String;@4b2c5e02,[Ljava.lang.String;@57a3e26a),Annotation([Ljava.lang.String;@75c56eb9,[Ljava.lang.String;@4bc222e,[Ledu.cmu.lti.nlp.amr.Dependency;@2dc9b0f5),Annotation([Ljava.lang.String;@6531a794,[Ljava.lang.String;@3b5fad2d,[Ljava.lang.String;@5e17553a),Annotation([Ljava.lang.String;@3eb91815,[Ljava.lang.String;@56dc1551,[Ledu.cmu.lti.nlp.amr.Entity;@102cec62))
AMR:
(s / simple, domain, r / reply-01)

Decoded in 5,942 microseconds
Sentence: I have tried .


--- Decoder1 ---

Sentence: I have tried .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = tried
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),1)), None, None)
Adding concept: have-03
nodeIds = List(0)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
1.6450434660464364E-4
Adding concept: i
nodeIds = List(1)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.026213710764833906
Decoder1 Spans:
Span 1:  have => have-03
Span 2:  I => i
Decoder1 feats:
bias 2.0
c|p -3.296027548367349
len 2.0

Concepts:
id = 1 concept = i
id = 0 concept = have-03
Spans:
Span 1-2:  have => have-03
Span 0-1:  I => i

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3))
getNodeById = Map(1 -> i, 0 -> have-03)
getNodeById2 = Map(1 -> i, 0 -> have-03)
getNodeById = Map(1 -> i, 0 -> have-03)
getNodeById2 = Map(1 -> i, 0 -> have-03)
Node = 0
Node = 1
visited = Set(0, 1)
Alg2 returning score = -46.626696482723766
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
i List()
try-01 List()
OracleGraph nodes = List(i, try-01)
OracleGraph triples: (t / try-01, ARG0, i / i)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 3))
Oracle Span 0-1:  I => i
Oracle Span 2-3:  tried => try-01

Extra span: have => have-03
Missing span: tried => try-01
Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	tried	_	VBN	VBN	_	0	root	_	_
4	.	_	.	.	_	3	punct	_	_

Oracle:
(t / try-01, ARG0, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),have,have-03,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> have-03),Map(h -> have-03, i -> i))),[Ljava.lang.String;@74f6c5d8,Annotation([Ljava.lang.String;@27912e3,[Ljava.lang.String;@34b9f960,[Ljava.lang.String;@43015c69),Annotation([Ljava.lang.String;@19b89d4,[Ljava.lang.String;@4bbf6d0e,[Ledu.cmu.lti.nlp.amr.Dependency;@30b6ffe0),Annotation([Ljava.lang.String;@791d1f8b,[Ljava.lang.String;@2415fc55,[Ljava.lang.String;@14f232c4),Annotation([Ljava.lang.String;@13bc8645,[Ljava.lang.String;@24c22fe,[Ledu.cmu.lti.nlp.amr.Entity;@93081b6))
AMR:
(h / have-03, ARG1, i / i)

Decoded in 5,882 microseconds
Sentence: But with the others I have not been successful .


--- Decoder1 ---

Sentence: But with the others I have not been successful .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = with
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = others
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(others),(person :mod other),PhraseConceptFeatures(1.0,-2.3025850929940455,false,false)), PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)))
concept = PhraseConceptPair(List(others),(person :mod other),PhraseConceptFeatures(1.0,-2.3025850929940455,false,false))
score = 0
adding concept:PhraseConceptPair(List(others),(person :mod other),PhraseConceptFeatures(1.0,-2.3025850929940455,false,false))
concept = PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
score = 0
adding concept:PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = have
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)), PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false)), PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false)), PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false)))
concept = PhraseConceptPair(List(have),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
score = 0
adding concept:PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
concept = PhraseConceptPair(List(have),have-06,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-concession-91,PhraseConceptFeatures(1.0,-6.483107351457199,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-frequency-91,PhraseConceptFeatures(2.0,-5.7899601708972535,false,false))
score = 0
concept = PhraseConceptPair(List(have),have-rel-role-91,PhraseConceptFeatures(5.0,-4.873669439023098,false,false))
score = 0
word = not
Finding date entities
Possible invoked concepts: List()
word = been
Finding date entities
Possible invoked concepts: List()
word = successful
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(successful),successful,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(successful),successful,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(successful),successful,PhraseConceptFeatures(1.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), None, None, Some((0.01759754047199135,PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false)),3)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),4)), Some((1.6450434660463323E-4,PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false)),5)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(successful),successful,PhraseConceptFeatures(1.0,0.0,false,false)),8)), None)
Adding concept: successful
nodeIds = List(0)
concepts = List(successful)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(successful),successful,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: have-03
nodeIds = List(1)
concepts = List(have-03)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(have),have-03,PhraseConceptFeatures(35.0,-2.927759289967785,false,false))
feats:
bias 1.0
c|p -2.927759289967785
len 1.0

score:
0.02993808957043892
Adding concept: i
nodeIds = List(2)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.05598729598866818
Adding concept: other
nodeIds = List(3)
concepts = List(other)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(others),other,PhraseConceptFeatures(3.0,-1.2039728043259361,false,false))
feats:
bias 1.0
c|p -1.2039728043259361
len 1.0

score:
0.07358483646065954
Adding concept: contrast-01
nodeIds = List(4)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.09429317767265445
Decoder1 Spans:
Span 1:  But => contrast-01
Span 2:  have => have-03
Span 3:  I => i
Span 4:  others => other
Span 5:  successful => successful
Decoder1 feats:
bias 5.0
c|p -5.396375774866499
len 5.0

Concepts:
id = 2 concept = i
id = 1 concept = have-03
id = 4 concept = contrast-01
id = 0 concept = successful
id = 3 concept = other
Spans:
Span 0-1:  But => contrast-01
Span 5-6:  have => have-03
Span 4-5:  I => i
Span 3-4:  others => other
Span 8-9:  successful => successful

rootDependencyPaths = List(List(8, 0), List(8, 1), List(8, 1, 3, 2), List(8, 1, 3), List(8, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 9))
getNodeById = Map(2 -> i, 1 -> have-03, 4 -> contrast-01, 0 -> successful, 3 -> other)
getNodeById2 = Map(2 -> i, 1 -> have-03, 4 -> contrast-01, 0 -> successful, 3 -> other)
getNodeById = Map(2 -> i, 1 -> have-03, 4 -> contrast-01, 0 -> successful, 3 -> other)
getNodeById2 = Map(2 -> i, 1 -> have-03, 4 -> contrast-01, 0 -> successful, 3 -> other)
Node = 4
Node = 0
Node = 2
Node = 1
Node = 3
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -82.37901393156737
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
- List()
other List()
i List()
succeed-01 List()
contrast-01 List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: None / -
OracleGraph nodes = List(other, i, succeed-01, contrast-01)
OracleGraph triples: (c / contrast-01, ARG2, s / succeed-01)
(s / succeed-01, ARG0, i / i)
(s / succeed-01, ARG1, o / other)
rootDependencyPaths = List(List(8, 0), List(8, 1), List(8, 1, 3, 2), List(8, 1, 3), List(8, 4), List(8, 5), List(8, 6), List(8, 7), List(8), List(8, 9))
Oracle Span 0-1:  But => contrast-01
Oracle Span 4-5:  I => i
Oracle Span 3-4:  others => other
Oracle Span 8-9:  successful => succeed-01

Incorrect span: successful => successful
Extra span: have => have-03
Missing span: successful => succeed-01
Dependencies:
1	But	_	CC	CC	_	9	cc	_	_
2	with	_	IN	IN	_	9	prep	_	_
3	the	_	DT	DT	_	4	det	_	_
4	others	_	NNS	NNS	_	2	pobj	_	_
5	I	_	PRP	PRP	_	9	nsubj	_	_
6	have	_	VBP	VBP	_	9	aux	_	_
7	not	_	RB	RB	_	9	neg	_	_
8	been	_	VBN	VBN	_	9	cop	_	_
9	successful	_	JJ	JJ	_	0	root	_	_
10	.	_	.	.	_	9	punct	_	_

Oracle:
(c / contrast-01, ARG2, s / succeed-01)
(s / succeed-01, ARG0, i / i)
(s / succeed-01, ARG1, o / other)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),successful,successful,false), Span(5,6,List(1),have,have-03,false), Span(4,5,List(2),I,i,false), Span(3,4,List(3),others,other,false), Span(0,1,List(4),But,contrast-01,false)),Map(2 -> i, 1 -> have-03, 4 -> contrast-01, 0 -> successful, 3 -> other),Map(h -> have-03, s -> successful, i -> i, c -> contrast-01, o -> other))),[Ljava.lang.String;@cd1e646,Annotation([Ljava.lang.String;@7ba8c737,[Ljava.lang.String;@1890516e,[Ljava.lang.String;@15a04efb),Annotation([Ljava.lang.String;@16c069df,[Ljava.lang.String;@2bec854f,[Ledu.cmu.lti.nlp.amr.Dependency;@31edaa7d),Annotation([Ljava.lang.String;@26adfd2d,[Ljava.lang.String;@3336e6b6,[Ljava.lang.String;@7c3fdb62),Annotation([Ljava.lang.String;@205d38da,[Ljava.lang.String;@6950ed69,[Ledu.cmu.lti.nlp.amr.Entity;@6dd7b5a3))
AMR:
(c / contrast-01, ARG2, s / successful)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, o / other)
(s / successful, domain, i / i)

Decoded in 21,369 microseconds
Sentence: When I made the drawing of the baobabs I was carried beyond myself by the inspiring force of urgent necessity .


--- Decoder1 ---

Sentence: When I made the drawing of the baobabs I was carried beyond myself by the inspiring force of urgent necessity .
word = When
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = drawing
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = baobabs
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = was
Finding date entities
Possible invoked concepts: List()
word = carried
Finding date entities
Possible invoked concepts: List()
word = beyond
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(beyond),beyond,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(beyond),beyond,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(beyond),beyond,PhraseConceptFeatures(1.0,0.0,false,false))
word = myself
Finding date entities
Possible invoked concepts: List()
word = by
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)))
concept = PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
score = 0
adding concept:PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = inspiring
Finding date entities
Possible invoked concepts: List()
word = force
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = urgent
Finding date entities
Possible invoked concepts: List()
word = necessity
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),1)), Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),2)), None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false)),7)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),8)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(beyond),beyond,PhraseConceptFeatures(1.0,0.0,false,false)),11)), None, Some((0.008432529785513981,PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)),13)), None, None, None, None, None, None, None)
Adding concept: by
nodeIds = List(0)
concepts = List(by)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
feats:
bias 1.0
c|p -2.1102132003465894
len 1.0

score:
0.008432529785513981
Adding concept: beyond
nodeIds = List(1)
concepts = List(beyond)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(beyond),beyond,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.03820611500934826
Adding concept: i
nodeIds = List(2)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.06425532142757752
Adding concept: baobab
nodeIds = List(3)
concepts = List(baobab)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(baobabs),baobab,PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0940289066514118
Adding concept: make-01
nodeIds = List(4)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.10611244469515306
Adding concept: i
nodeIds = List(5)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.13216165111338232
Decoder1 Spans:
Span 1:  baobabs => baobab
Span 2:  beyond => beyond
Span 3:  by => by
Span 4:  I => i
Span 5:  I => i
Span 6:  made => make-01
Decoder1 feats:
bias 6.0
c|p -4.595949571954977
len 6.0

Concepts:
id = 2 concept = i
id = 5 concept = i
id = 1 concept = beyond
id = 4 concept = make-01
id = 0 concept = by
id = 3 concept = baobab
Spans:
Span 7-8:  baobabs => baobab
Span 11-12:  beyond => beyond
Span 13-14:  by => by
Span 8-9:  I => i
Span 1-2:  I => i
Span 2-3:  made => make-01

rootDependencyPaths = List(List(10, 2, 0), List(10, 2, 1), List(10, 2), List(10, 2, 4, 3), List(10, 2, 4), List(10, 2, 4, 5), List(10, 2, 4, 5, 7, 6), List(10, 2, 4, 5, 7), List(10, 8), List(10, 9), List(10), List(10, 11), List(10, 11, 12), List(10, 13), List(10, 13, 16, 14), List(10, 13, 16, 15), List(10, 13, 16), List(10, 13, 16, 17), List(10, 13, 16, 17, 19, 18), List(10, 13, 16, 17, 19), List(10, 20))
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 1
Node = 2
Node = 3
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -184.5650802050811
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -192.25499729867025
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 1
Node = 2
Node = 3
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -199.5650802050811
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -207.25499729867025
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 1
Node = 2
Node = 3
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -214.56508020508105
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -222.25499729867025
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 1
Node = 2
Node = 3
Node = 0
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -229.56508020508105
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 1
Node = 3
Node = 0
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -237.25499729867025
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 0
Node = 1
Node = 2
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -244.4465756046878
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 0
Node = 3
Node = 1
Node = 2
Node = 5
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -249.02824894340958
getNodeById = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
getNodeById2 = Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab)
Node = 4
Node = 0
Node = 3
Node = 1
Node = 5
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -250.7798401640575
Langrangian relaxation converged after 11 iterations. Delta = 0.0
Node.spans:
necessity List()
urgent List()
i List()
inspire-01 List()
force-01 List()
draw-01 List()
carry-01 List()
baobab List()
beyond List()
OracleGraph nodes = List(necessity, urgent, i, inspire-01, force-01, draw-01, carry-01, baobab, beyond)
OracleGraph triples: (b / beyond, op, i / i)
(c / carry-01, ARG0, f / force-01)
(c / carry-01, ARG1, i / i)
(c / carry-01, destination, b / beyond)
(c / carry-01, time, d / draw-01)
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, b2 / baobab)
(f / force-01, ARG0, n / necessity)
(i2 / inspire-01, ARG0, f / force-01)
(n / necessity, mod, u / urgent)
rootDependencyPaths = List(List(10, 2, 0), List(10, 2, 1), List(10, 2), List(10, 2, 4, 3), List(10, 2, 4), List(10, 2, 4, 5), List(10, 2, 4, 5, 7, 6), List(10, 2, 4, 5, 7), List(10, 8), List(10, 9), List(10), List(10, 11), List(10, 11, 12), List(10, 13), List(10, 13, 16, 14), List(10, 13, 16, 15), List(10, 13, 16), List(10, 13, 16, 17), List(10, 13, 16, 17, 19, 18), List(10, 13, 16, 17, 19), List(10, 20))
Oracle Span 7-8:  baobabs => baobab
Oracle Span 11-12:  beyond => beyond
Oracle Span 10-11:  carried => carry-01
Oracle Span 4-5:  drawing => draw-01
Oracle Span 16-17:  force => force-01
Oracle Span 1-2:  I => i
Oracle Span 15-16:  inspiring => inspire-01
Oracle Span 19-20:  necessity => necessity
Oracle Span 18-19:  urgent => urgent

Extra span: by => by
Extra span: I => i
Extra span: made => make-01
Missing span: carried => carry-01
Missing span: drawing => draw-01
Missing span: force => force-01
Missing span: inspiring => inspire-01
Missing span: necessity => necessity
Missing span: urgent => urgent
Dependencies:
1	When	_	WRB	WRB	_	3	advmod	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	made	_	VBD	VBD	_	11	advcl	_	_
4	the	_	DT	DT	_	5	det	_	_
5	drawing	_	NN	NN	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	baobabs	_	NNS	NNS	_	6	pobj	_	_
9	I	_	PRP	PRP	_	11	nsubjpass	_	_
10	was	_	VBD	VBD	_	11	auxpass	_	_
11	carried	_	VBN	VBN	_	0	root	_	_
12	beyond	_	IN	IN	_	11	prep	_	_
13	myself	_	PRP	PRP	_	12	pobj	_	_
14	by	_	IN	IN	_	11	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	inspiring	_	JJ	JJ	_	17	amod	_	_
17	force	_	NN	NN	_	14	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	urgent	_	JJ	JJ	_	20	amod	_	_
20	necessity	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	11	punct	_	_

Oracle:
(b / beyond, op, i / i)
(c / carry-01, ARG0, f / force-01)
(c / carry-01, ARG1, i / i)
(c / carry-01, destination, b / beyond)
(c / carry-01, time, d / draw-01)
(d / draw-01, ARG0, i / i)
(d / draw-01, ARG1, b2 / baobab)
(f / force-01, ARG0, n / necessity)
(i2 / inspire-01, ARG0, f / force-01)
(n / necessity, mod, u / urgent)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),by,by,false), Span(11,12,List(1),beyond,beyond,false), Span(8,9,List(2),I,i,false), Span(7,8,List(3),baobabs,baobab,false), Span(2,3,List(4),made,make-01,false), Span(1,2,List(5),I,i,false)),Map(2 -> i, 5 -> i, 1 -> beyond, 4 -> make-01, 0 -> by, 3 -> baobab),Map(b3 -> baobab, b -> by, b2 -> beyond, m -> make-01, i2 -> i, i -> i))),[Ljava.lang.String;@6f3187b0,Annotation([Ljava.lang.String;@2663e964,[Ljava.lang.String;@48b67364,[Ljava.lang.String;@189cbd7c),Annotation([Ljava.lang.String;@7bf3a5d8,[Ljava.lang.String;@42e25b0b,[Ledu.cmu.lti.nlp.amr.Dependency;@39b43d60),Annotation([Ljava.lang.String;@44be0077,[Ljava.lang.String;@2205a05d,[Ljava.lang.String;@72ef8d15),Annotation([Ljava.lang.String;@6aa8e115,[Ljava.lang.String;@5e21e98f,[Ledu.cmu.lti.nlp.amr.Entity;@51a9ad5e))
AMR:
(b3 / baobab, poss, i / i)
(m / make-01, ARG0, i2 / i)
(m / make-01, ARG1, b2 / beyond)
(m / make-01, location, b3 / baobab)
(m / make-01, mod, b / by)

Decoded in 58,770 microseconds
Sentence: Chapter 6 .


--- Decoder1 ---

Sentence: Chapter 6 .
word = Chapter
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false)))
concept = PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
word = 6
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false)),0)), None, None)
Adding concept: chapter
nodeIds = List(0)
concepts = List(chapter)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Chapter),chapter,PhraseConceptFeatures(21.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Decoder1 Spans:
Span 1:  Chapter => chapter
Decoder1 feats:
bias 1.0
len 1.0

Concepts:
id = 0 concept = chapter
Spans:
Span 0-1:  Chapter => chapter

rootDependencyPaths = List(List(0), List(0, 1), List(0, 2))
getNodeById = Map(0 -> chapter)
getNodeById2 = Map(0 -> chapter)
getNodeById = Map(0 -> chapter)
getNodeById2 = Map(0 -> chapter)
Node = 0
visited = Set(0)
Alg2 returning score = 0.11785127172591817
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
6 List()
chapter List()
WARNING: Adding a variable name to a span
OracleGraph nodes = List(6, chapter)
OracleGraph triples: (c / chapter, mod, 6 / 6)
rootDependencyPaths = List(List(0), List(0, 1), List(0, 2))
Oracle Span 1-2:  6 => 6
Oracle Span 0-1:  Chapter => chapter

Missing span: 6 => 6
Dependencies:
1	Chapter	_	NN	NN	_	0	root	_	_
2	6	_	CD	CD	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(c / chapter, mod, 6 / 6)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Chapter,chapter,false)),Map(0 -> chapter),Map(c -> chapter))),[Ljava.lang.String;@5f20155b,Annotation([Ljava.lang.String;@72ade7e3,[Ljava.lang.String;@239105a8,[Ljava.lang.String;@3fce8fd9),Annotation([Ljava.lang.String;@609bcfb6,[Ljava.lang.String;@7d94beb9,[Ledu.cmu.lti.nlp.amr.Dependency;@560348e6),Annotation([Ljava.lang.String;@1df8b5b8,[Ljava.lang.String;@23202fce,[Ljava.lang.String;@7b993c65),Annotation([Ljava.lang.String;@37911f88,[Ljava.lang.String;@6f1c29b7,[Ledu.cmu.lti.nlp.amr.Entity;@4d6025c5))
AMR:


Decoded in 3,305 microseconds
Sentence: Oh , little prince !


--- Decoder1 ---

Sentence: Oh , little prince !
word = Oh
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Oh),Oh,PhraseConceptFeatures(1.0,-3.332204510175204,false,false)), PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false)))
concept = PhraseConceptPair(List(Oh),Oh,PhraseConceptFeatures(1.0,-3.332204510175204,false,false))
score = 0
concept = PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
score = 0
adding concept:PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = !
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.019360815055007176,PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false)),0)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),2)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),3)), None)
Adding concept: prince
nodeIds = List(0)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.029710964451529556
Adding concept: little
nodeIds = List(1)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.052329776183163104
Adding concept: oh
nodeIds = List(2)
concepts = List(oh)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Oh),oh,PhraseConceptFeatures(10.0,-1.0296194171811581,false,false))
feats:
bias 1.0
c|p -1.0296194171811581
len 1.0

score:
0.07169059123817029
Decoder1 Spans:
Span 1:  little => little
Span 2:  Oh => oh
Span 3:  prince => prince
Decoder1 feats:
bias 3.0
c|p -1.743278621763773
len 3.0

Concepts:
id = 2 concept = oh
id = 1 concept = little
id = 0 concept = prince
Spans:
Span 2-3:  little => little
Span 0-1:  Oh => oh
Span 3-4:  prince => prince

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4))
getNodeById = Map(2 -> oh, 1 -> little, 0 -> prince)
getNodeById2 = Map(2 -> oh, 1 -> little, 0 -> prince)
getNodeById = Map(2 -> oh, 1 -> little, 0 -> prince)
getNodeById2 = Map(2 -> oh, 1 -> little, 0 -> prince)
Node = 2
Node = 1
Node = 0
visited = Set(0, 1, 2)
Alg2 returning score = -135.44052102151514
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
little List()
prince List()
OracleGraph nodes = List(little, prince)
OracleGraph triples: (p / prince, mod, l / little)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4))
Oracle Span 2-3:  little => little
Oracle Span 3-4:  prince => prince

Extra span: Oh => oh
Dependencies:
1	Oh	_	UH	UH	_	4	discourse	_	_
2	,	_	,	,	_	4	punct	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	0	root	_	_
5	!	_	.	.	_	4	punct	_	_

Oracle:
(p / prince, mod, l / little)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),prince,prince,false), Span(2,3,List(1),little,little,false), Span(0,1,List(2),Oh,oh,false)),Map(2 -> oh, 1 -> little, 0 -> prince),Map(p -> prince, l -> little, o -> oh))),[Ljava.lang.String;@7f284218,Annotation([Ljava.lang.String;@407a7f2a,[Ljava.lang.String;@4ea5b703,[Ljava.lang.String;@2a7ed1f),Annotation([Ljava.lang.String;@3fa247d1,[Ljava.lang.String;@2cb2fc20,[Ledu.cmu.lti.nlp.amr.Dependency;@4f4c4b1a),Annotation([Ljava.lang.String;@723e88f9,[Ljava.lang.String;@5f0fd5a0,[Ljava.lang.String;@64e7619d),Annotation([Ljava.lang.String;@495ee280,[Ljava.lang.String;@4fa1c212,[Ledu.cmu.lti.nlp.amr.Entity;@6ea2bc93))
AMR:
(l / little, mod, o / oh)
(p / prince, mod, l / little)

Decoded in 6,892 microseconds
Sentence: Bit by bit I came to understand the secrets of your sad little life ...


--- Decoder1 ---

Sentence: Bit by bit I came to understand the secrets of your sad little life ...
word = Bit
Finding date entities
Possible invoked concepts: List()
word = by
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)))
concept = PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
score = 0
adding concept:PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
word = bit
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(bit),bit,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(bit),bit,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(bit),bit,PhraseConceptFeatures(1.0,0.0,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = came
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false)), PhraseConceptPair(List(came),come-04,PhraseConceptFeatures(1.0,-3.4011973816621555,false,false)))
concept = PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
score = 0
adding concept:PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
concept = PhraseConceptPair(List(came),come-04,PhraseConceptFeatures(1.0,-3.4011973816621555,false,false))
score = 0
word = to
Finding date entities
Possible invoked concepts: List()
word = understand
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(understand),(thing :manner-of understand-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false)), PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false)))
concept = PhraseConceptPair(List(understand),(thing :manner-of understand-01),PhraseConceptFeatures(1.0,-3.4657359027997265,false,false))
score = 0
concept = PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
score = 0
adding concept:PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = secrets
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = your
Finding date entities
Possible invoked concepts: List()
word = sad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = life
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false)))
concept = PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
score = 0
adding concept:PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
word = ...
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.008432529785513981,PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false)),1)), Some((0.029773585223834276,PhraseConceptPair(List(bit),bit,PhraseConceptFeatures(1.0,0.0,false,false)),2)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),3)), Some((0.019626967847386725,PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false)),4)), None, Some((0.022110941201849425,PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false)),6)), None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false)),11)), Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),12)), Some((0.017104114690078137,PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false)),13)), None)
Adding concept: life
nodeIds = List(0)
concepts = List(life)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(life),life,PhraseConceptFeatures(4.0,-1.252762968495368,false,false))
feats:
bias 1.0
c|p -1.252762968495368
len 1.0

score:
0.017104114690078137
Adding concept: little
nodeIds = List(1)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.039722926421711685
Adding concept: sad
nodeIds = List(2)
concepts = List(sad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.06949651164554596
Adding concept: understand-01
nodeIds = List(3)
concepts = List(understand-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(understand),understand-01,PhraseConceptFeatures(15.0,-0.7576857016975165,false,false))
feats:
bias 1.0
c|p -0.7576857016975165
len 1.0

score:
0.09160745284739538
Adding concept: come-01
nodeIds = List(4)
concepts = List(come-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(came),come-01,PhraseConceptFeatures(11.0,-1.0033021088637848,false,false))
feats:
bias 1.0
c|p -1.0033021088637848
len 1.0

score:
0.11123442069478211
Adding concept: i
nodeIds = List(5)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.13728362711301137
Adding concept: bit
nodeIds = List(6)
concepts = List(bit)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(bit),bit,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.16705721233684565
Adding concept: by
nodeIds = List(7)
concepts = List(by)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(by),by,PhraseConceptFeatures(4.0,-2.1102132003465894,false,false))
feats:
bias 1.0
c|p -2.1102132003465894
len 1.0

score:
0.17548974212235963
Decoder1 Spans:
Span 1:  bit => bit
Span 2:  by => by
Span 3:  came => come-01
Span 4:  I => i
Span 5:  life => life
Span 6:  little => little
Span 7:  sad => sad
Span 8:  understand => understand-01
Decoder1 feats:
bias 8.0
c|p -6.199699472137517
len 8.0

Concepts:
id = 2 concept = sad
id = 5 concept = i
id = 7 concept = by
id = 1 concept = little
id = 4 concept = come-01
id = 6 concept = bit
id = 0 concept = life
id = 3 concept = understand-01
Spans:
Span 2-3:  bit => bit
Span 1-2:  by => by
Span 4-5:  came => come-01
Span 3-4:  I => i
Span 13-14:  life => life
Span 12-13:  little => little
Span 11-12:  sad => sad
Span 6-7:  understand => understand-01

rootDependencyPaths = List(List(0), List(0, 1), List(0, 1, 2), List(0, 1, 2, 4, 3), List(0, 1, 2, 4), List(0, 1, 2, 4, 6, 5), List(0, 1, 2, 4, 6), List(0, 1, 2, 4, 6, 8, 7), List(0, 1, 2, 4, 6, 8), List(0, 1, 2, 4, 6, 8, 9), List(0, 1, 2, 4, 6, 8, 9, 13, 10), List(0, 1, 2, 4, 6, 8, 9, 13, 11), List(0, 1, 2, 4, 6, 8, 9, 13, 12), List(0, 1, 2, 4, 6, 8, 9, 13), List(0, 1, 14))
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 4
Node = 0
Node = 5
Node = 6
Node = 1
Node = 2
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -64.78932946301981
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 4
Node = 0
Node = 5
Node = 6
Node = 1
Node = 2
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -70.78932946301981
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 4
Node = 0
Node = 5
Node = 6
Node = 1
Node = 2
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -76.78932946301981
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -82.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -84.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -86.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -88.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -90.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -92.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -94.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -96.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -98.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -100.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -102.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -104.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -106.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -108.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -110.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -112.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -114.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -116.31401200292927
getNodeById = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
getNodeById2 = Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01)
Node = 3
Node = 0
Node = 5
Node = 1
Node = 2
Node = 4
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -118.06530876723156
Langrangian relaxation converged after 22 iterations. Delta = 0.0
Node.spans:
little List()
secret List()
you List()
life List()
i List()
sad List()
understand-01 List()
bit-by-bit List()
clearUnalignedNodes():  removing unaligned node: Some(y) / you
clearUnalignedNodes():  removing unaligned node: Some(b) / bit-by-bit
OracleGraph nodes = List(little, secret, life, i, sad, understand-01)
OracleGraph triples: (l / life, mod, l2 / little)
(l / life, mod, s2 / sad)
(s / secret, poss, l / life)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, s / secret)
rootDependencyPaths = List(List(0), List(0, 1), List(0, 1, 2), List(0, 1, 2, 4, 3), List(0, 1, 2, 4), List(0, 1, 2, 4, 6, 5), List(0, 1, 2, 4, 6), List(0, 1, 2, 4, 6, 8, 7), List(0, 1, 2, 4, 6, 8), List(0, 1, 2, 4, 6, 8, 9), List(0, 1, 2, 4, 6, 8, 9, 13, 10), List(0, 1, 2, 4, 6, 8, 9, 13, 11), List(0, 1, 2, 4, 6, 8, 9, 13, 12), List(0, 1, 2, 4, 6, 8, 9, 13), List(0, 1, 14))
Oracle Span 3-4:  I => i
Oracle Span 13-14:  life => life
Oracle Span 12-13:  little => little
Oracle Span 11-12:  sad => sad
Oracle Span 8-9:  secrets => secret
Oracle Span 6-7:  understand => understand-01

Extra span: came => come-01
Extra span: bit => bit
Extra span: by => by
Missing span: secrets => secret
Dependencies:
1	Bit	_	NN	NN	_	0	root	_	_
2	by	_	IN	IN	_	1	prep	_	_
3	bit	_	NN	NN	_	2	pobj	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	came	_	VBD	VBD	_	3	rcmod	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	understand	_	VB	VB	_	5	xcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	secrets	_	NNS	NNS	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	your	_	PRP$	PRP$	_	14	poss	_	_
12	sad	_	JJ	JJ	_	14	amod	_	_
13	little	_	JJ	JJ	_	14	amod	_	_
14	life	_	NN	NN	_	10	pobj	_	_
15	...	_	:	:	_	2	punct	_	_

Oracle:
(l / life, mod, l2 / little)
(l / life, mod, s2 / sad)
(s / secret, poss, l / life)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, s / secret)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),life,life,false), Span(12,13,List(1),little,little,false), Span(11,12,List(2),sad,sad,false), Span(6,7,List(3),understand,understand-01,false), Span(4,5,List(4),came,come-01,false), Span(3,4,List(5),I,i,false), Span(2,3,List(6),bit,bit,false), Span(1,2,List(7),by,by,false)),Map(2 -> sad, 5 -> i, 7 -> by, 1 -> little, 4 -> come-01, 6 -> bit, 0 -> life, 3 -> understand-01),Map(b -> bit, b2 -> by, s -> sad, i -> i, l2 -> little, c -> come-01, u -> understand-01, l -> life))),[Ljava.lang.String;@3116c353,Annotation([Ljava.lang.String;@f627d13,[Ljava.lang.String;@4e928fbf,[Ljava.lang.String;@352ff4da),Annotation([Ljava.lang.String;@3224a577,[Ljava.lang.String;@2e32ccc5,[Ledu.cmu.lti.nlp.amr.Dependency;@748741cb),Annotation([Ljava.lang.String;@3e44f2a5,[Ljava.lang.String;@295cf707,[Ljava.lang.String;@1130520d),Annotation([Ljava.lang.String;@5f77d0f9,[Ljava.lang.String;@463fd068,[Ledu.cmu.lti.nlp.amr.Entity;@895e367))
AMR:
(b2 / by, op, b / bit)
(c / come-01, ARG0, i / i)
(c / come-01, ARG1, b / bit)
(l / life, mod, l2 / little)
(l / life, mod, s / sad)
(u / understand-01, ARG0, i / i)
(u / understand-01, ARG1, l / life)

Decoded in 99,056 microseconds
Sentence: For a long time you had found your only entertainment in the quiet pleasure of looking at the sunset .


--- Decoder1 ---

Sentence: For a long time you had found your only entertainment in the quiet pleasure of looking at the sunset .
word = For
Finding date entities
Possible invoked concepts: List()
word = a
Finding date entities
Possible invoked concepts: List()
word = long
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)))
concept = PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
score = 0
adding concept:PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
word = time
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)), PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false)))
concept = PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
score = 0
adding concept:PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
concept = PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false))
score = 0
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = had
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false)), PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false)), PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false)))
concept = PhraseConceptPair(List(had),(person :ARG0-of have-org-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),(person :ARG0-of have-rel-role-91),PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-03,PhraseConceptFeatures(12.0,-3.044522437723423,false,false))
score = 0
concept = PhraseConceptPair(List(had),have-frequency-91,PhraseConceptFeatures(1.0,-5.529429087511423,false,false))
score = 0
word = found
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(found),find-01,PhraseConceptFeatures(7.0,-0.8266785731844679,false,false)), PhraseConceptPair(List(found),find-03,PhraseConceptFeatures(1.0,-2.772588722239781,false,false)))
concept = PhraseConceptPair(List(found),find-01,PhraseConceptFeatures(7.0,-0.8266785731844679,false,false))
score = 0
adding concept:PhraseConceptPair(List(found),find-01,PhraseConceptFeatures(7.0,-0.8266785731844679,false,false))
concept = PhraseConceptPair(List(found),find-03,PhraseConceptFeatures(1.0,-2.772588722239781,false,false))
score = 0
word = your
Finding date entities
Possible invoked concepts: List()
word = only
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)))
concept = PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
score = 0
adding concept:PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
word = entertainment
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = quiet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(quiet),quiet-41,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(quiet),quiet-41,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(quiet),quiet-41,PhraseConceptFeatures(1.0,0.0,false,false))
word = pleasure
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(pleasure),please-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(pleasure),pleasure,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(pleasure),please-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(pleasure),please-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(pleasure),pleasure,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(pleasure),pleasure,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = looking
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(looking),(thing :ARG1-of look-01),PhraseConceptFeatures(5.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(looking),(thing :ARG1-of look-01),PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(looking),(thing :ARG1-of look-01),PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = sunset
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, Some((0.02880969217705289,PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)),2)), Some((0.017491641887458505,PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)),3)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),4)), None, Some((0.021413200947447593,PhraseConceptPair(List(found),find-01,PhraseConceptFeatures(7.0,-0.8266785731844679,false,false)),6)), None, Some((0.02893032846730732,PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)),8)), None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(quiet),quiet-41,PhraseConceptFeatures(1.0,0.0,false,false)),12)), Some((0.015753682017072397,PhraseConceptPair(List(pleasure),pleasure,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),13)), None, Some((0.015753682017072397,PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false)),15)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)),18)), None)
Adding concept: sunset
nodeIds = List(0)
concepts = List(sunset)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: look-01
nodeIds = List(1)
concepts = List(look-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(looking),look-01,PhraseConceptFeatures(5.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.045527267240906666
Adding concept: pleasure
nodeIds = List(2)
concepts = List(pleasure)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(pleasure),pleasure,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.061280949257979056
Adding concept: quiet-41
nodeIds = List(3)
concepts = List(quiet-41)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(quiet),quiet-41,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.09105453448181333
Adding concept: only
nodeIds = List(4)
concepts = List(only)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(only),only,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
feats:
bias 1.0
c|p -0.08338160893905101
len 1.0

score:
0.11998486294912065
Adding concept: find-01
nodeIds = List(5)
concepts = List(find-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(found),find-01,PhraseConceptFeatures(7.0,-0.8266785731844679,false,false))
feats:
bias 1.0
c|p -0.8266785731844679
len 1.0

score:
0.14139806389656823
Adding concept: you
nodeIds = List(6)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.16854342699142366
Adding concept: time
nodeIds = List(7)
concepts = List(time)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
feats:
bias 1.0
c|p -1.2144441041932315
len 1.0

score:
0.18603506887888216
Adding concept: long
nodeIds = List(8)
concepts = List(long)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(long),long,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
feats:
bias 1.0
c|p -0.0953101798043249
len 1.0

score:
0.21484476105593503
Decoder1 Spans:
Span 1:  found => find-01
Span 2:  long => long
Span 3:  looking => look-01
Span 4:  only => only
Span 5:  pleasure => pleasure
Span 6:  quiet => quiet-41
Span 7:  sunset => sunset
Span 8:  time => time
Span 9:  you => you
Decoder1 feats:
bias 9.0
c|p -5.252282979500685
len 9.0

Concepts:
id = 2 concept = pleasure
id = 5 concept = find-01
id = 8 concept = long
id = 7 concept = time
id = 1 concept = look-01
id = 4 concept = only
id = 6 concept = you
id = 0 concept = sunset
id = 3 concept = quiet-41
Spans:
Span 6-7:  found => find-01
Span 2-3:  long => long
Span 15-16:  looking => look-01
Span 8-9:  only => only
Span 13-14:  pleasure => pleasure
Span 12-13:  quiet => quiet-41
Span 18-19:  sunset => sunset
Span 3-4:  time => time
Span 4-5:  you => you

rootDependencyPaths = List(List(6, 0), List(6, 0, 3, 1), List(6, 0, 3, 2), List(6, 0, 3), List(6, 4), List(6, 5), List(6), List(6, 9, 7), List(6, 9, 8), List(6, 9), List(6, 10), List(6, 10, 13, 11), List(6, 10, 13, 12), List(6, 10, 13), List(6, 10, 13, 14), List(6, 10, 13, 14, 15), List(6, 10, 13, 14, 15, 16), List(6, 10, 13, 14, 15, 16, 18, 17), List(6, 10, 13, 14, 15, 16, 18), List(6, 19))
getNodeById = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
getNodeById2 = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
getNodeById = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
getNodeById2 = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
Node = 1
Node = 2
Node = 4
Node = 0
Node = 3
Node = 5
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -234.76951951272648
getNodeById = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
getNodeById2 = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
Node = 1
Node = 2
Node = 4
Node = 0
Node = 3
Node = 5
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -238.76951951272648
getNodeById = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
getNodeById2 = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
Node = 1
Node = 2
Node = 0
Node = 3
Node = 5
Node = 4
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -242.22908495667676
getNodeById = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
getNodeById2 = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
Node = 1
Node = 2
Node = 0
Node = 3
Node = 5
Node = 4
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -244.22908495667676
getNodeById = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
getNodeById2 = Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41)
Node = 1
Node = 2
Node = 0
Node = 3
Node = 5
Node = 4
Node = 7
Node = 6
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 6, 7)
Alg2 returning score = -245.49358757025468
Langrangian relaxation converged after 5 iterations. Delta = 0.0
Node.spans:
pleasure List()
long List()
only List()
entertain-01 List()
quiet List()
sunset List()
look-01 List()
you List()
find-01 List()
time List()
OracleGraph nodes = List(pleasure, long, only, entertain-01, quiet, sunset, look-01, you, find-01, time)
OracleGraph triples: (e / entertain-01, ARG0, l2 / look-01)
(e / entertain-01, ARG1, y / you)
(e / entertain-01, mod, o / only)
(f / find-01, ARG0, y / you)
(f / find-01, ARG1, e / entertain-01)
(f / find-01, duration, t / time)
(l2 / look-01, ARG0, y / you)
(l2 / look-01, ARG1, s / sunset)
(l2 / look-01, mod, p / pleasure)
(p / pleasure, mod, q / quiet)
(t / time, mod, l / long)
rootDependencyPaths = List(List(6, 0), List(6, 0, 3, 1), List(6, 0, 3, 2), List(6, 0, 3), List(6, 4), List(6, 5), List(6), List(6, 9, 7), List(6, 9, 8), List(6, 9), List(6, 10), List(6, 10, 13, 11), List(6, 10, 13, 12), List(6, 10, 13), List(6, 10, 13, 14), List(6, 10, 13, 14, 15), List(6, 10, 13, 14, 15, 16), List(6, 10, 13, 14, 15, 16, 18, 17), List(6, 10, 13, 14, 15, 16, 18), List(6, 19))
Oracle Span 9-10:  entertainment => entertain-01
Oracle Span 6-7:  found => find-01
Oracle Span 2-3:  long => long
Oracle Span 15-16:  looking => look-01
Oracle Span 8-9:  only => only
Oracle Span 13-14:  pleasure => pleasure
Oracle Span 12-13:  quiet => quiet
Oracle Span 18-19:  sunset => sunset
Oracle Span 3-4:  time => time
Oracle Span 4-5:  you => you

Incorrect span: quiet => quiet-41
Missing span: quiet => quiet
Missing span: entertainment => entertain-01
Dependencies:
1	For	_	IN	IN	_	7	prep	_	_
2	a	_	DT	DT	_	4	det	_	_
3	long	_	JJ	JJ	_	4	amod	_	_
4	time	_	NN	NN	_	1	pobj	_	_
5	you	_	PRP	PRP	_	7	nsubj	_	_
6	had	_	VBD	VBD	_	7	aux	_	_
7	found	_	VBN	VBN	_	0	root	_	_
8	your	_	PRP$	PRP$	_	10	poss	_	_
9	only	_	JJ	JJ	_	10	amod	_	_
10	entertainment	_	NN	NN	_	7	dobj	_	_
11	in	_	IN	IN	_	7	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	quiet	_	JJ	JJ	_	14	amod	_	_
14	pleasure	_	NN	NN	_	11	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	looking	_	VBG	VBG	_	15	pcomp	_	_
17	at	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	sunset	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(e / entertain-01, ARG0, l2 / look-01)
(e / entertain-01, ARG1, y / you)
(e / entertain-01, mod, o / only)
(f / find-01, ARG0, y / you)
(f / find-01, ARG1, e / entertain-01)
(f / find-01, duration, t / time)
(l2 / look-01, ARG0, y / you)
(l2 / look-01, ARG1, s / sunset)
(l2 / look-01, mod, p / pleasure)
(p / pleasure, mod, q / quiet)
(t / time, mod, l / long)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),sunset,sunset,false), Span(15,16,List(1),looking,look-01,false), Span(13,14,List(2),pleasure,pleasure,false), Span(12,13,List(3),quiet,quiet-41,false), Span(8,9,List(4),only,only,false), Span(6,7,List(5),found,find-01,false), Span(4,5,List(6),you,you,false), Span(3,4,List(7),time,time,false), Span(2,3,List(8),long,long,false)),Map(2 -> pleasure, 5 -> find-01, 8 -> long, 7 -> time, 1 -> look-01, 4 -> only, 6 -> you, 0 -> sunset, 3 -> quiet-41),Map(q -> quiet-41, t -> time, s -> sunset, y -> you, p -> pleasure, l2 -> long, l -> look-01, f -> find-01, o -> only))),[Ljava.lang.String;@1b266842,Annotation([Ljava.lang.String;@7a3793c7,[Ljava.lang.String;@42b3b079,[Ljava.lang.String;@651aed93),Annotation([Ljava.lang.String;@4dd6fd0a,[Ljava.lang.String;@bb9e6dc,[Ledu.cmu.lti.nlp.amr.Dependency;@5456afaa),Annotation([Ljava.lang.String;@6692b6c6,[Ljava.lang.String;@1cd629b3,[Ljava.lang.String;@589da3f3),Annotation([Ljava.lang.String;@39d76cb5,[Ljava.lang.String;@4a00d9cf,[Ledu.cmu.lti.nlp.amr.Entity;@6736fa8d))
AMR:
(f / find-01, ARG0, y / you)
(f / find-01, ARG1, t / time)
(f / find-01, location, p / pleasure)
(l / look-01, ARG1, s / sunset)
(p / pleasure, domain, l / look-01)
(p / pleasure, mod, q / quiet-41)
(q / quiet-41, ARG1, o / only)
(t / time, mod, l2 / long)

Decoded in 58,433 microseconds
Sentence: I learned that new detail on the morning of the fourth day , when you said to me : " I am very fond of sunsets .


--- Decoder1 ---

Sentence: I learned that new detail on the morning of the fourth day , when you said to me : " I am very fond of sunsets .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = learned
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = new
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false))
word = detail
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = morning
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false)))
concept = PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false))
score = 0
adding concept:PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = fourth
Finding date entities
Possible invoked concepts: List()
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = when
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = am
Finding date entities
Possible invoked concepts: List()
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = fond
Finding date entities
Possible invoked concepts: List()
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = sunsets
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false)),1)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false)),3)), None, None, None, Some((0.029050904827532417,PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false)),7)), None, None, None, Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),11)), None, None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),14)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),15)), None, None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),20)), None, Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),22)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false)),25)), None)
Adding concept: sunset
nodeIds = List(0)
concepts = List(sunset)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: very
nodeIds = List(1)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05954717044766855
Adding concept: i
nodeIds = List(2)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.08559637686589781
Adding concept: say-01
nodeIds = List(3)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11536996208973209
Adding concept: you
nodeIds = List(4)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.1425153251845875
Adding concept: day
nodeIds = List(5)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.1620583653933304
Adding concept: morning
nodeIds = List(6)
concepts = List(morning)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(morning),morning,PhraseConceptFeatures(27.0,-0.07145896398214498,false,false))
feats:
bias 1.0
c|p -0.07145896398214498
len 1.0

score:
0.19110927022086283
Adding concept: new
nodeIds = List(7)
concepts = List(new)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(new),new,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2208828554446971
Adding concept: that
nodeIds = List(8)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.23750066383391288
Adding concept: learn-01
nodeIds = List(9)
concepts = List(learn-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(learned),learn-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.26727424905774716
Adding concept: i
nodeIds = List(10)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.29332345547597644
Decoder1 Spans:
Span 1:  day => day
Span 2:  I => i
Span 3:  I => i
Span 4:  learned => learn-01
Span 5:  morning => morning
Span 6:  new => new
Span 7:  said => say-01
Span 8:  sunsets => sunset
Span 9:  that => that
Span 10:  very => very
Span 11:  you => you
Decoder1 feats:
bias 11.0
c|p -3.3803253387625882
len 11.0

Concepts:
id = 2 concept = i
id = 5 concept = day
id = 8 concept = that
id = 7 concept = new
id = 1 concept = very
id = 4 concept = you
id = 6 concept = morning
id = 9 concept = learn-01
id = 0 concept = sunset
id = 10 concept = i
id = 3 concept = say-01
Spans:
Span 11-12:  day => day
Span 20-21:  I => i
Span 0-1:  I => i
Span 1-2:  learned => learn-01
Span 7-8:  morning => morning
Span 3-4:  new => new
Span 15-16:  said => say-01
Span 25-26:  sunsets => sunset
Span 2-3:  that => that
Span 22-23:  very => very
Span 14-15:  you => you

rootDependencyPaths = List(List(1, 0), List(1), List(1, 4, 2), List(1, 4, 3), List(1, 4), List(1, 5), List(1, 5, 7, 6), List(1, 5, 7), List(1, 5, 7, 8), List(1, 5, 7, 8, 11, 9), List(1, 5, 7, 8, 11, 10), List(1, 5, 7, 8, 11), List(1, 12), List(1, 15, 13), List(1, 15, 14), List(1, 15), List(1, 15, 16), List(1, 15, 16, 17), List(1, 18), List(1, 19), List(1, 23, 20), List(1, 23, 21), List(1, 23, 22), List(1, 23), List(1, 23, 24), List(1, 23, 24, 25), List(1, 26))
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 5
Node = 6
Node = 2
Node = 8
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -167.4377136063131
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 5
Node = 6
Node = 2
Node = 8
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -183.4377136063131
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 5
Node = 6
Node = 2
Node = 8
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -199.4377136063131
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 5
Node = 6
Node = 2
Node = 8
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -215.43771360631308
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 5
Node = 6
Node = 2
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 1
Node = 8
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -231.21446118227226
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 8
Node = 5
Node = 6
Node = 2
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -245.64570085240092
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 8
Node = 6
Node = 2
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -256.97833534694513
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 8
Node = 6
Node = 2
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -268.4900793949276
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 8
Node = 5
Node = 6
Node = 2
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -279.6457008524009
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 8
Node = 6
Node = 2
Node = 4
Node = 10
Node = 3
Node = 0
Node = 7
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -290.97833534694513
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 3
Node = 8
Node = 6
Node = 2
Node = 10
Node = 0
Node = 7
Node = 5
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -301.85903808660265
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 3
Node = 8
Node = 6
Node = 2
Node = 10
Node = 5
Node = 0
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -306.8978154337079
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 3
Node = 8
Node = 6
Node = 2
Node = 10
Node = 5
Node = 0
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -310.8978154337079
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 3
Node = 8
Node = 6
Node = 2
Node = 10
Node = 5
Node = 7
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -314.2527362858622
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 3
Node = 8
Node = 6
Node = 2
Node = 10
Node = 5
Node = 0
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -317.8978154337079
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 3
Node = 8
Node = 6
Node = 2
Node = 10
Node = 5
Node = 7
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -321.2527362858622
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 3
Node = 8
Node = 6
Node = 2
Node = 10
Node = 5
Node = 0
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -324.8978154337079
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 10
Node = 5
Node = 2
Node = 7
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -327.03587775630297
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 2
Node = 0
Node = 10
Node = 5
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -330.27998515261993
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 2
Node = 10
Node = 5
Node = 0
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -331.5477774114711
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 2
Node = 10
Node = 5
Node = 7
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -332.90269826362544
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 2
Node = 0
Node = 10
Node = 5
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -334.27998515261993
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 2
Node = 10
Node = 5
Node = 0
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -335.5477774114711
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 2
Node = 10
Node = 7
Node = 5
Node = 0
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -336.19267890183556
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 2
Node = 0
Node = 10
Node = 5
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -339.27998515261993
getNodeById = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01)
getNodeById2 = Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 0 -> sunset, 9 -> learn-01, 3 -> say-01, 10 -> i)
Node = 9
Node = 6
Node = 3
Node = 8
Node = 2
Node = 10
Node = 0
Node = 5
Node = 7
Node = 4
Node = 1
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 7)
Alg2 returning score = -340.48687979481423
Langrangian relaxation converged after 26 iterations. Delta = 0.0
Node.spans:
very List()
detail List()
that List()
day List()
4 List()
sunset List()
i List()
new List()
ordinal-entity List()
say-01 List()
like-01 List()
learn-01 List()
morning List()
you List()
clearUnalignedNodes():  removing unaligned node: None / 4
clearUnalignedNodes():  removing unaligned node: Some(o) / ordinal-entity
clearUnalignedNodes():  removing unaligned node: Some(l2) / like-01
OracleGraph nodes = List(very, detail, that, day, sunset, i, new, say-01, learn-01, morning, you)
OracleGraph triples: (d / detail, mod, n / new)
(d / detail, mod, t / that)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, d / detail)
(l / learn-01, time, m / morning)
(l / learn-01, time, s / say-01)
(m / morning, time, d2 / day)
(s / say-01, ARG0, y / you)
(s / say-01, ARG2, i / i)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 4, 2), List(1, 4, 3), List(1, 4), List(1, 5), List(1, 5, 7, 6), List(1, 5, 7), List(1, 5, 7, 8), List(1, 5, 7, 8, 11, 9), List(1, 5, 7, 8, 11, 10), List(1, 5, 7, 8, 11), List(1, 12), List(1, 15, 13), List(1, 15, 14), List(1, 15), List(1, 15, 16), List(1, 15, 16, 17), List(1, 18), List(1, 19), List(1, 23, 20), List(1, 23, 21), List(1, 23, 22), List(1, 23), List(1, 23, 24), List(1, 23, 24, 25), List(1, 26))
Oracle Span 11-12:  day => day
Oracle Span 4-5:  detail => detail
Oracle Span 0-1:  I => i
Oracle Span 1-2:  learned => learn-01
Oracle Span 7-8:  morning => morning
Oracle Span 3-4:  new => new
Oracle Span 15-16:  said => say-01
Oracle Span 25-26:  sunsets => sunset
Oracle Span 2-3:  that => that
Oracle Span 22-23:  very => very
Oracle Span 14-15:  you => you

Extra span: I => i
Missing span: detail => detail
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	learned	_	VBD	VBD	_	0	root	_	_
3	that	_	DT	DT	_	5	det	_	_
4	new	_	JJ	JJ	_	5	amod	_	_
5	detail	_	NN	NN	_	2	dobj	_	_
6	on	_	IN	IN	_	2	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	morning	_	NN	NN	_	6	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	fourth	_	JJ	JJ	_	12	amod	_	_
12	day	_	NN	NN	_	9	pobj	_	_
13	,	_	,	,	_	2	punct	_	_
14	when	_	WRB	WRB	_	16	advmod	_	_
15	you	_	PRP	PRP	_	16	nsubj	_	_
16	said	_	VBD	VBD	_	2	advcl	_	_
17	to	_	TO	TO	_	16	prep	_	_
18	me	_	PRP	PRP	_	17	pobj	_	_
19	:	_	:	:	_	2	punct	_	_
20	"	_	''	''	_	2	punct	_	_
21	I	_	PRP	PRP	_	24	nsubj	_	_
22	am	_	VBP	VBP	_	24	cop	_	_
23	very	_	RB	RB	_	24	advmod	_	_
24	fond	_	JJ	JJ	_	2	ccomp	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	sunsets	_	NNS	NNS	_	25	pobj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(d / detail, mod, n / new)
(d / detail, mod, t / that)
(l / learn-01, ARG0, i / i)
(l / learn-01, ARG1, d / detail)
(l / learn-01, time, m / morning)
(l / learn-01, time, s / say-01)
(m / morning, time, d2 / day)
(s / say-01, ARG0, y / you)
(s / say-01, ARG2, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),sunsets,sunset,false), Span(22,23,List(1),very,very,false), Span(20,21,List(2),I,i,false), Span(15,16,List(3),said,say-01,false), Span(14,15,List(4),you,you,false), Span(11,12,List(5),day,day,false), Span(7,8,List(6),morning,morning,false), Span(3,4,List(7),new,new,false), Span(2,3,List(8),that,that,false), Span(1,2,List(9),learned,learn-01,false), Span(0,1,List(10),I,i,false)),Map(2 -> i, 5 -> day, 8 -> that, 7 -> new, 1 -> very, 4 -> you, 6 -> morning, 9 -> learn-01, 0 -> sunset, 10 -> i, 3 -> say-01),Map(n -> new, t -> that, s2 -> say-01, s -> sunset, m -> morning, d -> day, v -> very, y -> you, i2 -> i, i -> i, l -> learn-01))),[Ljava.lang.String;@52815fa3,Annotation([Ljava.lang.String;@50313382,[Ljava.lang.String;@1cb346ea,[Ljava.lang.String;@4c012563),Annotation([Ljava.lang.String;@14a50707,[Ljava.lang.String;@4d518b32,[Ledu.cmu.lti.nlp.amr.Dependency;@4bd31064),Annotation([Ljava.lang.String;@e3c0e40,[Ljava.lang.String;@329dbdbf,[Ljava.lang.String;@7354b8c5),Annotation([Ljava.lang.String;@20d7d6fb,[Ljava.lang.String;@4ef782af,[Ledu.cmu.lti.nlp.amr.Entity;@11d8ae8b))
AMR:
(l / learn-01, ARG0, i2 / i)
(l / learn-01, ARG1, i / i)
(l / learn-01, polarity, t / that)
(l / learn-01, time, m / morning)
(l / learn-01, time, s2 / say-01)
(s2 / say-01, ARG0, y / you)
(s2 / say-01, ARG1, n / new)
(s2 / say-01, ARG2, d / day)
(s2 / say-01, manner, s / sunset)
(v / very, poss, i2 / i)

Decoded in 216,735 microseconds
Sentence: Come , let us go look at a sunset now . "


--- Decoder1 ---

Sentence: Come , let us go look at a sunset now . "
word = Come
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Come),come-01,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(Come),come-01,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Come),come-01,PhraseConceptFeatures(3.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = let
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false))
word = us
Finding date entities
Possible invoked concepts: List()
word = go
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(go),go-01,PhraseConceptFeatures(3.0,-3.58351893845611,false,false)), PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false)), PhraseConceptPair(List(go),go-13,PhraseConceptFeatures(1.0,-4.68213122712422,false,false)), PhraseConceptPair(List(go),go-15,PhraseConceptFeatures(2.0,-3.9889840465642745,false,false)), PhraseConceptPair(List(go),go-17,PhraseConceptFeatures(1.0,-4.68213122712422,false,false)), PhraseConceptPair(List(go),go-19,PhraseConceptFeatures(1.0,-4.68213122712422,false,false)))
concept = PhraseConceptPair(List(go),go-01,PhraseConceptFeatures(3.0,-3.58351893845611,false,false))
score = 0
concept = PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false))
score = 0
adding concept:PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false))
concept = PhraseConceptPair(List(go),go-13,PhraseConceptFeatures(1.0,-4.68213122712422,false,false))
score = 0
concept = PhraseConceptPair(List(go),go-15,PhraseConceptFeatures(2.0,-3.9889840465642745,false,false))
score = 0
concept = PhraseConceptPair(List(go),go-17,PhraseConceptFeatures(1.0,-4.68213122712422,false,false))
score = 0
concept = PhraseConceptPair(List(go),go-19,PhraseConceptFeatures(1.0,-4.68213122712422,false,false))
score = 0
word = look
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(look),look-01,PhraseConceptFeatures(21.0,-0.8675005677047231,false,false)), PhraseConceptPair(List(look),look-02,PhraseConceptFeatures(3.0,-2.8134107167600364,false,false)))
concept = PhraseConceptPair(List(look),look-01,PhraseConceptFeatures(21.0,-0.8675005677047231,false,false))
score = 0
adding concept:PhraseConceptPair(List(look),look-01,PhraseConceptFeatures(21.0,-0.8675005677047231,false,false))
concept = PhraseConceptPair(List(look),look-02,PhraseConceptFeatures(3.0,-2.8134107167600364,false,false))
score = 0
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = a
Finding date entities
Possible invoked concepts: List()
word = sunset
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
word = now
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false)))
concept = PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
score = 0
adding concept:PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(Come),come-01,PhraseConceptFeatures(3.0,0.0,false,false)),0)), None, Some((0.029773585223834276,PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false)),2)), None, Some((0.0034520055575284134,PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false)),4)), Some((0.021000359037437508,PhraseConceptPair(List(look),look-01,PhraseConceptFeatures(21.0,-0.8675005677047231,false,false)),5)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)),8)), Some((0.028761418947378138,PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false)),9)), None, None)
Adding concept: now
nodeIds = List(0)
concepts = List(now)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(now),now,PhraseConceptFeatures(19.0,-0.10008345855698253,false,false))
feats:
bias 1.0
c|p -0.10008345855698253
len 1.0

score:
0.028761418947378145
Adding concept: sunset
nodeIds = List(1)
concepts = List(sunset)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05853500417121242
Adding concept: look-01
nodeIds = List(2)
concepts = List(look-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(look),look-01,PhraseConceptFeatures(21.0,-0.8675005677047231,false,false))
feats:
bias 1.0
c|p -0.8675005677047231
len 1.0

score:
0.07953536320864993
Adding concept: go-02
nodeIds = List(3)
concepts = List(go-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false))
feats:
bias 1.0
c|p -2.6026896854443837
len 1.0

score:
0.08298736876617835
Adding concept: let-01
nodeIds = List(4)
concepts = List(let-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(let),let-01,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.11276095399001262
Adding concept: come-01
nodeIds = List(5)
concepts = List(come-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Come),come-01,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1425345392138469
Decoder1 Spans:
Span 1:  Come => come-01
Span 2:  go => go-02
Span 3:  let => let-01
Span 4:  look => look-01
Span 5:  now => now
Span 6:  sunset => sunset
Decoder1 feats:
bias 6.0
c|p -3.5702737117060894
len 6.0

Concepts:
id = 2 concept = look-01
id = 5 concept = come-01
id = 1 concept = sunset
id = 4 concept = let-01
id = 0 concept = now
id = 3 concept = go-02
Spans:
Span 0-1:  Come => come-01
Span 4-5:  go => go-02
Span 2-3:  let => let-01
Span 5-6:  look => look-01
Span 9-10:  now => now
Span 8-9:  sunset => sunset

rootDependencyPaths = List(List(0), List(0, 1), List(0, 2), List(0, 2, 4, 3), List(0, 2, 4), List(0, 2, 4, 5), List(0, 2, 4, 5, 6), List(0, 2, 4, 5, 6, 8, 7), List(0, 2, 4, 5, 6, 8), List(0, 2, 4, 5, 9), List(0, 10), List(0, 11))
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -57.062256882717286
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -59.062256882717286
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -61.062256882717286
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -63.062256882717286
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -65.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -67.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -69.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -71.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -73.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -75.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -77.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -79.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -81.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -83.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -85.06225688271728
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -87.06225688271729
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -89.06225688271729
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -91.06225688271729
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -93.06225688271729
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -95.06225688271729
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 3
Node = 1
Node = 5
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -96.33165762577427
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -98.06225688271729
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 3
Node = 1
Node = 5
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -99.33165762577427
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -100.12401795184732
getNodeById = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
getNodeById2 = Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02)
Node = 2
Node = 3
Node = 1
Node = 5
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -101.3934186949043
Langrangian relaxation converged after 25 iterations. Delta = 0.0
Node.spans:
imperative List()
we List()
look-01 List()
go-05 List()
now List()
imperative List()
you List()
come-01 List()
sunset List()
and List()
clearUnalignedNodes():  removing unaligned node: None / imperative
clearUnalignedNodes():  removing unaligned node: Some(w) / we
clearUnalignedNodes():  removing unaligned node: None / imperative
clearUnalignedNodes():  removing unaligned node: Some(y) / you
clearUnalignedNodes():  removing unaligned node: Some(a) / and
OracleGraph nodes = List(look-01, go-05, now, come-01, sunset)
OracleGraph triples: (g / go-05, ARG1, l / look-01)
(l / look-01, ARG1, s / sunset)
(l / look-01, time, n / now)
rootDependencyPaths = List(List(0), List(0, 1), List(0, 2), List(0, 2, 4, 3), List(0, 2, 4), List(0, 2, 4, 5), List(0, 2, 4, 5, 6), List(0, 2, 4, 5, 6, 8, 7), List(0, 2, 4, 5, 6, 8), List(0, 2, 4, 5, 9), List(0, 10), List(0, 11))
Oracle Span 0-1:  Come => come-01
Oracle Span 4-5:  go => go-05
Oracle Span 5-6:  look => look-01
Oracle Span 9-10:  now => now
Oracle Span 8-9:  sunset => sunset

Incorrect span: go => go-02
Extra span: let => let-01
Missing span: go => go-05
Dependencies:
1	Come	_	VB	VB	_	0	root	_	_
2	,	_	,	,	_	1	punct	_	_
3	let	_	VB	VB	_	1	dep	_	_
4	us	_	PRP	PRP	_	5	nsubj	_	_
5	go	_	VB	VB	_	3	ccomp	_	_
6	look	_	VB	VB	_	5	dep	_	_
7	at	_	IN	IN	_	6	prep	_	_
8	a	_	DT	DT	_	9	det	_	_
9	sunset	_	NN	NN	_	7	pobj	_	_
10	now	_	RB	RB	_	6	advmod	_	_
11	.	_	.	.	_	1	punct	_	_
12	"	_	''	''	_	1	punct	_	_

Oracle:
(g / go-05, ARG1, l / look-01)
(l / look-01, ARG1, s / sunset)
(l / look-01, time, n / now)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),now,now,false), Span(8,9,List(1),sunset,sunset,false), Span(5,6,List(2),look,look-01,false), Span(4,5,List(3),go,go-02,false), Span(2,3,List(4),let,let-01,false), Span(0,1,List(5),Come,come-01,false)),Map(2 -> look-01, 5 -> come-01, 1 -> sunset, 4 -> let-01, 0 -> now, 3 -> go-02),Map(n -> now, s -> sunset, g -> go-02, l2 -> let-01, c -> come-01, l -> look-01))),[Ljava.lang.String;@479cbee5,Annotation([Ljava.lang.String;@59e2d8e3,[Ljava.lang.String;@2b72cb8a,[Ljava.lang.String;@7f8a9499),Annotation([Ljava.lang.String;@5d43661b,[Ljava.lang.String;@12299890,[Ledu.cmu.lti.nlp.amr.Dependency;@2fba3fc4),Annotation([Ljava.lang.String;@4bf48f6,[Ljava.lang.String;@420a85c4,[Ljava.lang.String;@1c39680d),Annotation([Ljava.lang.String;@62833051,[Ljava.lang.String;@1c852c0f,[Ledu.cmu.lti.nlp.amr.Entity;@a37aefe))
AMR:
(c / come-01, ARG1, g / go-02)
(g / go-02, ARG0, n / now)
(g / go-02, ARG1, l / look-01)
(l / look-01, ARG1, s / sunset)
(l2 / let-01, ARG1, g / go-02)

Decoded in 73,035 microseconds
Sentence: " But we must wait , "


--- Decoder1 ---

Sentence: " But we must wait , "
word = "
Finding date entities
Possible invoked concepts: List()
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = we
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)))
concept = PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
score = 0
adding concept:PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
word = must
Finding date entities
Possible invoked concepts: List()
word = wait
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),1)), Some((0.02880969217705289,PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false)),2)), None, Some((0.029773585223834276,PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false)),4)), None, None)
Adding concept: wait-01
nodeIds = List(0)
concepts = List(wait-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: we
nodeIds = List(1)
concepts = List(we)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(we),we,PhraseConceptFeatures(10.0,-0.0953101798043249,false,false))
feats:
bias 1.0
c|p -0.0953101798043249
len 1.0

score:
0.05858327740088716
Adding concept: contrast-01
nodeIds = List(2)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.07929161861288207
Decoder1 Spans:
Span 1:  But => contrast-01
Span 2:  wait => wait-01
Span 3:  we => we
Decoder1 feats:
bias 3.0
c|p -0.9916856019775385
len 3.0

Concepts:
id = 2 concept = contrast-01
id = 1 concept = we
id = 0 concept = wait-01
Spans:
Span 1-2:  But => contrast-01
Span 4-5:  wait => wait-01
Span 2-3:  we => we

rootDependencyPaths = List(List(1, 0), List(1), List(1, 4, 2), List(1, 4, 3), List(1, 4), List(1, 4, 5), List(1, 4, 6))
getNodeById = Map(2 -> contrast-01, 1 -> we, 0 -> wait-01)
getNodeById2 = Map(2 -> contrast-01, 1 -> we, 0 -> wait-01)
getNodeById = Map(2 -> contrast-01, 1 -> we, 0 -> wait-01)
getNodeById2 = Map(2 -> contrast-01, 1 -> we, 0 -> wait-01)
Node = 2
Node = 0
Node = 1
visited = Set(0, 1, 2)
Alg2 returning score = 86.06068301582974
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
wait-01 List()
we List()
obligate-01 List()
contrast-01 List()
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
OracleGraph nodes = List(wait-01, we, contrast-01)
OracleGraph triples: (w2 / wait-01, ARG1, w / we)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 4, 2), List(1, 4, 3), List(1, 4), List(1, 4, 5), List(1, 4, 6))
Oracle Span 1-2:  But => contrast-01
Oracle Span 4-5:  wait => wait-01
Oracle Span 2-3:  we => we

Dependencies:
1	"	_	NNP	NNP	_	2	nsubj	_	_
2	But	_	VBZ	VBZ	_	0	root	_	_
3	we	_	PRP	PRP	_	5	nsubj	_	_
4	must	_	MD	MD	_	5	aux	_	_
5	wait	_	VB	VB	_	2	ccomp	_	_
6	,	_	,	,	_	5	punct	_	_
7	"	_	''	''	_	5	punct	_	_

Oracle:
(w2 / wait-01, ARG1, w / we)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),wait,wait-01,false), Span(2,3,List(1),we,we,false), Span(1,2,List(2),But,contrast-01,false)),Map(2 -> contrast-01, 1 -> we, 0 -> wait-01),Map(w -> wait-01, w2 -> we, c -> contrast-01))),[Ljava.lang.String;@5d99c6b5,Annotation([Ljava.lang.String;@266374ef,[Ljava.lang.String;@13b3d178,[Ljava.lang.String;@24c4ddae),Annotation([Ljava.lang.String;@37fb0bed,[Ljava.lang.String;@a82c5f1,[Ledu.cmu.lti.nlp.amr.Dependency;@7b7fdc8),Annotation([Ljava.lang.String;@51c693d,[Ljava.lang.String;@6a57ae10,[Ljava.lang.String;@766653e6),Annotation([Ljava.lang.String;@4e07b95f,[Ljava.lang.String;@28b46423,[Ledu.cmu.lti.nlp.amr.Entity;@7fc4780b))
AMR:
(c / contrast-01, ARG0, w2 / we)
(c / contrast-01, ARG1, w / wait-01)
(w / wait-01, ARG1, w2 / we)

Decoded in 9,545 microseconds
Sentence: I said .


--- Decoder1 ---

Sentence: I said .
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),1)), None)
Adding concept: say-01
nodeIds = List(0)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: i
nodeIds = List(1)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.05582279164206354
Decoder1 Spans:
Span 1:  I => i
Span 2:  said => say-01
Decoder1 feats:
bias 2.0
c|p -0.36826825839956406
len 2.0

Concepts:
id = 1 concept = i
id = 0 concept = say-01
Spans:
Span 0-1:  I => i
Span 1-2:  said => say-01

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2))
getNodeById = Map(1 -> i, 0 -> say-01)
getNodeById2 = Map(1 -> i, 0 -> say-01)
getNodeById = Map(1 -> i, 0 -> say-01)
getNodeById2 = Map(1 -> i, 0 -> say-01)
Node = 0
Node = 1
visited = Set(0, 1)
Alg2 returning score = 228.9954958569056
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
i List()
say-01 List()
OracleGraph nodes = List(i, say-01)
OracleGraph triples: (s / say-01, ARG0, i / i)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2))
Oracle Span 0-1:  I => i
Oracle Span 1-2:  said => say-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	.	_	.	.	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, i / i)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),said,say-01,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> say-01),Map(s -> say-01, i -> i))),[Ljava.lang.String;@3b79fd76,Annotation([Ljava.lang.String;@48c76607,[Ljava.lang.String;@43599640,[Ljava.lang.String;@1f81aa00),Annotation([Ljava.lang.String;@6b6776cb,[Ljava.lang.String;@1863d2fe,[Ledu.cmu.lti.nlp.amr.Dependency;@1787bc24),Annotation([Ljava.lang.String;@544d57e,[Ljava.lang.String;@55c53a33,[Ljava.lang.String;@53b7f657),Annotation([Ljava.lang.String;@797b0699,[Ljava.lang.String;@5a37d3ed,[Ledu.cmu.lti.nlp.amr.Entity;@26df6e3a))
AMR:
(s / say-01, ARG0, i / i)

Decoded in 4,505 microseconds
Sentence: " Wait ?


--- Decoder1 ---

Sentence: " Wait ?
word = "
Finding date entities
Possible invoked concepts: List()
word = Wait
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Wait),wait-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(Wait),wait-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Wait),wait-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.029773585223834276,PhraseConceptPair(List(Wait),wait-01,PhraseConceptFeatures(1.0,0.0,false,false)),1)), None)
Adding concept: wait-01
nodeIds = List(0)
concepts = List(wait-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Wait),wait-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Decoder1 Spans:
Span 1:  Wait => wait-01
Decoder1 feats:
bias 1.0
len 1.0

Concepts:
id = 0 concept = wait-01
Spans:
Span 1-2:  Wait => wait-01

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2))
getNodeById = Map(0 -> wait-01)
getNodeById2 = Map(0 -> wait-01)
getNodeById = Map(0 -> wait-01)
getNodeById2 = Map(0 -> wait-01)
Node = 0
visited = Set(0)
Alg2 returning score = 5.117851271725918
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
interrogative List()
wait-01 List()
clearUnalignedNodes():  removing unaligned node: None / interrogative
OracleGraph nodes = List(wait-01)
OracleGraph triples: 
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2))
Oracle Span 1-2:  Wait => wait-01

Dependencies:
1	"	_	WP	WP	_	2	nsubj	_	_
2	Wait	_	VBZ	VBZ	_	0	root	_	_
3	?	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),Wait,wait-01,false)),Map(0 -> wait-01),Map(w -> wait-01))),[Ljava.lang.String;@4a3631f8,Annotation([Ljava.lang.String;@6b58b9e9,[Ljava.lang.String;@f14a7d4,[Ljava.lang.String;@52e7a6b2),Annotation([Ljava.lang.String;@29a5f4e7,[Ljava.lang.String;@79c97cb,[Ledu.cmu.lti.nlp.amr.Dependency;@2d9caaeb),Annotation([Ljava.lang.String;@42a15bdc,[Ljava.lang.String;@44a59da3,[Ljava.lang.String;@27e47833),Annotation([Ljava.lang.String;@6f6745d6,[Ljava.lang.String;@27508c5d,[Ledu.cmu.lti.nlp.amr.Entity;@4f704591))
AMR:


Decoded in 2,846 microseconds
Sentence: For what ? "


--- Decoder1 ---

Sentence: For what ? "
word = For
Finding date entities
Possible invoked concepts: List()
word = what
Finding date entities
Possible invoked concepts: List()
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, None)
Decoder1 Spans:
Span 1:   => amr-empty
Decoder1 feats:

Concepts:
id = 0 concept = amr-empty
Spans:
Span 0-1:   => amr-empty

rootDependencyPaths = List(List(0), List(0, 1), List(0, 2), List(0, 3))
getNodeById = Map(0 -> amr-empty)
getNodeById2 = Map(0 -> amr-empty)
getNodeById = Map(0 -> amr-empty)
getNodeById2 = Map(0 -> amr-empty)
Node = 0
visited = Set(0)
Alg2 returning score = 0.11785127172591817
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
amr-unknown List()
wait-01 List()
****************** MALFORMED SPAN: 
clearUnalignedNodes():  removing unaligned node: Some(a) / amr-unknown
clearUnalignedNodes():  removing unaligned node: Some(w) / wait-01
OracleGraph nodes = List()
OracleGraph triples: 
rootDependencyPaths = List(List(0), List(0, 1), List(0, 2), List(0, 3))

Extra span:  => amr-empty
Dependencies:
1	For	_	IN	IN	_	0	root	_	_
2	what	_	WP	WP	_	1	pobj	_	_
3	?	_	.	.	_	1	punct	_	_
4	"	_	''	''	_	1	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@4b5189ac,Annotation([Ljava.lang.String;@1e4d3ce5,[Ljava.lang.String;@3ddc6915,[Ljava.lang.String;@704deff2),Annotation([Ljava.lang.String;@379614be,[Ljava.lang.String;@404bbcbd,[Ledu.cmu.lti.nlp.amr.Dependency;@1e81f160),Annotation([Ljava.lang.String;@1acaf3d,[Ljava.lang.String;@6986852,[Ljava.lang.String;@1bab8268),Annotation([Ljava.lang.String;@a307a8c,[Ljava.lang.String;@6e01f9b0,[Ledu.cmu.lti.nlp.amr.Entity;@2b9ed6da))
AMR:


Decoded in 4,810 microseconds
Sentence: " For the sunset .


--- Decoder1 ---

Sentence: " For the sunset .
word = "
Finding date entities
Possible invoked concepts: List()
word = For
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = sunset
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)),3)), None)
Adding concept: sunset
nodeIds = List(0)
concepts = List(sunset)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Decoder1 Spans:
Span 1:  sunset => sunset
Decoder1 feats:
bias 1.0
len 1.0

Concepts:
id = 0 concept = sunset
Spans:
Span 3-4:  sunset => sunset

rootDependencyPaths = List(List(3, 0), List(3, 2, 1), List(3, 2), List(3), List(3, 4))
getNodeById = Map(0 -> sunset)
getNodeById2 = Map(0 -> sunset)
getNodeById = Map(0 -> sunset)
getNodeById2 = Map(0 -> sunset)
Node = 0
visited = Set(0)
Alg2 returning score = 0.11785127172591817
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
sunset List()
wait-01 List()
clearUnalignedNodes():  removing unaligned node: Some(w) / wait-01
OracleGraph nodes = List(sunset)
OracleGraph triples: 
rootDependencyPaths = List(List(3, 0), List(3, 2, 1), List(3, 2), List(3), List(3, 4))
Oracle Span 3-4:  sunset => sunset

Dependencies:
1	"	_	''	''	_	4	punct	_	_
2	For	_	IN	IN	_	3	amod	_	_
3	the	_	DT	DT	_	4	nsubj	_	_
4	sunset	_	VBP	VBP	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),sunset,sunset,false)),Map(0 -> sunset),Map(s -> sunset))),[Ljava.lang.String;@6c61a903,Annotation([Ljava.lang.String;@658c5a19,[Ljava.lang.String;@421e361,[Ljava.lang.String;@59d4cd39),Annotation([Ljava.lang.String;@389c4eb1,[Ljava.lang.String;@3fc79729,[Ledu.cmu.lti.nlp.amr.Dependency;@34f6515b),Annotation([Ljava.lang.String;@4b34fff9,[Ljava.lang.String;@1187c9e8,[Ljava.lang.String;@127a7a2e),Annotation([Ljava.lang.String;@14008db3,[Ljava.lang.String;@78a773fd,[Ledu.cmu.lti.nlp.amr.Entity;@57c03d88))
AMR:


Decoded in 7,943 microseconds
Sentence: We must wait until it is time . "


--- Decoder1 ---

Sentence: We must wait until it is time . "
word = We
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false)))
concept = PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false))
score = 0
adding concept:PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false))
word = must
Finding date entities
Possible invoked concepts: List()
word = wait
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = until
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false)))
concept = PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
score = 0
adding concept:PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = time
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)), PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false)))
concept = PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
score = 0
adding concept:PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
concept = PhraseConceptPair(List(time),time-to-time,PhraseConceptFeatures(1.0,-4.1588830833596715,false,false))
score = 0
word = .
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.02792972676891532,PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false)),0)), None, Some((0.029773585223834276,PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false)),2)), Some((0.025673026403986283,PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false)),3)), Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),4)), None, Some((0.017491641887458505,PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false)),6)), None, None)
Adding concept: time
nodeIds = List(0)
concepts = List(time)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(time),time,PhraseConceptFeatures(19.0,-1.2144441041932315,false,false))
feats:
bias 1.0
c|p -1.2144441041932315
len 1.0

score:
0.017491641887458498
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.036410761311270995
Adding concept: until
nodeIds = List(2)
concepts = List(until)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(until),until,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
feats:
bias 1.0
c|p -0.40546510810816444
len 1.0

score:
0.06208378771525727
Adding concept: wait-01
nodeIds = List(3)
concepts = List(wait-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(wait),wait-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.09185737293909155
Adding concept: we
nodeIds = List(4)
concepts = List(we)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(We),we,PhraseConceptFeatures(5.0,-0.1823215567939546,false,false))
feats:
bias 1.0
c|p -0.1823215567939546
len 1.0

score:
0.11978709970800687
Decoder1 Spans:
Span 1:  it => it
Span 2:  time => time
Span 3:  until => until
Span 4:  wait => wait-01
Span 5:  We => we
Decoder1 feats:
bias 5.0
c|p -2.8755252497791703
len 5.0

Concepts:
id = 2 concept = until
id = 1 concept = it
id = 4 concept = we
id = 0 concept = time
id = 3 concept = wait-01
Spans:
Span 4-5:  it => it
Span 6-7:  time => time
Span 3-4:  until => until
Span 2-3:  wait => wait-01
Span 0-1:  We => we

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 6, 3), List(2, 6, 4), List(2, 6, 5), List(2, 6), List(2, 7), List(2, 8))
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -54.69508790535523
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -56.69508790535523
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -57.83490923529556
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -60.69508790535523
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -62.69508790535523
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -63.83490923529556
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -66.69508790535522
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -68.69508790535522
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -69.4166335814077
getNodeById = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
getNodeById2 = Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -70.99454006441411
Langrangian relaxation converged after 10 iterations. Delta = 0.0
Node.spans:
we List()
until List()
wait-01 List()
obligate-01 List()
time List()
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
OracleGraph nodes = List(we, until, wait-01, time)
OracleGraph triples: (u / until, op, t / time)
(w2 / wait-01, ARG1, w / we)
(w2 / wait-01, duration, u / until)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 6, 3), List(2, 6, 4), List(2, 6, 5), List(2, 6), List(2, 7), List(2, 8))
Oracle Span 6-7:  time => time
Oracle Span 3-4:  until => until
Oracle Span 2-3:  wait => wait-01
Oracle Span 0-1:  We => we

Extra span: it => it
Dependencies:
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	must	_	MD	MD	_	3	aux	_	_
3	wait	_	VB	VB	_	0	root	_	_
4	until	_	IN	IN	_	7	mark	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	time	_	NN	NN	_	3	advcl	_	_
8	.	_	.	.	_	3	punct	_	_
9	"	_	''	''	_	3	punct	_	_

Oracle:
(u / until, op, t / time)
(w2 / wait-01, ARG1, w / we)
(w2 / wait-01, duration, u / until)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),time,time,false), Span(4,5,List(1),it,it,false), Span(3,4,List(2),until,until,false), Span(2,3,List(3),wait,wait-01,false), Span(0,1,List(4),We,we,false)),Map(2 -> until, 1 -> it, 4 -> we, 0 -> time, 3 -> wait-01),Map(w -> wait-01, t -> time, w2 -> we, i -> it, u -> until))),[Ljava.lang.String;@16aa8654,Annotation([Ljava.lang.String;@6d7fc27,[Ljava.lang.String;@45ac5f9b,[Ljava.lang.String;@135606db),Annotation([Ljava.lang.String;@518caac3,[Ljava.lang.String;@68034211,[Ledu.cmu.lti.nlp.amr.Dependency;@4f74980d),Annotation([Ljava.lang.String;@6c372fe6,[Ljava.lang.String;@58594a11,[Ljava.lang.String;@2a3888c1),Annotation([Ljava.lang.String;@4167d97b,[Ljava.lang.String;@14fa86ae,[Ledu.cmu.lti.nlp.amr.Entity;@6e15fe2))
AMR:
(t / time, domain, i / it)
(w / wait-01, ARG0, w2 / we)
(w / wait-01, ARG1, i / it)
(w / wait-01, time, u / until)

Decoded in 30,852 microseconds
Sentence: At first you seemed to be very much surprised .


--- Decoder1 ---

Sentence: At first you seemed to be very much surprised .
word = At
Finding date entities
Possible invoked concepts: List()
word = first
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false)), PhraseConceptPair(List(first),first-of-all,PhraseConceptFeatures(1.0,-3.332204510175204,false,false)))
concept = PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
score = 0
adding concept:PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
concept = PhraseConceptPair(List(first),first-of-all,PhraseConceptFeatures(1.0,-3.332204510175204,false,false))
score = 0
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = seemed
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(seemed),seem-01,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(seemed),seem-01,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(seemed),seem-01,PhraseConceptFeatures(7.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = be
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false)))
concept = PhraseConceptPair(List(be),be-02,PhraseConceptFeatures(1.0,-4.499809670330265,false,false))
score = 0
word = very
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)))
concept = PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
word = much
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = surprised
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(surprised),surprise-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(surprised),surprise-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(surprised),surprise-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.003084211483316255,PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false)),1)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(seemed),seem-01,PhraseConceptFeatures(7.0,0.0,false,false)),3)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false)),6)), Some((0.02932403466221358,PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),7)), Some((0.029773585223834276,PhraseConceptPair(List(surprised),surprise-01,PhraseConceptFeatures(2.0,0.0,false,false)),8)), None)
Adding concept: surprise-01
nodeIds = List(0)
concepts = List(surprise-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(surprised),surprise-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: much
nodeIds = List(1)
concepts = List(much)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(much),much,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.05909761988604785
Adding concept: very
nodeIds = List(2)
concepts = List(very)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(very),very,PhraseConceptFeatures(59.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08887120510988213
Adding concept: seem-01
nodeIds = List(3)
concepts = List(seem-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(seemed),seem-01,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1186447903337164
Adding concept: you
nodeIds = List(4)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.14579015342857182
Adding concept: first
nodeIds = List(5)
concepts = List(first)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(first),first,PhraseConceptFeatures(2.0,-2.639057329615259,false,false))
feats:
bias 1.0
c|p -2.639057329615259
len 1.0

score:
0.14887436491188807
Decoder1 Spans:
Span 1:  first => first
Span 2:  much => much
Span 3:  seemed => seem-01
Span 4:  surprised => surprise-01
Span 5:  very => very
Span 6:  you => you
Decoder1 feats:
bias 6.0
c|p -2.943388883325922
len 6.0

Concepts:
id = 2 concept = very
id = 5 concept = first
id = 1 concept = much
id = 4 concept = you
id = 0 concept = surprise-01
id = 3 concept = seem-01
Spans:
Span 1-2:  first => first
Span 7-8:  much => much
Span 3-4:  seemed => seem-01
Span 8-9:  surprised => surprise-01
Span 6-7:  very => very
Span 2-3:  you => you

rootDependencyPaths = List(List(3, 0), List(3, 0, 1), List(3, 2), List(3), List(3, 8, 4), List(3, 8, 5), List(3, 8, 6), List(3, 8, 7), List(3, 8), List(3, 9))
getNodeById = Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01)
getNodeById2 = Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01)
getNodeById = Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01)
getNodeById2 = Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01)
Node = 3
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -75.02138298810195
getNodeById = Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01)
getNodeById2 = Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01)
Node = 3
Node = 5
Node = 0
Node = 4
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -77.02138298810195
getNodeById = Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01)
getNodeById2 = Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01)
Node = 3
Node = 5
Node = 4
Node = 0
Node = 1
Node = 2
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = -78.78500503416775
Langrangian relaxation converged after 3 iterations. Delta = 0.0
Node.spans:
you List()
at-first List()
much List()
surprise-01 List()
seem-01 List()
very List()
clearUnalignedNodes():  removing unaligned node: Some(a) / at-first
OracleGraph nodes = List(you, much, surprise-01, seem-01, very)
OracleGraph triples: (m / much, degree, v / very)
(s / seem-01, ARG1, s2 / surprise-01)
(s2 / surprise-01, ARG1, y / you)
(s2 / surprise-01, degree, m / much)
rootDependencyPaths = List(List(3, 0), List(3, 0, 1), List(3, 2), List(3), List(3, 8, 4), List(3, 8, 5), List(3, 8, 6), List(3, 8, 7), List(3, 8), List(3, 9))
Oracle Span 7-8:  much => much
Oracle Span 3-4:  seemed => seem-01
Oracle Span 8-9:  surprised => surprise-01
Oracle Span 6-7:  very => very
Oracle Span 2-3:  you => you

Extra span: first => first
Dependencies:
1	At	_	IN	IN	_	4	prep	_	_
2	first	_	JJ	JJ	_	1	pobj	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	seemed	_	VBD	VBD	_	0	root	_	_
5	to	_	TO	TO	_	9	aux	_	_
6	be	_	VB	VB	_	9	cop	_	_
7	very	_	RB	RB	_	9	advmod	_	_
8	much	_	RB	RB	_	9	advmod	_	_
9	surprised	_	JJ	JJ	_	4	xcomp	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(m / much, degree, v / very)
(s / seem-01, ARG1, s2 / surprise-01)
(s2 / surprise-01, ARG1, y / you)
(s2 / surprise-01, degree, m / much)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),surprised,surprise-01,false), Span(7,8,List(1),much,much,false), Span(6,7,List(2),very,very,false), Span(3,4,List(3),seemed,seem-01,false), Span(2,3,List(4),you,you,false), Span(1,2,List(5),first,first,false)),Map(2 -> very, 5 -> first, 1 -> much, 4 -> you, 0 -> surprise-01, 3 -> seem-01),Map(s2 -> seem-01, s -> surprise-01, v -> very, m -> much, y -> you, f -> first))),[Ljava.lang.String;@68f1b17f,Annotation([Ljava.lang.String;@1722011b,[Ljava.lang.String;@57ad2aa7,[Ljava.lang.String;@5b3f61ff),Annotation([Ljava.lang.String;@3e2059ae,[Ljava.lang.String;@398dada8,[Ledu.cmu.lti.nlp.amr.Dependency;@7cb502c),Annotation([Ljava.lang.String;@275bf9b3,[Ljava.lang.String;@1b8a29df,[Ljava.lang.String;@4fbe37eb),Annotation([Ljava.lang.String;@12a94400,[Ljava.lang.String;@6a47b187,[Ledu.cmu.lti.nlp.amr.Entity;@2049a9c1))
AMR:
(m / much, degree, v / very)
(s / surprise-01, ARG1, y / you)
(s / surprise-01, degree, m / much)
(s2 / seem-01, ARG0, y / you)
(s2 / seem-01, ARG1, f / first)

Decoded in 21,461 microseconds
Sentence: And then you laughed to yourself .


--- Decoder1 ---

Sentence: And then you laughed to yourself .
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = then
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false)))
concept = PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
score = 0
adding concept:PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = laughed
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = yourself
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), Some((0.023573123325860184,PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false)),1)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false)),3)), None, None, None)
Adding concept: laugh-01
nodeIds = List(0)
concepts = List(laugh-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(laughed),laugh-01,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: you
nodeIds = List(1)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.0569189483186897
Adding concept: then
nodeIds = List(2)
concepts = List(then)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
feats:
bias 1.0
c|p -0.6131044728864089
len 1.0

score:
0.08049207164454988
Adding concept: and
nodeIds = List(3)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.10935393877351834
Decoder1 Spans:
Span 1:  And => and
Span 2:  laughed => laugh-01
Span 3:  then => then
Span 4:  you => you
Decoder1 feats:
bias 4.0
c|p -0.9631353610205354
len 4.0

Concepts:
id = 2 concept = then
id = 1 concept = you
id = 0 concept = laugh-01
id = 3 concept = and
Spans:
Span 0-1:  And => and
Span 3-4:  laughed => laugh-01
Span 1-2:  then => then
Span 2-3:  you => you

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 4, 5), List(3, 6))
getNodeById = Map(2 -> then, 1 -> you, 0 -> laugh-01, 3 -> and)
getNodeById2 = Map(2 -> then, 1 -> you, 0 -> laugh-01, 3 -> and)
getNodeById = Map(2 -> then, 1 -> you, 0 -> laugh-01, 3 -> and)
getNodeById2 = Map(2 -> then, 1 -> you, 0 -> laugh-01, 3 -> and)
Node = 3
Node = 0
Node = 2
Node = 1
visited = Set(3, 0, 1, 2)
Alg2 returning score = 13.298979854135014
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
you List()
then List()
laugh-01 List()
and List()
OracleGraph nodes = List(you, then, laugh-01, and)
OracleGraph triples: (a / and, op, l / laugh-01)
(l / laugh-01, ARG0, y / you)
(l / laugh-01, ARG2, y / you)
(l / laugh-01, time, t / then)
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 4), List(3, 4, 5), List(3, 6))
Oracle Span 0-1:  And => and
Oracle Span 3-4:  laughed => laugh-01
Oracle Span 1-2:  then => then
Oracle Span 2-3:  you => you

Dependencies:
1	And	_	CC	CC	_	4	cc	_	_
2	then	_	RB	RB	_	4	advmod	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	laughed	_	VBD	VBD	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	yourself	_	PRP	PRP	_	5	pobj	_	_
7	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, l / laugh-01)
(l / laugh-01, ARG0, y / you)
(l / laugh-01, ARG2, y / you)
(l / laugh-01, time, t / then)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),laughed,laugh-01,false), Span(2,3,List(1),you,you,false), Span(1,2,List(2),then,then,false), Span(0,1,List(3),And,and,false)),Map(2 -> then, 1 -> you, 0 -> laugh-01, 3 -> and),Map(t -> then, y -> you, a -> and, l -> laugh-01))),[Ljava.lang.String;@1ef6d34c,Annotation([Ljava.lang.String;@46271dd6,[Ljava.lang.String;@11bb571c,[Ljava.lang.String;@7c51f34b),Annotation([Ljava.lang.String;@5495333e,[Ljava.lang.String;@2a225dd7,[Ledu.cmu.lti.nlp.amr.Dependency;@61eaec38),Annotation([Ljava.lang.String;@125290e5,[Ljava.lang.String;@6fa34d52,[Ljava.lang.String;@57576994),Annotation([Ljava.lang.String;@616ac46a,[Ljava.lang.String;@67b9b51a,[Ledu.cmu.lti.nlp.amr.Entity;@1205bd62))
AMR:
(a / and, op, l / laugh-01)
(l / laugh-01, ARG0, y / you)
(l / laugh-01, time, t / then)

Decoded in 12,835 microseconds
Sentence: You said to me : " I am always thinking that I am at home ! "


--- Decoder1 ---

Sentence: You said to me : " I am always thinking that I am at home ! "
word = You
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)))
concept = PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
score = 0
adding concept:PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = am
Finding date entities
Possible invoked concepts: List()
word = always
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false)))
concept = PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
word = thinking
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(thinking),think-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(thinking),think-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(thinking),think-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = am
Finding date entities
Possible invoked concepts: List()
word = at
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false)))
concept = PhraseConceptPair(List(at),at,PhraseConceptFeatures(1.0,-4.3694478524670215,false,false))
score = 0
word = home
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false))
word = !
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.02918429879609327,PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),1)), None, None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),6)), None, Some((0.029773585223834276,PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false)),8)), Some((0.029773585223834276,PhraseConceptPair(List(thinking),think-01,PhraseConceptFeatures(2.0,0.0,false,false)),9)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),10)), Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),11)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false)),14)), None, None)
Adding concept: home
nodeIds = List(0)
concepts = List(home)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(home),home,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: i
nodeIds = List(1)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.05582279164206354
Adding concept: that
nodeIds = List(2)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.07244060003127932
Adding concept: think-01
nodeIds = List(3)
concepts = List(think-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(thinking),think-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1022141852551136
Adding concept: always
nodeIds = List(4)
concepts = List(always)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(always),always,PhraseConceptFeatures(10.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.13198777047894789
Adding concept: i
nodeIds = List(5)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.15803697689717716
Adding concept: say-01
nodeIds = List(6)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.18781056212101144
Adding concept: you
nodeIds = List(7)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
feats:
bias 1.0
c|p -0.05826890812397576
len 1.0

score:
0.2169948609171047
Decoder1 Spans:
Span 1:  always => always
Span 2:  home => home
Span 3:  I => i
Span 4:  I => i
Span 5:  said => say-01
Span 6:  that => that
Span 7:  thinking => think-01
Span 8:  You => you
Decoder1 feats:
bias 8.0
c|p -2.0956545800861095
len 8.0

Concepts:
id = 2 concept = that
id = 5 concept = i
id = 7 concept = you
id = 1 concept = i
id = 4 concept = always
id = 6 concept = say-01
id = 0 concept = home
id = 3 concept = think-01
Spans:
Span 8-9:  always => always
Span 14-15:  home => home
Span 11-12:  I => i
Span 6-7:  I => i
Span 1-2:  said => say-01
Span 10-11:  that => that
Span 9-10:  thinking => think-01
Span 0-1:  You => you

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 3), List(1, 4), List(1, 5), List(1, 9, 6), List(1, 9, 7), List(1, 9, 8), List(1, 9), List(1, 9, 12, 10), List(1, 9, 12, 11), List(1, 9, 12), List(1, 9, 12, 13), List(1, 9, 12, 13, 14), List(1, 15), List(1, 16))
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 68.38885857998085
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 60.38885857998085
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 52.41922994334574
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 46.385140325172515
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 42.41551168853741
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 39.385140325172515
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 35.41551168853741
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 32.385140325172515
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 28.41551168853741
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 25.385140325172518
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 21.41551168853741
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 18.385140325172518
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 14.41551168853741
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 11.385140325172518
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 7.415511688537411
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 4.385140325172518
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 0.4155116885374106
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -2.614859674827482
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -6.584488311462589
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 1
Node = 5
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -9.614859674827482
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -13.25669285047061
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -14.287064213835503
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -16.25669285047061
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -17.287064213835503
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -19.25669285047061
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -20.287064213835503
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -22.25669285047061
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -23.287064213835503
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -25.25669285047061
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -26.287064213835503
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -28.25669285047061
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -29.287064213835503
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -31.25669285047061
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -32.28706421383551
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -34.256692850470614
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -35.28706421383551
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 3
Node = 0
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -37.256692850470614
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -38.28706421383551
getNodeById = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
getNodeById2 = Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01)
Node = 6
Node = 0
Node = 3
Node = 7
Node = 4
Node = 2
Node = 5
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -39.52617797170328
Langrangian relaxation converged after 39 iterations. Delta = 0.0
Node.spans:
always List()
think-01 List()
home List()
be-located-at-91 List()
you List()
say-01 List()
i List()
clearUnalignedNodes():  removing unaligned node: Some(b) / be-located-at-91
OracleGraph nodes = List(always, think-01, home, you, say-01, i)
OracleGraph triples: (s / say-01, ARG0, y / you)
(s / say-01, ARG1, t / think-01)
(s / say-01, ARG2, i / i)
(t / think-01, ARG0, y / you)
(t / think-01, time, a / always)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 2, 3), List(1, 4), List(1, 5), List(1, 9, 6), List(1, 9, 7), List(1, 9, 8), List(1, 9), List(1, 9, 12, 10), List(1, 9, 12, 11), List(1, 9, 12), List(1, 9, 12, 13), List(1, 9, 12, 13, 14), List(1, 15), List(1, 16))
Oracle Span 8-9:  always => always
Oracle Span 14-15:  home => home
Oracle Span 6-7:  I => i
Oracle Span 1-2:  said => say-01
Oracle Span 9-10:  thinking => think-01
Oracle Span 0-1:  You => you

Extra span: I => i
Extra span: that => that
Dependencies:
1	You	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	me	_	PRP	PRP	_	3	pobj	_	_
5	:	_	:	:	_	2	punct	_	_
6	"	_	''	''	_	2	punct	_	_
7	I	_	PRP	PRP	_	10	nsubj	_	_
8	am	_	VBP	VBP	_	10	aux	_	_
9	always	_	RB	RB	_	10	advmod	_	_
10	thinking	_	VBG	VBG	_	2	ccomp	_	_
11	that	_	IN	IN	_	13	mark	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	am	_	VBP	VBP	_	10	ccomp	_	_
14	at	_	IN	IN	_	13	prep	_	_
15	home	_	NN	NN	_	14	pobj	_	_
16	!	_	.	.	_	2	punct	_	_
17	"	_	''	''	_	2	punct	_	_

Oracle:
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, t / think-01)
(s / say-01, ARG2, i / i)
(t / think-01, ARG0, y / you)
(t / think-01, time, a / always)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),home,home,false), Span(11,12,List(1),I,i,false), Span(10,11,List(2),that,that,false), Span(9,10,List(3),thinking,think-01,false), Span(8,9,List(4),always,always,false), Span(6,7,List(5),I,i,false), Span(1,2,List(6),said,say-01,false), Span(0,1,List(7),You,you,false)),Map(2 -> that, 5 -> i, 7 -> you, 1 -> i, 4 -> always, 6 -> say-01, 0 -> home, 3 -> think-01),Map(h -> home, t -> that, s -> say-01, y -> you, a -> always, i2 -> i, t2 -> think-01, i -> i))),[Ljava.lang.String;@7ef27d7f,Annotation([Ljava.lang.String;@490caf5f,[Ljava.lang.String;@6337c201,[Ljava.lang.String;@5c669da8),Annotation([Ljava.lang.String;@31920ade,[Ljava.lang.String;@1d483de4,[Ledu.cmu.lti.nlp.amr.Dependency;@4032d386),Annotation([Ljava.lang.String;@28d18df5,[Ljava.lang.String;@934b6cb,[Ljava.lang.String;@55cf0d14),Annotation([Ljava.lang.String;@3b74ac8,[Ljava.lang.String;@27adc16e,[Ledu.cmu.lti.nlp.amr.Entity;@b83a9be))
AMR:
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, t2 / think-01)
(s / say-01, location, h / home)
(t2 / think-01, ARG0, i / i)
(t2 / think-01, ARG1, i2 / i)
(t2 / think-01, direction, t / that)
(t2 / think-01, time, a / always)

Decoded in 175,527 microseconds
Sentence: Just so .


--- Decoder1 ---

Sentence: Just so .
word = Just
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false))
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.029773585223834276,PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false)),0)), Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),1)), None)
Adding concept: so
nodeIds = List(0)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.02530523232977412
Adding concept: just
nodeIds = List(1)
concepts = List(just)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(Just),just,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0550788175536084
Decoder1 Spans:
Span 1:  Just => just
Span 2:  so => so
Decoder1 feats:
bias 2.0
c|p -0.4418327522790392
len 2.0

Concepts:
id = 1 concept = just
id = 0 concept = so
Spans:
Span 0-1:  Just => just
Span 1-2:  so => so

rootDependencyPaths = List(List(0), List(0, 1), List(0, 2))
getNodeById = Map(1 -> just, 0 -> so)
getNodeById2 = Map(1 -> just, 0 -> so)
getNodeById = Map(1 -> just, 0 -> so)
getNodeById2 = Map(1 -> just, 0 -> so)
Node = 1
Node = 0
visited = Set(0, 1)
Alg2 returning score = -67.94396281478774
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
just List()
so List()
OracleGraph nodes = List(just, so)
OracleGraph triples: (s / so, mod, j / just)
rootDependencyPaths = List(List(0), List(0, 1), List(0, 2))
Oracle Span 0-1:  Just => just
Oracle Span 1-2:  so => so

Dependencies:
1	Just	_	CD	CD	_	0	root	_	_
2	so	_	RB	RB	_	1	advmod	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(s / so, mod, j / just)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),so,so,false), Span(0,1,List(1),Just,just,false)),Map(1 -> just, 0 -> so),Map(j -> just, s -> so))),[Ljava.lang.String;@2609b277,Annotation([Ljava.lang.String;@1fd14d74,[Ljava.lang.String;@563e4951,[Ljava.lang.String;@4066c471),Annotation([Ljava.lang.String;@2b175c00,[Ljava.lang.String;@3eb81efb,[Ledu.cmu.lti.nlp.amr.Dependency;@1ae8bcbc),Annotation([Ljava.lang.String;@6cdba6dc,[Ljava.lang.String;@7d3d101b,[Ljava.lang.String;@30c8681),Annotation([Ljava.lang.String;@5cdec700,[Ljava.lang.String;@6d026701,[Ledu.cmu.lti.nlp.amr.Entity;@78aa1f72))
AMR:
(j / just, mod, s / so)

Decoded in 4,501 microseconds
Sentence: Everybody knows that when it is noon in the United States the sun is setting over France .


--- Decoder1 ---

Sentence: Everybody knows that when it is noon in the United States the sun is setting over France .
word = Everybody
Finding date entities
Possible invoked concepts: List()
word = knows
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(knows),know-01,PhraseConceptFeatures(8.0,0.0,false,false)))
concept = PhraseConceptPair(List(knows),know-01,PhraseConceptFeatures(8.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(knows),know-01,PhraseConceptFeatures(8.0,0.0,false,false))
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = when
Finding date entities
Possible invoked concepts: List()
word = it
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)))
concept = PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
score = 0
adding concept:PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = noon
Finding date entities
Possible invoked concepts: List()
word = in
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = United
NER Entity: (country :name (name :op "United" :op "States"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(United, States),(country :name (name :op "United" :op "States")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(United, States),(country :name (name :op "United" :op "States")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = States
Finding date entities
Possible invoked concepts: List()
word = the
Finding date entities
Possible invoked concepts: List()
word = sun
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false)))
concept = PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = setting
Finding date entities
Possible invoked concepts: List()
word = over
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(over),over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)), PhraseConceptPair(List(over),over-and-over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)))
concept = PhraseConceptPair(List(over),over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
concept = PhraseConceptPair(List(over),over-and-over,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
word = France
NER Entity: (country :name (name :op "France"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(France),(country :name (name :op "France")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(France),(country :name (name :op "France")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.029773585223834276,PhraseConceptPair(List(knows),know-01,PhraseConceptFeatures(8.0,0.0,false,false)),1)), Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),2)), None, Some((0.018919119423812483,PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false)),4)), None, None, None, None, None, None, None, Some((0.029773585223834276,PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false)),12)), None, None, None, None, None)
Adding concept: sun
nodeIds = List(0)
concepts = List(sun)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sun),sun,PhraseConceptFeatures(3.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: it
nodeIds = List(1)
concepts = List(it)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(it),it,PhraseConceptFeatures(40.0,-1.0732944806838198,false,false))
feats:
bias 1.0
c|p -1.0732944806838198
len 1.0

score:
0.04869270464764677
Adding concept: that
nodeIds = List(2)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.06531051303686256
Adding concept: know-01
nodeIds = List(3)
concepts = List(know-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(knows),know-01,PhraseConceptFeatures(8.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.09508409826069683
Decoder1 Spans:
Span 1:  it => it
Span 2:  knows => know-01
Span 3:  sun => sun
Span 4:  that => that
Decoder1 feats:
bias 4.0
c|p -2.374143635846826
len 4.0

Concepts:
id = 2 concept = that
id = 1 concept = it
id = 0 concept = sun
id = 3 concept = know-01
Spans:
Span 4-5:  it => it
Span 1-2:  knows => know-01
Span 12-13:  sun => sun
Span 2-3:  that => that

rootDependencyPaths = List(List(1, 0), List(1), List(1, 14, 2), List(1, 14, 6, 3), List(1, 14, 6, 4), List(1, 14, 6, 5), List(1, 14, 6), List(1, 14, 6, 7), List(1, 14, 6, 7, 10, 8), List(1, 14, 6, 7, 10, 9), List(1, 14, 6, 7, 10), List(1, 14, 12, 11), List(1, 14, 12), List(1, 14, 13), List(1, 14), List(1, 14, 15), List(1, 14, 15, 16), List(1, 17))
getNodeById = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById2 = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById2 = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = -158.20272712955156
getNodeById = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById2 = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = -160.20272712955156
getNodeById = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById2 = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = -162.20272712955156
getNodeById = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById2 = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = -164.20272712955156
getNodeById = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById2 = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = -166.20272712955156
getNodeById = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById2 = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
Node = 3
Node = 1
Node = 2
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = -168.20272712955156
getNodeById = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
getNodeById2 = Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01)
Node = 3
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 1, 2)
Alg2 returning score = -169.20644538435988
Langrangian relaxation converged after 7 iterations. Delta = 0.0
Node.spans:
"States" List()
"France" List()
set-11 List()
country List()
country List()
"United" List()
name List()
everybody List()
sun List()
"France" List()
know-01 List()
name List()
"12:00" List()
"United_States" List()
date-entity List()
clearUnalignedNodes():  removing unaligned node: None / "France"
clearUnalignedNodes():  removing unaligned node: None / "12:00"
clearUnalignedNodes():  removing unaligned node: None / "United_States"
clearUnalignedNodes():  removing unaligned node: Some(d) / date-entity
OracleGraph nodes = List("States", set-11, country, country, "United", name, everybody, sun, "France", know-01, name)
OracleGraph triples: (c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(k / know-01, ARG0, e / everybody)
(k / know-01, ARG1, s / set-11)
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "France")
(s / set-11, ARG1, s2 / sun)
(s / set-11, location, c2 / country)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 14, 2), List(1, 14, 6, 3), List(1, 14, 6, 4), List(1, 14, 6, 5), List(1, 14, 6), List(1, 14, 6, 7), List(1, 14, 6, 7, 10, 8), List(1, 14, 6, 7, 10, 9), List(1, 14, 6, 7, 10), List(1, 14, 12, 11), List(1, 14, 12), List(1, 14, 13), List(1, 14), List(1, 14, 15), List(1, 14, 15, 16), List(1, 17))
Oracle Span 0-1:  Everybody => everybody
Oracle Span 16-17:  France => (country :name (name :op "France"))
Oracle Span 1-2:  knows => know-01
Oracle Span 14-15:  setting => set-11
Oracle Span 12-13:  sun => sun
Oracle Span 9-11:  United States => (country :name (name :op "States" :op "United"))

Extra span: it => it
Extra span: that => that
Missing span: France => (country :name (name :op "France"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: setting => set-11
Missing span: Everybody => everybody
Dependencies:
1	Everybody	_	NN	NN	_	2	nsubj	_	_
2	knows	_	VBZ	VBZ	_	0	root	_	_
3	that	_	IN	IN	_	15	mark	_	_
4	when	_	WRB	WRB	_	7	advmod	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	noon	_	NN	NN	_	15	advcl	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	United	_	NNP	NNP	_	11	nn	_	_
11	States	_	NNPS	NNPS	_	8	pobj	_	_
12	the	_	DT	DT	_	13	det	_	_
13	sun	_	NN	NN	_	15	nsubj	_	_
14	is	_	VBZ	VBZ	_	15	aux	_	_
15	setting	_	VBG	VBG	_	2	ccomp	_	_
16	over	_	IN	IN	_	15	prep	_	_
17	France	_	NNP	NNP	_	16	pobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(k / know-01, ARG0, e / everybody)
(k / know-01, ARG1, s / set-11)
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "France")
(s / set-11, ARG1, s2 / sun)
(s / set-11, location, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),sun,sun,false), Span(4,5,List(1),it,it,false), Span(2,3,List(2),that,that,false), Span(1,2,List(3),knows,know-01,false)),Map(2 -> that, 1 -> it, 0 -> sun, 3 -> know-01),Map(k -> know-01, t -> that, s -> sun, i -> it))),[Ljava.lang.String;@1f75a668,Annotation([Ljava.lang.String;@35399441,[Ljava.lang.String;@4b7dc788,[Ljava.lang.String;@6304101a),Annotation([Ljava.lang.String;@5170bcf4,[Ljava.lang.String;@2812b107,[Ledu.cmu.lti.nlp.amr.Dependency;@df6620a),Annotation([Ljava.lang.String;@4e31276e,[Ljava.lang.String;@1a72a540,[Ljava.lang.String;@27d5a580),Annotation([Ljava.lang.String;@198d6542,[Ljava.lang.String;@5e403b4a,[Ledu.cmu.lti.nlp.amr.Entity;@5117dd67))
AMR:
(k / know-01, ARG0, s / sun)
(k / know-01, ARG1, i / it)
(k / know-01, direction, t / that)

Decoded in 34,912 microseconds
Sentence: If you could fly to France in one minute , you could go straight into the sunset , right from noon .


--- Decoder1 ---

Sentence: If you could fly to France in one minute , you could go straight into the sunset , right from noon .
word = If
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)))
concept = PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
score = 0
adding concept:PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = could
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)))
concept = PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
score = 0
adding concept:PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
word = fly
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(fly),fly-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(fly),fly-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(fly),fly-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = France
NER Entity: (country :name (name :op "France"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(France),(country :name (name :op "France")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(France),(country :name (name :op "France")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = in
Finding date entities
Possible invoked concepts: List()
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = minute
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(minute),(temporal-quantity :unit minute),PhraseConceptFeatures(4.0,0.0,false,false)))
concept = PhraseConceptPair(List(minute),(temporal-quantity :unit minute),PhraseConceptFeatures(4.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(minute),(temporal-quantity :unit minute),PhraseConceptFeatures(4.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = could
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)))
concept = PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
score = 0
adding concept:PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
word = go
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(go),go-01,PhraseConceptFeatures(3.0,-3.58351893845611,false,false)), PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false)), PhraseConceptPair(List(go),go-13,PhraseConceptFeatures(1.0,-4.68213122712422,false,false)), PhraseConceptPair(List(go),go-15,PhraseConceptFeatures(2.0,-3.9889840465642745,false,false)), PhraseConceptPair(List(go),go-17,PhraseConceptFeatures(1.0,-4.68213122712422,false,false)), PhraseConceptPair(List(go),go-19,PhraseConceptFeatures(1.0,-4.68213122712422,false,false)))
concept = PhraseConceptPair(List(go),go-01,PhraseConceptFeatures(3.0,-3.58351893845611,false,false))
score = 0
concept = PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false))
score = 0
adding concept:PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false))
concept = PhraseConceptPair(List(go),go-13,PhraseConceptFeatures(1.0,-4.68213122712422,false,false))
score = 0
concept = PhraseConceptPair(List(go),go-15,PhraseConceptFeatures(2.0,-3.9889840465642745,false,false))
score = 0
concept = PhraseConceptPair(List(go),go-17,PhraseConceptFeatures(1.0,-4.68213122712422,false,false))
score = 0
concept = PhraseConceptPair(List(go),go-19,PhraseConceptFeatures(1.0,-4.68213122712422,false,false))
score = 0
word = straight
Finding date entities
Possible invoked concepts: List()
word = into
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(into),into,PhraseConceptFeatures(1.0,-2.639057329615259,false,false)))
concept = PhraseConceptPair(List(into),into,PhraseConceptFeatures(1.0,-2.639057329615259,false,false))
score = 0
adding concept:PhraseConceptPair(List(into),into,PhraseConceptFeatures(1.0,-2.639057329615259,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = sunset
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = right
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false)))
concept = PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false))
score = 0
adding concept:PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false))
word = from
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false)))
concept = PhraseConceptPair(List(from),from,PhraseConceptFeatures(2.0,-2.995732273553991,false,false))
score = 0
word = noon
Finding date entities
Possible invoked concepts: List()
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.0011206685260514437,PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false)),0)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),1)), Some((0.02893032846730732,PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(fly),fly-01,PhraseConceptFeatures(1.0,0.0,false,false)),3)), None, None, None, Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),7)), Some((0.029773585223834276,PhraseConceptPair(List(minute),(temporal-quantity :unit minute),PhraseConceptFeatures(4.0,0.0,false,false)),8)), None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),10)), Some((0.02893032846730732,PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false)),11)), Some((0.0034520055575284134,PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false)),12)), None, Some((0.003084211483316255,PhraseConceptPair(List(into),into,PhraseConceptFeatures(1.0,-2.639057329615259,false,false)),14)), None, Some((0.029773585223834276,PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)),16)), None, Some((0.02637076665838812,PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false)),18)), None, None, None)
Adding concept: right
nodeIds = List(0)
concepts = List(right)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(right),right,PhraseConceptFeatures(5.0,-0.3364722366212129,false,false))
feats:
bias 1.0
c|p -0.3364722366212129
len 1.0

score:
0.026370766658388112
Adding concept: sunset
nodeIds = List(1)
concepts = List(sunset)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05614435188222239
Adding concept: into
nodeIds = List(2)
concepts = List(into)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(into),into,PhraseConceptFeatures(1.0,-2.639057329615259,false,false))
feats:
bias 1.0
c|p -2.639057329615259
len 1.0

score:
0.05922856336553864
Adding concept: go-02
nodeIds = List(3)
concepts = List(go-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(go),go-02,PhraseConceptFeatures(8.0,-2.6026896854443837,false,false))
feats:
bias 1.0
c|p -2.6026896854443837
len 1.0

score:
0.06268056892306706
Adding concept: possible
nodeIds = List(4)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
feats:
bias 1.0
c|p -0.08338160893905101
len 1.0

score:
0.09161089739037438
Adding concept: you
nodeIds = List(5)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.1187562604852298
Adding concept: (temporal-quantity :unit minute)
nodeIds = List(6, 7)
concepts = List(temporal-quantity, minute)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(minute),(temporal-quantity :unit minute),PhraseConceptFeatures(4.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.14852984570906408
Adding concept: 1
nodeIds = List(8)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.15918742255537244
Adding concept: fly-01
nodeIds = List(9)
concepts = List(fly-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(fly),fly-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1889610077792067
Adding concept: possible
nodeIds = List(10)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(could),possible,PhraseConceptFeatures(23.0,-0.08338160893905101,false,false))
feats:
bias 1.0
c|p -0.08338160893905101
len 1.0

score:
0.21789133624651402
Adding concept: you
nodeIds = List(11)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.24503669934136946
Adding concept: cause-01
nodeIds = List(12)
concepts = List(cause-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(If),cause-01,PhraseConceptFeatures(1.0,-2.833213344056216,false,false))
feats:
bias 1.0
c|p -2.833213344056216
len 1.0

score:
0.2461573678674209
Decoder1 Spans:
Span 1:  could => possible
Span 2:  could => possible
Span 3:  fly => fly-01
Span 4:  go => go-02
Span 5:  If => cause-01
Span 6:  into => into
Span 7:  minute => (temporal-quantity :unit minute)
Span 8:  one => 1
Span 9:  right => right
Span 10:  sunset => sunset
Span 11:  you => you
Span 12:  you => you
Decoder1 feats:
bias 12.0
c|p -10.988154937936141
len 12.0

Concepts:
id = 2 concept = into
id = 5 concept = you
id = 12 concept = cause-01
id = 8 concept = 1
id = 7 concept = minute
id = 1 concept = sunset
id = 4 concept = possible
id = 11 concept = you
id = 6 concept = temporal-quantity
id = 0 concept = right
id = 9 concept = fly-01
id = 3 concept = go-02
id = 10 concept = possible
Spans:
Span 11-12:  could => possible
Span 2-3:  could => possible
Span 3-4:  fly => fly-01
Span 12-13:  go => go-02
Span 0-1:  If => cause-01
Span 14-15:  into => into
Span 8-9:  minute => (temporal-quantity :unit minute)
Span 7-8:  one => 1
Span 18-19:  right => right
Span 16-17:  sunset => sunset
Span 10-11:  you => you
Span 1-2:  you => you

rootDependencyPaths = List(List(12, 3, 0), List(12, 3, 1), List(12, 3, 2), List(12, 3), List(12, 3, 4), List(12, 3, 4, 5), List(12, 3, 6), List(12, 3, 6, 8, 7), List(12, 3, 6, 8), List(12, 9), List(12, 10), List(12, 11), List(12), List(12, 14, 13), List(12, 14), List(12, 14, 16, 15), List(12, 14, 16), List(12, 14, 17), List(12, 14, 18), List(12, 14, 19), List(12, 14, 19, 20), List(12, 21))
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 0
Node = 1
Node = 2
Node = 11
Node = 12
Node = 5
Node = 9
Node = 8
Node = 10
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -364.46489190216613
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 0
Node = 1
Node = 2
Node = 12
Node = 11
Node = 5
Node = 8
Node = 9
Node = 6
Node = 10
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -376.3508106468678
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 12
Node = 0
Node = 11
Node = 5
Node = 1
Node = 8
Node = 9
Node = 6
Node = 10
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -382.583772798174
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 0
Node = 2
Node = 11
Node = 12
Node = 5
Node = 1
Node = 9
Node = 8
Node = 10
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -386.4221505222563
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 12
Node = 0
Node = 11
Node = 5
Node = 1
Node = 8
Node = 9
Node = 6
Node = 10
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -390.34816204420014
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 11
Node = 12
Node = 5
Node = 1
Node = 9
Node = 8
Node = 10
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -394.1865397682825
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 12
Node = 11
Node = 5
Node = 1
Node = 8
Node = 9
Node = 6
Node = 10
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -396.0724585129841
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 11
Node = 12
Node = 5
Node = 1
Node = 9
Node = 8
Node = 10
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -397.1865397682825
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 12
Node = 11
Node = 5
Node = 1
Node = 8
Node = 9
Node = 6
Node = 10
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -399.0724585129841
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 11
Node = 12
Node = 5
Node = 1
Node = 9
Node = 8
Node = 10
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -400.1865397682825
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 12
Node = 11
Node = 5
Node = 1
Node = 8
Node = 9
Node = 6
Node = 10
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -402.0724585129841
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 11
Node = 12
Node = 5
Node = 1
Node = 9
Node = 8
Node = 10
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -403.1865397682825
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 12
Node = 11
Node = 5
Node = 1
Node = 8
Node = 9
Node = 6
Node = 10
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -405.0724585129841
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 11
Node = 12
Node = 5
Node = 1
Node = 9
Node = 8
Node = 10
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -406.1865397682825
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 12
Node = 11
Node = 5
Node = 1
Node = 8
Node = 9
Node = 6
Node = 10
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -408.0724585129841
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 0
Node = 11
Node = 12
Node = 5
Node = 1
Node = 9
Node = 8
Node = 10
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -409.1865397682825
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 9
Node = 12
Node = 5
Node = 1
Node = 10
Node = 0
Node = 11
Node = 8
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -409.9402942880947
getNodeById = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
getNodeById2 = Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible)
Node = 4
Node = 3
Node = 2
Node = 9
Node = 0
Node = 12
Node = 5
Node = 1
Node = 10
Node = 11
Node = 8
Node = 6
Node = 7
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -411.5952994124975
Langrangian relaxation converged after 18 iterations. Delta = 0.0
Node.spans:
"France" List()
minute List()
date-entity List()
temporal-quantity List()
"12:00" List()
straight List()
possible List()
you List()
"France" List()
1 List()
name List()
go-02 List()
fly-01 List()
sunset List()
possible List()
country List()
clearUnalignedNodes():  removing unaligned node: None / "France"
clearUnalignedNodes():  removing unaligned node: Some(d) / date-entity
clearUnalignedNodes():  removing unaligned node: None / "12:00"
WARNING: Adding a variable name to a span
OracleGraph nodes = List(minute, temporal-quantity, straight, possible, you, "France", 1, name, go-02, fly-01, sunset, possible, country)
OracleGraph triples: (c / country, name, n / name)
(f / fly-01, ARG1, y / you)
(f / fly-01, destination, c / country)
(f / fly-01, duration, t / temporal-quantity)
(g / go-02, ARG0, y / you)
(g / go-02, ARG4, s / sunset)
(g / go-02, manner, s2 / straight)
(n / name, op, "France")
(p / possible, condition, p2 / possible)
(p / possible, domain, g / go-02)
(p2 / possible, domain, f / fly-01)
(t / temporal-quantity, quant, 1 / 1)
(t / temporal-quantity, unit, m / minute)
rootDependencyPaths = List(List(12, 3, 0), List(12, 3, 1), List(12, 3, 2), List(12, 3), List(12, 3, 4), List(12, 3, 4, 5), List(12, 3, 6), List(12, 3, 6, 8, 7), List(12, 3, 6, 8), List(12, 9), List(12, 10), List(12, 11), List(12), List(12, 14, 13), List(12, 14), List(12, 14, 16, 15), List(12, 14, 16), List(12, 14, 17), List(12, 14, 18), List(12, 14, 19), List(12, 14, 19, 20), List(12, 21))
Oracle Span 2-3:  could => possible
Oracle Span 11-12:  could => possible
Oracle Span 3-4:  fly => fly-01
Oracle Span 5-6:  France => (country :name (name :op "France"))
Oracle Span 12-13:  go => go-02
Oracle Span 8-9:  minute => (temporal-quantity :unit minute)
Oracle Span 7-8:  one => 1
Oracle Span 13-14:  straight => straight
Oracle Span 16-17:  sunset => sunset
Oracle Span 1-2:  you => you

Extra span: right => right
Extra span: into => into
Extra span: you => you
Extra span: If => cause-01
Missing span: France => (country :name (name :op "France"))
Missing span: straight => straight
Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	you	_	PRP	PRP	_	4	nsubj	_	_
3	could	_	MD	MD	_	4	aux	_	_
4	fly	_	VB	VB	_	13	advcl	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	France	_	NNP	NNP	_	5	pobj	_	_
7	in	_	IN	IN	_	4	prep	_	_
8	one	_	CD	CD	_	9	num	_	_
9	minute	_	NN	NN	_	7	pobj	_	_
10	,	_	,	,	_	13	punct	_	_
11	you	_	PRP	PRP	_	13	nsubj	_	_
12	could	_	MD	MD	_	13	aux	_	_
13	go	_	VB	VB	_	0	root	_	_
14	straight	_	RB	RB	_	15	advmod	_	_
15	into	_	IN	IN	_	13	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	sunset	_	NN	NN	_	15	pobj	_	_
18	,	_	,	,	_	15	punct	_	_
19	right	_	RB	RB	_	15	dep	_	_
20	from	_	IN	IN	_	15	prep	_	_
21	noon	_	NN	NN	_	20	pobj	_	_
22	.	_	.	.	_	13	punct	_	_

Oracle:
(c / country, name, n / name)
(f / fly-01, ARG1, y / you)
(f / fly-01, destination, c / country)
(f / fly-01, duration, t / temporal-quantity)
(g / go-02, ARG0, y / you)
(g / go-02, ARG4, s / sunset)
(g / go-02, manner, s2 / straight)
(n / name, op, "France")
(p / possible, condition, p2 / possible)
(p / possible, domain, g / go-02)
(p2 / possible, domain, f / fly-01)
(t / temporal-quantity, quant, 1 / 1)
(t / temporal-quantity, unit, m / minute)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),right,right,false), Span(16,17,List(1),sunset,sunset,false), Span(14,15,List(2),into,into,false), Span(12,13,List(3),go,go-02,false), Span(11,12,List(4),could,possible,false), Span(10,11,List(5),you,you,false), Span(8,9,List(7, 6),minute,(temporal-quantity :unit minute),false), Span(7,8,List(8),one,1,false), Span(3,4,List(9),fly,fly-01,false), Span(2,3,List(10),could,possible,false), Span(1,2,List(11),you,you,false), Span(0,1,List(12),If,cause-01,false)),Map(2 -> into, 5 -> you, 12 -> cause-01, 8 -> 1, 7 -> minute, 1 -> sunset, 4 -> possible, 11 -> you, 6 -> temporal-quantity, 0 -> right, 9 -> fly-01, 3 -> go-02, 10 -> possible),Map(t -> temporal-quantity, p2 -> possible, s -> sunset, m -> minute, 1 -> 1, g -> go-02, p -> possible, y -> you, r -> right, i -> into, c -> cause-01, f -> fly-01, y2 -> you))),[Ljava.lang.String;@5be49b60,Annotation([Ljava.lang.String;@2931522b,[Ljava.lang.String;@7674b62c,[Ljava.lang.String;@19e7a160),Annotation([Ljava.lang.String;@662706a7,[Ljava.lang.String;@45a4b042,[Ledu.cmu.lti.nlp.amr.Dependency;@16b2bb0c),Annotation([Ljava.lang.String;@327af41b,[Ljava.lang.String;@6cb6decd,[Ljava.lang.String;@c7045b9),Annotation([Ljava.lang.String;@f99f5e0,[Ljava.lang.String;@6aa61224,[Ledu.cmu.lti.nlp.amr.Entity;@30bce90b))
AMR:
(c / cause-01, ARG0, g / go-02)
(c / cause-01, ARG1, 1 / 1)
(f / fly-01, ARG0, y2 / you)
(g / go-02, ARG0, y / you)
(g / go-02, ARG1, r / right)
(g / go-02, condition, f / fly-01)
(g / go-02, path, i / into)
(i / into, op, s / sunset)
(p / possible, domain, g / go-02)
(p2 / possible, domain, f / fly-01)
(t / temporal-quantity, quant, 1 / 1)
(t / temporal-quantity, unit, m / minute)

Decoded in 203,951 microseconds
Sentence: Unfortunately , France is too far away for that .


--- Decoder1 ---

Sentence: Unfortunately , France is too far away for that .
word = Unfortunately
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = France
NER Entity: (country :name (name :op "France"))
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(France),(country :name (name :op "France")),PhraseConceptFeatures(0.0,0.0,true,false)))
concept = PhraseConceptPair(List(France),(country :name (name :op "France")),PhraseConceptFeatures(0.0,0.0,true,false))
score = 0
word = is
Finding date entities
Possible invoked concepts: List()
word = too
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)))
concept = PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
score = 0
adding concept:PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
word = far
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(far),far,PhraseConceptFeatures(7.0,0.0,false,false)))
concept = PhraseConceptPair(List(far),far,PhraseConceptFeatures(7.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(far),far,PhraseConceptFeatures(7.0,0.0,false,false))
word = away
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false)))
concept = PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
score = 0
adding concept:PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
word = for
Finding date entities
Possible invoked concepts: List()
word = that
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)))
concept = PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
score = 0
adding concept:PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, None, None, Some((0.029024114818713923,PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false)),4)), Some((0.029773585223834276,PhraseConceptPair(List(far),far,PhraseConceptFeatures(7.0,0.0,false,false)),5)), Some((0.025935722275322065,PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false)),6)), None, Some((0.016617808389215775,PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false)),8)), None)
Adding concept: that
nodeIds = List(0)
concepts = List(that)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(that),that,PhraseConceptFeatures(58.0,-1.300849155163006,false,false))
feats:
bias 1.0
c|p -1.300849155163006
len 1.0

score:
0.016617808389215782
Adding concept: away
nodeIds = List(1)
concepts = List(away)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(away),away,PhraseConceptFeatures(13.0,-0.3794896217049037,false,false))
feats:
bias 1.0
c|p -0.3794896217049037
len 1.0

score:
0.04255353066453785
Adding concept: far
nodeIds = List(2)
concepts = List(far)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(far),far,PhraseConceptFeatures(7.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.07232711588837212
Adding concept: too
nodeIds = List(3)
concepts = List(too)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(too),too,PhraseConceptFeatures(26.0,-0.07410797215372185,false,false))
feats:
bias 1.0
c|p -0.07410797215372185
len 1.0

score:
0.10135123070708604
Decoder1 Spans:
Span 1:  away => away
Span 2:  far => far
Span 3:  that => that
Span 4:  too => too
Decoder1 feats:
bias 4.0
c|p -1.7544467490216316
len 4.0

Concepts:
id = 2 concept = far
id = 1 concept = away
id = 0 concept = that
id = 3 concept = too
Spans:
Span 6-7:  away => away
Span 5-6:  far => far
Span 8-9:  that => that
Span 4-5:  too => too

rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 6, 4), List(3, 6, 5), List(3, 6), List(3, 7), List(3, 7, 8), List(3, 9))
getNodeById = Map(2 -> far, 1 -> away, 0 -> that, 3 -> too)
getNodeById2 = Map(2 -> far, 1 -> away, 0 -> that, 3 -> too)
getNodeById = Map(2 -> far, 1 -> away, 0 -> that, 3 -> too)
getNodeById2 = Map(2 -> far, 1 -> away, 0 -> that, 3 -> too)
Node = 1
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 1, 2)
Alg2 returning score = -259.22359652702266
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
far List()
name List()
away List()
be-located-at-91 List()
"France" List()
"France" List()
country List()
- List()
fortunate-41 List()
too List()
that List()
clearUnalignedNodes():  removing unaligned node: Some(b) / be-located-at-91
clearUnalignedNodes():  removing unaligned node: None / "France"
clearUnalignedNodes():  removing unaligned node: None / -
clearUnalignedNodes():  removing unaligned node: Some(f) / fortunate-41
OracleGraph nodes = List(far, name, away, "France", country, too, that)
OracleGraph triples: (a / away, extent, f2 / far)
(c / country, name, n / name)
(f2 / far, degree, t / too)
(n / name, op, "France")
rootDependencyPaths = List(List(3, 0), List(3, 1), List(3, 2), List(3), List(3, 6, 4), List(3, 6, 5), List(3, 6), List(3, 7), List(3, 7, 8), List(3, 9))
Oracle Span 6-7:  away => away
Oracle Span 5-6:  far => far
Oracle Span 2-3:  France => (country :name (name :op "France"))
Oracle Span 8-9:  that => that
Oracle Span 4-5:  too => too

Missing span: France => (country :name (name :op "France"))
Dependencies:
1	Unfortunately	_	RB	RB	_	4	advmod	_	_
2	,	_	,	,	_	4	punct	_	_
3	France	_	NNP	NNP	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	0	root	_	_
5	too	_	RB	RB	_	7	advmod	_	_
6	far	_	RB	RB	_	7	advmod	_	_
7	away	_	RB	RB	_	4	advmod	_	_
8	for	_	IN	IN	_	4	prep	_	_
9	that	_	DT	DT	_	8	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(a / away, extent, f2 / far)
(c / country, name, n / name)
(f2 / far, degree, t / too)
(n / name, op, "France")

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),that,that,false), Span(6,7,List(1),away,away,false), Span(5,6,List(2),far,far,false), Span(4,5,List(3),too,too,false)),Map(2 -> far, 1 -> away, 0 -> that, 3 -> too),Map(t -> that, a -> away, t2 -> too, f -> far))),[Ljava.lang.String;@3e6f3f28,Annotation([Ljava.lang.String;@7e19ebf0,[Ljava.lang.String;@2474f125,[Ljava.lang.String;@7357a011),Annotation([Ljava.lang.String;@3406472c,[Ljava.lang.String;@5717c37,[Ledu.cmu.lti.nlp.amr.Dependency;@68f4865),Annotation([Ljava.lang.String;@4816278d,[Ljava.lang.String;@4eaf3684,[Ljava.lang.String;@40317ba2),Annotation([Ljava.lang.String;@3c01cfa1,[Ljava.lang.String;@45d2ade3,[Ledu.cmu.lti.nlp.amr.Entity;@727eb8cb))
AMR:
(a / away, extent, f / far)
(f / far, degree, t2 / too)
(f / far, mod, t / that)

Decoded in 15,199 microseconds
Sentence: But on your tiny planet , my little prince , all you need do is move your chair a few steps .


--- Decoder1 ---

Sentence: But on your tiny planet , my little prince , all you need do is move your chair a few steps .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = your
Finding date entities
Possible invoked concepts: List()
word = tiny
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(tiny),tiny,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(tiny),tiny,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(tiny),tiny,PhraseConceptFeatures(1.0,0.0,false,false))
word = planet
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)))
concept = PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = my
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = all
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false)), PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)))
concept = PhraseConceptPair(List(all),(person :quant all),PhraseConceptFeatures(1.0,-5.099866427824199,false,false))
score = 0
concept = PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
score = 0
adding concept:PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = need
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false)))
concept = PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false))
word = do
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false)), PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)))
concept = PhraseConceptPair(List(do),(thing :ARG1-of do-02),PhraseConceptFeatures(1.0,-4.820281565605037,false,false))
score = 0
concept = PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
score = 0
adding concept:PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
word = is
Finding date entities
Possible invoked concepts: List()
word = move
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(move),move-01,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false)))
concept = PhraseConceptPair(List(move),move-01,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
score = 0
adding concept:PhraseConceptPair(List(move),move-01,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
word = your
Finding date entities
Possible invoked concepts: List()
word = chair
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(chair),chair,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(chair),chair,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(chair),chair,PhraseConceptFeatures(2.0,0.0,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = few
Finding date entities
Possible invoked concepts: List()
word = steps
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(steps),step,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)), PhraseConceptPair(List(steps),step-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)))
concept = PhraseConceptPair(List(steps),step,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(steps),step,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
concept = PhraseConceptPair(List(steps),step-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
score = 0
adding concept:PhraseConceptPair(List(steps),step-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), None, None, Some((0.029773585223834276,PhraseConceptPair(List(tiny),tiny,PhraseConceptFeatures(1.0,0.0,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false)),4)), None, None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),7)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),8)), None, Some((0.01926166502147269,PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false)),10)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false)),12)), Some((0.008412119642531832,PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false)),13)), None, Some((0.025673026403986283,PhraseConceptPair(List(move),move-01,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false)),15)), None, Some((0.029773585223834276,PhraseConceptPair(List(chair),chair,PhraseConceptFeatures(2.0,0.0,false,false)),17)), None, None, Some((0.015753682017072397,PhraseConceptPair(List(steps),step-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false)),20)), None)
Adding concept: step-01
nodeIds = List(0)
concepts = List(step-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(steps),step-01,PhraseConceptFeatures(1.0,-1.3862943611198906,false,false))
feats:
bias 1.0
c|p -1.3862943611198906
len 1.0

score:
0.01575368201707239
Adding concept: chair
nodeIds = List(1)
concepts = List(chair)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(chair),chair,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.045527267240906666
Adding concept: move-01
nodeIds = List(2)
concepts = List(move-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(move),move-01,PhraseConceptFeatures(2.0,-0.40546510810816444,false,false))
feats:
bias 1.0
c|p -0.40546510810816444
len 1.0

score:
0.07120029364489294
Adding concept: do-02
nodeIds = List(3)
concepts = List(do-02)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(do),do-02,PhraseConceptFeatures(15.0,-2.1122313645028266,false,false))
feats:
bias 1.0
c|p -2.1122313645028266
len 1.0

score:
0.07961241328742477
Adding concept: need-01
nodeIds = List(4)
concepts = List(need-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(need),need-01,PhraseConceptFeatures(8.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10938599851125905
Adding concept: you
nodeIds = List(5)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.13653136160611445
Adding concept: all
nodeIds = List(6)
concepts = List(all)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(all),all,PhraseConceptFeatures(58.0,-1.0394234172777792,false,false))
feats:
bias 1.0
c|p -1.0394234172777792
len 1.0

score:
0.15579302662758715
Adding concept: prince
nodeIds = List(7)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.1855039910791167
Adding concept: little
nodeIds = List(8)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.20812280281075024
Adding concept: planet
nodeIds = List(9)
concepts = List(planet)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(planet),planet,PhraseConceptFeatures(53.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.23789638803458452
Adding concept: tiny
nodeIds = List(10)
concepts = List(tiny)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(tiny),tiny,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2676699732584188
Adding concept: contrast-01
nodeIds = List(11)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.28837831447041373
Decoder1 Spans:
Span 1:  all => all
Span 2:  But => contrast-01
Span 3:  chair => chair
Span 4:  do => do-02
Span 5:  little => little
Span 6:  move => move-01
Span 7:  need => need-01
Span 8:  planet => planet
Span 9:  prince => prince
Span 10:  steps => step-01
Span 11:  tiny => tiny
Span 12:  you => you
Decoder1 feats:
bias 12.0
c|p -6.81332866890432
len 12.0

Concepts:
id = 2 concept = move-01
id = 5 concept = you
id = 8 concept = little
id = 7 concept = prince
id = 1 concept = chair
id = 11 concept = contrast-01
id = 4 concept = need-01
id = 6 concept = all
id = 9 concept = planet
id = 0 concept = step-01
id = 10 concept = tiny
id = 3 concept = do-02
Spans:
Span 10-11:  all => all
Span 0-1:  But => contrast-01
Span 17-18:  chair => chair
Span 13-14:  do => do-02
Span 7-8:  little => little
Span 15-16:  move => move-01
Span 12-13:  need => need-01
Span 4-5:  planet => planet
Span 8-9:  prince => prince
Span 20-21:  steps => step-01
Span 3-4:  tiny => tiny
Span 11-12:  you => you

rootDependencyPaths = List(List(15, 0), List(15, 1), List(15, 1, 4, 2), List(15, 1, 4, 3), List(15, 1, 4), List(15, 5), List(15, 8, 6), List(15, 8, 7), List(15, 8), List(15, 8, 9), List(15, 8, 13, 10), List(15, 8, 13, 11), List(15, 8, 13, 12), List(15, 8, 13), List(15, 14), List(15), List(15, 17, 16), List(15, 17), List(15, 20, 18), List(15, 20, 19), List(15, 20), List(15, 21))
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -177.57245870155108
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -181.57245870155108
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -185.57245870155108
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -189.57245870155108
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -193.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -195.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -197.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -199.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -201.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -203.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -205.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -207.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -208.2897334467423
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -210.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -211.2897334467423
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -213.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -214.2897334467423
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -216.01583875115026
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 5
Node = 8
Node = 0
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -217.21050694080907
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 6
Node = 5
Node = 8
Node = 0
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -218.2897334467423
getNodeById = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02)
getNodeById2 = Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 4 -> need-01, 11 -> contrast-01, 6 -> all, 0 -> step-01, 9 -> planet, 3 -> do-02, 10 -> tiny)
Node = 11
Node = 2
Node = 9
Node = 3
Node = 1
Node = 7
Node = 10
Node = 4
Node = 5
Node = 8
Node = 0
Node = 6
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7)
Alg2 returning score = -219.49940206052034
Langrangian relaxation converged after 21 iterations. Delta = 0.0
Node.spans:
obligate-01 List()
i List()
move-01 List()
few List()
prince List()
only List()
little List()
tiny List()
step List()
contrast-01 List()
say-01 List()
planet List()
chair List()
clearUnalignedNodes():  removing unaligned node: Some(o) / obligate-01
clearUnalignedNodes():  removing unaligned node: Some(i) / i
clearUnalignedNodes():  removing unaligned node: Some(o2) / only
clearUnalignedNodes():  removing unaligned node: Some(s2) / say-01
OracleGraph nodes = List(move-01, few, prince, little, tiny, step, contrast-01, planet, chair)
OracleGraph triples: (c / chair, poss, p2 / prince)
(m / move-01, ARG0, p2 / prince)
(m / move-01, ARG1, c / chair)
(m / move-01, extent, s / step)
(p / planet, mod, t / tiny)
(p / planet, poss, p2 / prince)
(p2 / prince, mod, l / little)
(s / step, quant, f / few)
rootDependencyPaths = List(List(15, 0), List(15, 1), List(15, 1, 4, 2), List(15, 1, 4, 3), List(15, 1, 4), List(15, 5), List(15, 8, 6), List(15, 8, 7), List(15, 8), List(15, 8, 9), List(15, 8, 13, 10), List(15, 8, 13, 11), List(15, 8, 13, 12), List(15, 8, 13), List(15, 14), List(15), List(15, 17, 16), List(15, 17), List(15, 20, 18), List(15, 20, 19), List(15, 20), List(15, 21))
Oracle Span 0-1:  But => contrast-01
Oracle Span 17-18:  chair => chair
Oracle Span 19-20:  few => few
Oracle Span 7-8:  little => little
Oracle Span 15-16:  move => move-01
Oracle Span 4-5:  planet => planet
Oracle Span 8-9:  prince => prince
Oracle Span 20-21:  steps => step
Oracle Span 3-4:  tiny => tiny

Incorrect span: steps => step-01
Extra span: do => do-02
Extra span: need => need-01
Extra span: you => you
Extra span: all => all
Missing span: steps => step
Missing span: few => few
Dependencies:
1	But	_	CC	CC	_	16	cc	_	_
2	on	_	IN	IN	_	16	prep	_	_
3	your	_	PRP$	PRP$	_	5	poss	_	_
4	tiny	_	JJ	JJ	_	5	amod	_	_
5	planet	_	NN	NN	_	2	pobj	_	_
6	,	_	,	,	_	16	punct	_	_
7	my	_	PRP$	PRP$	_	9	poss	_	_
8	little	_	JJ	JJ	_	9	amod	_	_
9	prince	_	NN	NN	_	16	nsubj	_	_
10	,	_	,	,	_	9	punct	_	_
11	all	_	DT	DT	_	14	dobj	_	_
12	you	_	PRP	PRP	_	14	nsubj	_	_
13	need	_	MD	MD	_	14	aux	_	_
14	do	_	VB	VB	_	9	rcmod	_	_
15	is	_	VBZ	VBZ	_	16	aux	_	_
16	move	_	VB	VB	_	0	root	_	_
17	your	_	PRP$	PRP$	_	18	poss	_	_
18	chair	_	NN	NN	_	16	dep	_	_
19	a	_	DT	DT	_	21	det	_	_
20	few	_	JJ	JJ	_	21	amod	_	_
21	steps	_	NNS	NNS	_	16	dobj	_	_
22	.	_	.	.	_	16	punct	_	_

Oracle:
(c / chair, poss, p2 / prince)
(m / move-01, ARG0, p2 / prince)
(m / move-01, ARG1, c / chair)
(m / move-01, extent, s / step)
(p / planet, mod, t / tiny)
(p / planet, poss, p2 / prince)
(p2 / prince, mod, l / little)
(s / step, quant, f / few)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),steps,step-01,false), Span(17,18,List(1),chair,chair,false), Span(15,16,List(2),move,move-01,false), Span(13,14,List(3),do,do-02,false), Span(12,13,List(4),need,need-01,false), Span(11,12,List(5),you,you,false), Span(10,11,List(6),all,all,false), Span(8,9,List(7),prince,prince,false), Span(7,8,List(8),little,little,false), Span(4,5,List(9),planet,planet,false), Span(3,4,List(10),tiny,tiny,false), Span(0,1,List(11),But,contrast-01,false)),Map(2 -> move-01, 5 -> you, 8 -> little, 7 -> prince, 1 -> chair, 11 -> contrast-01, 4 -> need-01, 6 -> all, 9 -> planet, 0 -> step-01, 10 -> tiny, 3 -> do-02),Map(n -> need-01, t -> tiny, p2 -> planet, s -> step-01, d -> do-02, m -> move-01, p -> prince, y -> you, a -> all, l -> little, c -> chair, c2 -> contrast-01))),[Ljava.lang.String;@39d9314d,Annotation([Ljava.lang.String;@b978d10,[Ljava.lang.String;@5b7a8434,[Ljava.lang.String;@5c45d770),Annotation([Ljava.lang.String;@2ce6c6ec,[Ljava.lang.String;@1bae316d,[Ledu.cmu.lti.nlp.amr.Dependency;@147a5d08),Annotation([Ljava.lang.String;@6676f6a0,[Ljava.lang.String;@7cbd9d24,[Ljava.lang.String;@1672fe87),Annotation([Ljava.lang.String;@5026735c,[Ljava.lang.String;@1b45c0e,[Ledu.cmu.lti.nlp.amr.Entity;@11f0a5a1))
AMR:
(c2 / contrast-01, ARG1, p2 / planet)
(c2 / contrast-01, ARG2, m / move-01)
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, m / move-01)
(m / move-01, ARG0, p / prince)
(m / move-01, ARG1, c / chair)
(n / need-01, ARG0, a / all)
(n / need-01, ARG1, d / do-02)
(p / prince, mod, l / little)
(p2 / planet, mod, t / tiny)
(s / step-01, ARG0, p / prince)

Decoded in 197,212 microseconds
Sentence: You can see the day end and the twilight falling whenever you like ...


--- Decoder1 ---

Sentence: You can see the day end and the twilight falling whenever you like ...
word = You
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)))
concept = PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
score = 0
adding concept:PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
word = can
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(can),can,PhraseConceptFeatures(1.0,-4.127134385045092,false,false)), PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false)))
concept = PhraseConceptPair(List(can),can,PhraseConceptFeatures(1.0,-4.127134385045092,false,false))
score = 0
concept = PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
score = 0
adding concept:PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
word = see
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)))
concept = PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
score = 0
adding concept:PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = end
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(end),end,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false)), PhraseConceptPair(List(end),end-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)))
concept = PhraseConceptPair(List(end),end,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
score = 0
adding concept:PhraseConceptPair(List(end),end,PhraseConceptFeatures(1.0,-2.0794415416798357,false,false))
concept = PhraseConceptPair(List(end),end-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
score = 0
adding concept:PhraseConceptPair(List(end),end-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
word = and
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false)), PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)))
concept = PhraseConceptPair(List(and),(person :source and),PhraseConceptFeatures(1.0,-5.823045895483019,false,false))
score = 0
concept = PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
score = 0
adding concept:PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = twilight
Finding date entities
Possible invoked concepts: List()
word = falling
Finding date entities
Possible invoked concepts: List()
word = whenever
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = like
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)), PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false)))
concept = PhraseConceptPair(List(like),like-01,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
concept = PhraseConceptPair(List(like),like-02,PhraseConceptFeatures(2.0,-3.7612001156935624,false,false))
score = 0
word = ...
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.02918429879609327,PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)),0)), Some((0.022432022849293715,PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false)),1)), Some((0.02932403466221358,PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false)),2)), None, Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),4)), Some((0.01985424083692039,PhraseConceptPair(List(end),end-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false)),5)), Some((0.01895794182240855,PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false)),6)), None, None, None, None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),11)), None, None)
Adding concept: you
nodeIds = List(0)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.02714536309485542
Adding concept: and
nodeIds = List(1)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(and),and,PhraseConceptFeatures(116.0,-1.0694557043766542,false,false))
feats:
bias 1.0
c|p -1.0694557043766542
len 1.0

score:
0.04610330491726396
Adding concept: end-01
nodeIds = List(2)
concepts = List(end-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(end),end-01,PhraseConceptFeatures(3.0,-0.9808292530117262,false,false))
feats:
bias 1.0
c|p -0.9808292530117262
len 1.0

score:
0.06595754575418435
Adding concept: day
nodeIds = List(3)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.08550058596292726
Adding concept: see-01
nodeIds = List(4)
concepts = List(see-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(see),see-01,PhraseConceptFeatures(22.0,-0.04445176257083381,false,false))
feats:
bias 1.0
c|p -0.04445176257083381
len 1.0

score:
0.11482462062514083
Adding concept: possible
nodeIds = List(5)
concepts = List(possible)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(can),possible,PhraseConceptFeatures(30.0,-0.7259370033829361,false,false))
feats:
bias 1.0
c|p -0.7259370033829361
len 1.0

score:
0.13725664347443456
Adding concept: you
nodeIds = List(6)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
feats:
bias 1.0
c|p -0.05826890812397576
len 1.0

score:
0.16644094227052783
Decoder1 Spans:
Span 1:  and => and
Span 2:  can => possible
Span 3:  day => day
Span 4:  end => end-01
Span 5:  see => see-01
Span 6:  you => you
Span 7:  You => you
Decoder1 feats:
bias 7.0
c|p -4.150423334284435
len 7.0

Concepts:
id = 2 concept = end-01
id = 5 concept = possible
id = 1 concept = and
id = 4 concept = see-01
id = 6 concept = you
id = 0 concept = you
id = 3 concept = day
Spans:
Span 6-7:  and => and
Span 1-2:  can => possible
Span 4-5:  day => day
Span 5-6:  end => end-01
Span 2-3:  see => see-01
Span 11-12:  you => you
Span 0-1:  You => you

rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 9, 5, 3), List(2, 9, 5, 4), List(2, 9, 5), List(2, 9, 5, 6), List(2, 9, 5, 8, 7), List(2, 9, 5, 8), List(2, 9), List(2, 9, 12, 10), List(2, 9, 12, 11), List(2, 9, 12), List(2, 13))
getNodeById = Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day)
getNodeById2 = Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day)
getNodeById = Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day)
getNodeById2 = Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day)
Node = 5
Node = 4
Node = 0
Node = 3
Node = 6
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -102.7007791970468
getNodeById = Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day)
getNodeById2 = Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day)
Node = 5
Node = 4
Node = 0
Node = 3
Node = 6
Node = 2
Node = 1
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -104.7007791970468
getNodeById = Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day)
getNodeById2 = Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day)
Node = 5
Node = 4
Node = 3
Node = 6
Node = 2
Node = 1
Node = 0
visited = Set(3, 0, 4, 1, 5, 2, 6)
Alg2 returning score = -106.23307249804371
Langrangian relaxation converged after 3 iterations. Delta = 0.0
Node.spans:
you List()
day List()
like-01 List()
ever List()
fall-01 List()
and List()
see-01 List()
possible List()
twilight List()
end-01 List()
clearUnalignedNodes():  removing unaligned node: Some(e2) / ever
OracleGraph nodes = List(you, day, like-01, fall-01, and, see-01, possible, twilight, end-01)
OracleGraph triples: (a / and, op, e / end-01)
(a / and, op, f / fall-01)
(e / end-01, ARG1, d / day)
(f / fall-01, ARG1, t / twilight)
(l / like-01, ARG0, y / you)
(l / like-01, ARG1, s / see-01)
(p / possible, domain, s / see-01)
(s / see-01, ARG0, y / you)
(s / see-01, ARG1, a / and)
(s / see-01, time, l / like-01)
rootDependencyPaths = List(List(2, 0), List(2, 1), List(2), List(2, 9, 5, 3), List(2, 9, 5, 4), List(2, 9, 5), List(2, 9, 5, 6), List(2, 9, 5, 8, 7), List(2, 9, 5, 8), List(2, 9), List(2, 9, 12, 10), List(2, 9, 12, 11), List(2, 9, 12), List(2, 13))
Oracle Span 6-7:  and => and
Oracle Span 1-2:  can => possible
Oracle Span 4-5:  day => day
Oracle Span 5-6:  end => end-01
Oracle Span 9-10:  falling => fall-01
Oracle Span 12-13:  like => like-01
Oracle Span 2-3:  see => see-01
Oracle Span 8-9:  twilight => twilight
Oracle Span 0-1:  You => you

Extra span: you => you
Missing span: like => like-01
Missing span: falling => fall-01
Missing span: twilight => twilight
Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	can	_	MD	MD	_	3	aux	_	_
3	see	_	VB	VB	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	day	_	NN	NN	_	6	nn	_	_
6	end	_	NN	NN	_	10	nsubj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	the	_	DT	DT	_	9	det	_	_
9	twilight	_	NN	NN	_	6	conj	_	_
10	falling	_	VBG	VBG	_	3	dep	_	_
11	whenever	_	WRB	WRB	_	13	advmod	_	_
12	you	_	PRP	PRP	_	13	nsubj	_	_
13	like	_	VBP	VBP	_	10	advcl	_	_
14	...	_	:	:	_	3	punct	_	_

Oracle:
(a / and, op, e / end-01)
(a / and, op, f / fall-01)
(e / end-01, ARG1, d / day)
(f / fall-01, ARG1, t / twilight)
(l / like-01, ARG0, y / you)
(l / like-01, ARG1, s / see-01)
(p / possible, domain, s / see-01)
(s / see-01, ARG0, y / you)
(s / see-01, ARG1, a / and)
(s / see-01, time, l / like-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),you,you,false), Span(6,7,List(1),and,and,false), Span(5,6,List(2),end,end-01,false), Span(4,5,List(3),day,day,false), Span(2,3,List(4),see,see-01,false), Span(1,2,List(5),can,possible,false), Span(0,1,List(6),You,you,false)),Map(2 -> end-01, 5 -> possible, 1 -> and, 4 -> see-01, 6 -> you, 0 -> you, 3 -> day),Map(e -> end-01, s -> see-01, d -> day, p -> possible, y -> you, a -> and, y2 -> you))),[Ljava.lang.String;@10f7f7de,Annotation([Ljava.lang.String;@73a8da0f,[Ljava.lang.String;@50dfbc58,[Ljava.lang.String;@4416d64f),Annotation([Ljava.lang.String;@6bf08014,[Ljava.lang.String;@5e3d57c7,[Ledu.cmu.lti.nlp.amr.Dependency;@732d0d24),Annotation([Ljava.lang.String;@1fb19a0,[Ljava.lang.String;@6ee4d9ab,[Ljava.lang.String;@5a5338df),Annotation([Ljava.lang.String;@418c5a9c,[Ljava.lang.String;@18e36d14,[Ledu.cmu.lti.nlp.amr.Entity;@5082d622))
AMR:
(a / and, op, e / end-01)
(e / end-01, ARG0, y / you)
(e / end-01, ARG1, d / day)
(p / possible, domain, s / see-01)
(s / see-01, ARG0, y2 / you)
(s / see-01, ARG1, d / day)

Decoded in 37,371 microseconds
Sentence: " One day , " you said to me , " I saw the sunset forty - four times ! "


--- Decoder1 ---

Sentence: " One day , " you said to me , " I saw the sunset forty - four times ! "
word = "
Finding date entities
Possible invoked concepts: List()
word = One
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(One),1,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false)), PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false)))
concept = PhraseConceptPair(List(One),1,PhraseConceptFeatures(1.0,-3.5263605246161616,false,false))
score = 0
concept = PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
score = 0
adding concept:PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = said
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)))
concept = PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
word = to
Finding date entities
Possible invoked concepts: List()
word = me
Finding date entities
Possible invoked concepts: List()
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = saw
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false)))
concept = PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = sunset
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
word = forty
Finding date entities
Possible invoked concepts: List()
word = -
Finding date entities
Possible invoked concepts: List()
word = four
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false)))
concept = PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false))
score = 0
adding concept:PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false))
word = times
Finding date entities
Possible invoked concepts: List()
word = !
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, Some((0.022150523336194265,PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false)),1)), Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),2)), None, None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),5)), Some((0.029773585223834276,PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false)),6)), None, None, None, None, Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false)),12)), None, Some((0.029773585223834276,PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)),14)), None, None, Some((0.023829167949067327,PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false)),17)), None, None, None)
Adding concept: 4
nodeIds = List(0)
concepts = List(4)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false))
feats:
bias 1.0
c|p -0.587786664902119
len 1.0

score:
0.023829167949067323
Adding concept: sunset
nodeIds = List(1)
concepts = List(sunset)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.0536027531729016
Adding concept: see-01
nodeIds = List(2)
concepts = List(see-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(saw),see-01,PhraseConceptFeatures(9.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.08337633839673587
Adding concept: i
nodeIds = List(3)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.10942554481496514
Adding concept: say-01
nodeIds = List(4)
concepts = List(say-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(said),say-01,PhraseConceptFeatures(178.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1391991300387994
Adding concept: you
nodeIds = List(5)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.16634449313365485
Adding concept: day
nodeIds = List(6)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.18588753334239777
Adding concept: one
nodeIds = List(7)
concepts = List(one)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(One),one,PhraseConceptFeatures(16.0,-0.7537718023763802,false,false))
feats:
bias 1.0
c|p -0.7537718023763802
len 1.0

score:
0.20803805667859204
Decoder1 Spans:
Span 1:  day => day
Span 2:  four => 4
Span 3:  I => i
Span 4:  One => one
Span 5:  said => say-01
Span 6:  saw => see-01
Span 7:  sunset => sunset
Span 8:  you => you
Decoder1 feats:
bias 8.0
c|p -2.981307428496372
len 8.0

Concepts:
id = 2 concept = see-01
id = 5 concept = you
id = 7 concept = one
id = 1 concept = sunset
id = 4 concept = say-01
id = 6 concept = day
id = 0 concept = 4
id = 3 concept = i
Spans:
Span 2-3:  day => day
Span 17-18:  four => 4
Span 11-12:  I => i
Span 1-2:  One => one
Span 6-7:  said => say-01
Span 12-13:  saw => see-01
Span 14-15:  sunset => sunset
Span 5-6:  you => you

rootDependencyPaths = List(List(12, 0), List(12, 6, 1), List(12, 6, 1, 2), List(12, 6, 1, 3), List(12, 6, 1, 4), List(12, 6, 5), List(12, 6), List(12, 6, 7), List(12, 6, 7, 8), List(12, 9), List(12, 10), List(12, 11), List(12), List(12, 15, 13), List(12, 15, 14), List(12, 15), List(12, 15, 16), List(12, 15, 18, 17), List(12, 15, 18), List(12, 19), List(12, 20))
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 7
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 43.861402329028046
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 7
Node = 5
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 33.861402329028046
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 7
Node = 5
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 24.936395310167633
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 7
Node = 5
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 18.054971736667106
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 7
Node = 5
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 12.054971736667104
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 7
Node = 5
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 6.054971736667104
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = 0.9093615708243785
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -3.0906384291756215
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -6.209214855675095
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 5
Node = 7
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -9.378408514097893
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -13.09063842917565
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -16.20921485567512
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 5
Node = 7
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -19.37840851409792
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -23.090638429175648
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -26.20921485567512
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 5
Node = 7
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -29.37840851409792
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -33.09063842917565
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -36.20921485567512
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 5
Node = 7
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -39.37840851409792
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -43.09063842917565
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -46.20921485567512
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 5
Node = 7
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -49.37840851409792
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -52.650728527992904
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -55.20921485567512
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 5
Node = 7
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -58.37840851409792
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 2
Node = 1
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -61.76930495449238
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 5
Node = 7
Node = 2
Node = 1
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -64.37840851409793
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -67.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -69.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -70.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -72.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -73.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -75.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -76.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -78.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -79.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -81.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -82.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -84.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -85.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -87.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -88.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -90.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -91.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -93.10863494681345
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 1
Node = 6
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -94.66872504563071
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 5
Node = 7
Node = 2
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -95.22560016377173
getNodeById = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
getNodeById2 = Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i)
Node = 4
Node = 6
Node = 1
Node = 2
Node = 5
Node = 7
Node = 0
Node = 3
visited = Set(3, 0, 4, 1, 5, 2, 6, 7)
Alg2 returning score = -96.78569026258899
Langrangian relaxation converged after 48 iterations. Delta = 0.0
Node.spans:
sunset List()
see-01 List()
44 List()
you List()
one List()
say-01 List()
i List()
day List()
clearUnalignedNodes():  removing unaligned node: None / 44
OracleGraph nodes = List(sunset, see-01, you, one, say-01, i, day)
OracleGraph triples: (d / day, mod, o / one)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, i / i)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, s3 / sunset)
(s2 / see-01, time, d / day)
rootDependencyPaths = List(List(12, 0), List(12, 6, 1), List(12, 6, 1, 2), List(12, 6, 1, 3), List(12, 6, 1, 4), List(12, 6, 5), List(12, 6), List(12, 6, 7), List(12, 6, 7, 8), List(12, 9), List(12, 10), List(12, 11), List(12), List(12, 15, 13), List(12, 15, 14), List(12, 15), List(12, 15, 16), List(12, 15, 18, 17), List(12, 15, 18), List(12, 19), List(12, 20))
Oracle Span 2-3:  day => day
Oracle Span 11-12:  I => i
Oracle Span 1-2:  One => one
Oracle Span 6-7:  said => say-01
Oracle Span 12-13:  saw => see-01
Oracle Span 14-15:  sunset => sunset
Oracle Span 5-6:  you => you

Extra span: four => 4
Dependencies:
1	"	_	''	''	_	13	punct	_	_
2	One	_	CD	CD	_	7	nsubj	_	_
3	day	_	NN	NN	_	2	dep	_	_
4	,	_	,	,	_	2	punct	_	_
5	"	_	''	''	_	2	punct	_	_
6	you	_	PRP	PRP	_	7	nsubj	_	_
7	said	_	VBD	VBD	_	13	ccomp	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	me	_	PRP	PRP	_	8	pobj	_	_
10	,	_	,	,	_	13	punct	_	_
11	"	_	''	''	_	13	punct	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	saw	_	VBD	VBD	_	0	root	_	_
14	the	_	DT	DT	_	16	det	_	_
15	sunset	_	JJ	JJ	_	16	amod	_	_
16	forty	_	NN	NN	_	13	dobj	_	_
17	-	_	:	:	_	16	punct	_	_
18	four	_	CD	CD	_	19	num	_	_
19	times	_	NNS	NNS	_	16	dep	_	_
20	!	_	.	.	_	13	punct	_	_
21	"	_	''	''	_	13	punct	_	_

Oracle:
(d / day, mod, o / one)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, s2 / see-01)
(s / say-01, ARG2, i / i)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, s3 / sunset)
(s2 / see-01, time, d / day)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),four,4,false), Span(14,15,List(1),sunset,sunset,false), Span(12,13,List(2),saw,see-01,false), Span(11,12,List(3),I,i,false), Span(6,7,List(4),said,say-01,false), Span(5,6,List(5),you,you,false), Span(2,3,List(6),day,day,false), Span(1,2,List(7),One,one,false)),Map(2 -> see-01, 5 -> you, 7 -> one, 1 -> sunset, 4 -> say-01, 6 -> day, 0 -> 4, 3 -> i),Map(s2 -> see-01, s -> sunset, d -> day, y -> you, 4 -> 4, i -> i, s3 -> say-01, o -> one))),[Ljava.lang.String;@13d4992d,Annotation([Ljava.lang.String;@302f7971,[Ljava.lang.String;@332729ad,[Ljava.lang.String;@75d2da2d),Annotation([Ljava.lang.String;@4278284b,[Ljava.lang.String;@9573584,[Ledu.cmu.lti.nlp.amr.Dependency;@3370f42),Annotation([Ljava.lang.String;@6057aebb,[Ljava.lang.String;@63eef88a,[Ljava.lang.String;@53251a66),Annotation([Ljava.lang.String;@6853425f,[Ljava.lang.String;@352c1b98,[Ledu.cmu.lti.nlp.amr.Entity;@21129f1f))
AMR:
(d / day, quant, o / one)
(s2 / see-01, ARG0, i / i)
(s2 / see-01, ARG1, 4 / 4)
(s3 / say-01, ARG0, y / you)
(s3 / say-01, ARG1, s2 / see-01)
(s3 / say-01, ARG2, s / sunset)
(s3 / say-01, time, d / day)

Decoded in 222,539 microseconds
Sentence: And a little later you added : " You know -- one loves the sunset , when one is so sad ... "


--- Decoder1 ---

Sentence: And a little later you added : " You know -- one loves the sunset , when one is so sad ... "
word = And
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)))
concept = PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
score = 0
adding concept:PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
word = a
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = later
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false))
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = added
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false)))
concept = PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
word = :
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = You
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)))
concept = PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
score = 0
adding concept:PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
word = know
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(know),(person :ARG0-of know-01),PhraseConceptFeatures(1.0,-4.624972813284271,false,false)), PhraseConceptPair(List(know),(thing :ARG1-of know-01),PhraseConceptFeatures(1.0,-4.624972813284271,false,false)), PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false)))
concept = PhraseConceptPair(List(know),(person :ARG0-of know-01),PhraseConceptFeatures(1.0,-4.624972813284271,false,false))
score = 0
concept = PhraseConceptPair(List(know),(thing :ARG1-of know-01),PhraseConceptFeatures(1.0,-4.624972813284271,false,false))
score = 0
concept = PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false))
score = 0
adding concept:PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false))
word = --
Finding date entities
Possible invoked concepts: List()
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = loves
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(loves),love-01,PhraseConceptFeatures(1.0,0.0,false,false)))
concept = PhraseConceptPair(List(loves),love-01,PhraseConceptFeatures(1.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(loves),love-01,PhraseConceptFeatures(1.0,0.0,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = sunset
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = when
Finding date entities
Possible invoked concepts: List()
word = one
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)), PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false)))
concept = PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
score = 0
adding concept:PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
concept = PhraseConceptPair(List(one),one,PhraseConceptFeatures(24.0,-2.0794415416798357,false,false))
score = 0
word = is
Finding date entities
Possible invoked concepts: List()
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = sad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
word = ...
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.028861867128968457,PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false)),0)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),2)), Some((0.029773585223834276,PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false)),3)), Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),4)), Some((0.029773585223834276,PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false)),5)), None, None, Some((0.02918429879609327,PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false)),8)), Some((0.017728882868901986,PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false)),9)), None, Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(loves),love-01,PhraseConceptFeatures(1.0,0.0,false,false)),12)), None, Some((0.029773585223834276,PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false)),14)), None, None, Some((0.010657576846308359,PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false)),17)), None, Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),19)), Some((0.029773585223834276,PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false)),20)), None, None)
Adding concept: sad
nodeIds = List(0)
concepts = List(sad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: so
nodeIds = List(1)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.0550788175536084
Adding concept: 1
nodeIds = List(2)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.06573639439991676
Adding concept: sunset
nodeIds = List(3)
concepts = List(sunset)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sunset),sunset,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.09550997962375103
Adding concept: love-01
nodeIds = List(4)
concepts = List(love-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(loves),love-01,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.1252835648475853
Adding concept: 1
nodeIds = List(5)
concepts = List(1)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(one),1,PhraseConceptFeatures(29.0,-1.8901995420413076,false,false))
feats:
bias 1.0
c|p -1.8901995420413076
len 1.0

score:
0.13594114169389365
Adding concept: know-01
nodeIds = List(6)
concepts = List(know-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(know),know-01,PhraseConceptFeatures(31.0,-1.1909856087991249,false,false))
feats:
bias 1.0
c|p -1.1909856087991249
len 1.0

score:
0.15367002456279563
Adding concept: you
nodeIds = List(7)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(You),you,PhraseConceptFeatures(50.0,-0.05826890812397576,false,false))
feats:
bias 1.0
c|p -0.05826890812397576
len 1.0

score:
0.1828543233588889
Adding concept: add-01
nodeIds = List(8)
concepts = List(add-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(added),add-01,PhraseConceptFeatures(11.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.21262790858272318
Adding concept: you
nodeIds = List(9)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.23977327167757861
Adding concept: late
nodeIds = List(10)
concepts = List(late)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(later),late,PhraseConceptFeatures(1.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.2695468569014129
Adding concept: little
nodeIds = List(11)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.29216566863304644
Adding concept: and
nodeIds = List(12)
concepts = List(and)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(And),and,PhraseConceptFeatures(106.0,-0.09015109699429745,false,false))
feats:
bias 1.0
c|p -0.09015109699429745
len 1.0

score:
0.3210275357620149
Decoder1 Spans:
Span 1:  added => add-01
Span 2:  And => and
Span 3:  know => know-01
Span 4:  later => late
Span 5:  little => little
Span 6:  loves => love-01
Span 7:  one => 1
Span 8:  one => 1
Span 9:  sad => sad
Span 10:  so => so
Span 11:  sunset => sunset
Span 12:  You => you
Span 13:  you => you
Decoder1 feats:
bias 13.0
c|p -6.5289844757535755
len 13.0

Concepts:
id = 2 concept = 1
id = 5 concept = 1
id = 12 concept = and
id = 8 concept = add-01
id = 7 concept = you
id = 1 concept = so
id = 4 concept = love-01
id = 11 concept = little
id = 6 concept = know-01
id = 0 concept = sad
id = 9 concept = you
id = 3 concept = sunset
id = 10 concept = late
Spans:
Span 5-6:  added => add-01
Span 0-1:  And => and
Span 9-10:  know => know-01
Span 3-4:  later => late
Span 2-3:  little => little
Span 12-13:  loves => love-01
Span 17-18:  one => 1
Span 11-12:  one => 1
Span 20-21:  sad => sad
Span 19-20:  so => so
Span 14-15:  sunset => sunset
Span 8-9:  You => you
Span 4-5:  you => you

rootDependencyPaths = List(List(5, 0), List(5, 3, 2, 1), List(5, 3, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 7), List(5, 9, 8), List(5, 9), List(5, 10), List(5, 12, 11), List(5, 12), List(5, 12, 14, 13), List(5, 12, 14), List(5, 12, 14, 15), List(5, 12, 14, 20, 16), List(5, 12, 14, 20, 17), List(5, 12, 14, 20, 18), List(5, 12, 14, 20, 19), List(5, 12, 14, 20), List(5, 21), List(5, 22))
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 8
Node = 10
Node = 2
Node = 11
Node = 6
Node = 9
Node = 0
Node = 7
Node = 4
Node = 1
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 35.021591467569834
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 8
Node = 10
Node = 11
Node = 6
Node = 9
Node = 7
Node = 4
Node = 1
Node = 3
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 27.797755514455204
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 8
Node = 10
Node = 11
Node = 6
Node = 0
Node = 9
Node = 7
Node = 2
Node = 1
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 20.713576098304813
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 8
Node = 10
Node = 11
Node = 6
Node = 9
Node = 7
Node = 4
Node = 3
Node = 1
Node = 5
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 15.198391066620816
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 8
Node = 10
Node = 11
Node = 6
Node = 0
Node = 9
Node = 7
Node = 2
Node = 1
Node = 4
Node = 3
Node = 5
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 9.713576098304843
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 8
Node = 10
Node = 11
Node = 6
Node = 9
Node = 1
Node = 7
Node = 4
Node = 0
Node = 3
Node = 5
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 4.984925908365215
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 8
Node = 10
Node = 11
Node = 6
Node = 9
Node = 1
Node = 7
Node = 4
Node = 0
Node = 3
Node = 5
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 2.9849259083652147
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 8
Node = 10
Node = 11
Node = 6
Node = 9
Node = 1
Node = 7
Node = 4
Node = 0
Node = 3
Node = 5
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = 0.9849259083652147
getNodeById = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
getNodeById2 = Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late)
Node = 12
Node = 4
Node = 8
Node = 3
Node = 5
Node = 10
Node = 11
Node = 6
Node = 9
Node = 1
Node = 7
Node = 0
Node = 2
visited = Set(3, 0, 4, 1, 8, 5, 2, 10, 9, 6, 11, 7, 12)
Alg2 returning score = -0.19138984536247783
Langrangian relaxation converged after 9 iterations. Delta = 0.0
Node.spans:
you List()
late List()
sad List()
sunset List()
love-01 List()
more List()
little List()
add-01 List()
know-01 List()
and List()
so List()
you List()
one List()
clearUnalignedNodes():  removing unaligned node: Some(m) / more
OracleGraph nodes = List(you, late, sad, sunset, love-01, little, add-01, know-01, and, so, you, one)
OracleGraph triples: (a / and, op, a2 / add-01)
(a2 / add-01, ARG0, y / you)
(a2 / add-01, ARG1, k / know-01)
(a2 / add-01, time, l / late)
(k / know-01, ARG0, y2 / you)
(k / know-01, ARG1, l3 / love-01)
(l3 / love-01, ARG0, o / one)
(l3 / love-01, ARG1, s / sunset)
(l3 / love-01, time, s2 / sad)
(s2 / sad, domain, o / one)
(s2 / sad, mod, s3 / so)
rootDependencyPaths = List(List(5, 0), List(5, 3, 2, 1), List(5, 3, 2), List(5, 3), List(5, 4), List(5), List(5, 6), List(5, 7), List(5, 9, 8), List(5, 9), List(5, 10), List(5, 12, 11), List(5, 12), List(5, 12, 14, 13), List(5, 12, 14), List(5, 12, 14, 15), List(5, 12, 14, 20, 16), List(5, 12, 14, 20, 17), List(5, 12, 14, 20, 18), List(5, 12, 14, 20, 19), List(5, 12, 14, 20), List(5, 21), List(5, 22))
Oracle Span 5-6:  added => add-01
Oracle Span 0-1:  And => and
Oracle Span 9-10:  know => know-01
Oracle Span 3-4:  later => late
Oracle Span 2-3:  little => little
Oracle Span 12-13:  loves => love-01
Oracle Span 11-12:  one => one
Oracle Span 20-21:  sad => sad
Oracle Span 19-20:  so => so
Oracle Span 14-15:  sunset => sunset
Oracle Span 4-5:  you => you
Oracle Span 8-9:  You => you

Extra span: one => 1
Incorrect span: one => 1
Missing span: one => one
Dependencies:
1	And	_	CC	CC	_	6	cc	_	_
2	a	_	DT	DT	_	3	det	_	_
3	little	_	RB	RB	_	4	npadvmod	_	_
4	later	_	RB	RB	_	6	advmod	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	added	_	VBD	VBD	_	0	root	_	_
7	:	_	:	:	_	6	punct	_	_
8	"	_	''	''	_	6	punct	_	_
9	You	_	PRP	PRP	_	10	nsubj	_	_
10	know	_	VBP	VBP	_	6	dep	_	_
11	--	_	:	:	_	6	punct	_	_
12	one	_	PRP	PRP	_	13	nsubj	_	_
13	loves	_	VBZ	VBZ	_	6	parataxis	_	_
14	the	_	DT	DT	_	15	det	_	_
15	sunset	_	NN	NN	_	13	dobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	when	_	WRB	WRB	_	21	advmod	_	_
18	one	_	PRP	PRP	_	21	nsubj	_	_
19	is	_	VBZ	VBZ	_	21	cop	_	_
20	so	_	RB	RB	_	21	advmod	_	_
21	sad	_	JJ	JJ	_	15	rcmod	_	_
22	...	_	:	:	_	6	punct	_	_
23	"	_	''	''	_	6	punct	_	_

Oracle:
(a / and, op, a2 / add-01)
(a2 / add-01, ARG0, y / you)
(a2 / add-01, ARG1, k / know-01)
(a2 / add-01, time, l / late)
(k / know-01, ARG0, y2 / you)
(k / know-01, ARG1, l3 / love-01)
(l3 / love-01, ARG0, o / one)
(l3 / love-01, ARG1, s / sunset)
(l3 / love-01, time, s2 / sad)
(s2 / sad, domain, o / one)
(s2 / sad, mod, s3 / so)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),sad,sad,false), Span(19,20,List(1),so,so,false), Span(17,18,List(2),one,1,false), Span(14,15,List(3),sunset,sunset,false), Span(12,13,List(4),loves,love-01,false), Span(11,12,List(5),one,1,false), Span(9,10,List(6),know,know-01,false), Span(8,9,List(7),You,you,false), Span(5,6,List(8),added,add-01,false), Span(4,5,List(9),you,you,false), Span(3,4,List(10),later,late,false), Span(2,3,List(11),little,little,false), Span(0,1,List(12),And,and,false)),Map(2 -> 1, 5 -> 1, 12 -> and, 8 -> add-01, 7 -> you, 1 -> so, 4 -> love-01, 11 -> little, 6 -> know-01, 0 -> sad, 9 -> you, 3 -> sunset, 10 -> late),Map(s2 -> so, 12 -> 1, k -> know-01, l3 -> little, s -> sad, 1 -> 1, y -> you, a -> add-01, l2 -> late, a2 -> and, s3 -> sunset, l -> love-01, y2 -> you))),[Ljava.lang.String;@5a9f4771,Annotation([Ljava.lang.String;@282cb7c7,[Ljava.lang.String;@7d898981,[Ljava.lang.String;@48d61b48),Annotation([Ljava.lang.String;@68d279ec,[Ljava.lang.String;@258d79be,[Ledu.cmu.lti.nlp.amr.Dependency;@14f9390f),Annotation([Ljava.lang.String;@6c0d7c83,[Ljava.lang.String;@176b75f7,[Ljava.lang.String;@5965be2d),Annotation([Ljava.lang.String;@409c54f,[Ljava.lang.String;@3e74829,[Ledu.cmu.lti.nlp.amr.Entity;@4f6f416f))
AMR:
(a / add-01, ARG0, y2 / you)
(a / add-01, ARG1, k / know-01)
(a / add-01, degree, l3 / little)
(a / add-01, time, l2 / late)
(a2 / and, op, a / add-01)
(a2 / and, op, l / love-01)
(k / know-01, ARG0, y / you)
(k / know-01, ARG1, s2 / so)
(l / love-01, ARG0, 12 / 1)
(l / love-01, ARG1, s3 / sunset)
(s / sad, degree, s2 / so)
(s / sad, domain, 1 / 1)

Decoded in 132,420 microseconds
Sentence: " Were you so sad , then ? "


--- Decoder1 ---

Sentence: " Were you so sad , then ? "
word = "
Finding date entities
Possible invoked concepts: List()
word = Were
Finding date entities
Possible invoked concepts: List()
word = you
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)))
concept = PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
score = 0
adding concept:PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
word = so
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)))
concept = PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
score = 0
adding concept:PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
word = sad
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false)))
concept = PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = then
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false)))
concept = PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
score = 0
adding concept:PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(None, None, Some((0.027145363094855424,PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false)),2)), Some((0.025305232329774125,PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false)),3)), Some((0.029773585223834276,PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false)),4)), None, Some((0.023573123325860184,PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false)),6)), None, None)
Adding concept: then
nodeIds = List(0)
concepts = List(then)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(then),then,PhraseConceptFeatures(13.0,-0.6131044728864089,false,false))
feats:
bias 1.0
c|p -0.6131044728864089
len 1.0

score:
0.023573123325860187
Adding concept: sad
nodeIds = List(1)
concepts = List(sad)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sad),sad,PhraseConceptFeatures(5.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.05334670854969446
Adding concept: so
nodeIds = List(2)
concepts = List(so)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(so),so,PhraseConceptFeatures(27.0,-0.4418327522790392,false,false))
feats:
bias 1.0
c|p -0.4418327522790392
len 1.0

score:
0.07865194087946858
Adding concept: you
nodeIds = List(3)
concepts = List(you)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(you),you,PhraseConceptFeatures(155.0,-0.25987979113982906,false,false))
feats:
bias 1.0
c|p -0.25987979113982906
len 1.0

score:
0.105797303974324
Decoder1 Spans:
Span 1:  sad => sad
Span 2:  so => so
Span 3:  then => then
Span 4:  you => you
Decoder1 feats:
bias 4.0
c|p -1.3148170163052773
len 4.0

Concepts:
id = 2 concept = so
id = 1 concept = sad
id = 0 concept = then
id = 3 concept = you
Spans:
Span 4-5:  sad => sad
Span 3-4:  so => so
Span 6-7:  then => then
Span 2-3:  you => you

rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 1, 2), List(4, 3), List(4), List(4, 5), List(4, 6), List(4, 7), List(4, 8))
getNodeById = Map(2 -> so, 1 -> sad, 0 -> then, 3 -> you)
getNodeById2 = Map(2 -> so, 1 -> sad, 0 -> then, 3 -> you)
getNodeById = Map(2 -> so, 1 -> sad, 0 -> then, 3 -> you)
getNodeById2 = Map(2 -> so, 1 -> sad, 0 -> then, 3 -> you)
Node = 1
Node = 0
Node = 2
Node = 3
visited = Set(3, 0, 1, 2)
Alg2 returning score = -148.86249507188174
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
you List()
interrogative List()
so List()
sad List()
then List()
clearUnalignedNodes():  removing unaligned node: None / interrogative
OracleGraph nodes = List(you, so, sad, then)
OracleGraph triples: (s / sad, degree, s2 / so)
(s / sad, domain, y / you)
(s / sad, time, t / then)
rootDependencyPaths = List(List(4, 0), List(4, 1), List(4, 1, 2), List(4, 3), List(4), List(4, 5), List(4, 6), List(4, 7), List(4, 8))
Oracle Span 4-5:  sad => sad
Oracle Span 3-4:  so => so
Oracle Span 6-7:  then => then
Oracle Span 2-3:  you => you

Dependencies:
1	"	_	''	''	_	5	punct	_	_
2	Were	_	NNP	NNP	_	5	nsubj	_	_
3	you	_	PRP	PRP	_	2	dep	_	_
4	so	_	RB	RB	_	5	advmod	_	_
5	sad	_	VBD	VBD	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	then	_	RB	RB	_	5	advmod	_	_
8	?	_	.	.	_	5	punct	_	_
9	"	_	''	''	_	5	punct	_	_

Oracle:
(s / sad, degree, s2 / so)
(s / sad, domain, y / you)
(s / sad, time, t / then)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),then,then,false), Span(4,5,List(1),sad,sad,false), Span(3,4,List(2),so,so,false), Span(2,3,List(3),you,you,false)),Map(2 -> so, 1 -> sad, 0 -> then, 3 -> you),Map(s2 -> so, t -> then, s -> sad, y -> you))),[Ljava.lang.String;@3b8f0a79,Annotation([Ljava.lang.String;@71e693fa,[Ljava.lang.String;@48793bef,[Ljava.lang.String;@7d286fb6),Annotation([Ljava.lang.String;@3eb77ea8,[Ljava.lang.String;@7b8b43c7,[Ledu.cmu.lti.nlp.amr.Dependency;@7aaca91a),Annotation([Ljava.lang.String;@44c73c26,[Ljava.lang.String;@41005828,[Ljava.lang.String;@60b4beb4),Annotation([Ljava.lang.String;@7fcf2fc1,[Ljava.lang.String;@2141a12,[Ledu.cmu.lti.nlp.amr.Entity;@4196c360))
AMR:
(s / sad, mod, s2 / so)
(s / sad, mod, t / then)
(y / you, location, s / sad)

Decoded in 16,492 microseconds
Sentence: I asked , " on the day of the forty - four sunsets ? "


--- Decoder1 ---

Sentence: I asked , " on the day of the forty - four sunsets ? "
word = I
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)))
concept = PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
score = 0
adding concept:PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
word = asked
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false)))
concept = PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false))
word = ,
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
word = on
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false)))
concept = PhraseConceptPair(List(on),on,PhraseConceptFeatures(2.0,-3.5553480614894135,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = day
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false)), PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)))
concept = PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),(temporal-quantity :unit day),PhraseConceptFeatures(5.0,-2.174751721484161,false,false))
concept = PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
score = 0
adding concept:PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
word = of
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false)), PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false)))
concept = PhraseConceptPair(List(of),(person :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),(thing :ARG1-of include-91),PhraseConceptFeatures(2.0,-5.898526551448713,false,false))
score = 0
concept = PhraseConceptPair(List(of),include-91,PhraseConceptFeatures(8.0,-4.512232190328822,false,false))
score = 0
word = the
Finding date entities
Possible invoked concepts: List()
word = forty
Finding date entities
Possible invoked concepts: List()
word = -
Finding date entities
Possible invoked concepts: List()
word = four
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false)))
concept = PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false))
score = 0
adding concept:PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false))
word = sunsets
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false))
word = ?
Finding date entities
Possible invoked concepts: List()
word = "
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.026049206418229262,PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false)),0)), Some((0.029773585223834276,PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false)),1)), None, None, None, None, Some((0.019543040208742913,PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false)),6)), None, None, None, None, Some((0.023829167949067327,PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false)),11)), Some((0.029773585223834276,PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false)),12)), None, None)
Adding concept: sunset
nodeIds = List(0)
concepts = List(sunset)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(sunsets),sunset,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: 4
nodeIds = List(1)
concepts = List(4)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(four),4,PhraseConceptFeatures(5.0,-0.587786664902119,false,false))
feats:
bias 1.0
c|p -0.587786664902119
len 1.0

score:
0.0536027531729016
Adding concept: day
nodeIds = List(2)
concepts = List(day)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(day),day,PhraseConceptFeatures(16.0,-1.0116009116784799,false,false))
feats:
bias 1.0
c|p -1.0116009116784799
len 1.0

score:
0.07314579338164451
Adding concept: ask-01
nodeIds = List(3)
concepts = List(ask-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(asked),ask-01,PhraseConceptFeatures(20.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.10291937860547878
Adding concept: i
nodeIds = List(4)
concepts = List(i)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(I),i,PhraseConceptFeatures(283.0,-0.36826825839956406,false,false))
feats:
bias 1.0
c|p -0.36826825839956406
len 1.0

score:
0.12896858502370806
Decoder1 Spans:
Span 1:  asked => ask-01
Span 2:  day => day
Span 3:  four => 4
Span 4:  I => i
Span 5:  sunsets => sunset
Decoder1 feats:
bias 5.0
c|p -1.967655834980163
len 5.0

Concepts:
id = 2 concept = day
id = 1 concept = 4
id = 4 concept = i
id = 0 concept = sunset
id = 3 concept = ask-01
Spans:
Span 1-2:  asked => ask-01
Span 6-7:  day => day
Span 11-12:  four => 4
Span 0-1:  I => i
Span 12-13:  sunsets => sunset

rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 3), List(1, 4), List(1, 4, 6, 5), List(1, 4, 6), List(1, 4, 6, 7), List(1, 4, 6, 7, 9, 8), List(1, 4, 6, 7, 9), List(1, 4, 6, 7, 9, 10), List(1, 4, 6, 7, 9, 12, 11), List(1, 4, 6, 7, 9, 12), List(1, 13), List(1, 14))
getNodeById = Map(2 -> day, 1 -> 4, 4 -> i, 0 -> sunset, 3 -> ask-01)
getNodeById2 = Map(2 -> day, 1 -> 4, 4 -> i, 0 -> sunset, 3 -> ask-01)
getNodeById = Map(2 -> day, 1 -> 4, 4 -> i, 0 -> sunset, 3 -> ask-01)
getNodeById2 = Map(2 -> day, 1 -> 4, 4 -> i, 0 -> sunset, 3 -> ask-01)
Node = 3
Node = 1
Node = 2
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -60.47669225250631
getNodeById = Map(2 -> day, 1 -> 4, 4 -> i, 0 -> sunset, 3 -> ask-01)
getNodeById2 = Map(2 -> day, 1 -> 4, 4 -> i, 0 -> sunset, 3 -> ask-01)
Node = 3
Node = 2
Node = 1
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 2)
Alg2 returning score = -61.832142428790746
Langrangian relaxation converged after 2 iterations. Delta = 0.0
Node.spans:
time List()
sunset List()
day List()
i List()
44 List()
ask-01 List()
clearUnalignedNodes():  removing unaligned node: Some(t) / time
clearUnalignedNodes():  removing unaligned node: None / 44
OracleGraph nodes = List(sunset, day, i, ask-01)
OracleGraph triples: (a / ask-01, ARG0, i / i)
(d / day, poss, s / sunset)
rootDependencyPaths = List(List(1, 0), List(1), List(1, 2), List(1, 3), List(1, 4), List(1, 4, 6, 5), List(1, 4, 6), List(1, 4, 6, 7), List(1, 4, 6, 7, 9, 8), List(1, 4, 6, 7, 9), List(1, 4, 6, 7, 9, 10), List(1, 4, 6, 7, 9, 12, 11), List(1, 4, 6, 7, 9, 12), List(1, 13), List(1, 14))
Oracle Span 1-2:  asked => ask-01
Oracle Span 6-7:  day => day
Oracle Span 0-1:  I => i
Oracle Span 12-13:  sunsets => sunset

Extra span: four => 4
Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	asked	_	VBD	VBD	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	"	_	''	''	_	2	punct	_	_
5	on	_	IN	IN	_	2	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	day	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	forty	_	NN	NN	_	8	pobj	_	_
11	-	_	:	:	_	10	punct	_	_
12	four	_	CD	CD	_	13	num	_	_
13	sunsets	_	NNS	NNS	_	10	dep	_	_
14	?	_	.	.	_	2	punct	_	_
15	"	_	''	''	_	2	punct	_	_

Oracle:
(a / ask-01, ARG0, i / i)
(d / day, poss, s / sunset)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),sunsets,sunset,false), Span(11,12,List(1),four,4,false), Span(6,7,List(2),day,day,false), Span(1,2,List(3),asked,ask-01,false), Span(0,1,List(4),I,i,false)),Map(2 -> day, 1 -> 4, 4 -> i, 0 -> sunset, 3 -> ask-01),Map(s -> sunset, d -> day, a -> ask-01, 4 -> 4, i -> i))),[Ljava.lang.String;@41294f8,Annotation([Ljava.lang.String;@225129c,[Ljava.lang.String;@20435c40,[Ljava.lang.String;@573906eb),Annotation([Ljava.lang.String;@479ceda0,[Ljava.lang.String;@6d07a63d,[Ledu.cmu.lti.nlp.amr.Dependency;@571c5681),Annotation([Ljava.lang.String;@488d1cd7,[Ljava.lang.String;@68dc098b,[Ljava.lang.String;@38ba6ce3),Annotation([Ljava.lang.String;@d278d2b,[Ljava.lang.String;@2d6c53fc,[Ledu.cmu.lti.nlp.amr.Entity;@25f4878b))
AMR:
(a / ask-01, ARG0, i / i)
(a / ask-01, ARG1, 4 / 4)
(a / ask-01, time, d / day)
(s / sunset, quant, 4 / 4)

Decoded in 20,836 microseconds
Sentence: But the little prince made no reply .


--- Decoder1 ---

Sentence: But the little prince made no reply .
word = But
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false)), PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)))
concept = PhraseConceptPair(List(But),contrast,PhraseConceptFeatures(6.0,-3.367295829986474,false,false))
score = 0
concept = PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
score = 0
adding concept:PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
word = the
Finding date entities
Possible invoked concepts: List()
word = little
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)), PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false)))
concept = PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
score = 0
adding concept:PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
concept = PhraseConceptPair(List(little),little-by-little,PhraseConceptFeatures(1.0,-6.045005314036012,false,false))
score = 0
word = prince
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)))
concept = PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
score = 0
adding concept:PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
word = made
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)), PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false)))
concept = PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
score = 0
adding concept:PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
concept = PhraseConceptPair(List(made),make-02,PhraseConceptFeatures(4.0,-2.4423470353692043,false,false))
score = 0
word = no
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false)), PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)), PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false)))
concept = PhraseConceptPair(List(no),(person :polarity -),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),(person :quant no),PhraseConceptFeatures(1.0,-5.429345628954441,false,false))
score = 0
concept = PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
score = 0
adding concept:PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
concept = PhraseConceptPair(List(no),no,PhraseConceptFeatures(4.0,-4.04305126783455,false,false))
score = 0
word = reply
Finding date entities
Possible invoked concepts: List(PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false)))
concept = PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false))
score = 0
adding concept:PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false))
word = .
Finding date entities
Possible invoked concepts: List()
Chart = List(Some((0.020708341211994906,PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false)),0)), None, Some((0.02261881173163355,PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false)),2)), Some((0.029710964451529556,PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false)),3)), Some((0.012083538043741276,PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false)),4)), Some((0.012421585574902895,PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false)),5)), Some((0.029773585223834276,PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false)),6)), None)
Adding concept: reply-01
nodeIds = List(0)
concepts = List(reply-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(reply),reply-01,PhraseConceptFeatures(2.0,0.0,false,false))
feats:
bias 1.0
len 1.0

score:
0.029773585223834276
Adding concept: -
nodeIds = List(1)
concepts = List(-)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(no),-,PhraseConceptFeatures(41.0,-1.7157735622501329,false,false))
feats:
bias 1.0
c|p -1.7157735622501329
len 1.0

score:
0.042195170798737164
Adding concept: make-01
nodeIds = List(2)
concepts = List(make-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(made),make-01,PhraseConceptFeatures(8.0,-1.749199854809259,false,false))
feats:
bias 1.0
c|p -1.749199854809259
len 1.0

score:
0.05427870884247843
Adding concept: prince
nodeIds = List(3)
concepts = List(prince)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(prince),prince,PhraseConceptFeatures(161.0,-0.006191970247921107,false,false))
feats:
bias 1.0
c|p -0.006191970247921107
len 1.0

score:
0.08398967329400799
Adding concept: little
nodeIds = List(4)
concepts = List(little)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(little),little,PhraseConceptFeatures(208.0,-0.7074672343346938,false,false))
feats:
bias 1.0
c|p -0.7074672343346938
len 1.0

score:
0.10660848502564153
Adding concept: contrast-01
nodeIds = List(5)
concepts = List(contrast-01)
Finding date entities

phraseConceptPair: PhraseConceptPair(List(But),contrast-01,PhraseConceptFeatures(71.0,-0.8963754221732136,false,false))
feats:
bias 1.0
c|p -0.8963754221732136
len 1.0

score:
0.12731682623763646
Decoder1 Spans:
Span 1:  But => contrast-01
Span 2:  little => little
Span 3:  made => make-01
Span 4:  no => -
Span 5:  prince => prince
Span 6:  reply => reply-01
Decoder1 feats:
bias 6.0
c|p -5.07500804381522
len 6.0

Concepts:
id = 2 concept = make-01
id = 5 concept = contrast-01
id = 1 concept = -
id = 4 concept = little
id = 0 concept = reply-01
id = 3 concept = prince
Spans:
Span 0-1:  But => contrast-01
Span 2-3:  little => little
Span 4-5:  made => make-01
Span 5-6:  no => -
Span 3-4:  prince => prince
Span 6-7:  reply => reply-01

WARNING: Adding a variable name to a span
rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 7))
getNodeById = Map(2 -> make-01, 5 -> contrast-01, 1 -> -, 4 -> little, 0 -> reply-01, 3 -> prince)
getNodeById2 = Map(2 -> make-01, 5 -> contrast-01, 1 -> -, 4 -> little, 0 -> reply-01, 3 -> prince)
getNodeById = Map(2 -> make-01, 5 -> contrast-01, 1 -> -, 4 -> little, 0 -> reply-01, 3 -> prince)
getNodeById2 = Map(2 -> make-01, 5 -> contrast-01, 1 -> -, 4 -> little, 0 -> reply-01, 3 -> prince)
Node = 5
Node = 2
Node = 1
Node = 3
Node = 4
Node = 0
visited = Set(3, 0, 4, 1, 5, 2)
Alg2 returning score = 14.041426767755901
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Node.spans:
- List()
prince List()
reply-01 List()
contrast-01 List()
little List()
WARNING: Adding a variable name to a span
OracleGraph nodes = List(-, prince, reply-01, contrast-01, little)
OracleGraph triples: (c / contrast-01, ARG2, r / reply-01)
(p / prince, mod, l / little)
(r / reply-01, ARG0, p / prince)
(r / reply-01, polarity, - / -)
rootDependencyPaths = List(List(4, 0), List(4, 3, 1), List(4, 3, 2), List(4, 3), List(4), List(4, 6, 5), List(4, 6), List(4, 7))
Oracle Span 0-1:  But => contrast-01
Oracle Span 2-3:  little => little
Oracle Span 5-6:  no => -
Oracle Span 3-4:  prince => prince
Oracle Span 6-7:  reply => reply-01

Extra span: made => make-01
Dependencies:
1	But	_	CC	CC	_	5	cc	_	_
2	the	_	DT	DT	_	4	det	_	_
3	little	_	JJ	JJ	_	4	amod	_	_
4	prince	_	NN	NN	_	5	nsubj	_	_
5	made	_	VBD	VBD	_	0	root	_	_
6	no	_	DT	DT	_	7	det	_	_
7	reply	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	5	punct	_	_

Oracle:
(c / contrast-01, ARG2, r / reply-01)
(p / prince, mod, l / little)
(r / reply-01, ARG0, p / prince)
(r / reply-01, polarity, - / -)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),reply,reply-01,false), Span(5,6,List(1),no,-,false), Span(4,5,List(2),made,make-01,false), Span(3,4,List(3),prince,prince,false), Span(2,3,List(4),little,little,false), Span(0,1,List(5),But,contrast-01,false)),Map(2 -> make-01, 5 -> contrast-01, 1 -> -, 4 -> little, 0 -> reply-01, 3 -> prince),Map(m -> make-01, p -> prince, r -> reply-01, - -> -, c -> contrast-01, l -> little))),[Ljava.lang.String;@4e423aa2,Annotation([Ljava.lang.String;@7fbdb894,[Ljava.lang.String;@3081f72c,[Ljava.lang.String;@3148f668),Annotation([Ljava.lang.String;@6e005dc9,[Ljava.lang.String;@7ceb3185,[Ledu.cmu.lti.nlp.amr.Dependency;@436c81a3),Annotation([Ljava.lang.String;@3561c410,[Ljava.lang.String;@59e32960,[Ljava.lang.String;@7c214cc0),Annotation([Ljava.lang.String;@5b67bb7e,[Ljava.lang.String;@609db546,[Ledu.cmu.lti.nlp.amr.Entity;@20f5281c))
AMR:
(c / contrast-01, ARG2, m / make-01)
(m / make-01, ARG0, p / prince)
(m / make-01, polarity, - / -)
(p / prince, mod, l / little)
(r / reply-01, ARG0, p / prince)

Decoded in 18,221 microseconds
--- Stage1 evaluation ---
Precision: 0.6723646723646723
Recall: 0.7002967359050445
F1: 0.686046511627907
