from skimage import data, io, filters, exposure,img_as_ubyte
from skimage.color import rgb2gray
from skimage.feature import blob_dog, blob_log, blob_doh
from matplotlib import pyplot as plt
from math import sqrt
from skimage.morphology import disk
from skimage.filters.rank import median
from skimage.restoration import denoise_tv_chambolle, denoise_bilateral
import os,sys 

folderName = "./tmp/"
pipeFolderSuffix = ".pipe"

def toGray(img):
    img_gray = rgb2gray(img)
    grayFileName = os.path.join(folderName,"gray_tmp.jpg")    
    io.imsave(grayFileName,img_gray)
    return img_gray

def toRescaleIntensity(img,in_range=(0,1)):
    img_rescaleIntensity = exposure.rescale_intensity(img,in_range)
    RIFileName = os.path.join(folderName,"rescaleIntensity_tmp.jpg")
    io.imsave(RIFileName,img_rescaleIntensity)
    return img_rescaleIntensity

def toThreshold(img):
    pass

def toBlob(image):
    image_gray = rgb2gray(image)
    blobs_log = blob_log(image_gray, max_sigma=30, num_sigma=10, threshold=.1)
    blobs_log[:, 2] = blobs_log[:, 2] * sqrt(2)

    blobs_dog = blob_dog(image_gray, max_sigma=30, threshold=.1)
    blobs_dog[:, 2] = blobs_dog[:, 2] * sqrt(2)

    blobs_doh = blob_doh(image_gray, max_sigma=30, threshold=.01)

    blobs_list = [blobs_log, blobs_dog, blobs_doh]
    colors = ['yellow', 'lime', 'red']
    titles = ['Laplacian of Gaussian', 'Difference of Gaussian',
              'Determinant of Hessian']
    sequence = zip(blobs_list, colors, titles)

    for blobs, color, title in sequence:
        fig, ax = plt.subplots(1, 1)
        ax.set_title(title)
        ax.imshow(image, interpolation='nearest')
        for blob in blobs:
            y, x, r = blob
            c = plt.Circle((x, y), r,color=color,linewidth=2,fill=False)
            ax.add_patch(c)
        fig.savefig(os.path.join(folderName,title+'.jpg'))
        plt.close(fig)

def toRemoveNoise(img):
    noisy_image = img_as_ubyte(img)
    fig, ax = plt.subplots(1, 1)
    
    rs = [1,2,5]
    for r in rs:
        ax.imshow(median(noisy_image, disk(r)), vmin=0, vmax=255, cmap=plt.cm.gray)
        #ax.imshow(denoise_tv_chambolle(noisy_image, weight=0.1, multichannel=True))

        ax.set_title('Median r=%f' % r)
        ax.axis('off')
        fig.savefig(os.path.join(folderName,'noise_%f.jpg' % r))
        plt.close(fig)

def getCometsLocationInReport(filename):
    locationStr = filename.split('_')[-1].split('.')[0]
    x = locationStr.split('x')[0]
    y = locationStr.split('x')[1]
    return (x,y)

def preprocess(argv):
    print(argv)
    if len(argv) < 1:
        print "too few arguments"

    filename = argv[1]
    print(filename)
    #filename add with ".pipe" as folderName 
    dstFolderName = filename.split('/')[-1] + pipeFolderSuffix
    print(dstFolderName)
    os.mkdir(folderName)
    ori_img = io.imread(filename)
    imgGray = toGray(ori_img)
    #imgRescaleIntensity = toRescaleIntensity(imgGray,in_range=(0,1))
    #img_Blob = toBlob(imgGray)
    #img_denoise = toRemoveNoise(imgGray)
    os.rename(folderName,dstFolderName)
    return imgGray

if __name__ == "__main__":
    preprocess(sys.argv)

